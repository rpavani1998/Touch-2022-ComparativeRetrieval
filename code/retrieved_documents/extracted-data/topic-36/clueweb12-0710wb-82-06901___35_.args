both integrate into a truly mixed environment with compiled bytecode and interpreted scripts interoperating smoothly.those generics have only just been introduced into the language, and are a poor imitation of c++ templates, offering few of the advantages that template metaprogramming has been providing to serious, high performance libraries in c++ for a few years now.other technologies like ruby, php, .net, or ajax might get more hype and acclaim lately, but hype aside, java still produces the majority of innovation in the software profession.what java needs is a better (less memory and faster) implementation of the libraries it has and the virtual machine to run the programs.no one who objected had any rebutal to the reason i gave why eclipse is the best: it has reached critical mass as an open source extensible platform whose community is assuring that all important tools work with it.beanshell's syntax offers as little surprise as possible for the java developer and groovy gives a ruby-like syntactic efficiency, but can also be compiled to pure bytecode and reused seamlessly, a big improvement over jruby or jython.you'll find that java is by no means the end of all and that far from all shortcomings has been addressed successfully.if i had to pose one challenge to the java world, it would be to free us developers of some of the limitations of java that don't exist with other languages; i.e. running in a jvm, we get access to such a limited memory space that anyone writing a memory-intensive server application is forced to work in another language - something i've met several times in my work.for those people who really like php, keep it: java 1.6 makes it the reference implementation for the new web scripting language bindings, so you can do your web views in php and use java for model and controller.you can get a sense of java's health by simply looking at how many projects are out there using java.just take a look at the eiffel programming language - it pioneered the concept of "design by contract" which solves boundary conditions and assignments to all parameters thus eliminating the null pointer exception problem along with a number of other problems.c is great for performance critical tasks, and java plays along with c via jni as eclipse's swt proves.we also use java in many internal systems and products under development.eclipse's team coding capabilities for cvs and subversion (via the subclipse plugin) are first-rate.the first big arena of innovation is the addition of scripting support.