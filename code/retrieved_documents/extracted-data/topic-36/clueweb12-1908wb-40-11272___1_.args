customers thought it was great because it enabled them to easily achieve xml/database interoperability for very sophisticated dtds and xml schemas (csdgm, gml, etc.).i am willing to admit the possibility that netbeans may be a superior java ide, however, the shear number and diversity of plugins available for eclipse makes it obvious to me that as an application/tools framework eclipse is the obvious choice.it performs better than netbeans and it has a very powerful code editor (isn''t this one of the most important things?).and having gui controls based on native widgets is a significant advantage.the applications that run on them should strive be consistent with one another at the expense of being self-consistent across platforms.netbeans has a far more intuitive interface and is just dang powerful.xap is trusted by fortune 100 companies, which leverage it as a strategic solution that enhances efficiency and agility across the it organization.customers loved the fact that they can now achieve xml/database interoperability without needing to be java experts but they were blown away by the performance and the professional look of the version 2 product.we will remove comments that include profanity, personal attacks, racial slurs, threats of violence, or other inappropriate material that violates ourterms and conditions, and will block users who make repeated violations.it is the only product that provides a complete middleware solution on a single, scalable platform.as far as open source goes, netbeans is a good ide, however they have to make better effort to involve the community in development, like explaining the architecture through articles etc.software development is holy only to a few feeble-minded developers: for the everyone else its stuff that makes computers work and we want the sort of stuff that delivers the best results.it offers just about everything a true developer would want without all of the fluff.those folks who see java/jcp as a terrific development language and a sensational platform should not allow those who see java as some sort of religion to set the agenda for ''purism'' when it''s pragmatism that is required.as for swt vs swing, they both have pro''s and cons, but for tool and application development i have found that a common look and feel is key to integration of various tools used in mission critical applications, and the unfortunate truth is that most dod sites have standardized on windows, the advantage to swt is that widgets behave as the user expects them to behave, wether it is 98,nt,2000,xp, osx or linux making cross tool/application training (read java and non-java) more intuitive.