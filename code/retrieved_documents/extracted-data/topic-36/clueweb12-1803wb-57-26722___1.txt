(interesting note; they actually have apologetic documentation that describes this broken behaviour, and bug4030718 that i was vehement about when 1.1 was broken; even to the extent that i wrote a patcher class that patched the classes.zip to show that this behaviour could be unbroken in time for the 1.2 release; in 1.4, they’ve finally marked it as closed.)
it will probably be released  under the creative commons license in the future.
consider thedate class, which returns years since 1900, or the fact that we’ve got basically two of the same interfaces initerator and enumeration (and the ability to remove an object whilst traversing it is a bastardisation of the interface anyway; we could have equally had a sub-interface called ‘removableenumeration’ that added that specific functionality if required).
well, eclipse as a framework is much larger than eclipse as a developer environment, although the latter is more well-known.
and the best news of all is that the guidance of the platform and rcps is a meritorium controlled by the open eclipse organisation, so anyone can participate and guide the future; not just by jsrs.
just how  good the ide is.
java just provides a low-level layer to provide simplistic access; for example, theurl class provides basic access, whilst jakarta’shttpclient provides a framework for building http applications andhttpservlet provides basic web interaction, whilst struts provides a framework for building web-based applications.
while (!shell.isdisposed ()) { if (!display.readanddispatch ()) display.sleep  (); } display.dispose (); } this allows the programmer to have fine-grain control over the thread, and  whilst this is single-threaded, it doesn’t have to be.
however, swt does not restrict developers to this model.
(interesting note; they actually have apologetic documentation  that describes this broken behaviour, and bug4030718 that i was vehement about  when 1.1 was broken; even to the extent that i wrote a patcher class that  patched the classes.zip to show that this behaviour could be unbroken in time  for the 1.2 release; in 1.4, they’ve finally marked it as closed.)
what is amusing about the eclipse versus netbeans debate is that most  people still think of eclipse as a java development environment, and compare it  to netbeans on that footing.
while (!shell.isdisposed ()) {
just reading posts on some of theeclipse websites and plugin directories, you get the feeling that there is a large community working within the platform, not just the java ide.
i think this post sums up the point nicely: “eclipse is not just an  ide that competes with netbeans … eclipse is a complete development  platform that makes large parts of java irrelevant.”
good uses of xml » recent posts why osgi qualifiers aren't working using humans to solve a tooling problem eclipsecon 2012 day 3
if (!display.readanddispatch ()) display.sleep (); } display.dispose (); } this allows the programmer to have fine-grain control over the thread, and whilst this is single-threaded, it doesn’t have to be.
you only need to see the growing list ofrich client  applications to see that the momentum is gaining speed.
we stop when the user has done // something to dispose our window.
or the fact that since 1.1, java has a buggered threading model that  processes theeventqueue resulting in all guis having to be killed with  system.exit().
you only need to see the growing list ofrich client applications to see that the momentum is gaining speed.
just reading posts on some of theeclipse websites and plugin directories, you  get the feeling that there is a large community working within the platform,  not just the java ide.
in any case, the reason why people are excited about the eclipse framework is that they are interested in what you can do with theplatform, not just how good the ide is.
i’ve started www.rcpapps.org to provide a set of examples on how to write rcp applications, and how you can design and build applications that take advantage of all that the eclipse frameworks have to offer.
eclipse -- more than just an ide jul 3rd, 2005 2005, eclipse i recently had the opportunity to give a talk on the eclipse framework and  how it hangs together.
by the  way, another reason why swt rocks is that they allow you to write your own  threading for event handling; it’s why moststandalone swt apps have: swt event loop 1 2 3 4 5 6 7 8 9 10 11 12 public static void main (string [] args) { display display =
what is amusing about the eclipse versus netbeans debate is that most people still think of eclipse as a java development environment, and compare it to netbeans on that footing.
consider thedate class, which returns years since 1900, or the fact that  we’ve got basically two of the same interfaces initerator and enumeration  (and the ability to remove an object whilst traversing it is a bastardisation  of the interface anyway; we could have equally had a sub-interface called  ‘removableenumeration’ that added that specific functionality if  required).
sun have never  really quite ‘got’ java as an application development language;  although it is a very powerful programming language.
i think this post sums up the point nicely: “eclipse is not just an ide that competes with netbeans … eclipse is a complete development platform that makes large parts of java irrelevant.”
new shell (display); shell.open (); // start the event loop.
and the best news of  all is that the guidance of the platform and rcps is a meritorium controlled by  the open eclipse organisation, so anyone can participate and guide the future;  not just by jsrs.
it’s probably better that sun don’t control frameworks though,  because there’s not a lot of evidence that up-front thought that happens.
sun have never really quite ‘got’ java as an application development language; although it is a very powerful programming language.
java just provides a low-level layer to  provide simplistic access; for example, theurl class provides basic access,  whilst jakarta’shttpclient provides a framework for building http  applications andhttpservlet provides basic web interaction, whilst struts  provides a framework for building web-based applications.
an  application could run multiple ui-threads with a separate event loop in each  thread.
they even  acknowledge this: note: the most common threading model for an swt application  is to run a single ui thread and perform long operations in computational  threads.
they even acknowledge this: note: the most common threading model for an swt application is to run a single ui thread and perform long operations in computational threads.
an application could run multiple ui-threads with a separate event loop in each thread.
i’ve started  www.rcpapps.org  to provide a set of examples on how to  write rcp applications, and how you can design and build applications that take  advantage of all that the eclipse frameworks have to offer.
i’m also writing a book on the subject; and  although o’reilly originally expressed an idea in the book, it’s  still awaiting a publisher to take the title.
new  display (); shell shell =
new shell (display); shell.open (); // start the  event loop.
well, eclipse as a framework is much larger than  eclipse as a developer environment, although the latter is more well-known.
by the way, another reason why swt rocks is that they allow you to write your own threading for event handling; it’s why moststandalone swt apps have:swt event loop 1 2 3 4 5 6 7 8 9 10 11 12 public static void main (string [] args) { display display =
or the fact that since 1.1, java has a buggered threading model that processes theeventqueue resulting in all guis having to be killed with system.exit().
frameworks are what made  smalltalk popular; what makes coding in mac os x easy; and are the holy grail  of reuse and patterns books around.
new display (); shell shell =
posted by alex blewitt jul 3rd, 2005 2005, eclipsetweet « naming and indentation conventions good uses of xml » my delicious bookmarks » copyright © 2012 - alex blewitt - powered by octopress
it will probably be released under the creative commons license in the future.
in any case, the reason why people are excited about the eclipse framework  is that they are interested in what you can do with theplatform, not
i’m also writing a book on the subject; and although o’reilly originally expressed an idea in the book, it’s still awaiting a publisher to take the title.
jul 3rd, 20052005, eclipse i recently had the opportunity to give a talk on the eclipse framework and how it hangs together.
frameworks are what made smalltalk popular; what makes coding in mac os x easy; and are the holy grail of reuse and patterns books around.
it’s probably better that sun don’t control frameworks though, because there’s not a lot of evidence that up-front thought that happens.
posted by alex blewitt jul 3rd, 2005 2005, eclipse tweet « naming and indentation conventions