it seems to me like these companies had the chance to serve their respective communities by not exploiting them, but decided to try to lock them in anyway.
i like eclipse, no surprise: i liked visualage.
the architecture of the framework is ideal for implementing what is referred to as composable architectures in the dod community.
for eclipse 3 (milestone 6 just released; final release q2, 2004), there''s a slew of great stuff there.
take a number of ordinary, equally-trained programmers and have them write significant gui-based apps in swing and swt respectively.
xap is trusted by fortune 100 companies, which leverage it as a strategic solution that enhances efficiency and agility across the it organization.
we are so used to downloading platform-specific software (e.g. j2se!!!), it''s a short step to ditching bytecode altogether (actually, keep it around for the nut-cases while those of us with a requirement to be commercial can go with the performance improvement).
not to name all the more sophisticated things.
to maciek wegorkiewicz: code locking is the resaon why i did not use net beans.
hint: idea is on the market since 3 years and jedit is around since 5 years.
if i can''t find an open source or free plugin, i have been able to write my own after purchasing a few of the 5 or 6 available books on eclipse (really interested in the eclipse modeling framework)
it forces netbeans to improve.
i use eclipse (gtk) on linux and don''t see big differences to eclipse on win2k.
it (idea and/or netbeans) is one program, that i don't have to re-learn to use everywhere i use it.
although much good work is being done to improve j2se 1.5, some of the language changes are a joke: boxing of primitives and simpler for-loops, etc. add very little (declarative attributes for web services etc. will be good).
oh, and if you change the theme while running swing applications with windows laf, the laf changes dynamically.
customers loved the fact that they can now achieve xml/database interoperability without needing to be java experts but they were blown away by the performance and the professional look of the version 2 product.
" "why don't you port swt (to a different toolkit)?
the class path needs a fundamental design change.
i''m considering using eclipse to build a client interface for many of the same reasons you have chosen for example, an updatable framework, speed, and third party plug-ins.
read the first of a new series of 'point/counterpoint' discussions...and join the 80+ readers who have already weighed in on one side or other of the debate.
i am a software evangelist for gigaspaces technologies, as well as a writer and musician.
i can also use it for other languages.
i say this because his main criticism is that eclipse looks different on different platforms, whereas netbeans looks the same.
and i don''t want to seem provocative, but joseph ottinger''s article and criticism are just totally wrong.
now, i start a swing application (jedit) and i set the windows laf.
but not considerably faster (warning: do not compare eclipse with netbeans.
the gtk version is crashy.
like searching for all read &| write accesses to a member.
and work is underway on an open source vce for eclipse (see an earlier post in this thread for a reference).
i have seen eclipse in action on linux, and the look and feel and performance is not much worse than look and feel and performance of linux or any other ide in linux itself.
i just put up eclipse 2.1.2 on a winxp machine.
and while all users should be happy about this, let the implementors sharpen their swords and keep on fighting.
it seems rather elegant in it''s simplicity, and certainly not ugly this article exactly echoes my complaints of eclipse.
cannot dare to use for large project.
converting ejb local to ejb remote messes up with application.xml.
and the many swing applications that automatically select the platform lnf end up in the same situation as eclipse on the "ugly plafform" - they are only as good as that version of the lnf (compared to only as good as that port of swt).
on windows xp, hmm...
there are lots of plugins that do a variety of things.
chang i have been using v. 3 of eclipse on mac os x and the widgets look and act like the widgets on all the other mac os x programs the menu items appear where you would expect them to appear, context menus look and act like the other mac context menus scroll-bars, input boxes, dropdowns all with the the nice aqua interface which presumably take advantage of quartz extreme as does the latest release of awt and swing for os x.
its also strange to work with!
so in short build it on the mac ... and it won't run
visual editor is different - you can work with code, you can work visually, it is synchronized.
think about one or two years from now.
with all of that said visual studio simply destroys all of these ides including my favorite intellij. hopefully project rave can raise the bar in the java world.
when i fired up eclipse on the other hand it took quite a bit of time just to figure out how the dang tool worked.
i didn''t like the fact that swing was slow.
idea (my editor of choice) is the same way: i install it, and the user experience is the same regardless of os.that's where swing rocks.
having used both eclipse and netbeans, my preference leans solidly towards netbeans.
personally i think that gtk version of eclipse looks cool (maybe the author used motif version, which is really ugly :))
and the jdt (eclipse java development tools) is a wonderful source of code and concepts for my own plugins and features.
it is still slow after all of these years.
a somewhat filosofical reflection...
very strange for me are the vs.net supporter in the comments.
but sometimes you get what you pay for.
i do not see a good reason why i would want my linux app that is by coincidence written in java make look like windows.
in the past we built this app (except for the native component) on a windows pc and packaged it on os x using jar bundler.
good to know that sun has not joined eclipse.org for good or bad, expecting healthy and serious competition from sun.
look: netbeans sucks.
the technical excellence of java suggests that it ''deserves'' to succeed but the history of computing is littered with good-looking corpses while mediocre products have grown on the back of marketing.
i loved visualage (for its vce, debugger, bytecode hot-swap, code-assisting...)
ant and cvs integration is nice, not a single hippcup.
i happily returned to swing and have not regreted it.
but eclipse means nothing to me.
i could theoretically use eclipse right now and have refactoring today, but there are several other little features in netbeans i like which _combined_
hi t. you are right that eclipse plug-ins could be handled better (e.g. made dynamically loadable/unloadable without restart).
i don't think i can describe my gut reaction in a public forum.
but the reason that i selected java in the first place is because it makes the mac into a first-class citizen, and levels the os playing field.
it isn''t backed by "hairy chested" companies but only developers.
ever tried to rename a class with vs.net-c++?
i do not expect eclipse should look like a browser or photoshop or anything in particular, it certainly seemed intuitive to me, though.
eclipse will once again be snappy..
added too many directories.
as far as open source goes, netbeans is a good ide, however they have to make better effort to involve the community in development, like explaining the architecture through articles etc.
if you want to engage a flame war you''ll need to look elsewhere for an opponent, but if there are actually specific points where you didn''t understand the argument please be more specific.
it's awesome on some oses... and when i pointed out how ugly it was  on my platform, here's a smattering of the responses i got: "why are you running that os?
just use nd 4.0 once and you'll never look elsewhere.
after a long time of editing/compiling you''ll notice that eclipse is a bit slower; switch to the memory monitor view and collect garbage..
there is virtually no getting around it.
and that it was written by the folks at borland, who certainly know more about swing than i do.
personally, i prefer less performant but easily maintainable applications (that is swing) over better performant and hardly maintainable ones (yes, swt).
bottom line is that eclipse works in some cases; but not all.
you risk that your code is overwritten or made functioning wrong.
customers thought it was great because it enabled them to easily achieve xml/database interoperability for very sophisticated dtds and xml schemas (csdgm, gml, etc.).
eclipse on windows rocks.
the funny thing about these articles was that the title was all wrong.
i like that it gets better with every "milestone" release.
i use eclipse fairly often.
i am using wsad which i believe based on eclipse, there are few annoying things with this ide, it bothers me pretty much.
the cvs integration, last time i used it, wasn't bad at all (if a  touch kludgey), and...
on linux, it''s hard to see a winner.
will you prefer an api that is poorly architected, less performant and has signs of laf illness?
ibm just can''t make a good user interface to save their lives, need i remind anyone of os/2 and lotus notes!
in fact, the only os i'll use eclipse on is windows.
eclipse isn''t just "a" tool: my combination of plugins makes eclipse "my" tool.
as with any other part of the application, however, one should code to all platforms except in narrow cases where one truly needs to write platform-specific code.
next time, please observe proper bathroom etiquette and do us all a favor...courtesy flush.
the nature and timing of this improvement points to both improvements in each java version and improvements in netbeans'' application code.
i like that it is opensource.
especially under linux.
i figured this should take no more than the few hours i wasted getting up to speed with netbeans -- given all the hype about it being easier to use.
maybe eclipse is decent on windows - never tried it.
and that isn''t 100% java?
and having gui controls based on native widgets is a significant advantage.
the swt apps are very likely to be fast and responsive.
on linux it certainly doesn''t look like a native application - the better look is gtk2 like.
for me, java has succeeded but i can understand the worry that it may not continue to do so.
finally sun has got a clue about ui.
i tried to like eclipse.
the talk tends to center around the concept of netbeans and eclipse  using common technology, and i think this is misguided, and here's why.
my customers see a great product that they can run on a variety of operating systems and they don''t even care that it''s java.
anyway, if i have offended anyone, i apologize, my intent was to interject some gentle humor and nothing else.
by netbeans 3.5.1 and java
-xms128m -xmx128m or something similar on non-windows systems, of course.
a local history keeping an eye of all your changes.
the talk tends to center around the concept of netbeans and eclipse using common technology, and i think this is misguided, and here's why.
as a mac os x user, i''m used to an os and applications that are intuitive, fast, decent-looking, and which don''t make me feel like i''m getting a chewed-up, hacked windows port.
i have been using eclipse for about 3 months now, on redhat 9, mac osx, win98, nt 4.0 and windows 2000 and love the interface on all of them.
netbeans'' does not make such a compelling argument for swing, but in recent versions it does not make a case against swing either.
it provides you with real two-way process between form editor and source editor.
i think it blows goats from here to sussex, and  considering that i live in the middle of the us, that's alot of goats.
al. have themselves to blame for continuing to dish out their self-serving ideologies.
netbeans has a far more intuitive interface and is just dang powerful.
your feedback has been submitted for approval.
i would say, eclipse sucks on linux as much as linux sucks in itself.
navigation pane on the left, menus on the top, with a toolbar directly beneath and a content area to the right of the navigation pane where views and editors appear as well as context menus where you would expect them.
- look&feel (laf) myth: eclipse integrates better into the os''s laf.
i think joe writes a coherent sentence and henry rambles.
i don''t really care that swt looks 5% better or even 30% better on windows if it does not behave consistently well on all platforms and deploy without requiring native code beyond that in the jre!
those folks who see java/jcp as a terrific development language and a sensational platform should not allow those who see java as some sort of religion to set the agenda for ''purism'' when it''s pragmatism that is required.
i have too much on my plate as it is, and too many good alternatives to take up  porting swt.
henry, that is the problem with these web posts, irony and tongue in cheek humor is not always obvious.
cheers! i''ve used netbeans for almost between 1 and 2 years now.
netbeans is far closer to microsoft''s visual basic environment which is by far one of the best development environments ever made.
eclipse represents the worst of java: an ide, a popular one, that isn't actually as much java as i'd like.
this article was originally published in print on december 3, 2003 "eclipse represents the worst of java" lately, there's been a lot of guff spouted about how sun isn't joining  eclipse.
the scrollbars are xp like.
netbeans is ok (probably 3.6 will rock).
i also use eclipse on os x
eclipse on the other hand feels like a glorified form of wordpad.
one ide to rule them all: idea intellij intellij is hands down the best of breed.
however, while both swt and swing are impressive, both api''s have missed the boat with some design aspects, and something better will come along eventually.
maybe for linux the battle for the best gui toolkit has not been fought to the end (which might explain bad performance (missing cooperation)), but that is not an eclipse problem.
i ended up giving up -- perhaps because i was never a visual age user.
in any event some of us have to support a half-dozen or more disparate platforms with every gui we write and there is not enough time in the world to adequately sweat the platform specific quality differences and deployment details (applets, anyone?) of all of this with swt.
i wasn''t satisfied with netbeans because it''s big and slow.
so if you''re one of the 0.0001% that needs to use eclipse on many platforms regularly then heed well his sage advice.
swt is inferior to swing in almost every aspects.
remove .project, close and reopen the project and then rebuild all.
ever tried to create getter&setter?
jbuilder 9 personal has 90% of the features i need in an interface i like by far the best.
all basic stuff you see in many gui applications on most gui centric os''s.
needless to say that the gui is swing based.
worse: i should port swt to my chosen operating system and ui toolkit.
:) i''ve used eclipse since 1.0 and love it...
i am working on a probject and we decided to use eclipse.
it''s great to have opinions, even if you work for the company that makes the ide you''re stumping for here.
i like that i can write the "hello world" plugin and add it in.
the logic is flawed, the conclusion wrong.
and having programmed in swt, i really like it.
i used it on both windows and (mostly) linux.
great cvs, ant, junit integration, good refactoring.
if swt wants to be taken serioulsy it must be properly internationalized!!
denis, eclipse has all of those except the vce out of the box.
thankfully, the eclipse developers/developer community agree: check out the specs.
swt is a great idea and will probably be the ''last man standing'' in the battle vs. .net, but imo sun et.
swing''s laf''s are cartoonish and their fonts are laughable.
terms of use & our privacy statement - about newsfeeds / videofeeds.
this is extremely good news.
oh man, the first time i opened it up on another os... ...
at the moment eclipse itself lacks strong support for j2ee development (you can buy some good plugins likewww.myeclipseide.com ).
i am willing to admit the possibility that netbeans may be a superior java ide, however, the shear number and diversity of plugins available for eclipse makes it obvious to me that as an application/tools framework eclipse is the obvious choice.
stephen charlie, you can view editors side by side by dragging an editor tab to the top, bottom, left or right of its current position.
for sun its time to start your show.
if the greatest criticism of ibm''s ability to create a user interface is to refer to it''s os/2 operating system, i feel quite comfortable in my choice to use eclipse.
neither guy particularly cared for netbeans -- and the real debate was swt.
after considerable effort we found that the jar file produced by netbeans ide 4.0 for os x, will not run on os x. we can move the identical java sources to a pc and compile the jar there, move that jar back to the mac, and use the jar bundler to create the application, and it works.
in java 2 v1.4.2 swing can be plenty fast -- as shown by idea.
while i understand the bitterness aimed at sun somewhat, i think that this particular brand of talk is counterproductive and, dare i say it,wrong .
you can have as many rows and columns as you like.
if it stops being fun, i''ll switch tools.
idea (my editor of  choice) is the same way: i install it, and the user experience is the same  regardless of os.that's where swing rocks.
i  don't think i can describe my gut reaction in a public forum.
the developer should be able to cut and paste code and see the changes in the designer as it happens.
the bloody push buttons!!!
for example the way that plug-ins are handled i think could be a lot cleaner.
do you think swt can get any more performant?
until then, i''ll be coding with a silly grin on my face.
why do you want to develop on linux, if eclipse runs better on windows?
i'm not an experienced developer, but i used eclipse for some plug-in development.
i really dislike netbeans.
also with medium sized files the editor slows down until it is almost unsuable.
not netbeans/xp, not  netbeans/linux, not netbeans/solaris.
everywhere else... not a chance.
and may borland tremble at the though of it all (and lower their prices significantly ;-) ).
for those with memory problems using eclipse, try the following: eclipse.exe -vmargs -xms128m -xmx128m. also download the memory monitor view and install it.
one more thing regarding the performance of swt and swing.
(i also loved visualage for java).
drag the offending file to the recycle bin and empty asap!!
i like that other people have written very powerful plugins some of which i''ve downloaded.
in netbeans you are not afraid of it.
i have too much on my plate as it is, and too many good alternatives to take up porting swt.
this does not even exist is vs.
it was a bit of extra trouble, but everthing worked reliably.
sys-con media, inc. — all rights reserved.
you have the basic framework most applications would require laid out in a straightforward manner ...
however as the number of files has grown eclipse has become more unstable.
the motif version is butt-ugly, and (for me)
published october 15, 2005 – reads 97,382 copyright © 2005  sys-con media, inc. — all rights reserved.
the most important reason to use an ide is productivity.
now, i have to tell you that i dislike both netbeans and eclipse.
i've been the editor-in-chief of java developer's journal and theserverside.
this wasn''t point/counterpoint between netbeans and eclipse.
in version 2, i migrated entirely to eclipse.
and the rest are custom controls anyway.
this doesn''t bother me because i like it enough to watch it improve.
according to my experiences, eclipse provides good look and feel in linux environments compared to the other ides even though eclipse looks quite pretty under windows.
it performs better than netbeans and it has a very powerful code editor (isn''t this one of the most important things?).
syndicated stories and blog feeds, all rights reserved by the author.
i downloaded jbuilder 9 personal.
okay i use eclipse so i''m biased.
even the phpeclipse plugin works well when i have a client for php.
perhaps as developers we have become so used to being defensive about our code that that attitude seeps into other aspects of our professional and non-professional lives.
i hate to point out the obvious retort, but "eclipse.exe" on at least two of my platforms yields a "command not found" error... and that''s not because it''s not in my path.
all designers must be two way with no limits in my book.
it does everything you could possibly want to do in an ide.
the company's extreme application platform (xap) is a high-end application server, designed to meet the most demanding business requirements in a cost-effective manner.
the first several versions were slow -- especially with jvm''s prior to 1.4.2.
the cvs integration, last time i used it, wasn't bad at all (if a touch kludgey), and...
to jon allen: code locking is one of the greatest netbeans advantages.
henry roswell is a veteran consultant who would like to think he's seen it all, but is constantly amazed by new events every day.
found little strange behaviour for settings related to compile when save the file, between two different machine.
but i can run it  on all of my oses and have a reasonable expectation of what it looks like
we have at least two main contenders in both the open source ide and the java gui market.
or, has ibm come up with swt to bring in incompatibility, thereby kill java & hence sun's lead in this area of technology?
my conclusions: eclipse is ok (let''s see how 3.0 raises the stake).
we know they are stupid, do not have guts to innovate something like java, its becos of my client i''m using wsad.......
yea, and henry used lots of big words and other stuff i didn''t understand ....
i was able to leverage an enormous amount by moving to eclipse and now customers want swt-based thick-client guis from their dtds and xml schemas (they will be getting that in 2004, q2).
perhaps i was just a bit too subtle, and i am really not trying to start a flame war, only to point out what you have already said, henry & broad generalizations benefit no one.
and even the performance is good under linux.
the applications that run on them should strive be consistent with one another at the expense of being self-consistent across platforms.
(and for those who say that java has no ide like c# has from ms visual studio...
they have significally changed there ui and it is much better.
i haven''t seen it on macosx
talk of ''pure java'', for instance, is in principle fine but often misses the mark.
after that most everything has been fairly straightforward.
as anyone registered on the eclipse developer mailing list (something i recommend for anyone developing for eclipse) might have noticed, there is some thinking into contributing to gtk (for instance), something microsoft has done for macos x as well (for better office x integration).
i only remember, that even scrolling text in editor was a nightmare (512 megs of ram).
the swing apps are not likely to be fast and responsive.
swt''s i18n support sucks.
- api swing''s api is truly object-oriented (or at least this is the tendency) and it the mvc pattern heavily used.
joseph, i hate to point out the obvious retort, but if you rtfm then you will know that eclipse.exe is inadequate.
(granted when it comes to gui applications neither of these promises is kept, but you get the point)
we have a java swing application that look just like a native one: scrollbars, menus, fonts, _buttons_, _combos_, lists etc.
reproduction in whole or in part in any form or medium without express written permission of sys-con media is prohibited.
i'm afraid, that's antithetical to java itself.
obviously, the class path is needed but it presents too many problems in far too many systems (having to use the correct class loader in some environments, for instance; lack of good diagnostics for novices; etc.).
so to all you netbeans fans, rejoice over eclipse!
when i deploy an swt app in a corporate environment that is a mix of win2000 and winxp, the file dialogs, for example, all look exactly the way the users expect, exactly the way it looks in all of their other apps.
when i see something better than java, i''ll use it but i''d prefer that not to happen for a long time yet!
copyright ©1994-2009 sys-con media.
and you get a lot of plugins with jedit.
dan bartel, your generalization does not stand.
try jbuilder - it does it right.
they have a win 9x/2k look regardless of the used os theme (mine is xp silver).
notepad, i usually spend a  minute pondering whether i can keep remembering to check extensions on  filenames before realizing that i can, and i end up with sucky ol' notepad  instead of bothering with netbeans.
just aren''t worth giving up just for that one thing, imo.
eclipse sucks on linux (that's what matters).
eclipse is code-centric, vs is not.
i have a client who's standardized on wsad, and ireally think eclipse' project management is a model to be copied.
we recently found a troubling problem.
let''s not strech this, shall we?
netbeans is slick and superfast compared to the slow,bulky, memory-hogger that eclipse is.
different platforms look different.
there is a danger that well-intentioned folks miss the point in some of these discussions and in efforts to find the best path forward.
if you have no code locking, you have no form editor but form wizard for real.
same goes for swing and swt.
but i''d say it''s about the same situation the least (swing has powerful hardware acceleration on that platform).
eclipse isn''t as pretty on linux, it''s true.
it offers just about everything a true developer would want without all of the fluff.
with the huge set of plug-ins available, eclipse is becoming the most useful ide that i have used.
i''ve been developing cots software for twenty years (mc68000, c++, java) so if the class path impedes my progress, and it does, then it''s broken.
i read this article a few months ago, before netbeans 3.6 was released and agreed with almost all the appreciations in it, specially that eclipse was slightly better than netbeans in overall (even that it sucks when running in linux, my preferred os).
refactoring i will admit is sort of nice to have, but the netbeans dev team is already on top of that, with refactoring listed at the very top of the new features list in netbeans 4.0 (currently in alpha testing and slated for release before the fall of this year).
take care - henry i used swt for an international text widget to display thai, cambodian and laotion.
simply because competition is what drives improvement.
jdj archives: eclipse vs netbeans - "point/counterpoint" special.
i have a client who's standardized  on wsad, and ireally think eclipse' project management is a model to  be copied.
other than the fact that it is not free i really don''t have a problem with it.
i wrote a successful cots product using swing.
i won''t use visual c++ editor because strange comments are added into the code, this is wrong also.
i recently loaded jbuilder v9 on my 3ghz, 1gb ram pentium 4 machine and i still notice delays when i click on menus.
i have, and i am still waiting for the other os''s to catch up to the user capabilities i had with os/2 years ago.
swt goes against this level playing field concept.
btw you really have to check out the latest netbeans development build.
what's looking so different, or are the diffences to the motif-version or xp/me/98/nt/95/3.11/3.1/2.0 :)
gives falls warning on jsp scripts with no proper explanation, the worst integration with cvs, i check out the project from cvs, wsad creates that project on file system but does not show up on any perspective even after refresh, restart etc.. it also creates some runtime error which i have not seen so far, using any ide and sun jdk x.x, just does not make sense to me.
that is even more true for macos x or windows ce.
the refactoring tool is simply unmatched and i have used but netbeans and eclipse.
i have been using jbuilder for 6 years and still have not seen a replacement from the open source world.
wsad donot provide correct jndi name for local ejb, which is local:ejb/.... in case of was 5.0 , its annoying.
our company has been developing applications for mac for many years.
comments (94) view comments share your thoughts on this story.
coding apps (vs. very carefully targeted pieces thereof) in swt is an over-reaction and a design decision that is already obsolete.
i tend to agree with the pro-swing side of the swt and swing comments thus far.
" bleagh.1 | 2 next page » published october 15, 2005 reads 97,382 copyright © 2005
eclipse''s use of those dang views for different behaviors is counter intuitive and a kluge.
it's free, so i should just suffer in silence.
yes it does, and well it should.
actually on linux i cannot really tell the difference between them (i use mandrake 9.2 with the 2d hardware accelerated sis driver).
notepad, i usually spend a minute pondering whether i can keep remembering to check extensions on filenames before realizing that i can, and i end up with sucky ol' notepad instead of bothering with netbeans.
i should choose my os based on a specific program i want to run, regardless of whether that program fits the machine's overall goal.
while the framework is interesting, the actual performance was prohibitively miserable.
netbeans's group have made an excellent work in these last releases, 3.6 have a lot of improvements and 4.0 is just going to be great (not yet finished).
however, i ama professional software developer, and i get paid alot of money for the software that i create.
eclipse was the firm ide that made me finally leave vi behind for most of my devlopment.
a thing of seconds in eclipse.
eclipse feels like twenty different apps smashed together with glue and paper clips while netbeans is clean and intuitive.
and henry roswell''s point about ease of developing responsive apps should be heeded.
folks, let''s just admit a few things about swing.
did i mention it was version 9?
but i can run it on all of my oses and have a reasonable expectation of what it looks like and how it works.
ibm lags sun''s jvm releases by *way* too far - at least in the versions they use in their products and they have themselves to blame for this.
recently i came across few unexpected problems with wsad 5.0.1.
while i realise that's the best gift economy move i could make, i'm a busy man.
ottinger claims that this represents the "worst of java".
however, since version 3.5 it became faster (and more to come).
gigaspaces technologies is a leading provider of a new generation of application platforms for java and .net environments that offer an alternative to traditional application-servers.
one thing good about wsad/eclips, is its model.
if the other platform is an ugly platform with ugly-looking applications, then eclipse should be ugly.
subscribe to joseph ottinger: email alerts get joseph ottinger via: homepage mobile rss facebook twitter linkedin related topics: java ee journal, eclipse platform, java developer magazine j2ee journal: article point/counterpoint over java's desktop ui technology lately, there's been a lot of guff spouted about how sun isn't joining eclipse.
please wait while we process your request...
another great change would be for java compliers to generate native code.
btw for the vikram, if the problem you descibe in wsad is the one i've encountered, occasionaly the .project file can get corrupted.
there has been much talk of wanting java to succeed.
netbeans 4.0 continues to be the beauty that it is on windoze and linux.
as for swt vs swing, they both have pro''s and cons, but for tool and application development i have found that a common look and feel is key to integration of various tools used in mission critical applications, and the unfortunate truth is that most dod sites have standardized on windows, the advantage to swt is that widgets behave as the user expects them to behave, wether it is 98,nt,2000,xp, osx or linux making cross tool/application training (read java and non-java) more intuitive.
all rights reserved.
in accordance with our comment policy, we encourage comments that are on topic, relevant and to-the-point.
you described what being a developer is all about: building software that fits the users needs.
the pluggable lnfs, however, are not nearly as truly "native" as the native components wrapped by swt.
eclipse runs out of memory every few hours.
a $500 investment for a core tool that makes me more productive is such a clear cost-benefit winner that the cost is a non-issue.
all marks are trademarks of sys-con media.
i do have one complaint, i often want to look at editors side by side, how to achieve this in eclipse is not readily apparent to me, if it is indeed possible.
as a teacher whose students use swing, i wish that were not the case, but it is.
all of this makes eclipse so fun to work with, that i don''t mind its warts: they seem temporary.
so i know it works on that too.
software development is holy only to a few feeble-minded developers: for the everyone else its stuff that makes computers work and we want the sort of stuff that delivers the best results.
we ask all readers to expect diversity of opinion and to treat one another with dignity and respect.
believe me i am not trying to shill for intellij
anyways, eclipse & swt are for windoze zombies.
it took me a few couple of hours to figure out how to get started with -- an issue purely of poor presentation of a few critical starting concepts -- all of which should be (finally) addressed in 3.6 as i understand it.
given the choice between netbeans and...
it''s clear to me that this visceral reaction to swt fully reflects the pressure eclipse is putting on the borlands and suns of the world.
i wrote a netbeans module last year and used it intensively.
eclipse worked very well at first.
syndicated stories and  blog feeds, all rights reserved by the author.
swing vs swt has nothing to do with eclipse vs netbeans vs yourfavoriteidehere.
swing''s performance will let''s say change in new j2sdk versions.
i like also gef and emf, and many different cool things (i don't want to begin some ide war again, please :))
atlast ended up deleting and creating new project.
someone mentioned a lack of struts support in netbeans so i thought i would point this out:http://www.jamesholmes.com/struts/console/
it's awesome on some oses... and when i pointed out how ugly it was on my platform, here's a smattering of the responses i got: um... right.
its what i call patheticware -- not exactly a virus, but performs so poorly it is nearly impossible to use.
the eclipse visual editor provides gui builder support for swing (now) and swt (q2, 2004).
now my code generates a java project and java issues like the class path are taken care of by eclipse (it''s an eclipse plug-in).
the jdk is the latest (1.4.2_02).
swt is a neat native component integration technology when it comes to activex components.
the same delays hold for nearly every other significant swing app i have used.
i think it blows goats from here to sussex, and considering that i live in the middle of the us, that's alot of goats.
it (idea and/or  netbeans) is one program, that i don't have to re-learn to use everywhere i use  it.
swt throws platform independent rendering out of the window.
what my customers didn''t like too much was the requirement that they build java projects and manage things like the java class path.
eclipse vs netbeans and consequently 2.
it is a true two-way tool.
c. fulnecky (a.k.a anonymous coward) alan and mr/ms anonymous i didn''t mean to ramble so aplogies for my poor writing style or using big words that made it difficult to understand.
but it made a mess out of my project.
the primary problem with eclipse is that is tries (sometimes unsucessfully) to be everything to everybody.
[tuning the jvm heap and gc parameters helps too -- netbeans should do better at this out-of-the-box for "known" vms, e.g. sun''s.]
and it seems to me ibm one or other way wants to harrash java community by one or other way, why they cannot stick to java:comp/env or ejb/ for jndi naming for ejb, what they want to prove?
actually it resembles to idea.
our experience has become so bad that members of my team have started to check out other ides.
that''s hell of a laf integration.
visual caffe also did it right, but had a strange event editor that i never figured out.
you might make a swing application that looks native, but thats not the same as being native (in most aspects).
i used ''pure java'' even though the platform was not pure java but who cares about the implementation of the platform provided that the end result works well?
first i must confess i have little experience with netbeans, i have tried it but it never offered me enough to switch from jdeveloper with which i was comfortable.
this is what annoys me about eclipse: the free moniker is misleading, the  toolkit is ideal for a limited set of platforms, and the eclipse people -  sorry, guys - carry around this annoying flag of "we're the underdog, hear  us roar.
and that is what i am sticking with.
add your comment you must be signed in to add a comment.
specific and directed criticisms benefit us all even if we rebel against them initially.
ironically, that seems to be the same debate sun and ibm are having.
(i just tock a look at http://www.netbeans.org/kb/articles/win_sys_quick.html, or http://www.jgoodies.com/)
especially telling is the notion that ibm made the swing vs. swt decision while they were on a 1.2.2 jvm.
jdeveloper is cool if you are working with other oracle products(such as database, bc4j, ect).
i like that it is similar to visualage.
however, memory consumption at startup is lower for eclipse (57 megs) compared to netbeans (97 megs).
(why would you bother with any jvm prior to that to run a java ide?), netbeans runs quite quickly.
to maciek wegorkiewicz: jbuilder swing designer has no code locking.
jedit is my choice :-)
i like in eclipse also visualeditor - i remember, that in netbeans, if you accidentally deleted some config file, you couldn't edit visually any more.
i am doing embedded java now and that group says that eclipse is so much better.
true, it requires a restart (i never understood why - it''s something from jedit''s kitchen).
now about that laf integration.
@josh: eclipse might be hyped against vs, but is battling on a different field.
compare it with idea or jedit).
overall frustrating experience, its not robust, would use any other ide over wsad like idea or sun one.
regards well after using both netbeans and eclipse extensively for well over a year now i can say without hesitation that netbeans is far superior in every way.
netbeans is just pure java and produces pure java swing with no extra crap thrown in.
i think idea i liked.
you may complain about the price, and perhaps for those who program as a hobby or as a labor of love (ie. free), this is a valid complaint.
regarding swt vs. swing we get three main threads: - performance for now swt is faster on windows than swing.
try it yourselves (win xp sp1, j2sdk 1.4.2_03).
while vs is good in supporting a wide range of developer activities (html, xml, sql aso.), it lacks even the basic features while coding.
my development tool of choice is ide by a long shot, for the same reasons that many posters have already listed.
don't really know what is going to happen with eclipse project in the near future, maybe they are going to work for a better support on linux and other os's, but netbeans is now a good competitor for them and hope that some day they (nb) will reach "the top" of this fight.
applications should look different on different platforms.
but if you''re one of the overwhelming majority who just wants a decent ide on your platform of choice, ignore him completely.
i tried net beans and hated the code locking, where you could only edit where it let you.
about me using java/j2ee for around six year, believeing in innovative, creative environment.
build it on the mac ... and it won't run
my eclipse-based product was developed under windows and ran first time without a problem on gtk linux.
don''t ask me, i know nothing.
sure drag and drop doesn't work on linux eclipse, but it's very usable on windows and linux.
it is the only product that provides a complete middleware solution on a single, scalable platform.
the ui is responsive, and the same i cannot say about netbeans, but i used it a year ago, version 3.x, so maybe now it's much better.
it isn''t about promoting our beliefs or philosophies.
refactorings like automatically generating a method from selected source code.
programming swt reminds me of mfc and win32 api which both suck (my recent programming experiences tell me that).
i said that already, right?
the one change that would make the largest difference in moving java forward is the elimination of class path problems.
this is what annoys me about eclipse: the free moniker is misleading, the toolkit is ideal for a limited set of platforms, and the eclipse people - sorry, guys - carry around this annoying flag of "we're the underdog, hear us roar.
not netbeans/xp, not netbeans/linux, not netbeans/solaris.
we have java application that has a native component tied to os x. http://serialio.com/products/serialmagic/index.htm
my .02 i''m wondering if thoughts actually formed in your mind before you started typing or if you just unleashed this steaming pile of crap onto us.
somehow i doubt whether you have ever used os/2.
you will need something like: c:\eclipse\eclipse.exe -vm c:\j2sdk1.4.2\bin\javaw.exe -vmargs -djava.ext.dirs=
the one argument you could make in favor of swing based applications here, is that if they offer a look and feel choice to the user, then the user gets to choose whether they are part of the 99.999% that want the platform default lnf or the ottinger minority that wants the cross-platform lnf.
if you put any changes into code generated by gui editor how can you apply changes in that gui editor?
or idea resembles to jedit :-d
we will remove comments that include profanity, personal attacks, racial slurs, threats of violence, or other inappropriate material that violates ourterms and conditions, and will block users who make repeated violations.
it is so tightly integrated with other oracle''s products it reminds of microsoft.
so if you want a good ide that is free, is java standard, and runs on just about anything, there is only one choice and that is netbeans.
so are the menus, and fonts.
eclipse is ok, but it runs slow on linux.
but the promise of java is "write once run anywhere", not "write once look the same everywhere".
i used a lot jedit (www.jedit.org) and is the ideal open source java editor/ide.
userdefined macros (called templates in eclipse)?
no way to cure, tried many.
as pointed earlier we have a discussion on two levels: 1.
besides, the bitter truth is that most of the biggies use primarily, the windows platform for application development, where eclipse is the nxtbest thing to java itself.
while netbeans ain't perfect, far from it, swt and eclipse aren't right for java, says joseph ottinger; a position with which henry roswell disagrees.
eclipse is a horse of a completely different color.
on the mac, it is *ugly*, counter-intuitive, and has its own peculiar ui that inherits none of the behavior that i''m used to from other applications.
you rarerly or never seen such delays in non-swing apps.
i hate visual studio!)
i should choose my os based on a specific program i want to  run, regardless of whether that program fits the machine's overall goal.
i tried eclipse hoping to get a good feel for its capabilities and advantages.
i will be trying it on my powerbook soon.
i would have to give a slight nod to netbeans for their swing gui builder.
and there every other ide should keep an eye on eclipse.
the ability to develop, deploy, download, install, update and use interoperable tools all from within the same environment appeals to me on so many levels.
but today (aug 24/04) after netbeans 3.6 and 4.0b have been released the story is completely different.
i also used sun one ide which i found more easy, intutive, industry standard expectation in editor like i can match my opening and closing brackets by keys and can navigate using that as a technique such a small long time feature of editor is not there in wsad, wsad locks files on windows os, needs to restart wsad or some times even windows, suddenly shows some files has errors, but in reality there is no errors found, once i have those errors my project will not be built, there is no way i can compile a single file (damn stupid).
swt use and code refactoring are about all that eclipse has to offer me that netbeans doesn''t and in my experience and swt is near useless for doing the kind of graphics manipulation that is possible with swing like setting arbitrary clipping regions or using different affine transformations or customized pixel blending methods.
and i'd rather use netbeans than eclipse, given a single project to work with.
in an effort to streamline development we installed netbeans ide 4.0 for os x.
while i understand the bitterness aimed at sun somewhat, i think that  this particular brand of talk is counterproductive and, dare i say it,wrong .