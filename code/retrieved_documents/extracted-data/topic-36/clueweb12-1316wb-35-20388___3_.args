these offer far more than is required by the student java programmer, and may be a barrier to learning java because there is a lot to learn about how to use them.full-strength ides these provide extensive programming support for editing, building gui interfaces, project management, debugging, etc.it enforces indentation and allows immediate evaluation of expressions.this is a good choice for students because of the good gui form editor and the editing and debugging facilities..once you know how to do everything on your own, it's easier to understand and use these systems.version 4.0 (java 5 (1.5)) is better than version 3.6 (java 1.4), but it has a bug that prevents it from reading console input.probably the main reason is that it takes time to learn the tool, time that instructors feel is not central to learning programming.java installation, tunning, options... one of the most efficient ways to produce programs is to use an ide (integrated development environment).- eclipse - ibm's free eclipse ide, www.eclipse.org, is popular, and is the first choice of many professionals.if your programs are gui based, and/or need java 5 features, use netbeans 4.0.half-strength ides these are simpler to use for small projects, but typically don't have nearly as many features, eg, no graphical user interface editor.and many more... some programming editors will compile java by linking to sun's jdk.bluej (www.bluej.org) - used in some intro courses, but programs use a non-standard interface and it doesn't produce real java programs.if the java sdk is installed first, textpad will allow compilation of java programs from the editor.they also hide details that may be important to learn about.