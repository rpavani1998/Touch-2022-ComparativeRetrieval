no, all that if you want to use python instead of basic or lisp.
in some ways the component approach fits in well with the characteristics of basic, i just d i was saying that a basic is cheap to implement.
anyway, yes i agree an lisp is easier to learn.
no new comments can be posted.
well, no, if you want to change the syntax or semantics of the language itself you can't use libpython, but then you're not using python, you're using your own derivative language.
those btw sql server as well.
that's a good way to say it, you want to use a basic because you are going to need create a derivative language which means you can't just pull in a library from a preexisting language.
common lisp thank you.
that is where individual programmers pick up and are encouraged toward good/bad practices.
so in terms of why basic, that was my #3 "3)
if you don't think that, then of course it's going to seem like a good approach to you.
you know, like a proper geek?
the break; statement also does a goto to the next instruction after the enclosing set of statements (switch, for, whatever).
it turns into multiple eclipse installs.. one for java, one for c++, one for php, etc.
it is well understood."
look at all the case: statements in a switch - they're all gotos (the case: is a label).
( something like what wavemaker is to java, or ironspeed is to .net
"gold" is our 3rd-lowest level.
parent share twitter facebook
ctl+a is your friend.
i am disappointed that html and css after all this time still lets you do that, cause the result becomes "looks good for me, looks shit for you" pages.
who knows - it sounds like it should cost more, and that's all that counts!
100 of 137 comments loaded twitter  facebook opensource programming developers ea, nintendo, sony quietly withdraw sopa support submission: open source ide gambas reaches 3.0 actual damages
it is well understood.
i don't have any real knowledge of ansi-forth.)
(n.b.: i don't consider lazarus to be a good fit, and it would need to handle unicode strings.
when writing java code, one would assume that apache axis 2 projects would be supported with the latest web project type.
i have to extend python and then embedded an entire python.
multiple man years instead of man days.
intellij, netbeans, hell even visual studio are more appealing.
all  comments full  abbreviated  hidden
so dos helped raise and shape that little bastard, like it was its own :)
languages also come with communities that have cultures that reinforce certain practices.
i just hope one is out there and i missing it.
you know what... it worked first time and was dead-fucking easy to get a gui running.
quick - someone tell the writers of csi so they can now ""whip up a gooey in gambas so they can track the killers' ip address [youtube.com]" ... or something equally zombified.
without javascript enabled, you might want toturn on classic discussion system in your preferences instead.
we are not responsible for them in any way.
where's html/css with strong typing?
but why would they write their own interpreter instead of writing their ide around libpython?
sort of like "professional" - it's really for amateurs.
and all that to avoid whipping off a custom basic or lisp?
if they replaced it with python, ruby, ... even lisp or forth, then i'd seriously consider it.
source formatting in eclipse is terrible.
everybody likes a cute character.
i use it at work currently and when i get time, i'm going to switch away from it.
would like to have a true "gui ide" rad tool for python too.
i need more than 80 characters unfortunately to be legible.
most complaints i hear about netbeans, visual studio, etc. are for very old versions.
i've never given scheme a fair trial.
people get so used to having yellow lines on the side, they don't take any warnings seriously.
eclipse wasn't written with swing and requires swt which means that you can only run it on platforms that swt has been ported on.
parent share twitter facebook brilliant idea.
i suppose you also fondly remember running with scissors and poking eyes out with sticks.
i find it to be incredibly slow, bulky, and difficult to use for even standard tasks.
reaches 3.0 archived discussion load
easy enough language that got me interested in programming and provided me instant fun.
cobol?parent share twitter facebook coldfusion.
it's what i started my programming history with and i still have fond memories of it.
i, unfortunately, have had the same issues with eclipse.
doubt is a pain too lonely to know that faith is his twin brother.
in its final version, the original basic was renamedtrue basic
many procedural languages have some sort of modularization, at the least prodcedures/functions/subroutines.
open source ide gambas reaches 3.0 137 posted by timothy on  saturday december 31, @11:28am from the that's-ok-i've-reached-37.0 dept.
but after neon (an object oriented forth for the mac) died during it's transition to mswi why start from scratch?
you can't switch without recreating your whole project.
netbeans got this right.
i have to call bs on that one.
the reason is that ide technology makes heavy use of static language features.
do we get overloading as well?
or even the craptastic diamond level.
though i haven't used it in a few years it is a great way to quickly put together graphical applications.
depending on your font, font size and display dpi, that might make it hard to read, yes.
anime and manga fans.
not quite the same anymore.
i have seen a few other smaller projects but none seem ready for prime time.
they weren't problems in basic they were problems in the underlying old versions of the c/c++ math libraries that had been compiled into those apps that the controller languages called.
especially when you have a good ide - which vba does.
ok good, that's exactly the point.
not to slight the work he is doing, but has anyone used gambas in any 'real' projects?
if i write abc app, abc doesn't have any hooks into python.
python out of the box doesn't allow me to manipulate abc's data structures, libpython doesn't let me do that.
you could get down and dirty with peek&poke statements and talk to hardware directly.
who cares about basic in 2012?
does that include those who can't bring themselves to install vs?
what a mistake - even the "easy installers" with all
and in a spreadsheet you are going to want cells to be primitives.
isn't this like ford releasing a model t for 2012?
it's also a hassle to configure this compared to other ides i've seen.
while it may sound lazy, drag and drop interface creation and good remote debugging speeds development time, even for professionals.
many developers that would code infinite circles aeound you know what they are doing.
but how many times have you been presented with a "finished" design that is non-functional by some "design team"?
so you use something like freebasic and let others who want those features use gambas bywater basic bas blassic any of those should be what you're looking for (and they all work quite well).
goto is a statement goto label and nothing else[1].switch, break, continue and run-time polymorphism may or may not have some problems in common withgoto but there is no logic which says that if you accept one of them you must not criticisegoto.
actually, in code, infinite loops tend to be a bad thing . . .
i was just replying to jbolden who said writing your own python interpreter is hard.
it was a better fit for early micros than today's machines however.
it just makes it hard to read.
i need to rebuild the python where i'm changing the internal primitives.
i understand "guerrilla marketing" but to whom are we marketing: prepubescent teenie boppers?share twitter facebook i understand "guerrilla marketing" but to whom are we marketing: prepubescent teenie boppers?
everything had to be saved in one directory, that of the project files.
different dialects had widely varying levels of hardware support.
the last time i tried it, you could not organize your code into folders.
s i can just link in some library and go that should read i can't just link in some library and go
it's not blurry text.
because remember the idea was a scripting language for a new application.
it's so bad, some people have made plugins just to do that.
[1] modulo variants wrt where the label is allowed to be: in the same function, anywhere in the same source file, and so on.
it shouldn't be possible i'm a big fan of gambas.
share twitter facebook it wont work on ms systems, otherwise it could be a good vb alternative, otherwise like i stated in a previous post why bother learning it if your never going to be able to use it on other systems i already know a half dozen useless programming systems, not wasting my time on yet another it looks like most of the example applications were written by native spanish speakers, have comments in spanish, etc.
2) there is an extremely low number of keywords 3)
ya i have and its the best we have so far, but the gui builder 'extension' is a bit kludgey and still has an 'external' feel ( since it is :) )
or just remove the text-shadow:0 0 6px black; using firebug.
the subject, as i understand it, is "what is a good component language, given that some people really think that basic is a bad choice."
it still looks like an ibm product.
uh, those are *not* gotos.
there are python ides, but in general there aren't good ide for any of the dynamic languages.
who the hell is modding this joke up?
c might be acceptable, but i sort of doubt it.
parent share twitter facebook you think having the real daddy's regex would have been such a giveaway.
i can just link in some library and go.
(okay, i admit it - i switched to jedit recently, but still, for a lot of code, eclipse is massive overkill).
i actually found forth easier to wrap my head around than lisp.
because it does not let you create folders.
i don't think you are getting this.
the error here is the typical web design 101 blunder of combining scalable and fixed size elements.
when they moved to the eclipse platform, it ended being a terrible product.
i thought that, perhaps, the zend people just didn't do a great job building on top of eclipse and i decided to go to eclipse directly.
it is an unsolved problem how to create a powerful dynamic ide.
it's shockingly easy to get your first application
with maybe the exception of male prebubescents and adolescents.
the few things i can't do in netbeans are third party add-ons that haven't been tested well and don't integrate.
i wasn't the one who suggested using python, that was hithere.
i realize that this is going to start a flamewar, but before anyone tries to say i'm wrong please try some recent versions of other ides.
mozilla's fox and other characters, linux's tux, bsd's devil, freemind's butterfly, etc.
just because you can it doesn't mean you should its the main reason i have never bothered with this, it looks like everything i would want except windows support ... which though i run linux on the desktop most of the world does not its really not in my interest to sit down and learn a whole new system if i have to toss it out of the window the second i'm on a ms os trust me, i am ctarded, you dont want my help is it required that open source projects have cute characters?
it requires some more explicit management in its project files (as they are just qmake projects), but i've found that i prefer this to the endless point-and-click mazes that vs subjects me to.
that will give you the absolute minimum.
devs can produce ok uis provided that they follow the decades-old rule that form should follow function.
i have to worry about all sorts of things like python security because it is now running inside my app, and all the features of this embedded libpython and how they interact with features of my api.
you want at least platinum.
please stop with the fanboy bs, soppsa.
i wasn't saying they should use python, i'm saying that if they did want to use it - like hithere suggested - there would be no need to write a brand new interpreter, since there's libpython.
lisps are by far the easiest interpreters to write.
for example in a shell you want files to be primitive objects, while in most other languages you wouldn't.
to say it's basic is a bit like a canoe with an outrigger is to canoeing.
there never really was any other such comprehensive language with quick-to-see results.
anyone who would use eclipse over vs just doesn't know what he is doing.
i'm very happy to see this project is continuing to be developed.
the structures of the language have more than a minimal influence.
the purpose of the control language is to manipulate the internal data structures of abc app.
you want your application's data objects to be the primitives in your new derivative language.
in some ways the component approach fits in well with the characteristics of basic, i just don'
pe remember the point is an embedded language so it won't be an ansi forth, it must different because it is going to be using the application objects as primitives.
i understand "guerrilla marketing" but to whom are we marketing: prepubescent teenie boppers?
don't forget plan9's glenda, which pretty much out-cutes all of those.
things like wizards don't behave properly.
it would depend on the fit, and i don't think that cworuld fit.
most likely i want to change what are or are not primitive objects in the language.
the purpose is not to offer a generic python.
both tcl and lisp come to mind.
you also can't generate a client only from an axis 2 project.
i have found qt creator much easier to work with than visual studio.
though i haven't used it in a few years it is a great way toquickly put together graphical applications.
it was about as easy as basic.
why start from scratch?
and the last time i tried one just couldn't embed a " into a string.
it has the most disgusting website ever.
i happen to think that component style programming could be quite useful, but i don't find basic an acceptable controller language.
last time i installed it took two hours.
forth actually *is* fully post-fix, but the mingling of compile-time vs. execution time can make that difficult to see.
eclipse is not intuitive.
so don't knock goto - the software you're using depends on it.
did you create the folders externally from qt creator?
any code i have seen in those languages, h qt designer is quite good.
it's an ide built around basic with extensions .
python and ruby are orders of magnitude more difficult to write interpreters for.
kevin fishburne writes "after years of work, creator benoît  minisini and friends are just in time for new year's celebrations with the  first stable release of gambas 3.
and this thread has nothing to offer.
who thought that intentionally blurry text is cool?
any good example source in english?
unaware of why it was so different..
amos was where i learned coding, before moving on c
it has pretty good help files, simple (basic) syntax and is a great way for beginners to learn and for more experienced programmers to throw together simple apps in a hurry.
a couple of other popular choices include csh and cl (common lisp).
you use eclipse when you have the awesomeness of vim available to you?
especially since you can use xml syntax.
but so many quick and dirty applications get built with it because: 1.
so the easiest language to adapt would probably be python3.)
and from my mainframe days, i'd say that cics is almost a language of its own too.
the lower dpi and smaller font you have, the worse it's going to look.
or maybe i use linux for development?
this causes bugs, incompatibilities and ui integration problems.
eclipse is too modular.
there may be more comments in this discussion.
please note th basics are good to write because 1) syntax is well defined and thus lexiconical interpretation is easy.
it's handy enough on its own for c/c++ projects, independent of whether you are using qt or not, but it's extremely helpful for developing applications that use qt as it integrates very well with qt designer.
no disrespect to anyone, i'm serious.
i do a lot of php work.
i guess sometimes you just really don't want to know!
so are your virtual method tables.
visual studio is lightweight sputter...cough...lightweight??
but pascal might work.
eclipse has gotten better, but it still suffers from the refresh problem.
for 1 download = cost of a 1 license this discussion has been  archived.
it doesn't poll for changes in source files frequently enough and if you dare add a file outside the ide, you have to manually refresh the view to see it.
gambas is component-based, so check out the list for an idea of what you can do with it."
yes it's aimed at teenagers.
people knock visual basic for applications (built into excel/word)...
it's the basic part that i can't stand.
it can't do anything on it's own and the hundreds of plugins aren't tested with each other.
i used to use the old, pre-eclipse version of zend studio which was pretty good.
have you read the comments i was replying to?
amos for amiga was even better, it had some multimedia extensions (playing sound, sprites, bobs (blitter objects - like a sprite, but could be the size of a whole screen), mouse zones (for fast mouse position testing for buttons) and even special instruction which waited for vertical refresh.
the dialects available on micros didn't necessarily implement all the features of dartmouth basic, for example matrix operations were missing from gw-basic or commodore basic, iirc.
per theirweb site, 'gambas is a free  development environment based on a basic interpreter with object extensions, a  bit like visual basic (but it is not a clone !).'
in terms of the problems with access and math, yes i've had serious problems too.
if eclipse is the gold standard, our standards are too low.
the possiblilties are endless!
firefox 4 firefox 5 firefox 6 ...
honest thought, not meant to offend.
open source ide gambas reaches 3.0  more login open source ide gambas
i'm a big fan of gambas.
it causes one to do bad things.
basic was a great first language and is still useful in teaching simple programming constructs.
every "killer" feature i've seen an eclipse developer mention is also available in netbeans.
eclipse warnings are useless.
because it really is that ugly!
i have seen lots of toy/pet projects but noting major.
that is absolutely inexcusable on microsoft's part but it is not a problem of basic.
tho the latter isnt free )
it breaks things up into little tiny lines and wraps things way too much.
drawing on screen was easy, syntax was easy and reading from input was easy.
the component style of programming does have lots of advantages.
nickname: password:public terminal 100 of 137 comments loaded twitter facebookopensource programming developers nickname: password:public terminal the fine print: the following comments are owned by whoever posted them.
depends which version of basic we're talking about.
i don't understand why people think eclipse is so awesome.
how is it lightwieght by the way?
i've had a look at gambas3 just now.
atari basic had easy to use graphics it has the most disgusting website ever.
and for our enterprise-y customers, there's prozilla, to manhattan, and all the way up to rushmore.
powershell is like perl had an affair with bash, and didn't tell her husband, dos.
(admittedly, that was over a decade ago, and my "standard forth" was fig-forth.
[wikipedia.org], which went through several version changes, adding new features over time.
i think forths are amazing at new primitives.
share twitter facebook i think there is some truth in what you say, but i've tried to use good practices in languages not built for it.
the original language (and first historical version) is dartmouth basic
the component style of programming is extremely powerful - particularly when you can call upon very flexible and high level office components.