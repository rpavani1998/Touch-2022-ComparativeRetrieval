at the same time i was working on a proof of concept to make the eclipse 4 application platform using javafx as a ui-library instead ofswt, and so i had to edit javafx specific css-files and missed an editor for the vendor extensions.
the e(fx)clipse code will be developed outside eclipse.org on my personal github repository.
tom: the target audience of the tooling part are naturally all developers who use eclipse today to develop all kinds of java-applications (e.g. wtp, virgo-tooling, ...) and don't want to switch to another ide to author their javafx-uis, which would contradict the idea of an ide a bit.
because javafx 2.0 applications can be authored with a mixture of java (or any other jvm-language) and css, and eclipse provides excellent java-tooling out of the box, the most important missing feature is a css-editor who understands the css-extension used by javafx 2.0.
at first i didn't start with what i later called e(fx)clipse but with the target to teach myself how i can create a dsl using thextext 2.0 framework released as part of eclipse indigo, and was searching for a medium complex problem with a practical relevance.
applications using the eclipse ide, so that developers currently using eclipse as their primary ide do not have to switch to e.g. netbeans to get tooling support when they want to develop applications using this new ui-toolkit.
tom is cofounder and ceo of a software company named bestsolution.at located in tyrol, austria, europe which provides consulting as well as contract services on eclipse technologies.
he's a regular speaker at eclipse and java related conferences and events.
because javafx 2.0 applications can be authored with a mixture of java (or any other jvm-language) and css, and eclipse provides excellent java-tooling out of the box, the most important missing feature is a css-editor who understands the css-extension used by javafx 2.0.
from a project organization point of view: i currently plan to move the core css-editor codebase to the e4 project because eclipse 4.x application developers currently face the same problem javafx devs do in eclipse: they'll have to author css-files with vendor specific extensions but have no tooling.
tooling it makes sense to move the core over to eclipse.org and proceed with the development of the core there.
tooling it makes sense to move the core over to eclipse.org and proceed with the development of the core there.
at first i didn't start with what i later called e(fx)clipse but with the target to teach myself how i can create a dsl using thextext 2.0 framework released as part of eclipse indigo, and was searching for a medium complex problem with a practical relevance.
the target audience of the runtime framework are developers who want to write modular javafx applications using a modern software architecture including osgi, dependency injection and central application model.
the idea is to leverage the runtime platform used by eclipse 4.1 named "eclipse 4 application platform" to provide such a runtime layer.
another interesting fact is that i don't want e(fx)clipse to stop on the tooling front but also provide a runtime framework which supports developers writing medium to big modular javafx applications.
i've already shown in proof of concept implementations that the runtime platform used by eclipse 4.1 can be used by none swt-ui applications, so technically it is possible.
the target audience of the runtime framework are developers who want to write modular javafx applications using a modern software architecture including osgi, dependency injection and central application model.
it would require a big investment because - at least i - would have to make myself familiar with the windowbuilder codebase.
ide 7.1.1 is here, quick to support … eclipse polarsys interview series - thales' benoit … eclipse browser-based ide eclipse orion gets 0.4 … new e(fx)clipse project eclipse tooling for javafx project tom schindl tom is cofounder and ceo of a software company named bestsolution.at located in tyrol, austria, europe which provides consulting as well as contract services on eclipse technologies.
i think this bit of history is important when proceeding to talk about e(fx)clipse and what the future holds for it, because there's currently no commercial, or whatever, hidden agenda.
tom: the only real feature the 0.0.1 release provides is an css-editor which currently provides, besides the default css 2.1 attributes, those defined by javafx.
but i don't have problems proceeding with it in my spare time because it provides enough technical fun that i'll keep going.
the idea is to leverage the runtime platform used by eclipse 4.1 named "eclipse 4 application platform" to provide such a runtime layer.
it was a fortunate coincidence because now i had a practical use case for teaching myself a dsl.
as far as i know there's no such framework available as of now, and it simply makes sense to leverage this solid application framework outside the eclipse sdk project, instead of reinventing and reintegrating those technologies.
another interesting idea would be to develop a dsl using xtext to author javafx applications, together with the xbase and xtend2 introduced with xtext 2.0, this could lead to slick dsl integrated tightly into eclipse and java.
anyways, what do i think e(fx)clipse is, and what could it provide: e(fx)clipse's main target is to provide tooling to author javafx 2.0 applications using the eclipse ide, so that developers currently using eclipse as their primary ide do not have to switch to e.g. netbeans to get tooling support when they want to develop applications using this new ui-toolkit.
it was a fortunate coincidence because now i had a practical use case for teaching myself a dsl.
new java spec request for social media api java first version of groovyfx arrives java netbeans
i think this bit of history is important when proceeding to talk about e(fx)clipse and what the future holds for it, because there's currently no commercial, or whatever, hidden agenda.
from a project organization point of view: i currently plan to move the core css-editor codebase to the e4 project because eclipse 4.x application developers currently face the same problem javafx devs do in eclipse: they'll have to author css-files with vendor specific extensions but have no tooling.
it would require a big investment because - at least i - would have to make myself familiar with the windowbuilder codebase.
tom: from a feature point of view: 0.0.2: will bring better attribute value proposal support 0.0.3: will bring validation support, improved outline view 0.0.4: will focus on e(fx)clipse runtime on top of the "eclipse 4 application platform" (the current biggest problem here is javafx itself because it is not designed with strong modularity, as defined by osgi, in mind) out of scope for now is e.g. a wysiwyg-editor, which could be built in theory on top of windowbuilder.
at the same time i was working on a proof of concept to make the eclipse 4 application platform using javafx as a ui-library instead ofswt, and so i had to edit javafx specific css-files and missed an editor for the vendor extensions.
tom: the target audience of the tooling part are naturally all developers who use eclipse today to develop all kinds of java-applications (e.g. wtp, virgo-tooling, ...) and don't want to switch to another ide to author their javafx-uis, which would contradict the idea of an ide a bit.
tom: from a feature point of view: 0.0.2: will bring better attribute value proposal support 0.0.3: will bring validation support, improved outline view 0.0.4: will focus on e(fx)clipse runtime on top of the "eclipse 4 application platform" (the current biggest problem here is javafx itself because it is not designed with strong modularity, as defined by osgi, in mind) out of scope for now is e.g. a wysiwyg-editor, which could be built in theory on top of windowbuilder.
as far as i know there's no such framework available as of now, and it simply makes sense to leverage this solid application framework outside the eclipse sdk project, instead of reinventing and reintegrating those technologies.
the e(fx)clipse code will be developed outside eclipse.org on my personal github repository.
tom: the only real feature the 0.0.1 release provides is an css-editor which currently provides, besides the default css 2.1 attributes, those defined by javafx.
i've already shown in proof of concept implementations that the runtime platform used by eclipse 4.1 can be used by none swt-ui applications, so technically it is possible.
another interesting idea would be to develop a dsl using xtext to author javafx applications, together with the xbase and xtend2 introduced with xtext 2.0, this could lead to slick dsl integrated tightly into eclipse and java.
but i don't have problems proceeding with it in my spare time because it provides enough technical fun
another interesting fact is that i don't want e(fx)clipse to stop on the tooling front but also provide a runtime framework which supports developers writing medium to big modular javafx applications.