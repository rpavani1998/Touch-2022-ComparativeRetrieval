in some ways the component approach fits in well with the characteristics of basic, i just d i was saying that a basic is cheap to implement.
anyway, yes i agree an lisp is easier to learn.
no new comments can be posted.
that's a good way to say it, you want to use a basic because you are going to need create a derivative language which means you can't just pull in a library from a preexisting language.
that is where individual programmers pick up and are encouraged toward good/bad practices.
the break; statement also does a goto to the next instruction after the enclosing set of statements (switch, for, whatever).
"gold" is our 3rd-lowest level.
i am disappointed that html and css after all this time still lets you do that, cause the result becomes "looks good for me, looks shit for you" pages.
(n.b.: i don't consider lazarus to be a good fit, and it would need to handle unicode strings.
when writing java code, one would assume that apache axis 2 projects would be supported with the latest web project type.
intellij, netbeans, hell even visual studio are more appealing.
languages also come with communities that have cultures that reinforce certain practices.
you know what... it worked first time and was dead-fucking easy to get a gui running.
quick - someone tell the writers of csi so they can now ""whip up a gooey in gambas so they can track the killers' ip address [youtube.com]" ... or something equally zombified.
without javascript enabled, you might want toturn on classic discussion system in your preferences instead.
we are not responsible for them in any way.
sort of like "professional" - it's really for amateurs.
source formatting in eclipse is terrible.
everybody likes a cute character.
would like to have a true "gui ide" rad tool for python too.
most complaints i hear about netbeans, visual studio, etc. are for very old versions.
people get so used to having yellow lines on the side, they don't take any warnings seriously.
eclipse wasn't written with swing and requires swt which means that you can only run it on platforms that swt has been ported on.
i suppose you also fondly remember running with scissors and poking eyes out with sticks.
i find it to be incredibly slow, bulky, and difficult to use for even standard tasks.
easy enough language that got me interested in programming and provided me instant fun.
doubt is a pain too lonely to know that faith is his twin brother.
open source ide gambas reaches 3.0 137 posted by timothy on saturday december 31, @11:28am from the that's-ok-i've-reached-37.0 dept.
you can't switch without recreating your whole project.
the reason is that ide technology makes heavy use of static language features.
though i haven't used it in a few years it is a great way to quickly put together graphical applications.
depending on your font, font size and display dpi, that might make it hard to read, yes.
they weren't problems in basic they were problems in the underlying old versions of the c/c++ math libraries that had been compiled into those apps that the controller languages called.
if i write abc app, abc doesn't have any hooks into python.
python out of the box doesn't allow me to manipulate abc's data structures, libpython doesn't let me do that.
you could get down and dirty with peek&poke statements and talk to hardware directly.
while it may sound lazy, drag and drop interface creation and good remote debugging speeds development time, even for professionals.
many developers that would code infinite circles aeound you know what they are doing.
i was just replying to jbolden who said writing your own python interpreter is hard.
it was a better fit for early micros than today's machines however.
it just makes it hard to read.
everything had to be saved in one directory, that of the project files.
the last time i tried it, you could not organize your code into folders.
because remember the idea was a scripting language for a new application.
it shouldn't be possible i'm a big fan of gambas.
share twitter facebook it wont work on ms systems, otherwise it could be a good vb alternative, otherwise like i stated in a previous post why bother learning it if your never going to be able to use it on other systems i already know a half dozen useless programming systems, not wasting my time on yet another it looks like most of the example applications were written by native spanish speakers, have comments in spanish, etc.
it still looks like an ibm product.
there are python ides, but in general there aren't good ide for any of the dynamic languages.
parent share twitter facebook you think having the real daddy's regex would have been such a giveaway.
i can just link in some library and go.
(okay, i admit it - i switched to jedit recently, but still, for a lot of code, eclipse is massive overkill).
i actually found forth easier to wrap my head around than lisp.
because it does not let you create folders.
the error here is the typical web design 101 blunder of combining scalable and fixed size elements.
when they moved to the eclipse platform, it ended being a terrible product.
i thought that, perhaps, the zend people just didn't do a great job building on top of eclipse and i decided to go to eclipse directly.
the few things i can't do in netbeans are third party add-ons that haven't been tested well and don't integrate.
just because you can it doesn't mean you should its the main reason i have never bothered with this, it looks like everything i would want except windows support ... which though i run linux on the desktop most of the world does not its really not in my interest to sit down and learn a whole new system if i have to toss it out of the window the second i'm on a ms os trust me, i am ctarded, you dont want my help is it required that open source projects have cute characters?
it requires some more explicit management in its project files (as they are just qmake projects), but i've found that i prefer this to the endless point-and-click mazes that vs subjects me to.
devs can produce ok uis provided that they follow the decades-old rule that form should follow function.
i have to worry about all sorts of things like python security because it is now running inside my app, and all the features of this embedded libpython and how they interact with features of my api.
i wasn't saying they should use python, i'm saying that if they did want to use it - like hithere suggested - there would be no need to write a brand new interpreter, since there's libpython.
lisps are by far the easiest interpreters to write.
for example in a shell you want files to be primitive objects, while in most other languages you wouldn't.
to say it's basic is a bit like a canoe with an outrigger is to canoeing.
anyone who would use eclipse over vs just doesn't know what he is doing.
the structures of the language have more than a minimal influence.
the purpose of the control language is to manipulate the internal data structures of abc app.
you want your application's data objects to be the primitives in your new derivative language.
pe remember the point is an embedded language so it won't be an ansi forth, it must different because it is going to be using the application objects as primitives.
don't forget plan9's glenda, which pretty much out-cutes all of those.
things like wizards don't behave properly.
it would depend on the fit, and i don't think that cworuld fit.
you also can't generate a client only from an axis 2 project.
i have found qt creator much easier to work with than visual studio.
though i haven't used it in a few years it is a great way toquickly put together graphical applications.
it has the most disgusting website ever.
i happen to think that component style programming could be quite useful, but i don't find basic an acceptable controller language.
last time i installed it took two hours.
forth actually *is* fully post-fix, but the mingling of compile-time vs. execution time can make that difficult to see.
any code i have seen in those languages, h qt designer is quite good.
python and ruby are orders of magnitude more difficult to write interpreters for.
it has pretty good help files, simple (basic) syntax and is a great way for beginners to learn and for more experienced programmers to throw together simple apps in a hurry.
especially since you can use xml syntax.
and from my mainframe days, i'd say that cics is almost a language of its own too.
the lower dpi and smaller font you have, the worse it's going to look.
this causes bugs, incompatibilities and ui integration problems.
eclipse is too modular.
please note th basics are good to write because 1) syntax is well defined and thus lexiconical interpretation is easy.
it's handy enough on its own for c/c++ projects, independent of whether you are using qt or not, but it's extremely helpful for developing applications that use qt as it integrates very well with qt designer.
no disrespect to anyone, i'm serious.
i do a lot of php work.
eclipse has gotten better, but it still suffers from the refresh problem.
it doesn't poll for changes in source files frequently enough and if you dare add a file outside the ide, you have to manually refresh the view to see it.
gambas is component-based, so check out the list for an idea of what you can do with it."
it can't do anything on it's own and the hundreds of plugins aren't tested with each other.
i used to use the old, pre-eclipse version of zend studio which was pretty good.
amos for amiga was even better, it had some multimedia extensions (playing sound, sprites, bobs (blitter objects - like a sprite, but could be the size of a whole screen), mouse zones (for fast mouse position testing for buttons) and even special instruction which waited for vertical refresh.
the dialects available on micros didn't necessarily implement all the features of dartmouth basic, for example matrix operations were missing from gw-basic or commodore basic, iirc.
per theirweb site, 'gambas is a free development environment based on a basic interpreter with object extensions, a bit like visual basic (but it is not a clone !).'
in terms of the problems with access and math, yes i've had serious problems too.
if eclipse is the gold standard, our standards are too low.
open source ide gambas reaches 3.0 more login open source ide gambas
i'm a big fan of gambas.
it causes one to do bad things.
basic was a great first language and is still useful in teaching simple programming constructs.
every "killer" feature i've seen an eclipse developer mention is also available in netbeans.
eclipse warnings are useless.
i have seen lots of toy/pet projects but noting major.
it breaks things up into little tiny lines and wraps things way too much.
drawing on screen was easy, syntax was easy and reading from input was easy.
the component style of programming does have lots of advantages.
nickname: password:public terminal 100 of 137 comments loaded twitter facebookopensource programming developers nickname: password:public terminal the fine print: the following comments are owned by whoever posted them.
atari basic had easy to use graphics it has the most disgusting website ever.
powershell is like perl had an affair with bash, and didn't tell her husband, dos.
i think forths are amazing at new primitives.
share twitter facebook i think there is some truth in what you say, but i've tried to use good practices in languages not built for it.
the component style of programming is extremely powerful - particularly when you can call upon very flexible and high level office components.