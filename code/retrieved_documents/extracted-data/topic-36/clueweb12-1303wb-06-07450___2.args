configure the project for eclipse - start eclipse.
in next section leave the countries as configured for this server.
there is a spring plugin for netbeans - the ides are similar, although we consider netbeans as more intuitive and less annoying prerequisities - jdk5 or jdk6 - netbeans 6.0 m10 or higher (because of the spring plugin) setup - install eclipse europa for java ee developers from eclipse.org - install aspectj development tools - help > software updates > find and install > search for new features to install > europa discovery site > finish.
in this demo we're going to use the spring countries sample application that ships with the spring framework to demonstrate how easy it is for eclipse and netbeans to work side-by-side.
these tasks were taken care of using the regular project type but need to be defined using the free-form project type.
show the eclipse keybindings settings and emacs keybindings.
do the same demo as when the application was running from eclipse to show that pdf and xls integration works.
- click finish - verify that eclipse detected the libraries (countries > libraries > web app libraries)
click finish verify that eclipse detected the libraries (countries > libraries > web app libraries)
(note, netbeans automatically detects the proper content directory name.)
the wizard will complain that there is already a build directory in the application.
the migration to netbeans was painless this time, but mention that this might not be the case if the application would have a non-standard project structure or use custom build scripts.
also, trying to delete the build directory from eclipse only deletes the classes, not the actually build directory.
show the http monitor and explain it's usage.
confirm stupid dialog about syncing web.xml, you'll see it more often since now.
show the project directory in file manager.
- show the http monitor and explain it's usage.
eclipse doesn't appear to have a pure clean option - the eclipse clean also rebuilds the project.
- show the project directory in file manager.
mention that this is a great feature in netbeans for monitoring requests and responses.
- mention that there are other features available, but we don't have time to show them, so developers should check them out on the spring module project page.
spring module features show basic features of the spring module: go to the project properties and frameworks.
the migration to netbeans was painless this time, but mention that this might not be the case if the application would have a non-standard project structure or use custom build scripts.
then free-form project might wokr better.
these files can coexist in one project directory.
uncheck use default and set the project contents directory to: ${spring.root}/samples/countries/ target runtime: apache tomcat v6.0 click next and next to get to the web content page set the content directory to war, which matches the sample application's content directory.
otherwise the spring example wouldn't work.
configure the project for eclipse start eclipse.
type a new <bean and show code completion.
then europe discovery site > java development > aspectj development tools (ajdt) - install the spring ide by updating eclipse using the following update center (help | software updates | find and install): http://springide.org/updatesite/site.xml - configure eclipse to use the jdk instead of jre using window | preferences | java | installed jres.
show how the targets need to be mapped, and that no targets currently exist for deploy.
type a new <bean and show code completion.
also, trying to delete the build directory from eclipse only deletes the classes, not the actually build directory.
expand all nodes in the project to show the project structure in netbeans.
(note, netbeans automatically detects the proper content directory name.)
run the project to see the results.
- run the project to see the results (note, the projects are deployed to 2 different server instances - i don't know if there's a way to get them to share the same instance -- see issue114820).
choose tomcat as default and check the checkbox to always use tomcat as a server for this project.
return to the netbeans new web project with existing sources wizard.
click on pdf to generate pdf and excel to generate excel sheet.
alternatively you can set reloadable="true" in context.xml (seewhy not set reloadable="true" ?) and just refresh the browser.
in this demo we're going to use the spring countries sample application that ships with the spring framework to demonstrate how easy it is for eclipse and netbeans to work side-by-side.
- go to main in the web application and show the list of countries.
confirm stupid dialog about syncing web.xml, you'll see it more often since now.
- netbeans detects the existing build.xml and offers an alternative name, nbbuild.xml.
project sharing we're not too happy with our teammates new application name.
eclipse doesn't appear to have a pure clean option - the eclipse clean also rebuilds the project.
switch to the java ee perspective and add it via the servers tab.
- on the existing sources and libraries page, note netbeans detected all of the relevant folders (in eclipse we had to replace "webcontent" with "war") - click finish.
in next section leave the countries as configured for this server.
on the existing sources and libraries page, note netbeans detected all of the relevant folders (in eclipse we had to replace "webcontent" with "war")
- expand all nodes in the project to show the project structure in netbeans.
demo cleanup undeploy the countries project from tomcat.
this demo script is part of the netbeans world tour 2008 session #2, using netbeans for your existing projects.
mention that this is a great feature in netbeans for monitoring requests and responses.
free-form project demo the point of this demo is to show the additional complexity imposed by choosing to use free-form projects.
configure the project for netbeans - create a new web application with existing sources.
explain that .classpath and .project files are from eclipse.
free-form project demo the point of this demo is to show the additional complexity imposed by choosing to use free-form projects.
choose tomcat as default and check the checkbox to always use tomcat as a server for this project.
in the case where the project was checked out from a source repository, the build directory would not be there to begin with.
this is important as the sample application already has one and we dont' want to overwrite it.
configure the project for netbeans create a new web application with existing sources.
alternatively you can set reloadable="true" in context.xml (seewhy not set reloadable="true" ?) and just refresh the browser.
show that spring 2.0 was added as framework.
if you use netbeans' delete project option, it deletes the web-inf/lib directory, so you'll have to set that up again.
- uncheck use default and set the project contents directory to: ${spring.root}/samples/countries/ - target runtime: apache tomcat v6.0 - click next and next to get to the web content page - set the content directory to war, which matches the sample application's content directory.
show that spring 2.0 was added as framework.
if not, try to investigate the error and maybe someone from the audience can help you :) go to main in the web application and show the list of countries.
in the case where the project was checked out from a source repository, the build directory would not be there to begin with.
spring module features show basic features of the spring module: - go to the project properties and frameworks.
eclipse will detect that message properties has been changed and prompt you to reload the file.
run the project to see the results (note, the projects are deployed to 2 different server instances - i don't know if there's a way to get them to share the same instance -- see issue114820).
explain that .classpath and .project files are from eclipse.
- delete the the ${spring.root}/samples/countries/.project file, otherwise, eclipse will not let you create a project against this directory again (the delete project option only deletes the project from the workspace - not the project settings).
eclipse will detect that message properties has been changed and prompt you to reload the file.
- since eclipse comes with no application server, set up netbeans' tomcat in eclipse :).
the wizard will complain that there is already a build directory in the application.
this is important as the sample application already has one and we dont' want to overwrite it.
these tasks were taken care of using the regular project type but need to be defined using the free-form project type.
netbeans detects the existing build.xml and offers an alternative name, nbbuild.xml.
- delete the countries project, but leave the sources - create a new project using existing ant script (free-form) - show how the targets need to be mapped, and that no targets currently exist for deploy.
click on pdf to generate pdf and excel to generate excel sheet.
no annoying messages this time :) do the same demo as when the application was running from eclipse to show that pdf and xls integration works.
if you use netbeans' delete project option, it deletes the web-inf/lib directory, so you'll have to set that up again.
delete the the ${spring.root}/samples/countries/.project file, otherwise, eclipse will not let you create a project against this directory again (the delete project option only deletes the project from the workspace - not the project settings).
delete the countries project, but leave the sources create a new project using existing ant script (free-form)
mention that there are other features available, but we don't have time to show them, so developers should check them out on the spring module project page.
