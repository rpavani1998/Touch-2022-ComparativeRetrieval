i packaged up a modified version of the netbeans.org build files (which are quite complex), and called it the ‘cluster build harness’.
plus they struggled with cultural barrier when developing a site.
well, tomcat is built in.
“the completely revamped support for netbeans module development, alone is worthy of a major version number increment…” up until 4.0, i actually preferred eclipse for developing netbeans modules.
however, we have to wait for mustang before we can attach to a running application (the way we already can with the debugger).
and you can speak the name of any city they fly to, you’re talking to our technology.
i don\’t think so, on the impression it might seem cheaper.
“eclipse has a wide lead in ide plugins because their ide and their tools for writing plugins were better…” rich at oracle openworld 05 as an aside, i think the goal of writing a plugin once for both platforms
with netbeans, nobody is helping sun.
the profiler is fantastic technology.
no doubt it has done a very good job but this approach means that netbeans doesn’t get get free publicity like eclipse does.
however sun java studio creator is perhaps the only major product built over netbeans.
also, their web services support is second to none.
netbeans moving fast, could soon threaten eclipse’s leader position >> eclipse vsnetbeans >>
despite netbeans being the early bird, eclipse today seems to have got the worm.
“the completely revamped support for netbeans module development, alone is worthy of a major version number increment…” rich unger accepting his award from james gosling up until 4.0, i actually preferred eclipse for developing netbeans modules.
ide market share will drive the plugin community, not the other way around.
then they just kept adding features and wizards until creating, debugging, testing, branding, and shipping modules could all be done in a ridiculously simple fashion.
it allows you to model graphically conversations between humans and computers, and generate voicexml to implement the call flow.
eclipse has a wide lead in ide plugins because their ide was better (let’s face it, it was), and because their tools for writing plugins were better.
for example, if you’re working on a j2ee app, you don’t have to profile the whole app server, just your own code.
these days, i’m totally on netbeans (and gvim), but that’s not true of everyone on my team.
eclipse has a wide lead in ide plugins because their ide was better (let’s face it, it was), and because their tools for writing plugins were better.
you can profile pieces of your application, thereby reducing the performance impact.
i’d consider v-builder a major product it’s important to notice that bea, borland, and nokia are all working on features to help ide catch up to netbeans in the web and mobile space.
“eclipse has a wide lead in ide plugins because their ide and their tools for writing plugins were better…” as an aside, i think the goal of writing a plugin once for both platforms is a laudable goal, but for all kinds of technical and architectural reasons, won’t be fully realized.
in 4.0, the netbeans ide finally became better for developing netbeans platform modules.
personally, i think when he tries out the new collaboration modules, he’ll use netbeans more.
indicthreads >> bea, borland, nokia and to some extend oracle have all got involved in eclipse.
indicthreads >> readers can keep up with rich through his blog athttp://weblogs.java.net/blog/richunger/ related: >>
on stage in front of thousands of dbas the idea folks, though, have got it together.
“most desktop java apps are still built without using a client-side framework at all.
indicthreads >> bea, borland, nokia and to some extend oracle have all got involved in eclipse.
also, the module-writing support includes some fantastic wizards that make writing something like a hibernate plugin pretty simple, so i think we’ll be seeing those kinds of modules in the near future.
however, we have to wait for mustang before we can attach to a running application (the way we already can with the debugger).
that’s extremely compelling to a much smaller slice of the market, and creating a lot of loyalty around that.
the netbeans guys are continually adding new refactorings and tweaking the usability of the editor, both areas where eclipse has historically had higher marks.
“netbeans is less strong when it comes to supporting some of the more popular oss libraries…” rich moonlights as a dancer in a swing dance performance troupe
i packaged up a modified version of the netbeans.org build files (which are quite complex), and called it the ‘cluster build harness’.
they just tend to do it themselves, rather than enlisting partners to work with them.
it looks to me like most desktop java apps are still built without using a client-side framework at all.
it looks to me like most desktop java apps are still built without using a client-side framework at all.
to me, the success of the eclipse rcp and the netbeans platform can be measured by how many apps are written on top of them that are not ides.
it allows you to model graphically conversations between humans and computers, and generate voicexml to implement the call flow.
they’ve got a built-in tomcat and derby db that let you get up and running extremely quickly.
“if you must use jsr blessed libraries, you’ll be a lot happier with netbeans…” netbeans is less strong when it comes to supporting some of the more popular oss libraries out there.
i think the main reason it’s a separate product right now is that it requires jdk 5.0, and the core netbeans project must remain 1.4-compliant.
the netbeans guys are continually adding new refactorings and tweaking the usability of the editor, both areas where eclipse has historically had higher marks.
well, from my perspective, the completely revamped support for module development alone is worthy of a major version number increment.
netbeans moving fast, could soon threaten eclipse’s leader position >> eclipse vsnetbeans >>
is a laudable goal, but for all kinds of technical and architectural reasons, won’t be fully realized.
netbeans software day for his valuable contribution to the netbeans platform.
v-builder is our development tool for creating these types of speech applications.
i guess it depends on your perspective, but i’d consider v-builder a major product it’s important to notice that bea, borland, and nokia are all working on features to help ide catch up to netbeans in the web and mobile space.
so long as they can stay ahead of eclipse and netbeans in the few areas where they really shine, and thereby capture a consistent (if small) market share, i think they can still have a profitable concern.
i feel the same way about sun’s enterpise java studio.
eclipse is working on a visual editor to compete with matisse, and the nokia guys are working on matching the feature set of the mobility pack.
i think the hibernate support is currently a bit better with the appropriate eclipse plugins.
rich unger >> the worm that i think eclipse does have is the community of ide plugin developers, which, as i said, is distinct from the platform market.
nice guys, just couldn\’t get the job done.
also, the module-writing support includes some fantastic wizards that make writing something like a hibernate plugin pretty simple, so i think we’ll be seeing those kinds of modules in the near future.
it will be as natural as debugging, and a whole new class of software errors will become a whole lot easier to address.
they are quick, but the communication is poor which caused delays.
eclipse is working on a visual editor to compete with matisse, and the nokia guys are working on matching the feature set of the mobility pack.
in 4.0, the netbeans ide finally became better for developing netbeans platform modules.
jboss and weblogic integrations are finished now, and supposedly websphere is on the way.
indicthreads >> readers can keep up with rich through his blog athttp://weblogs.java.net/blog/richunger/ related: >>
more and more i hear people interested in writing ide plugins that will work on both eclipse and netbeans.
more and more i hear people interested in writing ide plugins that will work on both eclipse and netbeans.
i think that’s where profiling is now, and i think the jfluid profiler will knock down such barriers.
“i think it will come down to swing vs. swt…” in the end, assuming people buy into the argument that such a platform is indeed helpful, then i think it will come down to swing vs. swt, and the libraries that are available for doing things like data binding, graphing, visualization, charting, etc. indicthreads >>
to me, the success of the eclipse rcp and the netbeans platform can be measured by how many apps are written on top of them that are not ides.
if you’re the type of developer who uses ejb’s, and must use jsr-blessed libraries (jsf over tapestry, for example), then you’ll be a lot happier with netbeans.
i feel the same way about sun’s enterpise java studio.
well, from my perspective, the completely revamped support for module development alone is worthy of a major version number increment.
i think the hibernate support is currently a bit better with the appropriate eclipse plugins.
it was always a lot of hacked up build scripts, difficult to test, difficult to debug, and difficult to deploy.
personally, i think when he tries out the new collaboration modules, he’ll use netbeans more.
also, their web services support is second to none.
they’re creating a product that’s extremely compelling to a much smaller slice of the market, and creating a lot of loyalty around that.
thanks for your information:) had a really bas experience when we were outsourcing.
“people will always be asking for eclipse vs netbeans comparisons because both keep leapfrogging each other…” people will always be asking for such comparisons, because eclipse and netbeans keep leapfrogging each other.
then they just kept adding features and wizards until creating, debugging, testing, branding, and shipping modules could all be done in a ridiculously simple fashion.
“netbeans is integrated with tomcat, jboss, weblogic and sun’s application server.
just having decent xml syntax completion should be adequate.
just having decent xml syntax completion should be adequate.
there’s a guy on my team who lives in hawaii, and this ought to make codewalks much easier.
we won’t think twice about profiling our applications.
the field is still wide open.
they’ve got a built-in tomcat and derby db that let you get up and running extremely quickly.
they just tend to do it themselves, rather than enlisting partners to work with them.
this allowed folks to build applications on the platform (like v-builder), but it was not officially supported.
“most desktop java apps are still built without using a client-side framework at all.
i feel the reason why netbeans is not as popular as eclipse is that sun has tried to do everything on it’s own.
indicthreads >> netbeans is integrated with sun’s application server however which other servers can one easily work with through netbeans?
“if you must use jsr blessed libraries, you’ll be a lot happier with netbeans…” netbeans is less strong when it comes to supporting some of the more popular oss libraries out there.
“i think it will come down to swing vs. swt…” in the end, assuming people buy into the argument that such a platform is indeed helpful, then i think it will come down to swing vs. swt, and the libraries that are available for doing things like data binding, graphing, visualization, charting, etc. indicthreads >>
you had to overcome in the severity of a bug before you went through the effort of using a debugger.
v-builder is our development tool for creating these types of speech applications.
it’s just too easy not to…” the one downside is that it required changes to the jre.
thanks rich for your time and all the info about netbeans and the java ide market.
it was always a lot of hacked up build scripts, difficult to test, difficult to debug, and difficult to deploy.
despite netbeans being the early bird, eclipse today seems to have got the worm.
and you can speak the name of any city they fly to, you’re talking to our technology.
netbeans is obviously easier to use and has more features out of the box.
these days, i’m totally on netbeans (and gvim), but that’s not true of everyone on my team.
the http monitor window helps you figure out exactly what’s going on in your app.
just the eclipse website is so confusing that you are never sure if you have downloaded what you were really looking for.
you can profile pieces of your application, thereby reducing the performance impact.
i think the main reason it’s a separate product right now is that it requires jdk 5.0, and the core netbeans project must remain 1.4-compliant.
all the back and forth made outsourcing unreliable.
but it essence it cost the company more.
indicthreads >> netbeans is integrated with sun’s application server however which other servers can one easily work with through netbeans?
for example, if you’re working on a j2ee app, you don’t have to profile the whole app server, just your own code.
so long as they can stay ahead of eclipse and netbeans in the few areas where they really shine, and thereby capture a consistent (if small) market share, i think they can still have a profitable concern.
ide market share will drive the plugin community, not the other way around.
this allowed folks to build applications on the platform (like v-builder), but it was not officially supported.
if you’re the type of developer who uses ejb’s, and must use jsr-blessed libraries (jsf over tapestry, for example), then you’ll be a lot happier with netbeans.
thanks rich for your time and all the info about netbeans and the java ide market.
ibm does not have to market eclipse because nokia, bea, etc are doing the marketing on ibm’s behalf.
“people will always be asking for eclipse vs netbeans comparisons because both keep leapfrogging each other…” people will always be asking for such comparisons, because eclipse and netbeans keep leapfrogging each other.
however sun java studio creator is perhaps the only major product built over netbeans.
jsf and struts support developer collaboration modules: i haven’t tried these out yet, but the demos i’ve seen are very encouraging.
“netbeans is integrated with tomcat, jboss, weblogic and sun’s application server.
rich unger >> the worm that i think eclipse does have is the community of ide plugin developers, which, as i said, is distinct from the platform market.
jboss and weblogic integrations are finished now, and supposedly websphere is on the way.
the http monitor window helps you figure out exactly what’s going on in your app.
they’ve finally added nice struts support.
