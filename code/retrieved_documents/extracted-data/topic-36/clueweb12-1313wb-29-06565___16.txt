i packaged up a modified version of the netbeans.org build files (which are quite complex), and called it the ‘cluster build harness’.
the idea folks, though, have got it together.
plus they struggled with cultural barrier when developing a site.
well, tomcat is built in.
jfluid profiler: i’d have to put this as a close  second to module development support in my personal list.
in what state is  the profiler today and will the profiler stay an independent product or will it  become a part of netbeans at a later state?
“the completely revamped support for netbeans module development, alone is worthy of a major version number increment…” up until 4.0, i actually preferred eclipse for developing netbeans modules.
this is certainly something they’re addressing in netbeans, though.
considering the wide range of features of  netbeans and eclipse and also that jdeveloper recently became free, do you  think the days of the commercial java ide are over / numbered?
however, we have to wait for mustang  before we can attach to a running application (the way we already can with the  debugger).
it’s just too easy not to.
and you  can speak the name of any city they fly to, you’re talking to our  technology.
i don\’t think so, on the impression it might seem cheaper.
that sounds an awful lot like asking  me to provide a comparison
in what state is the profiler today and will the profiler stay an independent product or will it become a part of netbeans at a later state?
“eclipse has a wide lead in ide plugins because their ide and their  tools for writing plugins were better…” rich at oracle openworld 05 as an aside, i think the goal of writing a plugin once for both platforms
do you see things changing in the near future?
could you please introduce yourself?
that’s a good indication that netbeans has  finally found a broader audience.
with netbeans, nobody is helping sun.
when to  stick with eclipse /netbeans?
i’ve been writing modules on top of the  platform since netbeans 3.3, and it’s never been particularly easy until  now.
most of those  changes made it into jdk 5.0 update 4.
the profiler is fantastic technology.
no doubt it has done a very good job but this approach means that netbeans doesn’t get get free publicity like eclipse does.
“matisse gui builder works the way you always thought gui builders should…” other than the module development support, major new features in 5.0 include: indicthreads >>
he was honored at this year’s
“it’s no longer a question of should i profile my app?
however sun java studio creator is perhaps the only major product built over netbeans.
netbeans profiler is a recent  development that netbeans seems to be pushing in a big way.
also, their web  services support is second to none.
netbeans moving fast, could  soon threaten eclipse’s leader position >>  eclipse vsnetbeans >>
the field is still wide open…” i don’t think this has much to do with the platform, however.
despite netbeans being the early bird, eclipse today seems to have got the worm.
nuance is in the business of  network-based speech recognition.
“borland’s days in the ide space are numbered…” “sun’s enterpise java studio is basically netbeans with a uml modeler…”
“the completely revamped support for netbeans module development,  alone is worthy of a major version number increment…” rich unger accepting his award from james gosling up until 4.0, i actually preferred eclipse for developing netbeans modules.
the great thing about both is that they’re free!
ide market share will drive the plugin community, not the other way around.
netbeans certainly has  been playing their own share of catch-up.
it is implemented on top of the netbeans platform, and you can see a screenshot at http://platform.netbeans.org indicthreads >> netbeans ide recently jumped from version 4.1 to 5.0.
then they just kept adding features and wizards until creating, debugging, testing, branding, and shipping modules could all be done in a ridiculously simple fashion.
they’re creating a product
it allows you to model graphically conversations between humans and computers, and generate voicexml to implement the call flow.
eclipse has a wide lead in ide plugins because their ide was better (let’s face it, it was), and because their tools for writing plugins were better.
“netbeans profiler is fantastic technology…”
for example, if you’re working on a j2ee app, you don’t have to profile the whole app server, just your own code.
nuance is in the business of network-based speech recognition.
in 5.0, jesse glick et. al. took the idea of the cluster build harness, and  reworked it so it could have first-class support in the ide.
these days, i’m totally on netbeans (and gvim), but that’s not true  of everyone on my team.
eclipse has a wide lead in ide plugins because their  ide was better (let’s face it, it was), and because their tools for  writing plugins were better.
that’s something you can charge  for.
netbeans is  a long way from dead!
you can profile  pieces of your application, thereby reducing the performance impact.
i’d consider v-builder a major product it’s important to notice that bea, borland, and  nokia are all working on features to help ide catch up to netbeans in the web  and mobile space.
“eclipse has a wide lead in ide plugins because their ide and their tools for writing plugins were better…” as an aside, i think the goal of writing a plugin once for both platforms is a laudable goal, but for all kinds of technical and architectural reasons, won’t be fully realized.
in 4.0, the netbeans ide finally became better for developing netbeans platform modules.
personally, i think when he tries out the new collaboration modules, he’ll use netbeans more.
in 5.0, jesse glick et. al. took the idea of the cluster build harness, and reworked it so it could have first-class support in the ide.
i think borland’s days in the ide space are numbered.
indicthreads >> bea, borland, nokia and to some extend oracle have all got involved in eclipse.
indicthreads >> readers can keep up with rich through his blog athttp://weblogs.java.net/blog/richunger/ related: >>
he shares his views on plugin development for the  netbeans platform and on eclipse.
rich unger is currently on the netbeans governance board and has been a  contributor to netbeans for several years.
i’m hoping for clearcase, myself,  though no word on that yet.
they’re finally hitting the  point where it’s no longer a question of should i profile my app?
on stage in front of  thousands of dbas the idea folks, though, have got it together.
“most desktop java apps are still built without using a client-side  framework at all.
indicthreads >> bea, borland, nokia and to some extend oracle  have all got involved in eclipse.
>> is sun taking the microsoft way to capturing the java ide market?
also, the module-writing support includes some fantastic wizards that make writing something like a hibernate plugin pretty simple, so i think we’ll be seeing those kinds of modules in the near future.
good luck with indicthreads.
however, we have to wait for mustang before we can attach to a running application (the way we already can with the debugger).
and, they’re both pretty easy to get up and running  with your current codebase.
that’s extremely compelling to a much smaller slice of the market, and  creating a lot of loyalty around that.
the netbeans guys are continually adding new  refactorings and tweaking the usability of the editor, both areas where eclipse  has historically had higher marks.
“netbeans is less strong when it comes to supporting some of the more  popular oss libraries…” rich  moonlights as a dancer in a swing dance performance troupe
i  packaged up a modified version of the netbeans.org build files (which are quite  complex), and called it the ‘cluster build harness’.
they just tend to do it themselves,  rather than enlisting partners to work with them.
it looks to me like  most desktop java apps are still built without using a client-side framework at  all.
i’m a developer on the  v-builder team at nuance communications.
it looks to me like most desktop java apps are still built without using a client-side framework at all.
for example, when you call american airlines,  and the machine on the other end says what is your destination city?
to me, the success of the eclipse rcp and the netbeans platform can be measured by how many apps are written on top of them that are not ides.
it allows you to model graphically conversations between humans  and computers, and generate voicexml to implement the call flow.
netbeans certainly has been playing their own share of catch-up.
they’ve got a built-in tomcat and derby db that let you get up and running extremely quickly.
“if you must use jsr blessed libraries, you’ll be a lot happier with netbeans…” netbeans is less strong when it comes to supporting some of the more popular oss libraries out there.
i guess it depends on your  perspective, but
i think the main reason it’s a separate product right now is that it requires jdk 5.0, and the core netbeans project must remain 1.4-compliant.
that sounds an awful lot like asking me to provide a comparison
he also elaborates on why he thinks the field  is wide open for client frameworks for desktop java apps and how it could come  down to swing vs swt.
the netbeans guys are continually adding new refactorings and tweaking the usability of the editor, both areas where eclipse has historically had higher marks.
well, from my perspective, the completely revamped support for module development alone is worthy of a major version number increment.
netbeans moving fast, could soon threaten eclipse’s leader position >> eclipse vsnetbeans >>
i’ve asked on the mailing list why the profiler isn’t just a module on the update center, and the answer was something like, i don’t know.
is a laudable goal, but for all kinds of technical and architectural reasons,  won’t be fully realized.
he also elaborates on why he thinks the field is wide open for client frameworks for desktop java apps and how it could come down to swing vs swt.
for now, i’m stuck with the old source  control module.
>> when to buy an ide?
netbeans software day for his valuable contribution to the netbeans platform.
most of those changes made it into jdk 5.0 update 4.
new cvs support: a completely revamped approach to the  source control ui.
v-builder is our development tool for creating these types of speech applications.
i guess it depends on your perspective, but i’d consider v-builder a major product it’s important to notice that bea, borland, and nokia are all working on features to help ide catch up to netbeans in the web and mobile space.
so long as they can stay ahead of eclipse and netbeans in the few areas  where they really shine, and thereby capture a consistent (if small) market  share, i think they can still have a profitable concern.
maybe you’ll end up keeping them both and using them for different tasks.
i feel the same way about sun’s enterpise java studio.
eclipse is working on a visual editor to  compete with matisse, and the nokia guys are working on matching the feature  set of the mobility pack.
“writing a plugin once for both platforms (netbeans and eclipse) is a  laudable goal that won’t be fully realized…” indicthreads >> you perhaps would be pretty fed up of  providing anetbeans vs eclipse comparison.
a long time ago,  debuggers were things that were hard to configure, and so there was this hurdle
i think the hibernate support is currently a bit  better with the appropriate eclipse plugins.
the great thing about both is that  they’re free!
rich unger >> the worm that i think eclipse does  have is the community of ide plugin developers, which, as i said, is distinct  from the platform market.
he shares his views on plugin development for the netbeans platform and on eclipse.
nice guys, just couldn\’t get the job done.
also, the module-writing  support includes some fantastic wizards that make writing something like a  hibernate plugin pretty simple, so i think we’ll be seeing those kinds of  modules in the near future.
it will be as natural as debugging, and a  whole new class of software errors will become a whole lot easier to address.
they’re not targeting the whole java developer community.
they are quick, but the communication is poor which caused delays.
eclipse is working on a visual editor to compete with matisse, and the nokia guys are working on matching the feature set of the mobility pack.
i’ve asked on the mailing list why the  profiler isn’t just a module on the update center, and the answer was  something like, i don’t know.
in 4.0, the netbeans ide finally became better for developing netbeans platform  modules.
jboss and weblogic integrations are finished now, and supposedly websphere is on the way.
indicthreads >> readers can keep up with rich through his  blog athttp://weblogs.java.net/blog/richunger/ related: >>
more and more i hear people interested in writing ide plugins that will work on both eclipse and netbeans.
more and more i hear people interested in writing ide plugins that will work on  both eclipse and netbeans.
i think that’s where profiling is now, and i think  the jfluid profiler will knock down such barriers.
“borland’s days in the ide space are numbered…” “sun’s enterpise java studio is basically netbeans with a uml  modeler…”
“i think it will come down to swing vs. swt…” in the end, assuming people buy into the argument that such a platform is indeed helpful, then i think it will come down to swing vs. swt, and the libraries that are available for doing things like data binding, graphing, visualization, charting, etc. indicthreads >>
rich unger is currently on the netbeans governance board and has been a contributor to netbeans for several years.
to me,  the success of the eclipse rcp and the netbeans platform can be measured by how  many apps are written on top of them that are not ides.
if you’re the type of developer who uses  ejb’s, and must use jsr-blessed libraries (jsf over tapestry, for  example), then you’ll be a lot happier with netbeans.
i feel the same way about sun’s enterpise  java studio.
i did that for a while.
“writing a plugin once for both platforms (netbeans and eclipse) is a laudable goal that won’t be fully realized…” indicthreads >> you perhaps would be pretty fed up of providing anetbeans vs eclipse comparison.
well, from my perspective, the  completely revamped support for module development alone is worthy of a major  version number increment.
i think the hibernate support is currently a bit better with the appropriate eclipse plugins.
it was always a lot of hacked up build scripts, difficult to test,  difficult to debug, and difficult to deploy.
personally, i think when he  tries out the new collaboration modules, he’ll use netbeans more.
also, their web services support is second to none.
it’s got nothing like spindle (an eclipse plugin) for tapestry.
the hawaiian guy is an eclipse aficionado, and he continues developing netbeans modules with it.
they’re creating a product that’s extremely compelling to a much smaller slice of the market, and creating a lot of loyalty around that.
in this interview rich talks about netbeans 5.0, netbeans profiler and the changing java ide market.
indicthreads >> do you think that netbeans’ j2ee  development capabilities can today match the features of any other ide in the  market?
thanks for your information:) had a really bas experience when we were outsourcing.
when to stick with eclipse /netbeans?
i think netbeans has caught up on both counts.
“people will always be asking for eclipse vs netbeans comparisons because both keep leapfrogging each other…” people will always be asking for such comparisons, because eclipse and netbeans keep leapfrogging each other.
then they just  kept adding features and wizards until creating, debugging, testing, branding,  and shipping modules could all be done in a ridiculously simple fashion.
“netbeans is integrated with tomcat, jboss, weblogic and sun’s application server.
netbeans profiler is a recent development that netbeans seems to be pushing in a big way.
just having decent xml syntax completion should be adequate.
maybe you’ll end up  keeping them both and using them for different tasks.
just having decent xml syntax  completion should be adequate.
i’m a developer on the v-builder team at nuance communications.
spring is so simple that i think it doesn’t matter which ide you use.
websphere is on the way… “ indicthreads >>
and, they’re both pretty easy to get up and running with your current codebase.
there’s a guy on my team who lives in hawaii, and this ought to make  codewalks much easier.
we won’t think twice  about profiling our applications.
probably it will be soon.
now, i’m not knocking eclipse.
it’s got nothing like spindle (an  eclipse plugin) for tapestry.
he was honored at this year’s  netbeans software day for his valuable contribution to the netbeans platform.
i’ve been writing modules on top of the platform since netbeans 3.3, and it’s never been particularly easy until now.
the field is still wide open.
i don’t think enough people are going to see the value in their eclipse plugins.
they’ve got a built-in tomcat and  derby db that let you get up and running extremely quickly.
they just tend to do it themselves, rather than enlisting partners to work with them.
this allowed  folks to build applications on the platform (like v-builder), but it was not  officially supported.
netbeans is a long way from dead!
i don’t think enough people are going to see the  value in their eclipse plugins.
“most desktop java apps are still built without using a client-side framework at all.
it is  implemented on top of the netbeans platform, and you can see a screenshot at http://platform.netbeans.org indicthreads >> netbeans ide recently jumped from version 4.1  to 5.0.
i feel the reason why netbeans is not as popular as eclipse is that sun has tried to do everything on it’s own.
there’s really two camps in the  j2ee world these days.
indicthreads >> netbeans is integrated with sun’s  application server however which other servers can one easily work with through  netbeans?
they never really understood requirements.
“if you must use jsr blessed libraries, you’ll be a lot happier  with netbeans…” netbeans is less strong when it comes to supporting some of the more  popular oss libraries out there.
“i think it will come down to swing vs. swt…” in the end, assuming people buy into the argument that such a platform is  indeed helpful, then i think it will come down to swing vs. swt, and the  libraries that are available for doing things like data binding, graphing,  visualization, charting, etc. indicthreads >>
you had to overcome in the severity of a bug before you went through the effort  of using a debugger.
that’s something you can charge for.
v-builder is our development tool for creating these types of speech  applications.
it’s just too easy not to…” the one downside is that it required changes to the jre.
thanks rich for your time and all the info  about netbeans and the java ide market.
it was always a lot of hacked up build scripts, difficult to test, difficult to debug, and difficult to deploy.
despite netbeans being the early bird,  eclipse today seems to have got the worm.
it’s basically netbeans with a uml modeler.
>> is  sun taking the microsoft way to capturing the java ide market?
i don\’t recommend it.
and you can speak the name of any city they fly to, you’re talking to our technology.
in this interview rich talks about netbeans 5.0, netbeans profiler and the  changing java ide market.
i’m told that a subversion version of this will be  alpha or beta when 5.0 is released.
netbeans is obviously easier to use and has more features out of the box.
these days, i’m totally on netbeans (and gvim), but that’s not true of everyone on my team.
the http monitor window helps you figure out exactly what’s going on in your app.
just the eclipse website is so confusing that you are never sure if you have downloaded what you were really looking for.
you can profile pieces of your application, thereby reducing the performance impact.
i think borland’s days in the  ide space are numbered.
they’re finally hitting the point where it’s no longer a question of should i profile my app?
so instead of giving a comparison could you tell us when one should go with netbeans and when eclipse might be a better choice?
i think the main reason it’s a  separate product right now is that it requires jdk 5.0, and the core netbeans  project must remain 1.4-compliant.
why isn’t the netbeans platform more popular?
why isn’t the netbeans  platform more popular?
all the back and forth made outsourcing unreliable.
but it essence it cost the company more.
do you see things changing in the  near future?
but, even then, it was not nearly as easy as it should have been.
there’s really two camps in the j2ee world these days.
so, try them both out.
indicthreads >> netbeans is integrated with sun’s application server however which other servers can one easily work with through netbeans?
oct  14 netbeans was the early bird but has eclipse caught the worm?
that’s a good indication that netbeans has finally found a broader audience.
“matisse gui builder works the way you always thought gui builders  should…” other than the module development support, major new features in 5.0  include: matisse: the dead-simple gui builder that really works  the way you always thought gui builders should.
so instead of giving a comparison  could you tell us when one should go with netbeans and when eclipse might be a  better choice?
for  example, if you’re working on a j2ee app, you don’t have to profile  the whole app server, just your own code.
the hawaiian guy is an eclipse aficionado, and he  continues developing netbeans modules with it.
so long as they can stay ahead of eclipse and netbeans in the few areas where they really shine, and thereby capture a consistent (if small) market share, i think they can still have a profitable concern.
ide market share will drive the plugin  community, not the other way around.
this allowed folks to build applications on the platform (like v-builder), but it was not officially supported.
for example, when you call american airlines, and the machine on the other end says what is your destination city?
if you’re the type of developer who uses ejb’s, and must use jsr-blessed libraries (jsf over tapestry, for example), then you’ll be a lot happier with netbeans.
thanks rich for your time and all the info about netbeans and the java ide market.
ibm does not have to market eclipse because nokia, bea, etc are doing the marketing on ibm’s behalf.
do you think that netbeans’ j2ee development capabilities can today match the features of any other ide in the market?
considering the wide range of features of netbeans and eclipse and also that jdeveloper recently became free, do you think the days of the commercial java ide are over / numbered?
“people will always be asking for eclipse vs netbeans comparisons  because both keep leapfrogging each other…” people will always be asking for such comparisons, because eclipse and  netbeans keep leapfrogging each other.
however sun java studio creator is perhaps  the only major product built over netbeans.
jsf and struts support developer collaboration modules: i haven’t tried  these out yet, but the demos i’ve seen are very encouraging.
so what’s special about 5.0 that warranted the jump?
they’re not targeting  the whole java developer community.
“netbeans is integrated with tomcat, jboss, weblogic and sun’s  application server.
spring is so simple that i think  it doesn’t matter which ide you use.
rich unger >> the worm that i think eclipse does have is the community of ide plugin developers, which, as i said, is distinct from the platform market.
jboss and  weblogic integrations are finished now, and supposedly websphere is on the way.
the http monitor  window helps you figure out exactly what’s going on in your app.
they’ve finally added nice struts support.
“netbeans is less strong when it comes to supporting some of the more popular oss libraries…”