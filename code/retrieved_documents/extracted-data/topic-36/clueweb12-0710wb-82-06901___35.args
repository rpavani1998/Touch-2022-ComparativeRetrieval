anonymous kuhirt wrote "only people admitting that there are shortcomings and who are willing to look over the (java) fence are able to keep java from becoming the next cobol)."
those who will hold strongly to their java in good days and bad, as other stronger more innovative software paradigms come to life, will be left in the dust.
everything is old news and provide no meaty support for personal opinions.
not because of technological merits and active development, but because of huge amounts of code written in the times where people thought about cobol like you think about java nowadays).
what java needs is a better (less memory and faster) implementation of the libraries it has and the virtual machine to run the programs.
if i had to pose one challenge to the java world, it would be to free us developers of some of the limitations of java that don't exist with other languages; i.e. running in a jvm, we get access to such a limited memory space that anyone writing a memory-intensive server application is forced to work in another language - something i've met several times in my work.
ejb 3.0 embodies hibernate.
this point is completely nonsense, to be sure, but the nonsense didn't originate from me.
– the future of java disappointed wrote: i think he's a senior engineer with 10 year experience...
eclipse is the best ide on the planet, and it appears that eclipse has reached critical mass like ant and junit did, in that people simply expect solutions that extend it.
i was happy to see the changes that 1.5 brought along, especially generics since that's been a problem that had been solved far too long ago to leave out of java.
aspectj is the rolls royce for aop, but spring has lightweight aop themes as does the new jboss.
the java solution was to remove the responsibility of memory management from the programmer and place it in the jvm.
no matter how great something is, there is no "best ide" the same way as there is no "best language".
only people admitting that there are shortcomings and who are willing to look over the (java) fence are able to keep java from becoming the next cobol).
the sort of gripes i have are similar reasons why java evolved out of c/c++ in the first place.
– the future of java disappointed wrote: i think he's a senior engineer with 10 year experience... read more & respond » "java is dead, long live java!"
i think its recieving so much flake not because people disagree generally to the stand points, but because we really so seldom see such a unprofessional article being written.
i don't see much traffic crossing that divide in either direction.
#13 disappointed commented on 16 jan 2006 nothing wrong with the article except that it has no stuff just fluff.
#8 anonymous kuhirt commented on 14 jan 2006 sorry, this article is just stupid.
development like java 1.5 (mostly syntactic sugar) and popular add-ons to java (techniques / librarie) like aop, hibernate are in fact band-aids, covering shortcoming of java which add up over time, giving java that "crufty" feeling it has.
finally, some people seem to think that because i'm pro-java, i advocate it as the one-size fits all language.
personally i prefer idea, even thought i use eclipse on a day to day basis (more than idea) because its the company standard.
anonymous kuhirt wrote "only people admitting that there are shortcomings and who are willing to look over the (java) fence are able to keep java from becoming the next cobol)."
i've unsubscribed from the jdj for a reason (since they aparently fired all of their proofreaders)!
not everything is an object, so you have boxing overheads even in simple things like containers unless you use generics.
if java is "dead," it's only because it was laid to rest so that a better, lighter, more agile, form of java could replace it, so long live java!
if java is slow, grabs lots of memory and all that it is because of the virtual machine, not because of the language.
i have yet to see a fast and slick java application which has nice features and doesn`t eat my whole ram.
just take a look at the eiffel programming language - it pioneered the concept of "design by contract" which solves boundary conditions and assignments to all parameters thus eliminating the null pointer exception problem along with a number of other problems.
we also use java in many internal systems and products under development.
finally, some people seem to think that because i'm pro-java, i advocate it as the one-size fits all language.
to the commenters, don't call "long live java" as if you could predict the new languages and technologies on the horizon.
personally i prefer idea, even thought i use eclipse on a day to day basis (more than idea) because its the company standard.
groovlets should make for some rapid servlet solutions.
gigaom pro is your one-stop shop for great technology market rese...
however, i can easily name you tasks where java would be far from a good choice - especially if you step out of this year's hype word collection (ajax, spring, etc.):... read more & respond » "java is dead, long live java!"
– the future of java anonymous brave guy wrote: java has theoretical limitations that mean it will always have difficulty keeping up with a well-optimised c++ program.
it totally takes away the credibility of the whole article (even though the article is not related).
if java is slow, grabs lots of memory and all that it is because of the virtual machine, not because of the language.
reproduction in whole or in part in any form or medium without express written permission of sys-con publications, inc. is prohibited.
reproduction in whole or in part in any form or medium without express written permission of sys-con publications, inc. is prohibited.
he also wrote "ajax is *not* a technology, it's a technique, and one, at that, which works very nicely with java as the server element."
other technologies like ruby, php, .net, or ajax might get more hype and acclaim lately, but hype aside, java still produces the majority of innovation in the software profession.
anybody who is seriously thinking that there is only one true way for every problem on the planet can't be taken serious and should stop littering websites with his wishfull thinking ..
i see such non-sense "xy is the best" comments as the self-reassurance of blind followers of xy and most of the time it is a sure sign that xy's best days lay in the past.
i think its recieving so much flake not because people disagree generally to the stand points, but because we really so seldom see such a unprofessional article being written.
well, the rest of us are just quietly coding on a platform that is more exciting than ever.
in fact, my first point about groovy and beanshell filling a gap pretty much guarantees that i don't think programming is a one size fits all task.
in his session at the 10th international cloud expo, tom leyden, director of alliances and marketing at amplidata, will e... gigaom pro named “media sponsor” of cloud expo 2012 new york
i don't wanna get into a fanatic religious war on ides, but i'm just annoyed by unsupported claims.
i have yet to see a fast and slick java application which has nice features and doesn`t eat my whole ram.
j2ee-style ejbs are out.
aop will unclutter your code by moving "cross-cutting" concerns like logging and security to transparent method interceptors.
you can get a sense of java's health by simply looking at how many projects are out there using java.
i see such non-sense "xy is the best" comments as the self-reassurance of blind followers of xy and most of the time it is a sure sign that xy's best days lay in the past.
it seems that lately lots of writers have been bashing java.
you'll find that java is by no means the end of all and that far from all shortcomings has been addressed successfully.
i was happy to see the changes that 1.5 brought along, especially generics since that's been a problem that had been solved far too long ago to leave out of java.
not everything is an object, so you have boxing overheads even in simple things like containers unless you use generics.
– the future of java anonymous brave guy wrote: java has theoretical limitations that mean it will always have difficulty keeping up with a well-optimised c++ program.
syndicated stories and blog feeds, all rights reserved by the author.
jsf replaces struts and facelets replace tapestry and other frameworks with a standard.
c is great for performance critical tasks, and java plays along with c via jni as eclipse's swt proves.
it totally takes away the credibility of the whole article (even though the article is not related).
because of its prominence, java gets a lot of attention and with it much criticism, some of it valid.
however, i can easily name you tasks where java would be far from a good choice - especially if you step out of this year's hype word collection (ajax, spring, etc.):
as someone else said once (i forgot the name): "if your only tool is a hammer, every problem looks like a nail."
it would be hard for me to argue against c being the right tool for some tasks, since java and my os are all written in it.
if nothing else, this would suggest that critic's complaint that innovation has left the language is true!
for example memory not being released from objects after they have gone out of scope.
but netbeans 5.0 make me feel more comfortable when working with java.
however, being at the "top" does lead only one way: down (btw: there are areas where cobol is still at the "top", too.
groovy and beanshell solve these same problems and will become a standard (in the jsr sense) part of the java stack.
the refactoring and debugging support are top notch.
jsf replaces struts and facelets replace tapestry and other frameworks with a standard.
no one who objected had any rebutal to the reason i gave why eclipse is the best: it has reached critical mass as an open source extensible platform whose community is assuring that all important tools work with it.
i don't wanna get into a fanatic religious war on ides, but i'm just annoyed by unsupported claims.
no matter how great something is, there is no "best ide" the same way as there is no "best language".
no one who objected had any rebutal to the reason i gave why eclipse is the best: it has reached critical mass as an open source extensible platform whose community is assuring that all important tools work with it.
as someone else said once (i forgot the name): "if your only tool is a hammer, every problem looks like a nail."
those generics have only just been introduced into the language, and are a poor imitation of c++ templates, offering few of the advantages that template metaprogramming has been providing to serious, high performance libraries in c++ for a few years now.
both integrate into a truly mixed environment with compiled bytecode and interpreted scripts interoperating smoothly.
#20 maciej grela commented on 8 feb 2006 hmm, eclipse is the best.
if nothing else, this would suggest that critic's complaint that innovation has left the language is true!
but after upgraded my ram to 1 gb, eclipse runs smoothly.
and last but not least - if you only know and care about java (with that elitistic feeling of "oh, but we are at the top"), you'll be condemned to re-invent solutions / techniques which have been here long before .. #9 bryan taylor commented on 14 jan 2006 as the author...
mr. frustrated with the writer wrote "the entire article focused primarily on web development and minor advances in the development experience."
java doesn't have value types, so everything's dynamically allocated by default.
eclipse's team coding capabilities for cvs and subversion (via the subclipse plugin) are first-rate.
for example memory not being released from objects after they have gone out of scope.
however, i can easily name you tasks where java would be far from a good choice - especially if you step out of this year's hype word collection (ajax, spring, etc.):... read more & respond » "java is dead, long live java!"
just take a look at the eiffel programming language - it pioneered the concept of "design by contract" which solves boundary conditions and assignments to all parameters thus eliminating the null pointer exception problem along with a number of other problems.
starting out as a ... more » subscribe to the world's most powerful newsletters subscribe to our rss feeds & get your sys-con news live!
the sort of gripes i have are similar reasons why java evolved out of c/c++ in the first place.
i don't see much traffic crossing that divide in either direction.
fourth, the php crowd had a legitimate gripe that banging out a simple web page took too much work if you were using jsp and struts.
a third major innovation where java leads is aspect-oriented programming (aop).
beanshell's syntax offers as little surprise as possible for the java developer and groovy gives a ruby-like syntactic efficiency, but can also be compiled to pure bytecode and reused seamlessly, a big improvement over jruby or jython.
if i had to pose one challenge to the java world, it would be to free us developers of some of the limitations of java that don't exist with other languages; i.e. running in a jvm, we get access to such a lim... read more & respond » "java is dead, long live java!"
finally, java's traditional strength in the tools arena just keeps increasing.
as an example, almost everyone who has used c# or any other .net program can see the applications run quite fast.
– the future of java mr. frustrated with the writer wrote: the entire article focused primarily on web development and minor advances in the development experience.
but our templating solutions like velocity, freemarker, and now groovy don't make you choose between ultralight text generation and powerful mid-tier solutions.
all marks are trademarks of sys-con media.
second, the days of heavyweight frameworks are gone.
in his session at the 10th international cloud expo, tom leyden, director of alliances and marketing at amplidata, will e... gigaom pro named “media sponsor” of cloud expo 2012 new york
for those people who really like php, keep it: java 1.6 makes it the reference implementation for the new web scripting language bindings, so you can do your web views in php and use java for model and controller.
likewise if everything you know and care about is java, you have to treat every task within the limits of java.
however, being at the "top" does lead only one way: down (btw: there are areas where cobol is still at the "top", too.
not because of technological merits and active development, but because of huge amounts of code written in the times where people thought about cobol like you think about java nowadays).
what java needs is a better (less memory and faster) implementation of the libraries it has and the virtual machine to run the programs.
e. g. the "eclipse is the best ide" opinion.
as an example, almost everyone who has used c# or any other .net program can see the applications run quite fast.
those generics have only just been introduced into the language, and are a poor imitation of c++ templates, offering few of the advantages that template metaprogramming has been providing to serious, high performance libraries in c++ for a few years now.
but netbeans 5.0 make me feel more comfortable when working with java.
likewise if everything you know and care about is java, you have to treat every task within the limits of java.
only people admitting that there are shortcomings and who are willing to look over the (java) fence are able to keep java from becoming the next cobol).
hey maciej, i faced the very same problem that you had faced(even i had a athlon1700 +512 mb ram).
– the future of java mr. frustrated with the writer wrote: the entire article focused primarily on web development and minor advances in the development experience.
the only reference to ajax my the article concerns other commentators who over-hype ajax in java bashing articles.
what many may not realize is that some big breakthroughs have arrived and that the java development landscape is solving important problems.
you can blame sun for that.
e. g. the "eclipse is the best ide" opinion.
ca maximizing the business value of virtualization in enterprise and cloud computing environments exacttarget messaging in the cloud - email, sms and voice freedom oss stairway to the cloud sun sun's incubation platform: helping startups serve the enterprise power panels: cloud computing & enterprise it: cost & operational benefits
the java solution was to remove the responsibility of memory management from the programmer and place it in the jvm.
if i had to pose one challenge to the java world, it would be to free us developers of some of the limitations of java that don't exist with other languages; i.e. running in a jvm, we get access to such a lim... read more & respond » "java is dead, long live java!"
but after upgraded my ram to 1 gb, eclipse runs smoothly.
java doesn't have value types, so everything's dynamically allocated by default.
the first big arena of innovation is the addition of scripting support.
so perhaps the hyper-enthusiasts have left and the buzzword mongers will proclaim that java is dead.
in all, though, what bothered me the most was the actual words of the article.
anyway, you'll find 17300+ java projects, the most of any language.
integration of standard tools like ant, compilers, junit, and javadocs are about as good as you can imagine.
anybody who is seriously thinking that there is only one true way for every problem on the planet can't be taken serious and should stop littering websites with his wishfull thinking ..
ajax is *not* a technology, it's a technique, and one, at that, which works very nicely with java as the server element.
