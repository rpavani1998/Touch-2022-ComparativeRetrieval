because javafx 2.0 applications can be authored with a mixture of java (or any other jvm-language) and css, and eclipse provides excellent java-tooling out of the box, the most important missing feature is a css-editor who understands the css-extension used by javafx 2.0.as far as i know there's no such framework available as of now, and it simply makes sense to leverage this solid application framework outside the eclipse sdk project, instead of reinventing and reintegrating those technologies.another interesting idea would be to develop a dsl using xtext to author javafx applications, together with the xbase and xtend2 introduced with xtext 2.0, this could lead to slick dsl integrated tightly into eclipse and java.the target audience of the runtime framework are developers who want to write modular javafx applications using a modern software architecture including osgi, dependency injection and central application model.applications using the eclipse ide, so that developers currently using eclipse as their primary ide do not have to switch to e.g. netbeans to get tooling support when they want to develop applications using this new ui-toolkit.anyways, what do i think e(fx)clipse is, and what could it provide: e(fx)clipse's main target is to provide tooling to author javafx 2.0 applications using the eclipse ide, so that developers currently using eclipse as their primary ide do not have to switch to e.g. netbeans to get tooling support when they want to develop applications using this new ui-toolkit.from a project organization point of view: i currently plan to move the core css-editor codebase to the e4 project because eclipse 4.x application developers currently face the same problem javafx devs do in eclipse: they'll have to author css-files with vendor specific extensions but have no tooling.the idea is to leverage the runtime platform used by eclipse 4.1 named "eclipse 4 application platform" to provide such a runtime layer.he's a regular speaker at eclipse and java related conferences and events.i've already shown in proof of concept implementations that the runtime platform used by eclipse 4.1 can be used by none swt-ui applications, so technically it is possible.another interesting fact is that i don't want e(fx)clipse to stop on the tooling front but also provide a runtime framework which supports developers writing medium to big modular javafx applications.tooling it makes sense to move the core over to eclipse.org and proceed with the development of the core there.tom: the target audience of the tooling part are naturally all developers who use eclipse today to develop all kinds of java-applications (e.g. wtp, virgo-tooling, ...) and don't want to switch to another ide to author their javafx-uis, which would contradict the idea of an ide a bit.tom is cofounder and ceo of a software company named bestsolution.at located in tyrol, austria, europe which provides consulting as well as contract services on eclipse technologies.but i don't have problems proceeding with it in my spare time because it provides enough technical fun