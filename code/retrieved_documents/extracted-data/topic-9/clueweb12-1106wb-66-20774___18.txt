there was little security provided by  the install except the root and user passwords that were entered as part of the  install.
it's very tough but if something does break it  or somehow get through there are only standard unix security protections in  place.
while looking at the logs for one of the other machines, i saw repeated connection refused messages in reference to the workstation.
a firewall appliance may be easier  to set up and a very high end commercial firewall may have a larger integrated  feature set but you'll have to accept that the firewall does what you think it  does largely on faith, because much like windows, these products are designed  to hide the messy, i.e., technical, details of what they do an how they work  from their users.
this only works when logged in as root and not via su.
it's this kind of confused design, akin to the  registry and directory design, that makes it very difficult to make a windows  server system highly secure to perform a limited set of functions, without  risking turning off services required by necessary functions.
it was more than three times, perhaps five times as long as it took to install ntp in the first place, and longer if you count the time spent trying to figure out why ntpd was not working on the linux workstation in the first place.
with this approach there is little need to deal with specific ports or services.
my tcp/ip  understanding also increased significantly.
at the other end are linux versions such  as trustix and engarde that are pre-configured to be secure and go further than  openbsd in disabling and or not installing services.
it also sets up no networking, so  the machine is accessible only locally following the install.
like linux firewalls, openbsd firewalls are not for those dependent on gui interfaces either.
xp will rely almost  entirely on the firewall for security.
it sets up both root and an additional user with no passwords; there is no option to enter passwords and no instructions how to enter them afterwards.
i ran an nmap scan from another machine on  the same network segment.
as openbsd is widely acknowledged as very secure and windows nt and 2000 come with minimal security following a default install, it's not surprising that linux falls somewhere between.
other implementation issues make it effectively impossible to disable unneeded functions without also disabling necessary ones.
though i'd never worked with ipchains before, it took less than an hour to figure out but that's still a lot of time for the size of the task.
it was more than three times, perhaps five times as  long as it took to install ntp in the first place, and longer if you count the  time spent trying to figure out why ntpd was not working on the linux  workstation in the first place.
a utility, properly described by a man page, and with reasonably  simple flags, applies the ip filter rules once they are defined.
as windows appears to even more bugs than linux,  it's unlikely to ever approach openbsd security characteristics.
if you were doing a 7.1 upgrade over a previous system that did not  include ip table, then keeping an ipchains configuration would make sense.
distribution of the work or derivatives  of the work, in whole or in part, for commercial purposes is prohibited unless  prior permission is obtained from george shaffer.
first, the older ipchains is installed rather than the newer ip table supported by the linux 2.4 kernel.
both openbsd and linux, with relatively standard and similar steps, can be made significantly more secure.
i thought it was to be an experimental machine and loaded it with packages from both the workstation and server install.
i hope the linux kde system control panel is tied to the new ip tables firewall that is not enabled during the install, and that there is better user control once ip tables is enabled.
i had to explicitly allow inbound udp  traffic on port 123 for the workstation.
it's my understanding the xp firewall will be similar but lack the capabilities  included with the linux firewalls that allow flexible control of outbound  traffic, if you understand firewalls.
looking at existing rules, it's clear "- s" is source and "-d" is destination and that dotted decimal addresses with slash notation netmasks are expected.
another reason linux is less secure than openbsd is so much more is included with it.
this material may be  distributed only subject to theterms and conditions set forth on  http://geodsoft.com/terms.htm.
at the other end are linux versions such as trustix and engarde that are pre-configured to be secure and go further than openbsd in disabling and or not installing services.
while some need to be for the correct operation of the system, many do not.
distribution in accordance with these terms, for private, unrestricted and uncompensated public access, non profit, or internal company use is allowed.
like most unix systems, including even openbsd to a limited extent, system files are generally world readable.
both openbsd and linux, with  relatively standard and similar steps, can be made significantly more secure.
i never tried, so i don't know if the system would have accepted blank passwords.
the configuration file is just a list of ipchains parameters applied sequentially, so for example after flushing existing rules, the "configuration" file is read and each new rule appended.
the most important change is the  inclusion of basic firewall configuration during the install.
the biggest difference between openbsd and linux are the number of bugs in  the underlying systems.
distribution  is subject to the then current terms, or at the choice of the distributor,  those defined in a verifiably dated printout or electronic copy of  http://geodsoft.com/terms.htm at the time of the distribution.
i hope the linux kde system control panel is tied to the new ip tables  firewall that is not enabled during the install, and that there is better user  control once ip tables is enabled.
i changed the firewall settings from the default "medium" level  to "high" ignoring the "low" option and enable incoming ssh  connections.
openbsd firewalls like linux firewalls, openbsd firewalls are not for those dependent on gui  interfaces either.
in contrast, windows services such as netbios are more like a collection  of related services.
after any firewall setting issues are addressed, openbsd is a more secure system than standard distributions of linux.
it's not enabled by default and when it is turned on the  provided default rule set allows all traffic.
a basic openbsd install is less than 200mb and a stripped install can be a little over 100.
there was little security provided by the install except the root and user passwords that were entered as part of the install.
the firewall is able to provide this degree of protection by using what's  called stateful inspection.
distribution in accordance  with these terms, for private, unrestricted and uncompensated public access,  non profit, or internal company use is allowed.
intrinsic comparison n> top of page - site map copyright Â© 2000 - 2006 by george shaffer.
there are about 50 pages of essential reading.
they were not entirely stateful or the ntpd server answers to the workstation queries would have been allowed back in.
traffic that is started from the inside is allowed  out and most replies to inside traffic are allowed to return.
parts of a service may be implemented in multiple  executable files and a single file may contain parts of more than one service.
it's my understanding the xp firewall will be similar but lack the capabilities included with the linux firewalls that allow flexible control of outbound traffic, if you understand firewalls.
on a windows nt and presumably 2000 server, though all disk shares on a system may be disabled, there is no way to disable disk sharing as a service without also disabling printer sharing and several other related netbios services.
still it's a horrible example for users who will often be new to the unix world to suggest users and root don't need passwords.
the core of the install has much in common  with earlier versions.
on a new 7.1 install, installing already obsolete software which must be manually upgraded before the next upgrade, makes no sense.
queries would have been allowed back in.
after any firewall setting issues are addressed, openbsd is a more secure  system than standard distributions of linux.
i've read that microsoft is not enabling as many services in xp but otherwise security will be even worse, at least on the consumer version of xp.
i never tried 7.0 but significant improvements were included in 7.1.
it takes a moderate  amount of work to improve the default windows security settings to approximate  linux default security characteristics and much more to try to achieve security  comparable to openbsd.
the red hat site, in its 7.1 "gotchas and  workarounds" section, under firewall configuration tells what program root  must run to configure the installed ipchains firewall.
the current version of red hat is 7.1.
the firewall is able to provide this degree of protection by using what's called stateful inspection.
as a practical matter, using the stricter firewall rules provided in the red hat 7.1 install, creates a system that in some important ways is more secure than any but a handful of systems available.
the new red hat system would respond to pings, so nmap could determine there was a system there.
for example i installed ntp 4, (ntpd), on the linux workstation but it would not work.
parts of a service may be implemented in multiple executable files and a single file may contain parts of more than one service.
a basic openbsd install is less than  200mb and a stripped install can be a little over 100.
a number of sample rule sets are  also provided.
otherwise it could learn nothing from the system.
at one end are products like corel linux that effectively turn off  security.
the openbsd install for intel architecture fits on one cd  with room for the source tree and about three other platforms on the same cd.
it's the closest thing there is to an instant security policy that is both functional and reasonably secure.
in some ways, it's arguably more secure than the default openbsd install, as significantly fewer services are visible from the outside.
conceptually ip filter, provided with openbsd, is simpler in that an entire rule set is defined in a text file according to a standard format, and when told, the firewall process reads the file directly.
a basic red hat linux install is about 500mb and can easily go over 1gb if many optional components are added.
no traffic started from the outside is allowed in.
it did prevent an ntpd server using the udp protocol added after the install, from working, until the firewall rule set was manually adjusted.
though i'd never worked with ipchains  before, it took less than an hour to figure out but that's still a lot of time  for the size of the task.
these terms are subject to change.
having these world readable gives an intruder little advantage in either  gaining access to the system or elevating access once they have limited (non  root user) access.
my first firewall attempts were successful and with the reading  that i had to do to make the firewall work, i'd gained a good start on  understanding both the theory and practice of firewalls.
looking at existing rules, it's clear "- s"  is source and "-d" is destination and that dotted decimal addresses  with slash notation netmasks are expected.
it sets up both root and an additional user with no passwords; there  is no option to enter passwords and no instructions how to enter them  afterwards.
the ipf interface  command includes a flush option, but having the rules in a file avoids the need  to write scripts that contain logic to verify the presence of configuration  files and create loops to process these files.
it is not difficult to turn either into a secure, very narrowly purposed machine that cannot easily be used for other functions.
further, if standard unix practices are followed and users normally login as non privileged users and not as root, hostile code will be severely hampered in it's ability to do damage.
an excellent file and directory security system is defeated by the option to use an alternate non secure fat file system, default settings that effectively turn off security when the secure ntfs system is selected and a lack of tools to efficiently control file and directory permissions.
a basic red hat linux  install is about 500mb and can easily go over 1gb if many optional components  are added.
on any unix system it's simple to disable nfs file sharing without impacting any other functions.
having these files world readable gives a non privileged user the opportunity to look for potential weakness and to learn information useful in covering their tracks in the event they do elevate access.
as configured the red hat firewall is strict about inbound traffic and permissive about outbound traffic.
the core of red hat linux install now takes two cds.
the firewall included with red hat 7.1 is likely to break some protocols that include separate communication channels started by an outside server.
with the addition of a firewall included as part of the install, if the users change the default options and select the maximum firewall security choices on the red hat 7.1, a new linux system can at the conclusion of the install, be in some ways more secure than a newly installed openbsd.
file and directory permissions were typical of contemporary unix systems, reasonable but not as tight as they could be.
the result was a system highly resistant to most network based attacks, at the end of the install.
the ipf interface command includes a flush option, but having the rules in a file avoids the need to write scripts that contain logic to verify the presence of configuration files and create loops to process these files.
as linux comes in a variety of forms called  distributions, there is much variability as to just how secure a default linux  install is.
except for the latest version of red hat linux wrapping a security shell around the product, linux is by default less secure than openbsd for a number of reasons.
this is the stupidest thing
when the system came up, a number of services were running including telnet and ftp.
ipchains requires an initialization  script to process the configuration file.
for anyone used to doing custom firewall configurations, the firewall setup program choices are exceptionally limited.
the default openbsd install is much more secure but also much less functional than a windows nt or 2000 default install and most linux installs occupy a middle ground in both regards.
it could not determine the operating  system with the os finger printing feature.
the biggest difference between openbsd and linux are the number of bugs in the underlying systems.
firewall in red hat 7.1 install red hat 6.2 was similar to 6.1.
otherwise it could learn nothing  from the system.
the top of the line  product includes five additional cds.
the rules are slightly more straightforward and logical than  ipchains and no additional script is required to activate the rules once  defined.
for example i installed ntp 4, (ntpd), on the  linux workstation but it would not work.
by far the most widely distributed version of linux today is red hat.
an optional port number immediately  follows the address, separated by a space.
the firewall included with red hat 7.1 is likely to break some protocols  that include separate communication channels started by an outside server.
there is nothing comparable in windows nt or 2000 without obtaining a  third party personal firewall such as zone alarm or norton's firewall product.
an optional port number immediately follows the address, separated by a space.
first, the  older ipchains is installed rather than the newer ip table supported by the  linux 2.4 kernel.
with this approach there is little need  to deal with specific ports or services.
i had to explicitly allow inbound udp traffic on port 123 for the workstation.
i never tried 7.0 but significant  improvements were included in 7.1.
this is simple, as a "netstat -an" or port scan from another nearby system will quickly reveal all open ports.
other implementation issues make it effectively  impossible to disable unneeded functions without also disabling necessary ones.
since all important virus and trojans for the past several years have been directly related to microsoft products, this is unlikely to be practical issue on linux systems.
further, if standard unix practices are followed and users normally  login as non privileged users and not as root, hostile code will be severely  hampered in it's ability to do damage.
i saw no direct explanation how to switch from one to the other.
an excellent file and directory  security system is defeated by the option to use an alternate non secure fat  file system, default settings that effectively turn off security when the  secure ntfs system is selected and a lack of tools to efficiently control file  and directory permissions.
the red hat site says this is for compatibility and links to  a number of sites related to both firewalls.
if these files were only readable by root, all the exploration would need to be done after achieving root access and as root, increasing the chances of detection.
the firewall is like wrapping a single layer shell around the system.
traffic that is started from the inside is allowed out and most replies to inside traffic are allowed to return.
for starters, the toughness of the shell depends on user choices  and provides limited flexibility.
no source or destination addresses can be controlled and all are allowed.
all ports were blocked.
actually ipchains is a utility that's an interface to the firewall built into the kernel.
distribution of the work or derivatives of the work, in whole or in part, for commercial purposes is prohibited unless prior permission is obtained from george shaffer.
ntpd was running but communications from the other servers were being blocked.
the core of the install has much in common with earlier versions.
the script creates some standard sequences of ipchains actions  (start, restart, stop, etc.).
at one end are products like corel linux that effectively turn off security.
it's very tough but if something does break it or somehow get through there are only standard unix security protections in place.
further, the kde system, firewall control panel does not lead to the existing firewall rules.
if you don't select a server install, typical server  daemons such as httpd and ftpd are not running following the install.
the nfs related services are set up by default.
if you bring in a virus or trojan horse via e-mail or a download, there is  nothing to stop outbound communications initiated by such programs.
further, the kde system, firewall control panel does not lead to the  existing firewall rules.
though theoretically, windows servers have significantly longer security  related feature lists than any standard unix system, implementation issues  prevent the effective use of these features.
it  did prevent an ntpd server using the udp protocol added after the install, from  working, until the firewall rule set was manually adjusted.
still it's a  horrible example for users who will often be new to the unix world to suggest  users and root don't need passwords.
on a windows nt and presumably 2000 server,  though all disk shares on a system may be disabled, there is no way to disable  disk sharing as a service without also disabling printer sharing and several  other related netbios services.
the most important change is the inclusion of basic firewall configuration during the install.
ipchains requires an initialization script to process the configuration file.
i was wrong about my initial reading of the default firewall rules.
as windows appears to even more bugs than linux, it's unlikely to ever approach openbsd security characteristics.
if  these files were only readable by root, all the exploration would need to be  done after achieving root access and as root, increasing the chances of  detection.
in some ways, it's arguably  more secure than the default openbsd install, as significantly fewer services  are visible from the outside.
there are several key documents, linked to from mypage on ip filter, that describe how to set up a firewall on openbsd.
it's this kind of confused design, akin to the registry and directory design, that makes it very difficult to make a windows server system highly secure to perform a limited set of functions, without risking turning off services required by necessary functions.
(as the packet filter firewall scheduled to replace ip filter is supposed to be functionally identical, the same documents should remain useful.)
on any unix system it's simple to disable nfs file sharing without  impacting any other functions.
as configured the red hat  firewall is strict about inbound traffic and permissive about outbound traffic.
the nfs  related services are set up by default.
my first firewall attempts were successful and with the reading that i had to do to make the firewall work, i'd gained a good start on understanding both the theory and practice of firewalls.
default install conclusions the default openbsd install is much more secure but also much less  functional than a windows nt or 2000 default install and most linux installs  occupy a middle ground in both regards.
on a  new 7.1 install, installing already obsolete software which must be manually  upgraded before the next upgrade, makes no sense.
while looking at the logs for one of the other machines, i  saw repeated connection refused messages in reference to the workstation.
i understand the virus and trojan horse issues will apply to the firewall  included with xp but that it lacks the ability to be configured to control such  programs.
different netbios related functions use ports from 135 to 139 and both tcp and  udp.
if you bring in a virus or trojan horse via e-mail or a download, there is nothing to stop outbound communications initiated by such programs.
conceptually ip filter, provided with openbsd, is simpler in that an  entire rule set is defined in a text file according to a standard format, and  when told, the firewall process reads the file directly.
unix services tend to be very easy to disable as there is typically one  executable file per service that normally only uses one port to listen on.
(as the packet filter firewall scheduled to replace ip  filter is supposed to be functionally identical, the same documents should  remain useful.)
one additional step, turning off all unused or unneeded services will  significantly increase linux security.
back to linux firewall except for the latest version of red hat linux wrapping a security shell  around the product, linux is by default less secure than openbsd for a number  of reasons.
a number of sample rule sets are also provided.
the new red hat system would respond to pings, so  nmap could determine there was a system there.
unix services tend to be very easy to disable as there is typically one executable file per service that normally only uses one port to listen on.
default security for windows nt and 2000 are a distant third to both openbsd and linux.<p break-in numbers < top of page - site map copyright Â© 2000 - 2006 by george shaffer.
the script creates some standard sequences of ipchains actions (start, restart, stop, etc.).
for anyone used to doing custom firewall  configurations, the firewall setup program choices are exceptionally limited.
file and directory permissions were typical of contemporary unix systems,  reasonable but not as tight as they could be.
as linux has so many more bugs, new security exploits  that take advantage of those bugs will continue to be found at significantly  higher rates than for openbsd.
all users will by default, operate as administrators.
i first installed 6.1.
for example sendmail  and nfs related services were started.
i've read that microsoft is not enabling as many services in xp but  otherwise security will be even worse, at least on the consumer version of xp.
as linux has so many more bugs, new security exploits that take advantage of those bugs will continue to be found at significantly higher rates than for openbsd.
the firewall is like wrapping a single  layer shell around the system.
non privileged user explorations are likely to go unnoticed on a busy system.
my tcp/ip understanding also increased significantly.
still, if sound passwords are used for root and any users who can su or sudo to root, and default file and directory permissions are not loosened, it would be fair to describe a default linux (most distributions) and most default unix installs as partly or moderately secure whereas default windows nt and 2000 server installs are unsecured.
having these world readable gives an intruder little advantage in either gaining access to the system or elevating access once they have limited (non root user) access.
it's not enabled by default and when it is turned on the provided default rule set allows all traffic.
there are however some problems with the firewall install.
after looking at the configuration file, it's pretty obvious where the addresses go as the "-s 0/0 -d 0/0" are included in a new rule.
no source or destination addresses can be  controlled and all are allowed.
as linux comes in a variety of forms called distributions, there is much variability as to just how secure a default linux install is.
as a practical matter, using the stricter firewall rules provided in the  red hat 7.1 install, creates a system that in some important ways is more  secure than any but a handful of systems available.
there is no shadow password file.
for starters, the toughness of the shell depends on user choices and provides limited flexibility.
a utility, properly described by a man page, and with reasonably simple flags, applies the ip filter rules once they are defined.
this material may be distributed only subject to theterms and conditions set forth on http://geodsoft.com/terms.htm.
it ran but never synchronized the time  or set the drift.
i never tried, so i don't know if the system would have accepted blank  passwords.
the configuration file is just a list of ipchains  parameters applied sequentially, so for example after flushing existing rules,  the "configuration" file is read and each new rule appended.
xp is to be released with a basic stateful firewall.
this is simple, as a "netstat  -an" or port scan from another nearby system will quickly reveal all open  ports.
though theoretically, windows servers have significantly longer security related feature lists than any standard unix system, implementation issues prevent the effective use of these features.
distribution of substantively modified versions of geodsoft content is prohibited without the explicit permission of george shaffer.
it ran but never synchronized the time or set the drift.
it also sets up no networking, so the machine is accessible only locally following the install.
for example the setup tool only provides the ability to allow or disallow  a port (or service) and protocol.
having these files world readable gives a non privileged  user the opportunity to look for potential weakness and to learn information  useful in covering their tracks in the event they do elevate access.
strikes me as dishonest.
if you don't select a server install, typical server daemons such as httpd and ftpd are not running following the install.
fortunately, they allow enough, that by manually examining the changes made, a knowledgeable user can do something useful by ignoring the warning not to manually edit the configuration file.
i thought it was to  be an experimental machine and loaded it with packages from both the  workstation and server install.
if you were doing a 7.1 upgrade over a previous system that did not include ip table, then keeping an ipchains configuration would make sense.
i ran an nmap scan from another machine on the same network segment.
setting up an openbsd firewall will require reading some documentation.
still, if sound passwords are used for root and any users who can su or  sudo to root, and default file and directory permissions are not loosened, it  would be fair to describe a default linux (most distributions) and most default  unix installs as partly or moderately secure whereas default windows nt and  2000 server installs are unsecured.
i understand the virus and trojan horse issues will apply to the firewall included with xp but that it lacks the ability to be configured to control such programs.
with the addition of a firewall  included as part of the install, if the users change the default options and  select the maximum firewall security choices on the red hat 7.1, a new linux  system can at the conclusion of the install, be in some ways more secure than a  newly installed openbsd.
there are about 50 pages of  essential reading.
the red hat site, in its 7.1 "gotchas and workarounds" section, under firewall configuration tells what program root must run to configure the installed ipchains firewall.
this is the stupidest thing i've seen in the current red hat install and the explanation on the web site strikes me as dishonest.
for example the setup tool only provides the ability to allow or disallow a port (or service) and protocol.
distribution is subject to the then current terms, or at the choice of the distributor, those defined in a verifiably dated printout or electronic copy of http://geodsoft.com/terms.htm at the time of the distribution.
this only works when  logged in as root and not via su.
non  privileged user explorations are likely to go unnoticed on a busy system.
there is nothing comparable in windows nt or 2000 without obtaining a third party personal firewall such as zone alarm or norton's firewall product.
a firewall appliance may be easier to set up and a very high end commercial firewall may have a larger integrated feature set but you'll have to accept that the firewall does what you think it does largely on faith, because much like windows, these products are designed to hide the messy, i.e., technical, details of what they do an how they work from their users.
actually ipchains is a utility that's an interface to the firewall built  into the kernel.
distribution of  substantively modified versions of geodsoft content is prohibited without the  explicit permission of george shaffer.
the result was a system highly resistant to most network based  attacks, at the end of the install.
no traffic  started from the outside is allowed in.
it is not difficult to turn either into a secure, very narrowly purposed  machine that cannot easily be used for other functions.
xp will rely almost entirely on the firewall for security.
for example sendmail and nfs related services were started.
it's the closest thing there is to an  instant security policy that is both functional and reasonably secure.
i saw no direct explanation how to  switch from one to the other.
one additional step, turning off all unused or unneeded services will significantly increase linux security.
like most unix systems, including  even openbsd to a limited extent, system files are generally world readable.
ntpd  was running but communications from the other servers were being blocked.
another reason linux is less secure than openbsd is so much more is  included with it.
red hat 6.2 was similar to 6.1.
i changed the firewall settings from the default "medium" level to "high" ignoring the "low" option and enable incoming ssh connections.
the top of the line product includes five additional cds.
underneath, none of the security basics were changed.
the rules are slightly more straightforward and logical than ipchains and no additional script is required to activate the rules once defined.
since all  important virus and trojans for the past several years have been directly  related to microsoft products, this is unlikely to be practical issue on linux  systems.
fortunately, they allow enough, that by manually examining the changes made, a  knowledgeable user can do something useful by ignoring the warning not to  manually edit the configuration file.
the  current version of red hat is 7.1.
in contrast, windows services such as netbios are more like a collection of related services.
they  were not entirely stateful or the ntpd server answers to the workstation
linux, openbsd, windows server comparison: linux security firewall in red hat 7.1 install firewall problems default install conclusions linux: a security middle ground as openbsd is widely acknowledged as very secure and windows nt and 2000  come with minimal security following a default install, it's not surprising  that linux falls somewhere between.
i've seen in the current red hat install and the explanation on the web site
after looking at the configuration file, it's  pretty obvious where the addresses go as the "-s 0/0 -d 0/0" are  included in a new rule.
different netbios related functions use ports from 135 to 139 and both tcp and udp.
default security for windows nt and 2000 are a distant third to both openbsd  and linux.
it could not determine the operating system with the os finger printing feature.
when the system came up, a number of services  were running including telnet and ftp.
there are several key documents, linked to from mypage on ip filter, that  describe how to set up a firewall on openbsd.
the red hat site says this is for compatibility and links to a number of sites related to both firewalls.
it takes a moderate amount of work to improve the default windows security settings to approximate linux default security characteristics and much more to try to achieve security comparable to openbsd.
the openbsd install for intel architecture fits on one cd with room for the source tree and about three other platforms on the same cd.