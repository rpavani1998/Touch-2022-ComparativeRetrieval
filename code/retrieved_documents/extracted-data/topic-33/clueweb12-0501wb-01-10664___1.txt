for example, using the sybase drivers to connect to an ms sql server, my php version will let me use the sybase_fetch_array() function but not the sybase_fetch_assoc() function.
there are several ways to fetch database results, depending on your  database server type and your php configuration.
my [mainview] happens to be a view containing some 300 columns.
+ 5; return $rows; } } //push reformatted single row array onto array of row arrays.
author info: · a few tips for speeding up php code · filter database results developing a site search engine with php and mysql an introduction to pear sample chapter: php pocket reference print this article a few tips for speeding up  php code - filter database results (page 2 of 5 )
i wrote a function within my database library that checks the value of the member variable "return_type," runs through the row results, and returns all numeric or text indices based on the value of that member variable: function format_results($rows){ //$rows is assumed to be a multi-dimensional //array composed of arrays of row results.
i also benchmarked this on a mysql database with similar results.
in order to reduce the amount of data i have to work with, i added a function to my database library that lets me choose which type of index i wish to use -- text, numeric, or both.
$keys=array_keys($r); //for each key, check return type and set vals[$key] to the appropriate modulo value.
loading asp free topics...
total runtime is about 41,000 milliseconds, with 40% of the time spent in retrieving results and 60% processing them; and when i set the return to "numeric," the results are even better: 31,000 milliseconds with a 20/80 split.
if your php config is such that you can opt to use functions that will return only numeric or text indices, you may not need to write such a function.
consider the following code: $db=new db("server","username","password","database","sybase"); $db->connect(); $db->usedb("database"); $db->set_return("both"); foreach($db->fetch("select top 200 * from [mainview]") as $row){ print_r($row); print "\n"; } $db->disconnect(); forget for a moment that i'm using a database library you don't have access to.
so what did i do to increase performance?
the lesson, though, is that you should get only the type of results you'll actually be working with.
now the default behavior of my database class is to return both numeric  and text indices, and it consistently takes about 55,000 milliseconds to run  this query.
default: $i=sizeof($keys)
multiply that times 200 and we're working with a fair amount of data.
daryl reveals some of his secrets and shows us how to do just that.
home php  page 2 - a few tips for speeding up php code php rss a few tips for speeding up php code ever wondered how to improve your code's execution time?
loading dev articles topics... loading forum links...
sybase_fetch_array() returns both text and numeric indices for each row  returned, however, effectively doubling the data i have to pass around when  processing the results.
array_push($newrows,$vals)
total runtime is about 41,000 milliseconds, with 40% of the  time spent in retrieving results and 60% processing them; and when i set the  return to "numeric," the results are even better: 31,000 milliseconds  with a 20/80 split.
it's plain enough that i'm connecting to a database, invoking the "set_return()" function, and then looping through an array of row arrays to print the results.
all array keys from the row of row arrays passed to function.
so if you're using text indices only in your code and you happen to be able to use sybase_fetch_assoc(), be sure you use it rather than using the more top-heavy sybase_fetch_array().
for($i=0; $ireturn_type){ case "numeric": if($i%2==0){ $vals[$keys[$i]]=$r[$keys[$i]]; } break; case "text": if($i%2==1){ $vals[$keys[$i]]=$r[$keys[$i]]; } break; //default case, just return $rows as it was passed.
consider the following code: $db=new  db("server","username","password","database","sybase"); foreach($db->fetch("select top 200 * from [mainview]")  as $row){ print_r($row); print  "\n"; $db->disconnect(); forget for a moment that i'm using a database library you don't have access  to.
but when  i invoke 'set_return("text")', the results are somewhat  improved.
$this->return_type){ return $rows; } $newrows=array(); foreach($rows as $r){ $vals=array();
loading dev shed topics...
in other words, by weeding out duplicate values once up front, we dodge working with twice the data in any loops in our calling script and we stand to save significant time.
author info: advertisementadvertisement there are several ways to fetch database results, depending on your database server type and your php configuration.
only about 8% of that time is spent actually pulling results from the database; the remaining 92% is devoted to processing the results.
in order to reduce the amount of data i have to work  with, i added a function to my database library that lets me choose which type  of index i wish to use -- text, numeric, or both.
but when i invoke 'set_return("text")', the results are somewhat improved.
loading seo topics... ... ... ... ever wondered how to improve your code's execution time?
i wrote a function within my database library that checks the value of the  member variable "return_type," runs through the row results, and  returns all numeric or text indices based on the value of that member variable: function format_results($rows){ //$rows is assumed to  be a multi-dimensional //array composed of arrays of row  results.
only about 8% of that time is spent actually pulling results from  the database; the remaining 92% is devoted to processing the results.
daryl  reveals some of his secrets and shows us how to do just that.
now the default behavior of my database class is to return both numeric and text indices, and it consistently takes about 55,000 milliseconds to run this query.
multiply that times 200 and we're working with a fair amount of  data.
if($this->return_type=="both" ||  !$this->return_type){ return $rows; } $newrows=array();
my [mainview] happens to be a view containing some  300 columns.
; } return $newrows; } the result of adding this function is of course that we spend more time formatting the results before returning them to the calling function, but we spend less time processing the results after the fact.
for example, using the sybase  drivers to connect to an ms sql server, my php version will let me use the  sybase_fetch_array() function but not the sybase_fetch_assoc() function.
sybase_fetch_array() returns both text and numeric indices for each row returned, however, effectively doubling the data i have to pass around when processing the results.
if($this->return_type=="both" || !
it's plain enough that i'm connecting to a database, invoking the  "set_return()" function, and then looping through an array of row  arrays to print the results.
next: consolidate queries >>