i would also add some higher-level (less computer-science oriented, simply because the task at hand is generating web pages 'on the fly').
firstly managment of privilege - but that applies (afaik) to any web-based system.
i would say that while php has tremendous strength, it equally lacks in its implementation of oop requirements.
in php, it's possible to make sure your include files are not included more than once.
"php is commonly said to be faster and more efficient for complex programming tasks and trying out new ideas.
with a single line - header("content-type: text/vnd.wap.wml"); you can be in another "mobile" dimension :).
php comes closest to solving my problems, many of which are very much in the enterprise applications domain.
its true that there is a bit more code required to supplement things that $soft and others give you for a price, but the bottom line is that most of these things are not very difficult to do properly.
the fact of the matter is that the world is rapidly shifting towards an soa mentality, and rich applications presented through the web.
where as in asp/vbscript, you can't due to the fact that ssi is processed before the vb code.
c# (.net), java -- hell even actionscript have a fully oo implementation allowing effective implementation of recognized design patterns.
c# (.net), java -- hell even actionscript have a fully oo implementation allowing effective implementation of recognized design patterns.
it'd be a sad world to live in where there was only one programming language/methodoly/idiom - diversity is a great thing.
i believe that the php community today suffers from this mentality.
this is particularly evidenced in the lack of strict type casting.
in other words, if you are using a connected data source, such as a sql database, try shifting the processing time back a layer by providing a medium interval return from the data source to an xml file that the web service can access.
jsp have almost no bug at all, or at least i did not find any, but it is hard to debug.
there's also the problem of namespace collisions in large apps.
web consultant we probably all agree that php, compared to what coldfusion was at the time of the writing of that part of this faq, is far more capable of complex scripts, and also generally outperforms coldfusion in similar tasks, too.
once these issues are addressed i think we'll see more support of php, and less resistance to its place in the enterprise.
currently, asp.net is at the same level than php and, i would say that is better because i can choose what language to use (php is also available for .net by the way).
migrating from php 4 to php 5 php and com last updated: fri, 02 jan 2009 add a note user contributed notes php и останалите езици tony 16-apr-2008 11:01 the paragraph on "cold fusion" (it's actually "coldfusion", by the way), and in the included link is so woefully inaccurate and out of date, that it's not even funny.
you can easily make dynamic wml pages for mobile phone users with php.
"c:\usr\local\php\extensions" to correctly utilize php in enterprise applications, one may want to bear in mind that if php is being used synchronously, it should be kept to the presentation layer only.
all the php api functions are there and there's plenty of examples due to the many existing modules and their source codes.
while that may be relevant for application programming, it's totally irrelevant for web programming.
should become perl is a very tried and true language; it's been around since the late eighties, but php is maturing very quickly.
i believe that the php community today suffers from this mentality.
also, asp.net can make things that php don't such as manipulate the server's filesystem (y use that technique in the database system of my own cms made with .net) and not only the files that are inside the website.
compiled java classes act more like optimised / confuscated scripts and still needs an interpreter in the end.
coldfusion mx server cost about $1300, but the total built in functionality and versatility makes it a worthwhile.
web programming, imho, is about being able to get a quick, organized solution out quickly so that it can be maintained and dynamic.
php is generally referred to as more stable and less resource intensive as well.
the fact of the matter is that the world is rapidly shifting towards an soa mentality, and rich applications presented through the web.
it's necessary an update to this article.symcbean currently, asp.net is at the same level than php and, i would say that is better because i can choose what language to use (php is also available for .net by the way).
in light of this php should be regarded as valuable tool for application development.
if you still cannot get the php processes back up to par, then you should consider using php as an asynchronous page constructor, thus shifting php itself back to the business process layer and allowing the web service (apache, iis, netscape, etc.) to return html files instead.
i truely believe that also picks a part of the puzzle...
but i did find out in only 1 hour that the syntax of php gives you much less typing than asp, that is a fact.
i'm not familiar with coldfusion mx, but as it sounds like it's a rather new product, i would draw the conclusion that it isn't what the writer of this faq had in mind when addressing php vs. coldfusion comparisons.
the only problem is that you take at least twice times to make same program on jsp and it is not even close as well documented and easy to use as php.
as a pure cs language, there is no doubt that java is superior.
but as a web page generator, i have moved from a java-centric approach to a php approach, leveraging servlets or beans as needed "under the covers".
i'll admit that for a very few applications, then server hardware is more expensive than developer time - like if you're turning around more than 500000 hits/hour, then it may work out cheaper to develop in 'c' with half the servers than php, but this is far from the sort of volume i've seen on an enterprise application.
compiled java classes act more like optimised / confuscated scripts and still needs an interpreter in the end.
also, asp.net make a lot easier for programmers to make programs that communicate with the web site without needing of a browser (i use that technique in a small application that allows my site's users to "navigate" the site and also send and receive personal messages a lot faster than with the web) php needs to get improved to be better than asp.net.
that makes the syntax of for example the "for" statement less to my desire, which i like better in vbscript (asp)...
firstly, i was absolutely thrilled to see the enhancements of php5.
all the options and extras from db+php oriented web-site can easily be transfomed into a wap version of your site.
if you're on windows) would be more appropriately used within the business process and data access layers.
php does not have the out-of-the-box functionality for the above needs.
i do like the syntax of php a lot and the speed of it is great, although the client/server interactivity of asp with windows and mac clients is what i'm excited to see grow with future versions of php.mavi_br at someplace dot com i've been working with php, jsp, java and cfm for 2 years now.nospam at phppatterns dot com i can tell that for web development only, php is not nearly as good as cfm on speed, on ease to use and on interaction.
search for in the function list all php.net sites this mirror only online documentation bug database site news archive all changelogs just pear.php.net just pecl.php.net just talks.php.net general mailing list developer mailing list documentation mailing list view this page inenglish brazilian portuguese french german japanese korean polish romanian russian spanish turkish other
really...  now, i know the argument is that php is related to the web - not application development.
i really must take issue with (cash at nospam dot thesilverside dot com)'s comments regarding enterprise applications and php.
i'm very dissappointed to see that languages (like c#), sponsored by the likes of m$ have been able to develop such mature oo languages so rapidly, while php remains... well... practically in the stone age.
all the php api functions are there and there's plenty of examples due to the many existing modules and their source codes.19-mar-2006
php comes closest to solving my problems, many of which are very much in the enterprise applications domain.
the fact of the matter is that most of these new and "improved" development tools dont save much, if any money, and are mostly, unnecessary.
thanks to it's common language runtime, .net technology allows the programer to choice wich language to use.
if you really want to maintain higher speed on presentation, then perhaps one would want to incorporate asynchronous instead of synchronous processing into the presentation layer of your application.
asp servers crash very much.
i would say that while php has tremendous strength, it equally lacks in its implementation of oop requirements.
now, granted, there are ways to do things like method overloading, but c`mon....
also, asp.net make a lot easier for programmers to make programs that communicate with the web site without needing of a browser (i use that technique in a small application that allows my site's users to "navigate" the site and also send and receive personal messages a lot faster than with the web) php needs to get improved to be better than asp.net.
adding more tiers into your application is a recipe for disaster since it reduces scalability by creating bottlenecks/crossovers and has a big impact on transparency.
if you start out with php, ask yourself how much time and money you have in developing the source to provide the functionality you are looking for.
the intern i'm not going to debate the the pros and cons of each language, but please -- let people be informed by information that's more based in reality.
atoi_monte at hotmail dot com take openening of a file in asp...
embedding object-oriented code into a page can be much more painful (and slower to execute) than leveraging traditional coding techniques.
the only disadvantage about php is the somewhat quirky language and inconsistant (and long) function names, which makes it hard for newbies to learn from scratch.
the fact of the matter is that most of these new and "improved" development tools dont save much, if any money, and are mostly, unnecessary.
i agree with web consultant concerning to asp.net and .net framework.
thanks to it's common language runtime, .net technology allows the programer to choice wich language to use.
one of the first things i saw was that php is based on c, which is one of the hardest programming languages in the world.
also you can write caching *with* php, also checkouthttp://shootout.alioth.debian.org/, and have you seen the benchmarks for pharrot?).
now, granted, there are ways to do things like method overloading, but c`mon....
here's a php coders response to abduls "java or php" article?dir at badblue dot com "php or java?": http://www.phppatterns.com/index.php/article/articleview/12/1/3/ to ahabra,developer at i-space dot org very interesting page.
adding more tiers into your application is a recipe for disaster since it reduces scalability by creating bottlenecks/crossovers and has a big impact on transparency.
during his keynote, he presented some very interesting comparison between the popular development "frameworks" php, ruby on rails (ror, rails) and java http://www.tbray.org/talks/php.de.pdf in that he show php the first in scalability bb at servertje dot nl 06-jun-2006 02:58
it'd be a sad world to live in where there was only one programming language/methodoly/idiom - diversity is a great thing.
asp only runs on windows servers, and we all know how much windows crashes.
we simply got tired of all the churing of the development platform from $soft: things like changing api's during final betas, undocumented api's etc.berjoza at bigmir dot net ive programmed in c, c++, vb, asp (since the original beta in 1995) and asp.net, com, com+, .net
i agree with web consultant concerning to asp.net and .net framework.
we have found php to be an excellent replacement for similar $soft tools and technologies for web development.
3) compare native database and directory support.
firstly managment of privilege - but that applies (afaik) to any web-based system.
also you can write caching *with* php, also checkouthttp://shootout.alioth.debian.org/, and have you seen the benchmarks for pharrot?).
there's a comma splice in this article:good dot midget at gmail dot com perl is a very tried and true language, it's been around since the late eighties, but php is maturing very quickly.
there's also the problem of namespace collisions in large apps.
futhermore, due to php's lack of oo support, true collaborative team development is greatly hindered.
once these issues are addressed i think we'll see more support of php, and less resistance to its place in the enterprise.
legit development teams rely on this to effectively lock down their interfaces, implement error handling, etc etc etc.
now, i know the argument is that php is related to the web - not application development.
but for web programming, jsp doesn't hold a candle to php, imo.
hopefully ibm will jump in here and kick things into high gear.
none out-of-the-box database integration with popular rdbms(oracle,sql server), integration with com and to java servlet and enterprise javabeans, that alone make coldfusion mx and asp.net an attractive development platform.
there's a comma splice in this article: perl is a very tried and true language, it's been around since the late eighties, but php is maturing very quickly.
hopefully ibm will jump in here and kick things into high gear.
firstly, i was absolutely thrilled to see the enhancements of php5.
what's more important is the capability of the language.
since i regularly develop embedded applications with php using http as the communications substrate for transactions spanning 6 or more origanisations, i'd like to know whay i shouldn't be using php / processing synchronously, and how i can create a near real-time system without synchronous operation.
2) compare slinging (generation) of markup which is where php excels (as it was designed to sling markup - this includes features such as character transformations, variable accessibility, web page captures (see the fopen call which captures a web page in a single function call).
java is a better solution.
i'm very dissappointed to see that languages (like c#), sponsored by the likes of m$ have been able to develop such mature oo languages so rapidly, while php remains... well... practically in the stone age.
since i regularly develop embedded applications with php using http as the communications substrate for transactions spanning 6 or more origanisations, i'd like to know whay i shouldn't be using php / processing synchronously, and how i can create a near real-time system without synchronous operation.
its true that there is a bit more code required to supplement things that $soft and others give you for a price, but the bottom line is that most of these things are not very difficult to do properly.
i hope that the better wins i really must take issue with (cash at nospam dot thesilverside dot com)'s comments regarding enterprise applications and php.web consultant since 1994
we have found php to be an excellent replacement for similar $soft tools and technologies for web development.
php is fast but is a pain on some aspects and has loads of bugs.
they may be out there for java - i would just like to know where they are and who is using them.
also, asp.net can make things that php don't such as manipulate the server's filesystem (y use that technique in the database system of my own cms made with .net) and not only the files that are inside the website.
java provides beans and struts, coldfusion provides fast development and .net....
the global variables, lack of package system, and loosely typed nature of php makes it easier to use and get stuff done in, while the syntax is still clean and easy to maintain.
java provides beans and struts, coldfusion provides fast development and .net....
php might be good for developing non complex websites for no cost; however when you are developing enterprise web systems that have to integrate with many different flavor of sources ..
they penalize php for class scope and global variables and such.
if you are an experienced c or c++ programmer, i think php makes automaticly the best choice out of php vs asp.
i find that most suggested "design patterns" are weak workarounds in php.
i'll admit that for a very few applications, then server hardware is more expensive than developer time - like if you're turning around more than 500000 hits/hour, then it may work out cheaper to develop in 'c' with half the servers than php, but this is far from the sort of volume i've seen on an enterprise application.
futhermore, due to php's lack of oo support, true collaborative team development is greatly hindered.
it will also give more resources back to php and your web service processes.
the advantage here is programming the relative simple business logic in php and programming those core functions that really require speed in php modules, if you really have to.
i think that for the rest the pick of language is pretty personal.
with php 5, i would just like to remind everyone, there will be a lot of concessions to java programmers (mostly to lure c++ hackers to php over c# or java) like constants, abstract stuff, and access control.
while it won't impact the programming that much ( you can still code just like you always have) you can at least feel more like c++ when we finally get to use php5.
i would say : use what you need for your application, cfm is truly the fastest, as it has a daemon running instead of a per request, plus the ability to cache queries that is awesome.
i find that most suggested "design patterns" are weak workarounds in php.
the only disadvantage about php is the somewhat quirky language and inconsistant (and long) function names, which makes it hard for newbies to learn from scratch.
i have to note that a very big advantage of php over asp is that php has much easier commands...
surely, web consultant must have made the same conclusion based on his discovery that the faq is outdated and thus should be updated.
where as in asp/vbscript, you can't due to the fact that ssi is processed before the vb code.
this will allow your web presentation layer to load the data significantly faster than it is now.
in our business there is a huge risk from not having access to source code and we simply cant be held hostage by a third party company: when you add up the dollar value of this risk for our business it far exceeds the few dollars we need to spend in extra supplemental coding - which is done once so its a one-time cost.
what's more important is the capability of the language.
how long does it really take to write a good data abstraction layer - that can be repurposed.
dan as far as i can see, web consultant apparently missed the topic, which was "3.
we simply got tired of all the churing of the development platform from $soft: things like changing api's during final betas, undocumented api's etc.
should become perl is a very tried and true language; it's been around since the late eighties, but php is maturing very quickly.
good thing on jsp is that you can write real applications and have perfect interaction by using classes, plus it is much more of a serious language.
legit development teams rely on this to effectively lock down their interfaces, implement error handling, etc etc etc.
aside from page caching, (to my knowledge) you simply cannot get any faster than that.
java would have the advantage in generic database access (jdbc) but php has the advantage in ldap support (jndi has several bugs which we have run into - quite painful) and native database access (e.g., oracle or mysql integration).
this is particularly evidenced in the lack of strict type casting.
the advantage here is programming the relative simple business logic in php and programming those core functions that really require speed in php modules, if you really have to.
in light of this php should be regarded as valuable tool for application development.
on the other hand you just can't do anything very special with cf like opening a socket with the ease of php.
i think it's worth to mention that it's incredible easy to write a php module in c and use it in your scripts with the speed of true machine language.
how long does it really take to write a good data abstraction layer - that can be repurposed.
my experience with asp and php is about equal, i think they both serve equally as good of a purpose depending on what the programmer is trying to do.
in php, it's possible to make sure your include files are not included more than once.
during his keynote, he presented some very interesting comparison between the popular development "frameworks" php, ruby on rails (ror, rails) and javabb at servertje dot nl http://www.tbray.org/talks/php.de.pdf in that he show php the first in scalability
i think it's worth to mention that it's incredible easy to write a php module in c and use it in your scripts with the speed of true machine language.
if you ever tried to configure a web server for wap, serving wml content you know it's not an easy job.
in our business there is a huge risk from not having access to source code and we simply cant be held hostage by a third party company: when you add up the dollar value of this risk for our business it far exceeds the few dollars we need to spend in extra supplemental coding - which is done once so its a one-time cost.
i code too shortly in php to make a full analysis yet, but the complex object structues of vbscript is something i really put in question, php has a much easier syntax when it comes to that...