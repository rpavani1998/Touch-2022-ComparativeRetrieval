in the whitebeam environment these files generally have the  extension '.rhtm' or '.whtm' but of course you can use any extension.
if you have a vedry successful site and your server can't cope, your general solution is to get a bigger server.
this is illustrated by the perfectly valid php file:  hello  world    "> ...
to see the breadth of coveragevisit the  php documentation library
the philosophy followed by the php libraries tends to mean that you have to know a lot about the underlying technology before you can use an api.
a  whitebeam file is an xml file and can be manipulated as such and used with  existing xml editing tools.
it could for example be used as a more understandable translation language than xslt, for those familiar with standard procedural languages, but that's about it!
all of the standard libraries in whitebeam have been developed with scaleability in mind.
by itself this functionality has little practical use.
whitebeam is an xml engine that invokes a script engine as necessary.
the core libraries provided with php lend themselves to single server applications.
this is perhaps one of the  strengths, and weaknesses of the php environment.
whitebeam abstracts away the need to learn sql or other technologies.
at the same time it  provides those interfaces if required for specialist applications.
the following shows two similar pages - one for php and one for whitebeamphp whitebeam  hello world       hello world      the major difference between the structure of whitebeam pages and those of the other two technologies is that whitebeam filesmust be valid xml markup.
however by making whitebeam an xml application -  and having the programs structured using valid xml unleashes a whole set of  additional facilities such as: use xml and html editors to see document structure many php  and asp applications hide all their output in streams of print statements.
xml is an inherent feature of  whitebeam.
the subjects covered are: asp, php and whitebeam all store programs in text files, and each of those files contain special markers that highlight where to insert dynamically generated content.
where php and asp process a  text page for embedded script, whitebeam introduces a two-parse approach,  processing an properly formatted xml file and then executing behaviours  associated with specific xml markup within those pages.
whitebeam library functionality falls into two main categories: session/request related functions for example  sending text to the browser, reading data from a form, accessing session  information associated with this request.
whitebeam has a number of similarities with php and asp.
the result is a feature rich environment, but one that can be daunting to new users of the environment.
summary whitebeam has a number of similarities with php and asp.
all of the standard libraries in whitebeam have  been developed with scaleability in mind.
to write a database driven application using postgresql for example you to learn php, html andsql.
to illustrate how this improves the structure of a page consider the  following simple example of repeating a block of output for rows in a table: php whitebeam  hello  world     row      endfor; ?>     hello  world     row          or an even simpler example - conditionally including a block of text if a  user is logged into the system php whitebeam  hello  world    welcome back to our application!
the php approach php provides a very rich api built as a set of function calls to underlying  modular interfaces.
our interest  was not in providing the language but rather in how to harness that language to  develop scaleable applications.
an entire block of xml can be conditionally included simply  by making the parent tag conditional (rb:test) on the result of a javascript  expression.
the first of these is represented as an object called 'rb'.
if you  haven't used these technologies then you may be better placed reading the full tutorial on writing whitebeam applications.
endif; ?>    hello world   welcome back to our application    this latter example also illustrates the power of a system that understands the xml hierarchy.
as far as php or asp are concerned - a program file has no structure - it is a text file on which simple text substitution is performed.
how whitebeam uses xml to move beyond scripting libraries - interfaces to backend technologies scaleability - what happens when your application outgrows your current  server - or the currently available fastest serer?
finally whitebeam addresses in a transparent manner the issue of  scaleability and reliability, allowing a developer to take an application  initially running on a single server and to run that same application unchanged  on multiple servers using standard load-balancing products.
an entire block of xml can be conditionally included simply by making the parent tag conditional (rb:test) on the result of a javascript expression.
as php has developed and grown a larger following so more effort has been placed into adding interfaces to just about any kind of function you could need for a web application.
php provides a very rich api built as a set of function calls to underlying modular interfaces.
page layout can look very similar and you can do very similar things with each of these technologies.
even where the user wishes to get  to the underlying functionality the whitebeam aim is to provide a consistent  interface to similar techologies.
obvious among these are the ability to store  persistent data between page access, recognise client sessions and associated  data, implement a robust security model etc.
page structure on the other hand is best described in an xml markup language, which whitebeam provides as a set ofxml markup that is embedded in application pages.
you really shouldn't have to change your code substantially to move from one database technology to another!
to illustrate how this improves the structure of a page consider the following simple example of repeating a block of output for rows in a table:php whitebeam  hello world     row     endfor; ?>     hello world     row        or an even simpler example - conditionally including a block of text if a user is logged into the systemphp whitebeam  hello world   welcome back to our application!
the libraries cover a lot of functionality, but has been implemented by a wide variety of organisations and individuals.
as far as php or asp are concerned - a program file has no structure - it  is a text file on which simple text substitution is performed.
as php has developed and grown a larger following so more  effort has been placed into adding interfaces to just about any kind of  function you could need for a web application.
we've covered the basic syntax of whitebeam and how javascript and xml markup combne to provide a powerful development framework.
the subjects covered are: the layout of pages - comparing whitebeam against php and asp markup -
the quickstart guide will give you more details about whitebeam whitebeam release 1.3.8 view xml source of this page (loadtime : 12ms)
each development environment provides these in a different way, but in each as an underlying application programming interface (api).
whitebeam is an xml application, while the other  two are more simply text substitution processors.
beyond scripts asp and php provide mechanisms that can substitute 'output' in place of  'script'.
this object  contains a set of objects representing different aspects of the current  operating environment, for example sessions, catalogues, sessions and the page  generation itself.
the core libraries provided with php lend themselves to single server  applications.
the standard session management functions store session  information in a file on the local file-system.
at the same time it provides those interfaces if required for specialist applications.
none of your code has to change because the whitebeam architecture separates session data into a separate service accessible by all servers.
the  following shows two similar pages - one for php and one for whitebeam php  whitebeam  hello  world       hello  world      the major difference between the structure of whitebeam pages and those of  the other two technologies is that whitebeam filesmust be valid xml markup.
in the asp and php theonly way of achieving this is through script, which can make the pages being generated look very clumsy, which in turn makes maintainance and development more difficult and costly.
whitebeam library functionality falls into two main categories: the first of these is represented as an object called 'rb'.
the  only way you can see the output structure is by running the application and  looking at the output.
you can also use this behaviour to 'transform' existing tags.
in the asp and php theonly way of achieving this is  through script, which can make the pages being generated look very clumsy,  which in turn makes maintainance and development more difficult and costly.
there is no doubt that you can develop reliable, scaleable applications, but in  that case you have to write your own framework to make it happen.
whitebeam provides an intuitive, well documented object orientated set of apis that abstract away the underlying complexity in order to reduce barriers to entry for new users.
the libraries cover a lot of  functionality, but has been implemented by a wide variety of organisations and  individuals.
scaleability has never been a major issue addressed by the developers of php.
to write an application requires access to a number of underlying  functional technologies.
in a whitebeam application, javascript is primarily a technology for adding procedural functionality to pages.
php has evolved over time from a fairly basic origins - the system developed from the scripting language.
so an http request is represented by an instance of the 'httprequest' class.
whenever the engine encounters that tag  when it executes the page it runs the associated javascript - the outoput from  the script replaces the tag in the output document sent to the client.
the result is a feature rich environment, but one that can be  daunting to new users of the environment.
alongside the core page structure, whitebeam provides a rich set of data storage and manipulation allowing sophisticated database driven applications to be written with no knowledge of the underlying technologies.
there is no doubt that you can develop reliable, scaleable applications, but in that case you have to write your own framework to make it happen.
even where the user wishes to get to the underlying functionality the whitebeam aim is to provide a consistent interface to similar techologies.
whitebeam luckily inherited a very mature, industry standard scripting environment (ecmascript/javascript thanks to the guys atmozilla).
so an http request is represented by an instance of the  'httprequest' class.
a whitebeam page allows you to represent the application  structure in xml, which can be modified using commercial xml/html editors such  as dreamweaver.
in a whitebeam application, javascript is primarily a technology for adding  procedural functionality to pages.
the apis provided to php developers also tend to be very thin, in  that they map almost directly down to an underlying applications interface.
the result is very little consistency and very little abstraction, leading to a different api to talk to, for example, postgres, mysql and db2, despite the fact that they are all sql databases.
the quickstart guide will give you more details about whitebeam
whitebeam users php, asp and whitebeam this page provides some comparison between php, asp and whitebeam in order  to introduce whitebeam to people familiar with those technologies.
the xml structure of a  whitebeam page makes it very easy to build xml based applications.
xml is an inherent feature of whitebeam.
obvious among these are the ability to store persistent data between page access, recognise client sessions and associated data, implement a robust security model etc.
by itself  this functionality has little practical use.
although php uses xml 'friendly' syntax - the files arenot xml.
for  example - create a tag for a menu item.
most of the functionality available to developers is in the form of added libraries.
...and finally a summary page structure asp, php and whitebeam all store programs in text files, and each of those  files contain special markers that highlight where to insert dynamically  generated content.
the philosophy followed by the php libraries tends to mean that you have to  know a lot about the underlying technology before you can use an api.
whitebeam very much builds on these architectures using internationally  standardised building blocks of xml and ecmascript.
attach javascript behaviour to xml tags whitebeam allows you  to create your own new tags and attach javascript behaviour to them.
each development environment  provides these in a different way, but in each as an underlying application  programming interface (api).
whitebeam provides a rich set of xml markup to allow you to define your pae structure rather than having to use php control constructs.
whitebeam luckily inherited a very mature, industry standard scripting  environment (ecmascript/javascript thanks to the guys atmozilla).
we've shown the syntactical similarities between whitebeam, asp and php.
you really shouldn't have to change your code  substantially to move from one database technology to another!
php effectively provides a procedural interface allowing direct access to underlying software, but to use that technology you must learn both php - and how to use that technology.
most of these have been developed to for the most common 'single-server' web application environment.
none of your code has to change  because the whitebeam architecture separates session data into a separate  service accessible by all servers.
libraries we've covered the basic syntax of whitebeam and how javascript and xml  markup combne to provide a powerful development framework.
it could for example be used as a  more understandable translation language than xslt, for those familiar with  standard procedural languages, but that's about it!
the apis provided to php developers also tend to be very thin, in that they map almost directly down to an underlying applications interface.
whitebeams knowledge of  the structure of the page as a hierachy of tags allows some very sophisticated  manipulations to be achieved very easily.
this is perhaps one of the strengths, and weaknesses of the php environment.
this is illustrated by the perfectly valid php file:  hello world   "> ...
if you have the biggest server you can afford then your only options are to replace the core functionality with your own session tracking code, using for example a database to store session information.
alongside the core page structure, whitebeam provides a rich set of data  storage and manipulation allowing sophisticated database driven applications to  be written with no knowledge of the underlying technologies.
if you haven't used these technologies then you may be better placed reading the full tutorial on writing whitebeam applications.
while developerscan get down to the underlying  functionality, it is perfectly possible to build a feature rich database driven  application without ever having to learn sql.
php effectively provides a procedural interface allowing direct access to  underlying software, but to use that technology you must learn both php - and  how to use that technology.
whitebeam provides a rich set of xml markup to allow you to define your pae  structure rather than having to use php control constructs.
if you have the biggest server you can afford then your only options  are to replace the core functionality with your own session tracking code,  using for example a database to store session information.
page structure on the other hand is best  described in an xml markup language, which whitebeam provides as a set ofxml  markup that is embedded in application pages.
most of the functionality available to  developers is in the form of added libraries.
whitebeam is an xml application, while the other two are more simply text substitution processors.
you can included a number of xml  sub-structures within your doucment - then select the appropriate on for  output, maybe based on browser or current section number or type of person  logged into the site.
whitebeam libraries whitebeam provides an intuitive, well documented object orientated set of  apis that abstract away the underlying complexity in order to reduce barriers  to entry for new users.
in the whitebeam environment these files generally have the extension '.rhtm' or '.whtm' but of course you can use any extension.
to see the breadth of coveragevisit the php documentation library
this page provides some comparison between php, asp and whitebeam in order to introduce whitebeam to people familiar with those technologies.
our interest was not in providing the language but rather in how to harness that language to develop scaleable applications.
dom manipulation of the source because a whitebeam  page is an xml document at the lowest level - whitebeam provides a dom like  access to that document structure at run time.
using standard libraries, if you have performance issues, you can make use of industry stanard load balancers to run your application on two servers concurrently.
while developerscan get down to the underlying functionality, it is perfectly possible to build a feature rich database driven application without ever having to learn sql.
i could for  example redfine  tag to automatically insert a link at the start of a  page whenever it is encounrtered, providing an automatic table of contents.
the xml structure of a whitebeam page makes it very easy to build xml based applications.
this object contains a set of objects representing different aspects of the current operating environment, for example sessions, catalogues, sessions and the page generation itself.
page layout can  look very similar and you can do very similar things with each of these  technologies.
hello  world   welcome back to our application     this latter example also illustrates the power of a system that understands  the xml hierarchy.
scaleability php has evolved over time from a fairly basic origins - the system  developed from the scripting language.
the second, transient objects, are represented by a number of classes within the system.
whitebeams knowledge of the structure of the page as a hierachy of tags allows some very sophisticated manipulations to be achieved very easily.
however by making whitebeam an xml application - and having the programs structured using valid xml unleashes a whole set of additional facilities such as: asp and php provide mechanisms that can substitute 'output' in place of 'script'.
we've shown the  syntactical similarities between whitebeam, asp and php.
if you have a vedry successful  site and your server can't cope, your general solution is to get a bigger  server.
where php and asp process a text page for embedded script, whitebeam introduces a two-parse approach, processing an properly formatted xml file and then executing behaviours associated with specific xml markup within those pages.
using standard libraries, if you have  performance issues, you can make use of industry stanard load balancers to run  your application on two servers concurrently.
whitebeam very much builds on these architectures using internationally standardised building blocks of xml and ecmascript.
the second, transient objects, are represented by a number of classes  within the system.
the  result is very little consistency and very little abstraction, leading to a  different api to talk to, for example, postgres, mysql and db2, despite the  fact that they are all sql databases.
whitebeam  abstracts away the need to learn sql or other technologies.
these are generally  objects that are transient and last for a single browser page request only.
finally whitebeam addresses in a transparent manner the issue of scaleability and reliability, allowing a developer to take an application initially running on a single server and to run that same application unchanged on multiple servers using standard load-balancing products.
the standard session management functions store session information in a file on the local file-system.
this difference may seem rather subtle - and if all you do with whitebeam is to write php like applications but using javascript then the differences will probably not be apparent.
you'll find alist of all the whitebeam classes here.
asp, php are text based technologies - they have no intrinsic awareness of  xml or document structure this difference may seem rather subtle - and if all you do with whitebeam  is to write php like applications but using javascript then the differences  will probably not be apparent.
to write an application requires access to a number of underlying functional technologies.
other associated objects covering making http  requests, sending emails, making database connections etc.
most of these have been developed  to for the most common 'single-server' web application environment.