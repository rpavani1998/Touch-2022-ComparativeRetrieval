migrating from php 4 to php 5 miscellaneous questions migrating from php 4 to php 5 php  and com [edit] last updated: fri, 03 feb 2012 view this page in brazilian portuguese chinese (simplified) french  german japanese polish romanian russian persian spanish turkish other php and other languages php is the best language for web programming, but what about other  languages?
further, php runs on nearly every modern platform in existence, while cold fusion is only available on windows, solaris, linux, macos, and aix.
php is also easier to integrate into existing html than perl.
yet php's command-line interpreter (cli) is powerful enough to perform high-level tasks much in the same way perl has been traditionally employed.
i have taken zce (zend certified engineer) before couple of years and i am working in the field of compiler construction.
i would also add some higher-level (less computer-science oriented, simply because the task at hand is generating web pages 'on the fly').
firstly managment of privilege - but that applies (afaik) to any web-based system.
however, in my opinion php is much easier to work with and does what it's designed to do more elegantly than perl.
i would say that while php has tremendous strength, it equally lacks in its implementation of oop requirements.
"c:\usr\local\j2sdk1.4.2_03\jre\bin\server\jvm.dll" java.library.path =
its true  that there is a bit more code required to supplement things that $soft and  others give you for a price, but the bottom line is that most of these things  are not very difficult to do properly.
"php is commonly said to be faster and more efficient for complex programming tasks and trying out new ideas.
with a single line - header("content-type: text/vnd.wap.wml"); you can be in another "mobile" dimension :).
php comes closest to solving my problems, many of which are very much in the enterprise applications domain.
but what's always been lacking has been fully implemented  oop.
yes, php is an interpreted language (but...php accelerator?
the fact of the matter is that the world is rapidly shifting towards an soa mentality, and rich applications presented through the web.
where as in asp/vbscript, you can't due to the fact that ssi is processed before the vb code.
it'd be a sad world  to live in where there was only one programming language/methodoly/idiom -  diversity is a great thing.
c# (.net), java -- hell even actionscript have a fully oo implementation allowing effective implementation of recognized design patterns.
futhermore, due to php's lack of oo  support, true collaborative team development is greatly hindered.
in other words, if you are using a connected data source, such as a sql database, try shifting the processing time back a layer by providing a medium interval return from the data source to an xml file that the web service can access.
jsp have almost no bug at all, or at least i did not find any, but it is hard to debug.
(zend certified engineer)
fabioissamu at yahoo dot com 21-feb-2007 06:48
php is commonly said to be faster and more efficient for complex programming tasks and trying out new ideas, and is considered by many to be more stable and less resource-intensive as well.
however, from my opinion php is  the best language that is used to design web solution because it extendable  language.
once these issues are addressed i think we'll see more support of php, and less resistance to its place in the enterprise.
c# (.net), java -- hell even  actionscript have a fully oo implementation allowing effective implementation  of recognized design patterns.
and i called it "init fileobject"  why always those objects...
you can easily make dynamic wml pages for mobile phone users with php.
asp support  is also enabled by default in iis, making it easy to get up and running.
sounds like this faq needs to be updated.phalcomb at arbolnet dot com 05-feb-2003 01:29 how about asp.net and .net
your comparisons are interesting and well thought out.
all the php api functions are there and there's plenty  of examples due to the many existing modules and their source codes.
further, php runs on nearly every  modern platform in existence, while cold fusion is only available on windows,  solaris, linux, macos, and aix.
in large part, php has all the 'good' functionality of perl - constructs, syntax, et cetera - without making it as complicated as perl can be.
cold fusion has a good ide and is generally  quicker for new programmers to achieve results for very simple applications,  whereas php initially requires more programming knowledge.
"c:\usr\local\php\extensions" to correctly utilize php in enterprise applications, one may want to bear in mind that if php is being used synchronously, it should be kept to the presentation layer only.
where as in asp/vbscript, you can't due to the fact that ssi is  processed before the vb code.
the paragraph on "cold fusion" (it's actually "coldfusion", by the way), and in the included link is so woefully inaccurate and out of date, that it's not even funny.fabioissamu at yahoo dot com 21-feb-2007 06:48 i'm not going to debate the the pros and cons of each language, but please -- let people be informed by information that's more based in reality.
while that may be relevant for application programming, it's totally irrelevant for web programming.
i believe that the php community today suffers from this mentality.
take all you need ... and even more.add a note
however, the components built in asp are really limited, so if you need to use "advanced" features (like interacting with ftp servers), you'll need to buy additional components.
also, asp.net can make things that php don't such as manipulate the server's filesystem (y use that technique in the database system of my own cms made with .net) and not only the files that are inside the website.
---------------------------------anonymous at coward dot com 08-apr-2003 08:23 quote: this is a comparison between php and java/jsp: http://www.tek271.com/articles/javaorphp.html any comments?
compiled java classes act more like optimised / confuscated scripts and still needs an interpreter in the end.
this limits its availability to win32 based  servers.
there are issues with using php for this kind of application.
thanks to it's common language runtime, .net technology allows the  programer to choice wich language to use.
how about coldfusion mx?
coldfusion mx server cost about $1300, but the total built in functionality and versatility makes it a worthwhile.
in my mind, the proof is in the pudding - which technology results in the better, more production-ready applications?
i've been using php for... gees...Â  a long  time now.
once these issues are addressed i think  we'll see more support of php, and less resistance to its place in the  enterprise.
cold fusion is designed with non-programmers in mind, while php is focused on programmers.
steve at caralan dot com 09-aug-2009 12:25 comparison of programming languages is a  pretty spurious exercise, but here goes: i have programmed with perl  for many years and have yet to find anything i want to do that perl can't  deliver.
php is generally referred to as more stable and less resource intensive as well.
web programming, imho, is about being able to get a quick, organized solution out quickly so that it can be maintained and dynamic.
search for in the all php.net sites this mirror only function list online documentation bug database site news archive all changelogs just pear.php.net just pecl.php.net just talks.php.net general mailing list developer mailing list documentation mailing list view this page inbrazilian portuguese chinese (simplified) french german japanese polish romanian russian persian spanish turkish other php is the best language for web programming, but what about other languages?
during his keynote, he presented some very interesting comparison between the  popular development "frameworks" php, ruby on rails (ror, rails) and  java http://www.tbray.org/talks/php.de.pdf in that he show  php the first in scalability bb at servertje dot nl 06-jun-2006 12:58
let's get rid of all the back support and compatabilities for legacy code in  favor of maturing the language and increasing its value (and decreasing  objections from the enterprise market) daniel at cedilotte dot  com 03-nov-2005 04:58
i find that most suggested "design  patterns" are weak workarounds in php.
i wouldn't want to be without either tool.
but what's always been lacking has been fully implemented oop.
if you still cannot get the php processes back up to par, then you should consider using php as an asynchronous page constructor, thus shifting php itself back to the business process layer and allowing the web service (apache, iis, netscape, etc.) to return html files instead.
in light of this php should be regarded as valuable tool for application development.
because of this, perl can get very complicated.
i hope that the better wins i really must take issue with (cash at nospam dot thesilverside dot com)'s comments regarding enterprise applications and php.web consultant since 1994 19-jan-2005 06:26
i truely believe that also picks a part of the puzzle...
but i did find out in only 1 hour that the syntax of php gives you much less typing than asp, that is a fact.
abstraction is a stupid thing to bicker about.
also you can write caching *with* php, also checkout http://shootout.alioth.debian.org/, and have you seen the benchmarks for pharrot?).
i'm not familiar with coldfusion mx, but as it sounds like it's a rather new product, i would draw the conclusion that it isn't what the writer of this faq had in mind when addressing php vs. coldfusion comparisons.
the only problem is that you take at least twice times to make same program on jsp and it is not even close as well documented and easy to use as php.
as a pure cs language, there is no doubt that java is superior.
i'll admit that for a very few applications, then  server hardware is more expensive than developer time - like if you're turning  around more than 500000 hits/hour, then it may work out cheaper to develop in  'c' with half the servers than php, but this is far from the sort of volume  i've seen on an enterprise application.
but as a web page generator, i have moved from a java-centric approach to a php approach, leveraging servlets or beans as needed "under the covers".
while coldfusion once had better error handling, database abstraction, and date parsing, the database abstraction shortfalls were addressed in php 4.
your point about a string being encapsulated in a string class is somewhat irrelevant if you are a programmer cranking markup.
the biggest drawback of asp is that it's a proprietary system that is natively used only on the microsoft internet information server (iis) platform.
well, all i can say about asp.net and the .net frameworks is that rather than adopt them we decided to switch all of our development to php and other open-source tools.
because of  this, perl can get very complicated.
i really must take issue with (cash at  nospam dot thesilverside dot com)'s comments regarding enterprise applications  and php.
now, granted, there are ways to do things like method overloading,  but c`mon....
in php.ini file add - extension=php_java.dll - [java] java.class.path = "c:\usr\local\php\extensions\php_java.jar" java.home = "c:\usr\local\j2sdk1.4.2_03" java.library =
that makes the syntax of for example the "for" statement less to my desire, which i like better in vbscript (asp)...
comparison of programming languages is a pretty spurious exercise, but here goes:tony 16-apr-2008 09:01
all the options and extras from db+php oriented web-site can easily be transfomed into a wap version of your site.
i agree with web consultant concerning to asp.net and  .net framework.
if you're on windows) would be more appropriately used within the business process and data access layers.
cold fusion has a good ide and is generally quicker for new programmers to achieve results for very simple applications, whereas php initially requires more programming knowledge.
php does not have the out-of-the-box functionality for the above needs.
compiled java classes act more like optimised /  confuscated scripts and still needs an interpreter in the end.
in light of this php should be  regarded as valuable tool for application development.
i've been working with php, jsp, java and cfm for 2 years now.dir at badblue dot com 25-sep-2002 05:51 i can tell that for web development only, php is not nearly as good as cfm on speed, on ease to use and on interaction.
also, asp.net can make  things that php don't such as manipulate the server's filesystem (y use that  technique in the database system of my own cms made with .net) and not only the  files that are inside the website.
php vs coldfusion mx http://www.macromedia.com/devnet/mx/coldfusion/articles/php_cfmx.html
overall, well done - and a very popular topic!
i'm very dissappointed to see that languages (like c#), sponsored by the likes of m$ have been able to develop such mature oo languages so rapidly, while php remains... well... practically in the stone age.
good dot midget at gmail dot com 16-dec-2005  09:49
having  both is the best solution.
php comes closest to solving  my problems, many of which are very much in the enterprise applications domain.
the same thing in php  that's all...
one of the  pro's of asp is that, since it primarily uses vbscript, it's relatively easy to  pick up the language if you're already proficient in visual basic.
the fact of the matter is that most of these new and "improved" development tools dont save much, if any money, and are mostly, unnecessary.
however, in my opinion php  is much easier to work with and does what it's designed to do more elegantly  than perl.
if you really want to maintain higher speed on presentation, then perhaps one would want to incorporate asynchronous instead of synchronous processing into the presentation layer of your application.
asp servers crash very much.
ive programmed in c, c++, vb, asp (since the  original beta in 1995) and asp.net, com, com+, .net
now, granted, there are ways to do things like method overloading, but c`mon....
how long  does it really take to write a good data abstraction layer - that can be  repurposed.
php is the best ever !.
also, asp.net make a lot easier for  programmers to make programs that communicate with the web site without needing  of a browser (i use that technique in a small application that allows my site's  users to "navigate" the site and also send and receive personal  messages a lot faster than with the web) php needs to get improved to  be better than asp.net.
tricrokra 26-oct-2003 01:28
tim bray, who - among many other things - co-edited the xml 1.0 and xml namespace definitions, was invited to the international php conference to give a keynote about "how to combine php technology with java based on enterprise systems".
also, asp.net make a lot easier for programmers to make programs that communicate with the web site without needing of a browser (i use that technique in a small application that allows my site's users to "navigate" the site and also send and receive personal messages a lot faster than with the web) php needs to get improved to be better than asp.net.
the paragraph on "cold fusion" (it's actually  "coldfusion", by the way), and in the included link is so woefully  inaccurate and out of date, that it's not even funny.
having both is the best solution.
the biggest drawback of asp is that it's a  proprietary system that is natively used only on the microsoft internet  information server (iis) platform.
well, all i can say about asp.net and the .net frameworks is that rather  than adopt them we decided to switch all of our development to php and other  open-source tools.
also you can write caching *with* php, also checkout http://shootout.alioth.debian.org/, and have you seen the benchmarks for  pharrot?).
perl is a very tried and true language, and has stood its ground since the 1980's, but php has matured and evolved quickly, and continues to make fantastic progress.
it is justifiably described as the "swiss army chainsaw" of  programming.
adding more tiers into your application is a recipe for disaster since it reduces scalability by creating bottlenecks/crossovers and has a big impact on transparency.
---------------------------------
as a programmer in c, i found php internally as easy as externally.steve at caralan dot com 09-aug-2009 12:25 php is the best ever !.
however, the components built in asp are really limited, so if you need to use  "advanced" features (like interacting with ftp servers), you'll need  to buy additional components.
if you start out with php, ask yourself how much time and money you have in developing the source to provide the functionality you are looking for.
the biggest advantage of php over perl is that php was designed for scripting for the web, while perl was designed to do a lot more.
i put this into a function because the line is simpy to long
embedding object-oriented code into a page can be much more painful (and slower to execute) than leveraging traditional coding techniques.
there are a couple of projects in the works that allows asp to  function with other environments and webservers:Â»Â instantasp from  Â»Â halcyon (commercial), chili!soft asp from Â»Â chili!soft  (commercial), andÂ»Â mono (open-source).
the fact of the matter is that most of these new and  "improved" development tools dont save much, if any money, and are  mostly, unnecessary.
the only disadvantage about php is the somewhat quirky language and inconsistant (and long) function names, which makes it hard for newbies to learn from scratch.
we probably all agree that php, compared to what coldfusion was at the time of the writing of that part of this faq, is far more capable of complex scripts, and also generally outperforms coldfusion in similar tasks, too.
asp support is also enabled by default in iis, making it easy to get up and running.
frameworks and in  c("sharp").
i agree with web consultant concerning to asp.net and .net framework.
i am much less experienced with php but have found it to  be relatively lightweight.
the fact of the matter is  that the world is rapidly shifting towards an soa mentality, and rich  applications presented through the web.
let's get rid of all the back support and compatabilities for legacy code in favor of maturing the language and increasing its value (and decreasing objections from the enterprise market) another thing related to php vs asp.ahumeniy at vtr dot net 21-may-2005 05:43
thanks to it's common language runtime, .net technology allows the programer to choice wich language to use.
one of the first things i saw was that php is based on c, which is one of the hardest programming languages in the world.
really...Â  now, i know the argument is that php is related  to the web - not application development.
adding more tiers into your application is a recipe for disaster  since it reduces scalability by creating bottlenecks/crossovers and has a big  impact on transparency.
practically in the stone age.
i've been using php for... gees... a long time now.
it'd be a sad world to live in where there was only one programming language/methodoly/idiom - diversity is a great thing.
therefore, some higher-level things to consider: 1) compare the complexity of real-world production applications (postnuke.com vs ?
and i like his spirit.
it's worth building it out further.
asp only runs on windows servers, and we all know how much windows crashes.
the advantage here is programming the relative simple business logic in php and  programming those core functions that really require speed in php modules, if  you really have to.
we have found php to be an excellent replacement for  similar $soft tools and technologies for web development.
php is  also easier to integrate into existing html than perl.
ahumeniy at vtr dot net 21-may-2005 05:43
you can use php vs java in following order 1.
in discussion boards, jpgraph vs. ?
3) compare native database and directory support.
a particular quality that is  listed as one of coldfusion's strengths is its excellent search engine, but  many strong arguments suggest that a search engine is not something that should  be included in a web scripting language.
the  only disadvantage about php is the somewhat quirky language and inconsistant  (and long) function names, which makes it hard for newbies to learn from  scratch.
i think it's worth to mention that it's incredible  easy to write a php module in c and use it in your scripts with the speed of  true machine language.
firstly managment of privilege - but  that applies (afaik) to any web-based system.
there's a lot been written elsewhere on  php and scalability which i won't repeat here.
the flexibility / complexity of perl can  make it difficult for developers of varying skill levels to collaborate.
frameworks and in c("sharp").
probably the worst comparison i have seen in a long while.
as a programmer in c, i found php internally as easy as externally.
there's also the problem of namespace collisions in large apps.
this limits its availability to win32 based servers.
php is usually the best option within the areas where php is designed to excel.
we simply got tired of all the churing of the development platform from $soft: things like changing api's during final betas, undocumented api's etc.berjoza at bigmir dot net 26-mar-2004 03:25 ive programmed in c, c++, vb, asp (since the original beta in 1995) and asp.net, com, com+, .net
i would ask the following, however as you investigate this topic further... you'll soon become the php vs. java guru.
tim bray, who -  among many other things - co-edited the xml 1.0 and xml namespace definitions,  was invited to the international php conference to give a keynote about  "how to combine php technology with java based on enterprise  systems".
legit development teams rely on this to effectively lock down their interfaces, implement error handling, etc etc etc.
now, i know the argument is that php is related to the web - not application development.
but for web programming, jsp doesn't hold a candle to php, imo.
tony 16-apr-2008 09:01
hopefully ibm will jump in here and kick things into high gear.
php vs. cold fusion", not "php vs. compiled languages (jsp,asp.net, and coldfusion mx)".
perl is a very tried and true language, and  has stood its ground since the 1980's, but php has matured and evolved quickly,  and continues to make fantastic progress.
none out-of-the-box database integration with popular rdbms(oracle,sql server), integration with com and to java servlet and enterprise javabeans, that alone make coldfusion mx and asp.net an attractive development platform.
however, from my opinion php is the best language that is used to design web solution because it extendable language.
i think there's been a slight overlook within the comments about  php's model for oop.
firstly, i was absolutely thrilled to see the enhancements of php5.
in content management, phpbb.com vs. ?
there's a lot been written elsewhere on php and scalability which i won't repeat here.
since i regularly develop  embedded applications with php using http as the communications substrate for  transactions spanning 6 or more origanisations, i'd like to know whay i  shouldn't be using php / processing synchronously, and how i can create a near  real-time system without synchronous operation.
2) compare slinging (generation) of markup which is where php excels (as it was designed to sling markup - this includes features such as character transformations, variable accessibility, web page captures (see the fopen call which captures a web page in a single function call).
cold fusion is  designed with non-programmers in mind, while php is focused on programmers.
java is a better solution.
i have programmed with perl for many years and have yet to find anything i want to do that perl can't deliver.
on applications programming..
since i regularly develop embedded applications with php using http as the communications substrate for transactions spanning 6 or more origanisations, i'd like to know whay i shouldn't be using php / processing synchronously, and how i can create a near real-time system without synchronous operation.
its true that there is a bit more code required to supplement things that $soft and others give you for a price, but the bottom line is that most of these things are not very difficult to do properly.
the flexibility / complexity of perl can make it difficult for developers of varying skill levels to collaborate.
i am much less experienced with php but have found it to be relatively lightweight.
php  has a less-confusing and stricter format without losing flexibility.
we have found php to be an excellent replacement for similar $soft tools and technologies for web development.
i believe that the php  community today suffers from this mentality.
php is fast but is a pain on some aspects and has loads of bugs.
they may be out there for java - i would just like to know where they are and who is using them.
migrating  from php 4 to php 5 php and com [edit] last updated: fri, 03 feb 2012 add a note user contributed notes php and other languages cs dot abdullah at hotmail dot com 04-nov-2010 11:57 i  have taken zce
(suggestions please).
java provides beans and struts, coldfusion provides  fast development and .net....
the global variables, lack of package system, and loosely typed nature of php makes it easier to use and get stuff done in, while the syntax is still clean and easy to maintain.
java provides beans and struts, coldfusion provides fast development and .net....
atoi_monte at hotmail dot com 24-jul-2003 07:34
how about php and java?cash at nospam dot thesilverside dot com 11-jan-2004 06:12 you can use php vs java in following order 1.
they penalize php for class scope and global variables and such.
if you are an experienced c or c++ programmer, i think php makes automaticly the best choice out of php vs asp.
php might be good for developing non complex websites for no cost; however when you are developing enterprise web systems that have to integrate with many different flavor of sources ..
it is justifiably described as the "swiss army chainsaw" of programming.
all the php api functions are there and there's plenty of examples due to the many existing modules and their source codes.good dot midget at gmail dot com 16-dec-2005 09:49
i find that most suggested "design patterns" are weak workarounds in php.
firstly, i was absolutely thrilled to see the  enhancements of php5.
i'll admit that for a very few applications, then server hardware is more expensive than developer time - like if you're turning around more than 500000 hits/hour, then it may work out cheaper to develop in 'c' with half the servers than php, but this is far from the sort of volume i've seen on an enterprise application.
futhermore, due to php's lack of oo support, true collaborative team development is greatly hindered.
legit  development teams rely on this to effectively lock down their interfaces,  implement error handling, etc etc etc.
i would say  that while php has tremendous strength, it equally lacks in its implementation  of oop requirements.
i'm very dissappointed to see  that languages (like c#), sponsored by the likes of m$ have been able to  develop such mature oo languages so rapidly, while php remains...
it will also give more resources back to php and your web service processes.
i don't think asp itself is the evil one in this.
another thing related to php vs asp.
i do like the syntax of php a lot and the speed of it is great, although the client/server interactivity of asp with windows and mac clients is what i'm excited to see grow with future versions of php.mavi_br at someplace dot com 13-dec-2002 12:02
while it won't impact the programming that much ( you can still code just like you always have) you can at least feel more like c++ when we finally get to use php5.
when it comes to stability.
i think that for the rest the pick of language is pretty personal.
with php 5, i would just like to remind everyone, there will be a lot of concessions to java programmers (mostly to lure c++ hackers to php over c# or java) like constants, abstract stuff, and access control.
i would say : use what you need for your application, cfm is truly the fastest, as it has a daemon running instead of a per request, plus the ability to cache queries that is awesome.
there's also the problem of  namespace collisions in large apps.
i had the pleasure to talk with him
i have to note that a very big advantage of php over asp is that php has much easier commands...
surely, web consultant must have made the same conclusion based on his discovery that the faq is outdated and thus should be updated.
yet php's command-line interpreter  (cli) is powerful enough to perform high-level tasks much in the same way perl  has been traditionally employed.
asp is not really a language in itself, but an acronym for active server pages; the actual languages used to program asp include visual basic script, jscript, and c#, among others.
this will allow your web presentation layer to load the data significantly faster than it is now.
in our business there is a huge risk  from not having access to source code and we simply cant be held hostage by a  third party company: when you add up the dollar value of this risk for our  business it far exceeds the few dollars we need to spend in extra supplemental  coding - which is done once so its a one-time cost.
what's more important is the capability of the language.
in php.ini file add - extension=php_java.dll
before couple of years and i am  working in the field of compiler construction.
dan as far as i can see, web consultant apparently missed the topic, which was "3.
i hope that the better wins symcbean 20-feb-2005 10:00
how is a interpreted languge faster and less resource intensive than a compiled languge(jsp,asp.net, and coldfusion mx)?
we simply got tired of all the churing of the development  platform from $soft: things like changing api's during final betas,  undocumented api's etc.
currently,  asp.net is at the same level than php and, i would say that is better because i  can choose what language to use (php is also available for .net by the way).
good thing on jsp is that you can write real applications and have perfect interaction by using classes, plus it is much more of a serious language.
to ahabra,developer at i-space dot org 04-mar-2002 03:34 very interesting page.
this is  particularly evidenced in the lack of strict type casting.
the biggest advantage of php over perl is that php was designed for  scripting for the web, while perl was designed to do a lot more.
berjoza at  bigmir dot net 26-mar-2004 03:25 how about php and java?
asp is said to be a slower  and more cumbersome language than php, with less overall stability.
php is usually the best option within the areas where php is  designed to excel.
aside from page caching, (to my knowledge) you simply cannot get any faster than that.
it's necessary an update to this article.symcbean 20-feb-2005 10:00 currently, asp.net is at the same level than php and, i would say that is better because i can choose what language to use (php is also available for .net by the way).
php has a less-confusing and stricter format without losing flexibility.
java would have the advantage in generic database access (jdbc) but php has the advantage in ldap support (jndi has several bugs which we have run into - quite painful) and native database access (e.g., oracle or mysql integration).
web consultant 04-apr-2003 08:39
there are a couple of projects in the works that allows asp to function with other environments and webservers:Â» instantasp from Â» halcyon (commercial), chili!soft asp from Â» chili!soft (commercial), andÂ» mono (open-source).
this is particularly evidenced in the lack of strict type casting.
i'm not going to  debate the the pros and cons of each language, but please -- let people be  informed by information that's more based in reality.
there are issues with  using php for this kind of application.
the advantage here is programming the relative simple business logic in php and programming those core functions that really require speed in php modules, if you really have to.
during his keynote, he presented some very interesting comparison between the popular development "frameworks" php, ruby on rails (ror, rails) and javabb at servertje dot nl 06-jun-2006 12:58 http://www.tbray.org/talks/php.de.pdf in that he show php the first in scalability
other languages that were previously mentioned througout the notes above (such as perl, java, and the .net clr...
in large part, php has  all the 'good' functionality of perl - constructs, syntax, et cetera - without  making it as complicated as perl can be.
and that while vbscript is based on basic (beginners allpurpose symbolic instruction code)...
on the other hand you just can't do anything very special with cf like opening a socket with the ease of php.
php is commonly said to be faster and more efficient for complex  programming tasks and trying out new ideas, and is considered by many to be  more stable and less resource-intensive as well.
it's necessary an update to this article.
" i like to see proof of this statement.
one of the pro's of asp is that, since it primarily uses vbscript, it's relatively easy to pick up the language if you're already proficient in visual basic.
while coldfusion once had  better error handling, database abstraction, and date parsing, the database  abstraction shortfalls were addressed in php 4.
i think it's worth to mention that it's incredible easy to write a php module in c and use it in your scripts with the speed of true machine language.
a particular quality that is listed as one of coldfusion's strengths is its excellent search engine, but many strong arguments suggest that a search engine is not something that should be included in a web scripting language.
how long does it really take to write a good data abstraction layer - that can be repurposed.
take openening of a file in asp... first create a file object...
my experience with asp and php is about equal, i think they both serve equally as good of a purpose depending on what the programmer is trying to do.
web consultant since 1994 19-jan-2005 06:26 ...
asp is not really a language in itself, but an acronym for active server  pages; the actual languages used to program asp include visual basic script,  jscript, and c#, among others.
in php, it's possible to make sure your include files are not included more than once.
in php, it's possible to make sure your include files are not included  more than once.
asp is said to be a slower and more cumbersome language than php, with less overall stability.
if you ever tried to configure a web server for wap, serving wml content you know it's not an easy job.
in our business there is a huge risk from not having access to source code and we simply cant be held hostage by a third party company: when you add up the dollar value of this risk for our business it far exceeds the few dollars we need to spend in extra supplemental coding - which is done once so its a one-time cost.
i think there's been a slight overlook within the comments about php's model for oop.daniel at cedilotte dot com 03-nov-2005 04:58
i code too shortly in php to make a full analysis yet, but the complex object structues of vbscript is something i really put in question, php has a much easier syntax when it comes to that...