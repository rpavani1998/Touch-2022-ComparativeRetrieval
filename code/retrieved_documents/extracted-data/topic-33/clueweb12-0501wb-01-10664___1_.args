in order to reduce the amount of data i have to work with, i added a function to my database library that lets me choose which type of index i wish to use -- text, numeric, or both.in other words, by weeding out duplicate values once up front, we dodge working with twice the data in any loops in our calling script and we stand to save significant time.only about 8% of that time is spent actually pulling results from the database; the remaining 92% is devoted to processing the results.author info: advertisementadvertisement there are several ways to fetch database results, depending on your database server type and your php configuration.now the default behavior of my database class is to return both numeric and text indices, and it consistently takes about 55,000 milliseconds to run this query.the lesson, though, is that you should get only the type of results you'll actually be working with.if your php config is such that you can opt to use functions that will return only numeric or text indices, you may not need to write such a function.total runtime is about 41,000 milliseconds, with 40% of the time spent in retrieving results and 60% processing them; and when i set the return to "numeric," the results are even better: 31,000 milliseconds with a 20/80 split.; } return $newrows; } the result of adding this function is of course that we spend more time formatting the results before returning them to the calling function, but we spend less time processing the results after the fact.for example, using the sybase drivers to connect to an ms sql server, my php version will let me use the sybase_fetch_array() function but not the sybase_fetch_assoc() function.sybase_fetch_array() returns both text and numeric indices for each row returned, however, effectively doubling the data i have to pass around when processing the results.it's plain enough that i'm connecting to a database, invoking the "set_return()" function, and then looping through an array of row arrays to print the results.so if you're using text indices only in your code and you happen to be able to use sybase_fetch_assoc(), be sure you use it rather than using the more top-heavy sybase_fetch_array().i wrote a function within my database library that checks the value of the member variable "return_type," runs through the row results, and returns all numeric or text indices based on the value of that member variable: function format_results($rows){ //$rows is assumed to be a multi-dimensional //array composed of arrays of row results.but when i invoke 'set_return("text")', the results are somewhat improved.