i will not discuss further regarding classic asp since it is really already legacy tech, and unless you have a very specific reason to learn it (supporting legacy system) then you are advised against it.
unfortunately there is only so much time and far too many areas of interest to cover all the bases so i must try to choose wisely.
classic asp is outdated and could be thought of as microsoft’s first attempt at web server side technology.
in terms of security generally speaking unless the developer is extremely “sloppy” than it is fairly secure “out of the box”.
in my view this would be a more advantageous option, because both technologies have a lot to offer.
the other problem is "spaghetti code" this is when sql, business logic, and presentation logic are all mashed into one place.
i'm an experienced windows user so asp with sql is going to be right up my alley, but i see php and mysql all over the place and i've read good things about them.
it is script based(visual basic or jscript) and executes on the server.
group 2 (closed source; ms stack): in this group are classical asp and asp.net along with ms sql server.
this already gives me something to "chew on", so thanks for that.
the it ninja the comprehensive online it community.
before committing to a particular path i'll likely "sleep on it" and return to your posts a couple more times to be (more) sure i am heading in the direction best suited to me.
i don't think a little opinion mixed in with the fact is going to hurt anyone.
in terms of php from a development perspective it has a "double edged" sword effect: in one sense it is incredibly easy to do common things (90% of most web application functions, eg send email, connect to database, parse data etc).
the other issue is that security is not "default", in other words one has to actively know what they are doing to avoid serious security issues.
i'm sure others here will find this all very informing as well, thank you very much for laying it out so well!
the results have been a disastrous, the industry has been effected in a negative way, of course one can not put 100% blame on php alone it is far more complex than that.
encryptedbytes last edited by encryptedbytes on thu mar 29, 2012 10:49 pm, edited 1 time in total.
in summary: quote: asp.net is like an advanced spacecraft, it has all the advanced bells and whistle.
this means one can share code across different domains(example, desktop application classes could be used in web application projects and vice versa).
it takes great care and experienced and highly competent developers to create very clean and highly maintainable code.
classic asp is outdated and could be thought of as microsoft’s first attempt at web server side technology.
unlike php and other server side scripting technologies, asp.net are source compiled, which means that they are very efficient for creating cpu demanding web applications.
i like the idea of open-source and free and also get a sense that php/mysql will be easier to digest and get familiar with.
i would add further, that another option would be to actually learn both.
in summary: quote: using php, is like driving a fast racing car, without any safety gear, no helmets, no harness.
this is a huge problem because this reduces maintainability; readability and makes it very difficult to extent etc.
in my view this would be a more advantageous option, because both technologies have a lot to offer.
i'm sure others here will find yours posts quite informative as well.
there are also many downsides: it is not really cross platform, picking asp.net means you are effectively tied to the microsoft platform.
however this "ease" of use comes at a major cost, the language is a total failure.
the other problem is one of "barrier to entry"; because its so "easy" to "learn" php.
i don't think a little opinion mixed in with the fact is going to hurt anyone.
before committing to a particular path i'll likely "sleep on it" and return to your posts a couple more times to be (more) sure i am heading in the direction best suited to me.
in theory at least, not only is the .net platform language agnostic(having over 40 languages) but also os independent (via mono project).
reading back my post, i know there are biases, this was not intentional but a side effect of working on one tech more than another.
the .net platform allows multiple languages to target the clr, this is done by first compiling source could to msil(microsoft intermediate language), which can then be turned into highly optimised clr byte code.
it is paid software; you will need to pay for licences for commercial uses.
in summary: quote: using php, is like driving a fast racing car, without any safety gear, no helmets, no harness.
the bcl provides a common set of libraries to handle the usual software tasks such as graphics processing and file handling.
it is paid software; you will need to pay for licences for commercial uses.
asp.net provides a whole host of advanced features such as custom controls, global .asax handlers, generic handles, master pages, and many other features to build enterprise level systems.
group 2 (closed source; ms stack): in this group are classical asp and asp.net along with ms sql server.
in order to understand asp.net and how its related eco system fit in, you first need to understand what “.net” is.
it's when opinion supersedes the information that the message gets lost and little or nothing is actuallylearned.
having worked with all the technologies mentioned (bar jsp); here is the breakdown: i would like to make two groups: group 1 (open source; lamp stack): this group is the php and mysql combination, and will be typically run under linux based servers.
in terms of security generally speaking unless the developer is extremely “sloppy” than it is fairly secure “out of the box”.
this has meant that a lot of "non developers" or people who have no formal training as professionally programmers get into "web development".
encryptedbytes last edited by encryptedbytes on thu mar 29, 2012 10:49 pm, edited 1 time in total.
i'd love to hear from the titn community about the pros and cons of these languages and especially from others with experience with more than one of them.
this means one can share code across different domains(example, desktop application classes could be used in web application projects and vice versa).
in terms of tooling, it is really mature and feature complete.
of course php can be used with any sql solution, and could be used with microsoft sql server.
i haven't read much about jsp, but it sounds a bit interesting too.
i will not discuss further regarding classic asp since it is really already legacy tech, and unless you have a very specific reason to learn it (supporting legacy system) then you are advised against it.
pm posts: 38 location: wisconsin, usa mark73 wrote: part ii asp.net and sql server... thanks so much for taking the time to follow up on your previous post with the other part of the equation, you've really laid out the differences and advantages/disadvantages in a very accessible way and have given me a good understanding of the major factors in deciding which way to go.
i'm sure others here will find yours posts quite informative as well.
it is not open source, and microsoft has an aggressive development cycle, constantly updating and changing the technologies.
i haven't read much about jsp, but it sounds a bit interesting too.
the .net platform allows multiple languages to target the clr, this is done by first compiling source could to msil(microsoft intermediate language), which can then be turned into highly optimised clr byte code.
if you look at the history behind the birth of php one can understand why this is the case.
one example could be a wamp stack: using a windows based os with php and mysql.
in terms of php from a development perspective it has a "double edged" sword effect: in one sense it is incredibly easy to do common things (90% of most web application functions, eg send email, connect to database, parse data etc).
the other issue is that security is not "default", in other words one has to actively know what they are doing to avoid serious security issues.
in the winforms world, the abstraction is an event based paradigm(those coming from a desktop programming environment will be very familiar with this).
it takes a master driver to race such a car.
i like the idea of open-source and free and also get a sense that php/mysql will be easier to digest and get familiar with.
thanks so much for taking the time to follow up on your previous post with the other part of the equation, you've really laid out the differences and advantages/disadvantages in a very accessible way and have given me a good understanding of the major factors in deciding which way to go.
focusing on all aspects of it from it jobs to software development.
pm advisor joined: sun feb 26, 2012 11:44 am posts: 41 encryptedbytes wrote: mark73 wrote: part ii asp.net and sql server... thanks so much for taking the time to follow up on your previous post with the other part of the equation, you've really laid out the differences and advantages/disadvantages in a very accessible way and have given me a good understanding of the major factors in deciding which way to go.
i'd love to hear from the titn community about the pros and cons of these languages and especially from others with experience with more than one of them.
it is for this reason that most professional developers look with "disapproval" when it comes to php.
unfortunately there is only so much time and far too many areas of interest to cover all the bases so i must try to choose wisely.
in order to understand asp.net and how its related eco system fit in, you first need to understand what “.net” is.
it takes a master driver to race such a car.
of course php can be used with any sql solution, and could be used with microsoft sql server.
the bcl provides a common set of libraries to handle the usual software tasks such as graphics processing and file handling.
pm posts: 38 location: wisconsin, usa i have a pretty good grasp of basic html and have been learning css and some javascript, but i think i need to know more about doing things on the server side.
i'm sure others here will find this all very informing as well, thank you very much for laying it out so well!
because your opinion is based on experience i think it is both relevant and valuable.
reading back my post, i know there are biases, this was not intentional but a side effect of working on one tech more than another.
if you look at the history behind the birth of php one can understand why this is the case.
once again, asp.net can also be used with mysql (as mysql is cross platform).
it takes great care and experienced and highly competent developers to create very clean and highly maintainable code.
as such winforms developers must understand “page cycles” in order to effectively develop web application.
i like the idea of open-source and free and also get a sense that php/mysql will be easier to digest and get familiar with.
the results have been a disastrous, the industry has been effected in a negative way, of course one can not put 100% blame on php alone it is far more complex than that.
in such cases, php or even classic asp would be much better suited.
one example could be a wamp stack: using a windows based os with php and mysql.
pm advisor joined: sun feb 26, 2012 11:44 am posts: 41  encryptedbytes wrote: mark73 wrote: part ii asp.net and sql server... thanks so much for taking the time to follow up on your previous post with the other part of the equation, you've really laid out the differences and advantages/disadvantages in a very accessible way and have given me a good understanding of the major factors in deciding which way to go.
it is for this reason that most professional developers look with "disapproval" when it comes to php.
the other problem is "spaghetti code" this is when sql, business logic, and presentation logic are all mashed into one place.
it's when opinion supersedes the information that the message gets lost and little or nothing is actuallylearned.
who knows though... maybe after getting my feet wet with one i may develop an interest in going even further and start looking into the other.
pm posts: 38 location: wisconsin, usa i have a pretty good grasp of basic html and have been learning css and some javascript, but i think i need to know more about doing things on the server side.
asp.net provides a whole host of advanced features such as custom controls, global .asax handlers, generic handles, master pages, and many other features to build enterprise level systems.
having worked with all the technologies mentioned (bar jsp); here is the breakdown: i would like to make two groups: group 1 (open source; lamp stack): this group is the php and mysql combination, and will be typically run under linux based servers.
this has meant that a lot of "non developers" or people who have no formal training as professionally programmers get into "web development".
there are also many downsides: it is not really cross platform, picking asp.net means you are effectively tied to the microsoft platform.
because your opinion is based on experience i think it is both relevant and valuable.
although via the "mono" project one can technically run asp.net platform under linux, its not a very popular combination.
before committing to a particular path i'll likely "sleep on it" and return to your posts a couple more times to be (more) sure i am heading in the direction best suited to me.
it is script based(visual basic or jscript) and executes on the server.
it’s far more complex, sometimes it may even be overkill if you want to do simple things.
in such cases, php or even classic asp would be much better suited.
although via the "mono" project one can technically run asp.net platform under linux, its not a very popular combination.
in the winforms world, the abstraction is an event based paradigm(those coming from a desktop programming environment will be very familiar with this).
unlike php and other server side scripting technologies, asp.net are source compiled, which means that they are very efficient for creating cpu demanding web applications.
it is not open source, and microsoft has an aggressive development cycle, constantly updating and changing the technologies.
in summary: quote: asp.net is like an advanced spacecraft, it has all the advanced bells and whistle.
who knows though... maybe after getting my feet wet with one i may develop an interest in going even further and start looking into the other.
this is a huge problem because this reduces maintainability; readability and makes it very difficult to extent etc.
if i'm going to learn something new i should probably go with the latest and greatest, which would be asp.net, but if "classic" asp is still in wide use it wouldn't hurt to consider it as well.
inexperienced drivers will go fast, however they will also likely crash it and die in a blazing inferno.
it’s far more complex, sometimes it may even be overkill if you want to do simple things.
as such winforms developers must understand “page cycles” in order to effectively develop web application.
once again, asp.net can also be used with mysql (as mysql is cross platform).
i'm an experienced windows user so asp with sql is going to be right up my alley, but i see php and mysql all over the place and i've read good things about them.
inexperienced drivers will go fast, however they will also likely crash it and die in a blazing inferno.
in theory at least, not only is the .net platform language agnostic(having over 40 languages) but also os independent (via mono project).
the other problem is one of "barrier to entry"; because its so "easy" to "learn" php.
if i'm going to learn something new i should probably go with the latest and greatest, which would be asp.net, but if "classic" asp is still in wide use it wouldn't hurt to consider it as well.
