or a stock application; in ajax you would continuously poll for updates in the stock symbols the user is interested in (even if there is no change in price), compared to the flex approach where the client would use messaging to subscribe to the applicable symbols, and the flex enterprise server would push updates as they occur.
in the flex world, your application wouldn't need to post a request to the server every time the user made a change.
application servers maintain state by using cookies and session variables to keep track of users, but all the logic is on the server.
instead of the logic living purely on the server side, your presentation tier is all on the client.
the removal of this limitation is dependent on theapollo player (aka the universal client) - which will allow flex/flash apps to run and behave completely like a desktop application without having to live inside a browser.
you've used javascript to make your forms a little more intuitive with dynamic/context driven comboboxes, but to do anything more often requires heavy amounts of javascript and dhtml.
the flash swf format is a published specification - so it is possible for other vendors to make tools that generate flash files.
the attached file provides a static xml file; but you easily hook it up to a cf template which queries a database based on the parameters passed in via the url and return back the up to date html.
or what if you wanted to make an application that allows users to update their profile by clicking on a button that takes a picture from their webcam - this is extremely easy in flex, and impossible in html/ajax.
the mindset you need to employ is that flex is used for rich internet applications, not rich web applications.
this is actually quite a severe limitation if you want to maximize on desktop real-estate (especially for users that have multiple monitors).
the flex version retrieves the exact same xml content as the coldfusion one would.
for coldfusion and jsp developers the mxml part is immediately understandable.
application servers maintain state by using cookies and session variables to keep track of users, but all the logic is on the server.
even better, with the flash player penetration near 99% (version 7 is at 83%) you can provide this real-time rich experience on unix, windows, and mac.
it lets you focus on the client workflow, and not waste time building html tables and endless cosmetic logic.
a new sql adaptor, simplifies the development of applications using data management services.
since the application is live you don't need that common update/submit button to post that change; the application knows an update was made and can commit those changes on the backend if nescessary.
the flex version retrieves the exact same xml content as the coldfusion one would.
adobe/macromedia flex takes you to the next level of web application development with the concept ofrich internet applications (aka rias).
limitations flex applications are flash applications, and are limited by what the flash player can do.
even if you are a pro at it, it's extremely time consuming to make workflow interactive and user friendly.
they're easy to use and often require just passing it data and it handles the presentation on its own.
imagine clicking on a column title and the column automatically sorts without reloading the page.
or the whole realm of sound; where you can provide audio guided applications that talk users through their first time in the workflow.
as demonstrated above, often you'll use a table to list data, and then present the user with an edit icon which let's you edit that record, which posts a url to the server, where the browser loads in an edit page where you make the appropriate changes, then hit submit, the server processes the update and then sends back the resulting html.
for coldfusion and jsp developers the mxml part is immediately understandable.
the first example which uses coldfusion: it does a cfhttp to the xml provider by passing in the sort direction parameters based on what column a user clicked on.
so imagine changing filters or criteria, and the table automatically updating as a result.
the first example which uses coldfusion: it does a cfhttp to the xml provider by passing in the sort direction parameters based on what column a user clicked on.
the flex app server provides other services such as being a gateway to remoteobjects (eg cf cfcs) and webservices.
so producing rich documentation is challenging.
alternatively any richness you try to accomplish in ie using dcom, activex, and dhtml locks you down to particular platforms.
this saves hits to your web server, application server, database, and network.
in the html scenario, if the data refreshes frequently, you would probably be meta-refreshing that page constantly, and again pounding databases for up to the date data.
on the debugging front you can use certain components such as xmlobject which comes with flex, flash debugging, and the netconnection debugger which lets you analyze data between remoteobjects and the flash player (ie your adobe/macromedia flex application).
pretty standard stuff for coldfusion, jsp, php, asp, or any other servlet language.
two other interesting examples include therestaurant finder from chrisophe coenraets where you slide a box around a map to see restaurants in the area, and the other being thebrocade sales dashboard (click on measure viewer, and then a company on the bar graph).
you've used javascript to make your forms a little more intuitive with dynamic/context driven comboboxes, but to do anything more often requires heavy amounts of javascript and dhtml.
now if the user wants to change the parameters, or perhaps sort on a particular column, typically the page would need to be sent back to the server where it rebuilds an up to date report based on the new criteria.
however developing rich applications in flash for those who are core developers is daunting and unintuitive.
flex removes that barrier to entry by providing a programmatic way for developing these rias.
there isn't a clear line between rias and rwas, but flex is definitely on the ria side of things in that you are building applications that are desktop like but use the internet for deployment ease and connectivity to services.
try dragging and dropping an article into the basket.
you build your main files in .mxml, and can build custom components and objects in .as (actionscript).
the second example which uses flex: since my web hosting company doesn't provide flex hosting i can only provide screen captures.
so while a user is looking at a page in their browser, the application is unable to do anything until the user commits an action that sends data from the page back to the server for processing.
after parsing the xml, it loops through the xml array with some basic styling to do alternating row colors.
it lets you focus on the client workflow, and not waste time building html tables and endless cosmetic logic.
you may have seen applications developed natively in flash itself and realized that it offers a much more robust experience for the user where productivity is bolstered by ease of use, streamlined workflow, and real time
the second example which uses flex: since my web hosting company doesn't provide flex hosting i can only provide screen captures.
although you can use any text editor to develop, flexbuilder is the primary development tool - which is a customized version of dreamweavermx.
a simple example would be a report or search tool that queries a sales/crm database based on various criteria from the user such as deal time frame, product group, and sales executive.
you build your main files in .mxml, and can build custom components and objects in .as (actionscript).
the roots of html originate as platform agnostic document distribution, and it vastly improved how content can be deployed, but severely compromised on ui functionality since it's a stateless mechanism.
the flex application server (a j2ee application) will compile your code into a flash file (.swf) which the browser then loads.
html is optimized for document distribution, so although it could be done in ajax using an army of developers - it's clearly the wrong choice.
you may have seen applications developed natively in flash itself and realized that it offers a much more robust experience for the user where productivity is bolstered by ease of use, streamlined workflow, and real time interactivity that is impossible to accomplish in html itself.
in the html scenario, if the data refreshes frequently, you would probably be meta-refreshing that page constantly, and again pounding databases for up to the date data.
try dragging and dropping an article into the basket.
so unlike a popup window in a browser which you can move to anywhere on your desktop, your flex/flash popup windows can't move outside the area occupied by the player.
the actionscript part will be familiar to java, and other oo developers.
it could be done; but the real application is aware of your mouse movements, every key stroke, and provides much more feedback to the user by using sound, animation, and other visual queues.
the flex version's columns are sortable and re-sizeable with no page refreshing required.
the hidden beauty is that your flex app can tap into your coldfusion cfc's as a webservice or remoteobject with no extra work required.
the flash player is not a web browser.
imagine clicking on a column title and the column automatically sorts without reloading the page.
click on any row and you'll see how it's immediately editable.
ajax's other drawback is that because javascript differs from browser to browser and os to os, a massive amount of qa needs to be done to ensure that it works across all platforms.
but to mitigate that adobe has been extremely open in allowing the community to direct the future of the platform (flex 2 is the result of public alpha and beta programs).
however free developer and trial editions were available that didn't require a license.
server-side pdf generation capabilities.
as a web developer you've often found yourself wishing there was a way to make web applications that weren't limited to the heavy restrictions of html.
it's a companion to your existing technology by being at the presentation tier, while your other application servers provide the middle/business tier.
unlike ajax, which is more along the rwa end of the spectrum in that it increases functionality and usage efficiency of web pages.
a simple example would be a report or search tool that queries a sales/crm database based on various criteria from the user such as deal time frame, product group, and sales executive.
however developing in flex is by far faster than developing productivity tools in flash natively; on some accounts there are development speed gains of 10x. flex out of the box comes with various pieces such as navigators (tree, accordian, tab), charting/graphing components, components such as the infamous datagrid, and effects such as fades and wipes.
more importantly, why would you want to be spending so much time on core ui functionality when you're getting paid to work on business logic and workflow.
as demonstrated above, often you'll use a table to list data, and then present the user with an edit icon which let's you edit that record, which posts a url to the server, where the browser loads in an edit page where you make the appropriate changes, then hit submit, the server processes the update and then sends back the resulting html.
they're easy to use and often require just passing it data and it handles the presentation on its own.
as a web developer you've often found yourself wishing there was a way to make web applications that weren't limited to the heavy restrictions of html.
even better, with the flash player penetration near 99% (version 7 is at 83%) you can provide this real-time rich experience on unix, windows, and mac.
the flash development tool is geared for designers, and developing on a timeline is a strange concept.
enables flex clients to do paging across record sets, rtmp (real time messaging protocol), push based communications to the client, and real-time data syncronization to a database.
this was aimed at the enterprise with deep pockets with a price of $15k usd per cpu.
the mindset you need to employ is that flex is used for rich internet applications, not rich web applications.
or the whole realm of sound; where you can provide audio guided applications that talk users through their first time in the workflow.
the user enters these values, clicks on a submit button, and the browser goes blank while it waits for a response from the server and loads the resulting html which would be a tabular list of records that match the criteria: time frame from to product group all adapters routers hubs switches  sales exec
after parsing the xml, it loops through the xml array with some basic styling to do alternating row colors.
but to be fair there is a major effort to provide tools and apis to abstract that complexity, and streamline the development of ajax based applications.
flex on the other hand has desktop like powers, so making such a graphically oriented application is fairly straight forward.
so to boil it down flex and ajax are like apples and oranges, but they're both fruit so they share some characteristics.
drag and drop from desktop to player is not supported.
so to boil it down flex and ajax are like apples and oranges, but they're both fruit so they share some characteristics.
most notably theopen ajax initiative which is supported by such heavyweights as ibm, bea, borland, google, mozilla, oracle, redhat, and yahoo.
or play with the price range slider; the workflow benefits are immediately recognizeable.
this may become possible with apollo, but for now the goal of the flash player is to remain as lightweight as possible and platform agnostic.
the flash development tool is geared for designers, and developing on a timeline is a strange concept.
the hidden beauty is that your flex app can tap into your coldfusion cfc's as a webservice or remoteobject with no extra work required.
because flex applications are thin clients, and not web pages they're not suitable for where you want to use a web page.
this saves hits to your web server, application server, database, and network.
although you can use any text editor to develop, flexbuilder is the primary development tool - which is a customized version of dreamweavermx.
or a stock application; in ajax you would continuously poll for updates in the stock symbols the user is interested in (even if there is no change in price), compared to the flex approach where the client would use messaging to subscribe to the applicable symbols, and the flex enterprise server would push updates as they occur.
adobe/macromedia flex takes you to the next level of web application development with the concept ofrich internet applications (aka rias).
well html applications are state-less.
the code processes the data, and generates resulting html that the browser loads back in.
limitations flex applications are flash applications, and are limited by what the flash player can do.
tier 3: an optional back end server called flex data services which adds the ability to do binary communications between a flex client and your back-end (e.g. java and various databases).
since the application is live you don't need that common update/submit button to post that change; the application knows an update was made and can commit those changes on the backend if nescessary.
the flex app server provides other services such as being a gateway to remoteobjects (eg cf cfcs) and webservices.
similar is the case with desktop applications.
however developing in flex is by far faster than developing productivity tools in flash natively; on some accounts there are development speed gains of 10x. flex out of the box comes with various pieces such as navigators (tree, accordian, tab), charting/graphing components, components such as the infamous datagrid, and effects such as fades and wipes.
the attached file provides a static xml file; but you easily hook it up to a cf template which queries a database based on the parameters passed in via the url and return back the up to date html.
html is optimized for document distribution, so although it could be done in ajax using an army of developers - it's clearly the wrong choice.
or what if you wanted to make an application that allows users to update their profile by clicking on a button that takes a picture from their webcam - this is extremely easy in flex, and impossible in html/ajax.
so use coldfusion to work with backend systems like databases, and provide services to the presentation tier.
per client messaging quality of service (qos).
more importantly, why would you want to be spending so much time on core ui functionality when you're getting paid to work on business logic and workflow.
flex isn't billed as rad (rapid application development); it's geared towards enterprise applications where the real-time interactivity and rich workflow are the primary roi.
in the flex scenario, since you can create stateful applications, the clients only need to load an initial set of data once - and the middle tier can justpush/broadcast deltas or updates (flash communication server comes in handy in this case).
no time is wasted building basic ui elements (that is tables).
the user enters these values, clicks on a submit button, and the browser goes blank while it waits for a response from the server and loads the resulting html which would be a tabular list of records that match the criteria: time frame from to product group all adapters routers hubs switches sales exec all jeff smith bob gordon john sykesdeal
so use coldfusion to work with backend systems like databases, and provide services to the presentation tier.
however developing rich applications in flash for those who are core developers is daunting and unintuitive.
i.e, there is an initial load and intialization that occurs when running a flex application initially, so the user could have to wait 5-10 seconds as the application gets set up, and once its loaded you're rocking and rolling.
interactivity that is impossible to accomplish in html itself.
flex goes open source with most of the framework (everything except charting and the advanceddatagrid) flex builder 3 includes a profiler so you can monitor where cpu and memory utilization is consumed.
being able to drag a file from your desktop on the player (to say initiate an upload) would require os specific support.
most notably theopen ajax initiative which is supported by such heavyweights as ibm, bea, borland, google, mozilla, oracle, redhat, and yahoo.
introduces the advanceddatagrid a web service introspection feature where you can point it at a webservice and it will figure out all the function and parameters the functions
the actionscript part will be familiar to java, and other oo developers.
even if you are a pro at it, it's extremely time consuming to make workflow interactive and user friendly.
wsrp portal deployment of flex applications (deploy a flex application as a portlet in a portal server).
now if the user wants to change the parameters, or perhaps sort on a particular column, typically the page would need to be sent back to the server where it rebuilds an up to date report based on the new criteria.
instead of the logic living purely on the server side, your presentation tier is all on the client.
it could be done; but the real application is aware of your mouse movements, every key stroke, and provides much more feedback to the user by using sound, animation, and other visual queues.
so imagine changing filters or criteria, and the table automatically updating as a result.
but to be fair there is a major effort to provide tools and apis to abstract that complexity, and streamline the development of ajax based applications.
pretty standard stuff for coldfusion, jsp, php, asp, or any other servlet language.
or play with the price range slider; the workflow benefits are immediately recognizeable.
unlike ajax, which is more along the rwa end of the spectrum in that it increases functionality and usage efficiency of web pages.
ajax's other drawback is that because javascript differs from browser to browser and os to os, a massive amount of qa needs to be done to ensure that it works across all platforms.
so while a user is looking at a page in their browser, the application is unable to do anything until the user commits an action that sends data from the page back to the server for processing.
it's a companion to your existing technology by being at the presentation tier, while your other application servers provide the middle/business tier.
new wizards for connecting to amfphp and .net (via web service).
flash/flex popup windows are limited to being displayed within the dimensions of the instance of the player that created it.
the roots of html originate as platform agnostic document distribution, and it vastly improved how content can be deployed, but severely compromised on ui functionality since it's a stateless mechanism.
the code processes the data, and generates resulting html that the browser loads back in.
the flex application server (a j2ee application) will compile your code into a flash file (.swf) which the browser then loads.
flex isn't billed as rad (rapid application development); it's geared towards enterprise applications where the real-time interactivity and rich workflow are the primary roi.
flex vs coldfusion (and other servlets) for cfmx developers, flex doesn't replace cf (or jsp/j2ee/php/asp/etc...).
flex removes that barrier to entry by providing a programmatic way for developing these rias.
new jsp tag library that enables mxml and actionscript code to be embedded into a jsp page.
flex on the other hand has desktop like powers, so making such a graphically oriented application is fairly straight forward.
two other interesting examples include therestaurant finder from chrisophe coenraets where you slide a box around a map to see restaurants in the area, and the other being thebrocade sales dashboard (click on measure viewer, and then a company on the bar graph).
pricing & history resources and getting started last updated by tariq ahmed on 06/17/07.
in the flex scenario, since you can create stateful applications, the clients only need to load an initial set of data once - and the middle tier can justpush/broadcast deltas or updates (flash communication server comes in handy in this case).
updates the client-side web services library.
in the flex world, your application wouldn't need to post a request to the server every time the user made a change.
on the debugging front you can use certain components such as xmlobject which comes with flex, flash debugging, and the netconnection debugger which lets you analyze data between remoteobjects and the flash player (ie your adobe/macromedia flex application).
alternatively any richness you try to accomplish in ie using dcom, activex, and dhtml locks you down to particular platforms.
there isn't a clear line between rias and rwas, but flex is definitely on the ria side of things in that you are building applications that are desktop like but use the internet for deployment ease and connectivity to services.