without external guidance, a beginner will become a depth-first programmer.
the next important thing is to write some small start-scripts so you can demo the software easily on any machine with java installed.
we kept the whole system as modular as necessary to maintain an overall grasp of what is going on where in the system and installed a sufficient automatic test coverage for the most important parts.
at the end of each build, breakpad’s symbol dumper runs over all compiled executables and libraries andgenerates the symbol files.
perhaps you’ve spared yourself a mess like an unnecessarily extended junit library and the depth-first programmer the frustration when his hard work of several days is silently discarded.
every good programmer knows the situation when you suddenly realize that you’re shaving a yak when all you wanted to do is to add a feature to the code base.
but only if multiple messages were sent at once to the device, discarding some of the necessary answers in this circumstance or if the connection to the led hardware would fail in the midst of a transmission, the system would not return from the write attempt.
one method of continuous improvement is our “creativity budget”.
but the real functionality requirements are manifold and the project grew large.
unfortunately, thedocumentation about deployment options is not really that extensive in certain details.
some of these days were spend on code camps and other training events.
this data is preprocessed and stuffed into data packages, which are periodically transferred to a control center.
what’s particularly misleading is the “copier” part of the namestreamcopier, because it does not exactlycopy the bytes from the stream into the string – it moves them.
he exhibited the general behaviour of a depth-first programmer: whenever you face a problem, take the first possible solution to a problem you can come up with and work on it without evaluation against other possibilities.
to avoid the situation that two messages are sent to the device at the same time, a lock is acquired just before the message is sent.
this is your self-guidance system regaining consciousness after a period of auto-piloting in depth-first mode.
the visualbasic experience was a little epiphany that it’s really the developer and not the language that leads to shitty software.
but when we restarted the software manually, everything would run perfectly fine for several days and then revert back into denial without apparent trigger.
this blog entry tells the story of the bug and adds another multithreading pitfall to the five i’ve already listed in my blog entry “when it comes to multithreading, better be safe than sorry”.
each client instance is registered in the center to enable the supervision and administration of clients.
not in our case, so we tried iso-8859-1 and finally the umlauts are correct!
we call this aliquid lock , because the lock isn’t as solid as it should be.
this isn’t a bad thing, but impacts the internal communication and team building process.
every week, one of our developer shares a little posting with the world.
no matter how expensive, he will pursue the first thing that brings him closer to the target.
this module was a recent addition to the control center’s hardware outfit and used to display the status message prominently to the operators.
the programmer worked frantically for hours and then days to write what appeared to be some simple data-driven tests.
a depth-first programmer never gets stuck this way.
even if your process has 2 gigs of virtual memory, breakpad shrinks that ‘core dump’ down to a couple of megs.
the overall status of the network is translated in a human readable status message and again forwarded to a group of status message listeners.
leave a comment » | 2012, author: daniel lindner, principles | tagged:categorization, data model, master data, variable data | permalink posted by daniel.lindner depth-first programmers january 2, 2012 just as there are at least two fundamentally different approaches for searching, namelydepth-first and breadth-first search, there are also different types of programmers.
you can tell by the blog posts that we worked with python, ruby, flex/actionscript and even visualbasic on real projects.
when executing python script via pyrun_string(…), all calls to print(…) will write the data directly topystdout.
so flash does not send its encoding in the http header.
an application we develop has a central instance (the “center”) that distributes situational data to several operation desks, powered by client applications, named the “clients”.
the visualbasic experience was a little epiphany that it’s really the developer and not the language that leads to shitty software.
the master data should be designed more carefully concerning the type information, so if we really start the discussion about primitive obsession, i would first tend to the master data fields and argue that the type shouldn’t be a string but an enum and the version should be a more sophisticated version type.
a flash application sends a http get request to this web application.
putting such an error into written words then serves a couple of purposes: so here it comes: in one project we use json to serialize objects in order to send them over http (we use the very nicejson spirit library, btw).
this was when the control center appeared to be healthy but didn’t process any data packages anymore.
the blog is stillmanaged by token only.
the data for each client is stored in a clientinformation object that is mapped to a database relation.
he wrote his tests and “had to extend junit a bit to do it right”.
source love day” (osld) with our “homepage comittee”, when every employee has to improve the homepage in some aspects and present the change to the “comittee”.
your clients may try it out theirselves if the project policy is open enough.
he started the work and soon enough, first results could be seen.
the last ingredient to a great deployment and demoing experience is the build script which builds, tests and packages the software together.
on the first stage, called “beginner”, you are simply not capable of proper self-evaluation.
the internal parts we were under heavy development load this year.
my opinion on the example is that the first three data fields (internalidentifier, type and instancename) are definitely in the master data category.
the next time you come across one of your data model objects that contain more than two data fields, have a look at their categorization in master and variable data.
and it was totally unnecessary once you learn about “parameterized” junit4 tests or build light-weight data drivers instead of changing the signature of the test method itself.
the conclusion if you want to avoid the category of liquid lock multithreading bugs, make sure that all your lock instance references are immutable.
this is your self-guidance system regaining consciousness after a period of auto-piloting in depth-first mode.
you can tell by the blog posts that we worked with python, ruby, flex/actionscript and even visualbasic on real projects.
we can start all kinds of (justified) discussion about primitive obsession, too much information at one place and so on, but for this blog entry, only the categorization in master data and variable data is of interest.
but the lock would never be returned from the thread waiting on an answer from a hardware device that had no intention to send another answer.
hmmm clearly the flash app does not use utf8.
be gentle and empathic about his attempt and work with proposals, not with instructions.
the best thing you can do to avoid liquid locks is to “freeze” all your lock instances.
another insight from this story is that software modules have to be separated threadwise, too.
every week, one of our developer shares a little posting with the world.
his implementation relied on obscure data structures that provided the actual parameter values and only really worked for his needs.
as the symptom happened randomly, without external cause and with no chance of reversal once it happened, we soon suspected some kind of threading issue.
the best thing you can do to avoid liquid locks is to “freeze” all your lock instances.
but if your application crashes, nothing beats a decentstacktrace google’s breakpad library comes in very handy here because it provides very easycrash reporting.
the liquid lock is like the bigger brother of the local lock.
instead of interacting with the novice java programmer after a few hours when i thought he should be done by now, i let him “advance”.
this could be modelled even with a slow object/relational mapper because the data is only written/read once.
and a lock with a flawed locking behaviour is guaranteed to fail (in production).
a depth-first programmer always churns out code at full speed.
it isn’t local, but its mutability cause the same problems.
another insight from this story is that software modules have to be separated threadwise, too.
unfortunately, this somehow lead to fewer oslds this year.
in this state, it would still accept data packages from the stations and even acknowledge their arrival (so the stations wouldn’t retry the transmission), but only write parts of the package or nothing at all to the disk and database.
a few weeks ago i published a post that showed how to embedd python into c++ and how to exchange data between the two languages.
the bug finally turned out to be caused by the liquid lock in the led display driver that got notified of system message changes when a data package arrived.
in the dreyfus model, a beginner needs external guidance.
this means less love for the open source community, but crucial together time for us.
avoid to retrieve your locks from notoriously muteable data structures like collections or arrays.
well, in junit, the test methods cannot have parameters, but the programmer’s tests needed to be parametrized.
when a data package arrives, a global data processing lock is acquired (so that no two data packages can be processed in parallel) and the content of the package is inspected.
whenever some customer sends us a dump file, we can just easily pull out the symbol files corresponding to the software version that runs at this customer and let breakpad do its magic… 2 comments | 2011, author: volker kaiser, c/c++, continuous integration, hudson, programming language, uncategorized | tagged: breakpad, c/c++, hudson, jenkins, volkerkaiser | permalink posted by volkerkaiser play! is a great framework for java-base development of modern web applications.
if you want to avoid the category of liquid lock multithreading bugs, make sure that all your lock instance references are immutable.
the first kind, master data, are data fields that will change seldom over time and can sometimes be used to “identify” an object.
as you might know parameters in get request are encoded in the url with the so calledpercent encoding for example: %20 for space.
but looking at the output of what the flash app sends us we see scrambled umlauts.
we monitored the control center with every means on our disposal, but its memory consumption, cpu footprint and threading behaviour was without noticeable problem even when the instance was in its degraded state.
but currency signs like the euro are again garbage.
framework december 5, 2011 play! is a great framework for java-base development of modern web applications.
code using all of these definitions may work on a certain platform so you will not notice the problem right away, but we had several compilation problems and even program crashes when compiling or running on linux/x86, linux/amd64, windows 7 32bit and windows 7 64bit.
and it was totally unnecessary once you learn about “parameterized” junit4 tests or build light-weight data drivers instead of changing the signature of the test method itself.
when separating the two categories of data, the clientinformation object may turn into a reference holder object only.
the software of this control center, also developed by us, receives the data packages, stores them on disk and in a huge database and extracts the overall state of the measurement network from raw data.
the data for each client is stored in a clientinformation object that is mapped to a database relation.
it’s one of the more hideous multithreading pitfalls as it looks like everything’s fine at first glance.
every depth-first programmer works in a suboptimal environment.
when separating the two categories of data, the clientinformation object may turn into a reference holder object only.
the depth-first programmer is a dangerous type, as he is prone to yak shaving and reinvention of the wheel.
unfortunately, i did not immediately recognize the change in the error outputs of the json parser.
this was a concession to the ever-growing workload.
this means that after the debug output code, the istream is empty.
some simple mechanisms like asynchronous listener notification or producer/consumer queues for pending transmission requests would have helped to confine the effects of the liquid lock bug inside the led module.
my guts tell me to categorize the version as master data, because it won’t change on a daily schedule.
he is stuck in activism.
somebody with more experience has to point out errors for you and formulate alternatives as clearly and specific as possible.
the next time you come across one of your data model objects that contain more than two data fields, have a look at their categorization in master and variable data.
this might explain that we were very surprised when our customer told us that the control center had lost some data packages.
these change events are propagated through the system with classic observer/listener structures, using synchronous calls (normal delegation).
a novice java programmer should make some changes to an existing code.
we developed a software that runs on several geographically distant independent “stations” that collect a multitude of environmental measurement data.
the programmer tries his best, it’s really the environment that could do better.
we monitored the control center with every means on our disposal, but its memory consumption, cpu footprint and threading behaviour was without noticeable problem even when the instance was in its degraded state.
if you separate your master data from the variable data, you can very easily concentrate on the variable data for performance optimizations.
this was when the control center appeared to be healthy but didn’t process any data packages anymore.
but the lock would never be returned from the thread waiting on an answer from a hardware device that had no intention to send another answer.
his implementation relied on obscure data structures that provided the actual parameter values and only really worked for his needs.
but if your application crashes, nothing beats a decentstacktrace google’s breakpad library comes in very handy here because it provides very easycrash reporting.
we kept the whole system as modular as necessary to maintain an overall grasp of what is going on where in the system and installed a sufficient automatic test coverage for the most important parts.
if a client connects, only the referenced clientconnectiondata object has to change.
our “official” company blog, written in german language, had no activity this year.
ater the python script is finished, the data in pystdout can be retrieved and further processed with c++ by converting it using pyfile_asfile(…): file* pythonoutput = pyfile_asfile(pystdout); leave a comment » | 2011, author: nico hochberger, c/c++, python | permalink posted by nico hochberger breakpad and your ci – a strong team december 12, 2011 if your c++ software has to run 24/7 on some server rack at your customer’s data center, it has to meet not only all the user requirements, but also requirements that come from you as developer.
these change events are propagated through the system with classic observer/listener structures, using synchronous calls (normal delegation).
for each object we have serialize/deserialize methods which do the heavy lifting.
because every compilation creates different binaries, dump file and symbol files need to be ‘based on’exactly the same binaries .
the documentationdoes state that using the standalone web server is preferred so we will use that option.
now we can hook the project into a continuous integration server like jenkins and let it archive the build artifact containing an executable installation of our web application.
to avoid the situation that two messages are sent to the device at the same time, a lock is acquired just before the message is sent.
inside this led software driver, some bytes are written to a socket stream and then the driver awaits an answer of the hardware device.
this is where you can let your ci system do some work for you.
one method of continuous improvement is our “creativity budget”.
your expertise in the narrow field of the problem at hand isn’t broad enough to recognize an error even when you are working on the error yourself for prolonged times.
permalink posted by miq encoding problems are common place in software development but sometimes you get them in unexpected places.
not in our case, so we tried iso-8859-1 and finally the umlauts are correct!
and while the data processing lock was still held, all other data packages would be received, but piling up to obtain the lock.
at one of our customers we usejenkins not only for the usual automatic builds and tests after each check-in but also for release builds that go into production.
this cannot be true, so we bought brand new computers or a big ram upgrade for everyone.
it is absolutely crucial to be consistent when using the type definitions and usually a good advice not to use the built-in types like int or long because they will change in size on different platforms.
we do not want to include the sources in the artifact, so there is a bit of work to do.
unsigned 32 bit word: to make matters a bit more interesting the tango::devulong is defined by the corba c++ mapping.
avoid to retrieve your locks from notoriously muteable data structures like collections or arrays.
inside this led software driver, some bytes are written to a socket stream and then the driver awaits an answer of the hardware device.
if you separate your master data from the variable data, you can very easily concentrate on the variable data for performance optimizations.
on the first stage, called “beginner”, you are simply not capable of proper self-evaluation.
delete old artifacts to ensure a clean build call play to precompile our application call play to execute all our automatic tests copy all needed files into our distribution directory ready to be packed together pack the artifacts into a zip archive our sample build script is for the linux shell but you can easily translate it to the scripting environment of your choice, be itapache ant, gradle, windows batch depending on your needs and preference: #!
this is where the data changes will happen and a tuned storage strategy will pay off.
no matter how expensive, he will pursue the first thing that brings him closer to the target.
when your customer calls you about some “problems”, “strange behaviours”, or evencrashes, you must be able to detect what went wrong.
every good programmer knows the situation when you suddenly realize that you’re shaving a yak when all you wanted to do is to add a feature to the code base.
it was an interesting, entertaining and successful year for us, that’s for sure.
if you can categorize your data fields in this manner, think about separating them into different objects.
a depth-first programmer never gets stuck this way.
the programmer tries his best, it’s really the environment that could do better.
an application we develop has a central instance (the “center”) that distributes situational data to several operation desks, powered by client applications, named the “clients”.
you could grant your client direct access to the artifact, use it for demos and further deployment steps like triggered upload to a staging server or the like.
in one of our projects we are working on tango device servers written in c++ and use the yat (yet another toolbox) library.
the real failure in the story above was done by me.
the depth-first programmer is a dangerous type, as he is prone to yak shaving and reinvention of the wheel.
the bug finally turned out to be caused by the liquid lock in the led display driver that got notified of system message changes when a data package arrived.
one of the status message listeners was the software driver for a led ticker display.
the documentationdoes state that using the standalone web server is preferred so we will use that option.
if your c++ software has to run 24/7 on some server rack at your customer’s data center, it has to meet not only all the user requirements, but also requirements that come from you as developer.
at the end of each build, breakpad’s symbol dumper runs over all compiled executables and libraries andgenerates the symbol files.
because every compilation creates different binaries, dump file and symbol files need to be ‘based on’exactly the same binaries .
my opinion on the example is that the first three data fields (internalidentifier, type and instancename) are definitely in the master data category.
our goal is: an artifact with the executable application no sources in the artifact startup script for different platform and environments ci integration with execution of the tests fortunately, the play framework makes most of this quite easy if you know some small tricks.
if you can categorize your data fields in this manner, think about separating them into different objects.
each client instance is registered in the center to enable the supervision and administration of clients.
you can also be sure everyone is using the correct (read “same”) framework version.
in my last blog entry, i wrote about multithreading pitfalls (in java), and ironically, this was the week when we got a strange bug report from one of our customers.
about the setup: we have a web application written in grails (though the choice of framework here doesn’t really matter) running on tomcat.
this blog entry tells the story of the bug and adds another multithreading pitfall to the five i’ve already listed in my blog entry “when it comes to multithreading, better be safe than sorry”.
finally, the novice java programmer reported success and showed his results.
be gentle and empathic about his attempt and work with proposals, not with instructions.
these symbol files together with thebreakpad dump file that is created at crash time are then used to recreate the stacktrace.
if one thread wouldn’t return to the data package processor, the global data processing lock would not be freed (read the start of this chapter again, this is the most important lock in the system!).
most of it isn’t needed on second thought and can be plain harmful when left in the project.
getting stuck is an internal warning sign every programmer understands.
the master data should be designed more carefully concerning the type information, so if we really start the discussion about primitive obsession, i would first tend to the master data fields and argue that the type shouldn’t be a string but an enum and the version should be a more sophisticated version type.
finally, the novice java programmer reported success and showed his results.
after having developed a new deserialize method i wanted to test it together with the http request handling.
even if your process has 2 gigs of virtual memory, breakpad shrinks that ‘core dump’ down to a couple of megs.
basically, it’s money every developer can spend to improve his workplace.
basically, it’s money every developer can spend to improve his workplace.
that way you can do perform all neccessary calls to play scripts using relative paths and provide a self-contained artifact which developers or clients may download and execute on their machine.
looking at our tomcat configuration all get parameters are decoded with utf8.
the overall status of the network is translated in a human readable status message and again forwarded to a group of status message listeners.
we tried to cope a bit by restructuring the open source love day to a “team day”, when the whole team meets and works on various internal or hobby projects.
the first kind, master data, are data fields that will change seldom over time and can sometimes be used to “identify” an object.
breakpad pulls that trick off by using so-called symbol files that you have to generate for each compiled binary (executable or shared library).
the next important thing is to write some small start-scripts so you can demo the software easily on any machine with java installed.
about the setup: we have a web application written in grails (though the choice of framework here doesn’t really matter) running on tomcat.
it was an interesting, entertaining and successful year for us, that’s for sure.
the problem with a threading issue is that you can’t just reproduce the bug with an unit or system test.
without external guidance, a beginner will become a depth-first programmer.
you can also be sure everyone is using the correct (read “same”) framework version.
you’ve worked your way in a certain direction and suddenly, you cannot advance further.
and a lock with a flawed locking behaviour is guaranteed to fail (in production).
it is very easy to kill portability because the specification allows certain platform-dependent sizes for the built-in datatypes.
a novice java programmer should make some changes to an existing code.
without proper thread separation, it took down the whole software instance.
the depth-first programmer let me try to define the term of a “depth-first programmer” by a little (true) story.
but the real functionality requirements are manifold and the project grew large.
well, in junit, the test methods cannot have parameters, but the programmer’s tests needed to be parametrized.
when a data package arrives, a global data processing lock is acquired (so that no two data packages can be processed in parallel) and the content of the package is inspected.
the programmer worked frantically for hours and then days to write what appeared to be some simple data-driven tests.
this might trigger several network status changes.
in this state, it would still accept data packages from the stations and even acknowledge their arrival (so the stations wouldn’t retry the transmission), but only write parts of the package or nothing at all to the disk and database.
usingcurl for this i issued a command like this: curl -x put http://localhost:30222/some/url -d @datafile this command issues a put request to the given url and uses data in ./datafile, which contains the json, as request data.
when executing python script via pyrun_string(…), all calls to print(…) will write the data directly topystdout.
our “official” company blog, written in german language, had no activity this year.
the whole mess was nearly intangible, a big bloat and needed most of the development time for the unit tests.
this is the traditional time to pause and reflect on what has happened.
to secure his work, he should and wanted to write unit tests in junit.
we tried to cope a bit by restructuring the open source love day to a “team day”, when the whole team meets and works on various internal or hobby projects.
in my last blog entry, i wrote about multithreading pitfalls (in java), and ironically, this was the week when we got a strange bug report from one of our customers.
looking at the visitor statistics, we fully appreciate your attention.
breakpad pulls that trick off by using so-called symbol files that you have to generate for each compiled binary (executable or shared library).
unfortunately, thedocumentation about deployment options is not really that extensive in certain details.
most of it isn’t needed on second thought and can be plain harmful when left in the project.
please checkpoco::streamcopier documentation if you are not familiar with poco libraries.
i could have avoided the resulting mess by providing guidance and a few alternate solutions for the immediate problem.
we do not want to include the sources in the artifact, so there is a bit of work to do.
you could grant your client direct access to the artifact, use it for demos and further deployment steps like triggered upload to a staging server or the like.
this budget wasn’t used at all this year, as the workplaces seem to be optimal.
that way you can do perform all neccessary calls to play scripts using relative paths and provide a self-contained artifact which developers or clients may download and execute on their machine.
this might trigger several network status changes.
but when we restarted the software manually, everything would run perfectly fine for several days and then revert back into denial without apparent trigger.
3 comments | 2011, java, programming language | tagged: bug, degradation, java, liquid lock, multithreading | permalink posted by daniel.lindner writing a blog post sometimes can be useful to get some face-palm kind of programming error out of one’s system.
it’s one of the more hideous multithreading pitfalls as it looks like everything’s fine at first glance.
using types that guarantee their size on all platforms and consistent usage of them will make your code compile and run on many platforms flawlessly.
a depth-first programmer always churns out code at full speed.
looking at our tomcat configuration all get parameters are decoded with utf8.
some simple mechanisms like asynchronous listener notification or producer/consumer queues for pending transmission requests would have helped to confine the effects of the liquid lock bug inside the led module.
this is where you can let your ci system do some work for you.
this data is preprocessed and stuffed into data packages, which are periodically transferred to a control center.
one of the status message listeners was the software driver for a led ticker display.
so, the next time you see somebody working frantically on a problem that should be rather easy to solve, lend him a hand.
be a guide the real failure in the story above was done by me.
when i finally realized it … leave a comment » | 2011, author: volker kaiser, c/c++, poco, software development, testing, uncategorized | tagged: c++, poco, volkerkaiser | permalink posted by volkerkaiser c/c++ are nice low level, high-performance languages if you need to be “close to the metal” due to performance or memory constraints.
our goal is: fortunately, the play framework makes most of this quite easy if you know some small tricks.
the official parts our developer blog was alive throughout the hardest times of the year, when everyone was under full project load.
one means to this end is of course logging.
as the symptom happened randomly, without external cause and with no chance of reversal once it happened, we soon suspected some kind of threading issue.
i could have avoided the resulting mess by providing guidance and a few alternate solutions for the immediate problem.
as you might know parameters in get request are encoded in the url with the so calledpercent encoding for example: %20 for space.
let’s have a look at some of the data fields of clientinformation: we can start all kinds of (justified) discussion about primitive obsession, too much information at one place and so on, but for this blog entry, only the categorization in master data and variable data is of interest.
and while the data processing lock was still held, all other data packages would be received, but piling up to obtain the lock.
the premise we developed a software that runs on several geographically distant independent “stations” that collect a multitude of environmental measurement data.
permalink posted by miq http get: the problem with percent encoded parameters november 28, 2011 encoding problems are common place in software development but sometimes you get them in unexpected places.
this is where the data changes will happen and a tuned storage strategy will pay off.
the depth-first programmer will always report progress even when he needs days for a task of minutes.
to secure his work, he should and wanted to write unit tests in junit.
the software of this control center, also developed by us, receives the data packages, stores them on disk and in a huge database and extracts the overall state of the measurement network from raw data.
he is stuck in activism.
these symbol files together with thebreakpad dump file that is created at crash time are then used to recreate the stacktrace.
you’ve worked your way in a certain direction and suddenly, you cannot advance further.
but only if multiple messages were sent at once to the device, discarding some of the necessary answers in this circumstance or if the connection to the led hardware would fail in the midst of a transmission, the system would not return from the write attempt.
when your customer calls you about some “problems”, “strange behaviours”, or evencrashes, you must be able to detect what went wrong.
so he replaced the part of junit that calls the test methods by reflection with an “improved” algorithm that could also inject parameters.
if one thread wouldn’t return to the data package processor, the global data processing lock would not be freed (read the start of this chapter again, this is the most important lock in the system!).
it was a major design flaw to let the data processing thread, while holding the main processing lock, descend down into the deep ends of the led driver, eventually getting stuck there for infinity.
but looking at the output of what the flash app sends us we see scrambled umlauts.
but this lock doesn’t have a complete “locking” effect because each caller may acquire the lock of a different instance.
a few weeks ago i published a post that showed how to embedd python into c++ and how to exchange data between the two languages.
a flash application sends a http get request to this web application.
the symptoms this might explain that we were very surprised when our customer told us that the control center had lost some data packages.
the request came through but the deserializer wouldn’t do its work.
but this lock doesn’t have a complete “locking” effect because each caller may acquire the lock of a different instance.
at one of our customers we usejenkins not only for the usual automatic builds and tests after each check-in but also for release builds that go into production.
he exhibited the general behaviour of a depth-first programmer: whenever you face a problem, take the first possible solution to a problem you can come up with and work on it without evaluation against other possibilities.
very soon, it turned out that the control center would randomly enter a state of “denial”.
my guts tell me to categorize the version as master data, because it won’t change on a daily schedule.
looking at the visitor statistics, we fully appreciate your attention.
there was no exception or uncommon entry logged in the logfiles.
when the control center entered this state, it would never recover from it.
we took our own advice seriously and invested in our productivity.
that’s right, but he choose the most expensive way to do so.
some of these days were spend on code camps and other training events.
that’s right, but he choose the most expensive way to do so.
your expertise in the narrow field of the problem at hand isn’t broad enough to recognize an error even when you are working on the error yourself for prolonged times.
so flash does not send its encoding in the http header.
another problem with this approach is the absence of internal warning signs.
there was no exception or uncommon entry logged in the logfiles.
he wrote his tests and “had to extend junit a bit to do it right”.
this means less love for the open source community, but crucial together time for us.
if a client connects, only the referenced clientconnectiondata object has to change.
when the control center entered this state, it would never recover from it.
the last ingredient to a great deployment and demoing experience is the build script which builds, tests and packages the software together.
unfortunately, this somehow lead to fewer oslds this year.
now we can hook the project into a continuous integration server like jenkins and let it archive the build artifact containing an executable installation of our web application.
our developer blog was alive throughout the hardest times of the year, when everyone was under full project load.
instead of interacting with the novice java programmer after a few hours when i thought he should be done by now, i let him “advance”.
the whole mess was nearly intangible, a big bloat and needed most of the development time for the unit tests.
the liquid lock is like the bigger brother of the local lock.
whenever some customer sends us a dump file, we can just easily pull out the symbol files corresponding to the software version that runs at this customer and let breakpad do its magic… 2 comments | 2011, author: volker kaiser, c/c++, continuous integration, hudson, programming language, uncategorized | tagged: breakpad, c/c++, hudson, jenkins, volkerkaiser | permalink posted by volkerkaiser deployment with the play!
so, the next time you see somebody working frantically on a problem that should be rather easy to solve, lend him a hand.
nevertheless, c/c++ are portable languages because they provide datatypes to abstract from the underlying hardware and compilers for virtually every hardware platform.
without proper thread separation, it took down the whole software instance.
the depth-first programmer will always report progress even when he needs days for a task of minutes.
perhaps you’ve spared yourself a mess like an unnecessarily extended junit library and the depth-first programmer the frustration when his hard work of several days is silently discarded.
this is the traditional time to pause and reflect on what has happened.
it was a major design flaw to let the data processing thread, while holding the main processing lock, descend down into the deep ends of the led driver, eventually getting stuck there for infinity.
source love day” (osld) with our “homepage comittee”, when every employee has to improve the homepage in some aspects and present the change to the “comittee”.
another problem with this approach is the absence of internal warning signs.
we perform following steps in the script: our sample build script is for the linux shell but you can easily translate it to the scripting environment of your choice, be itapache ant, gradle, windows batch depending on your needs and preference: #!
this cannot be true, so we bought brand new computers or a big ram upgrade for everyone.
very soon, it turned out that the control center would randomly enter a state of “denial”.
this budget wasn’t used at all this year, as the workplaces seem to be optimal.
the bug the problem with a threading issue is that you can’t just reproduce the bug with an unit or system test.
somebody with more experience has to point out errors for you and formulate alternatives as clearly and specific as possible.
so he replaced the part of junit that calls the test methods by reflection with an “improved” algorithm that could also inject parameters.
we took our own advice seriously and invested in our productivity.
this module was a recent addition to the control center’s hardware outfit and used to display the status message prominently to the operators.
this could be modelled even with a slow object/relational mapper because the data is only written/read once.
your clients may try it out theirselves if the project policy is open enough.
this isn’t a bad thing, but impacts the internal communication and team building process.