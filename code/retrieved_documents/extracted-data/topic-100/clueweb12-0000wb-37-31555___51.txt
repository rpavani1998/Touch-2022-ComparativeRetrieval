really, the mainloopdemo.py demo above works only because the gui can  interact with the user independently, while the mainloop call runs; the script  is able to surrender control to the tkinter mainloop call and wait for results.
for the most part, this  edition is still valid and perfectly compatible with the current version of  python (2.3), and its examples still work as described.
regrettably, the python c api is more prone to change  than the core language.
these files are present to identify a directory as an importable module package, and initialize the directory's namespace.
another option not mentioned in this section: it's also possible to install the apache open source web server on your own machine, and run the book's server scripts from there.
this should work on any machine with true multi-tasking and socket support, and can be both a testing technique, and a way to leverage your web browser as a gui interface (cgi scripts replace in-process gui callbacks, albeit with the tradeoffs explored on page 811).
the impacted parts of the book include pages 271-274  and 310-311, and various examples.
you should consult other sources for protocol details.
a recent rash of such spam, about 150k each, prompted me to tweak one of the book's pop email examples, to only fetch message headers, and allow an email to be deleted from the server without actually downloading the entire message.
at  the least, i hope this functionality is exposed to python in a future tkinter  release.
.\launch_pydemos.pyw ...
[5/01] clarification: # not needed in html fragment name, p837
this language change happened well after the book, and very recently (in  release 2.2?).
`eval(code, self.names, self.names)` # try expr: string ############################################################################### result = str(eval(code, self.names, self.names)) # try expr: string self.hist.append(code + ' => ' + result) # add to hist log except: exec code in self.names, self.names # try stmt:
the examples cd directory in general is only meant to stand for any pp2e container, and does not require an __init__.py file in practice.
on page 1041, in the first indented paragraph, "awg" should be "awk" (of course!).
however, if you want to add a simple gui user interaction to an existing non-gui script (e.g., to select files to open or save), it is possible to do so by configuring widgets and calling mainloop from the non-gui main program when you need to interact with the user.
this is not yet a simple process, but is an alternative to using qt, anygui, or jython for guis on the zaurus, especially if you have existing tkinter programs.
it's a simple script, and true spam filters such as spambayes are much  more powerful solutions; but running this script before my email client by  clicking a desktop shortcut is usually all i need.
for the book's package, this means that if you copy the pp2e package  directory from cd to a directory on your hard-drive, make sure to add the  directory containing the pp2e directory to your module search path.
[5/01] clarification: odd file example on page 66 the last code listing on page 66 almost looks like a typo, but it's not.
that's true, but  note that getfile.cgi was intended to mostly be a filedisplay tool only,  not a cgi download demo.
(to be resolved; the resize copying order may differ now, and so may  require additional code to move tuple components after each resize).
this should work on any machine with true multi-tasking and socket  support, and can be both a testing technique, and a way to leverage your web  browser as a gui interface (cgi scripts replace in-process gui callbacks,  albeit with the tradeoffs explored on page 811).
this version's new main windowlooks like this.
that is, it focuses on ways to use python syntax for real tasks, rather than the syntax itself.
none, fg=fg, bg=bg, font=font): ...
(update 6/02: see also the new "email" standard  library package in python2.2, for other ways to format and parse email  messages.)
this essentially makes the program  gui-capable, but without a persistent main window.
in function `pp_debug_function':  ppembed-callables.c:51: too many arguments to function `_pytuple_resize' basically, api function _pytuple_resize has been changed in python's  api to accept just 2 arguments now, as documented in 2.2 python release notes: tupleobject.h: extern dl_import(int) _pytuple_resize(pyobject **, int); to make the ppembed example compile, change this line: oops =
this essentially makes the program gui-capable, but without a persistent main window.
also note that leaving the entry field enabled means you can change its text (but probably shouldn't; a better solution may be to use a label for the display).
because of that, you should take the examples directory's __init__.py file as nothing more than an example, not a required component, and view the cd's examples root directory as simply a representative stub.
and might change occurrences besides those on a first line.
this looked like a bug to me too when i reread it, but it does work exactly as shown.
it converts python scripts into  standalone executable windows programs, that can be run without requiring a  python installation (which is quite amazing, even apart from its ability to  change the tk icon).get py2exe here.
the new "xml" module package: together with the  "xmlrpclib" module in the standard library, provides many xml  processing tools not covered in the text (they were not yet available).
naturally, you should be able to run webserver.py locally under linux and unix as well.
if you look closely, you'll notice that the first output line shows up second  in the output file.
unfortunately, import  statements and file searches in the examples really need to see the original,  non-8.3, unmangled names.
simply make a main gui window with widgets that start the original non-gui script's code in a callback handler, and post new dialog windows from callback handler code as needed.
for instance, a locally-running apache server will handle post correctly, and netscape 4.7 on nt reportedy handles post requests properly as well.
[4/01] email example: pymailgui connection errors pymailgui, the tkinter client-side email tool in part iii, seems to run  into "bad file descriptor" type errors after running awhile on  windows, especially after downloading lots of email.
this patch release, activepython 2.1.0 build 211 (june 15,  2001), apparently also fixes a tkinter radiobutton bug.
this language change happened well after the book, and very recently (in release 2.2?).
the good news is that o'reilly's policy is very liberal: in short, if you reuse example code directly, they only require some sort of attribution that names the original book/author.
a few notes on this approach: first of all, if you have a webmail interface to your isp account, that  may also allow you to delete without downloading to your client machine; if so,  the python script is a command-line alternative to this.
there are a few additional unix-only calls in  some of the book's cgi scripts (e.g., os.path.samefile in getfile.cgi) that may  require more customization for a server running on windows, and you'll want to  run the fixsitename.py script to replace any lurking  "starship.python.net/~lutz" references in html files to  "localhost" (see the server side scripting chapter for details).
it contains a list of python and book updates which i've found important enough to post, but have not had time to organize more coherently yet (or post onpyerrata).
this is a change from all earlier python releases, and likely reflects a change in the underlying tk library.
in  book example code, all cross-directory imports are always relative to the pp2e  root directory (e.g.,import pp2e.gui.xxx); imports of files that live in the  top-level script's home directory are not (e.g.,import xxx) because the home  directory is searched first.
and just for fun, macs define yet another incompatible format.
the impacted parts of the book include pages 271-274 and 310-311, and various examples.
if it is not changed,  and you haven't added python's directory to your path setting, the script will  still find "python.exe" eventually, but usually only by falling back  on a long-running brute-force search of your hard drive(s) directory trees.
this is a change from all  earlier python releases, and likely reflects a change in the underlying tk  library.
because this can be annoying when doing simple calculations, you might want to patch the calculator.py file to use str(n) instead of `n`, as follows: def runstring(self, code): try: ############################################################################### ## 2/03: else new full precision oddness ## result =
for instance, if you copy the cd's examples\pp2e directory to  "c:\pp2e", then you must add "c:" to pythonpath (not  "c:\pp2e").
the auto-launcher scripts might be simplified using features like this,  sys.executable, and similar (to be investigated).
it looks as if the issue is that the book cd was formatted with the joliet standard used by most commercial cd burners available for pcs.
\python21\python lots of status messages scroll by unless redirected to  a file.
they reuse the finder and visitor examples to do directory traversals.
again, this is a bug in activepython2.1, not in the examples or the  standard python release.
the combination of tkinter and pmw is at least as rich as wxpython, and does not suffer from wxpython's initial framework complexity and documentation shortage (he says, trying very hard to be objective :-).
secondly, i want to reiterate that this edition has been redesigned to be an advanced follow-up to learning python.
for  instance, a locally-running apache server will handle post correctly, and  netscape 4.7 on nt reportedy handles post requests properly as well.
you may also find the pmw package and documentation on the book's cd.
when run, this script converts all #!
in this scheme, the python-coded web server and your web browser run on the same machine.
that is, the code works as is and as shown so this is not quite a bug; but the # at fragment name attributes is unnecessary, and is usually omitted.
more details will be posted here as they emerge (no pun intended).
when it is turned on, this feature eliminates the need to use default arguments in lambdas and nested defs to save values from the enclosing scope.
it looks as if the issue is that  the book cd was formatted with the joliet standard used by most commercial cd  burners available for pcs.
the "#" character is generally only required at the href attribute (of course), but is completely harmless if used in the name attribute as well, under internet explorer.
clarification of rexec security issues
although this text went through rigorous testing and review, a few bugs and typos are statistically inevitable in a 1250 page book and42k lines of example source code.
printing: july, 2002 [7/02] nth(?)
part of the confusion expressed by some readers may revolve around the  examples\__init__.py example file on the cd.
such python code is  typically used for testing and customization purposes; you can change embedded  python code on-site, and without having to recompile the enclosing c/c++  application (or ship its code).
this python change does not break examples in the book (they will still  work with 2.2 and later), but it does mean that callbacks in some of the  examples can be coded in somewhat simpler terms after the 2.2 release.
top-level window object protocols that deal with icons only  deal with the icon shown when a window is iconified (minimized), and don't work  on windows in any event.
also see thesoap.py release for a python interface to the xml-based soap protocol.
the settings do work as advertised in the standard python 2.1 release.
activestate will also sell visualpython, a microsoft-based ide that lets you develop scripts under visual studio (which must be purchased separately).
cd listing run on dos, sorted by  full pathname).
much worse,  activepython's tkinter not only does not implement these options, it raises an  exception for them, which makes programs that use these (and likely other)
it is a complete, up-to-date python, which comes with threads, sockets  for internet scripting, a full os module including popen and fork, pyqt for  guis, and so on.
[8/03] top python changes impacting this edition someone wrote recently to express concern about buying this 2nd edition,  given that it is "already two years old."
on the other hand, this is a pretty small coding issue in such a big  book.
the visitor  class framework essentially wraps the os.path.walk call (see chapter 5).
unfortunately, import statements and file searches in the examples really need to see the original, non-8.3, unmangled names.
the net effect is that these classes  can only be used in the context of a fully gui program.
naturally, you should be able to run webserver.py locally under linux and unix  as well.
long file names on joilet cds can be read correctly today on  windows, linux, and macs, but not on some unix systems that lack joliet  support.
[4/01] two chapter 18 typos
a more windows-friendly webserver.py may be posted here later, if i get time to code one myself; till then, consider it a suggested exercise, and a possible future python extension.
to copy the examples to your hard-drive, copy the  pp2e directory to some other container, and then add that container to your  module search path.
a few notes on this approach: someone wrote recently to express concern about buying this 2nd edition, given that it is "already two years old."
see the close and buffering descriptions on pages 60  and 63 for more details.
in fact, tracing shows that scripts receive correct inputs and generate correct outputs for post too, but the output appears to be lost or munged on the way back to the web browser.
here's why: in this case, the file object's output written  first isbuffered by the stdio file system, and is not actually  transferred to the file until the object's close method is called at the end of  the interaction.
a number of people have emailed me to say that they broke or lost their cds, and need a copy of the book's examples.
consult python.org, or read about xmlrpclib on its pagepythonware.
also note that although i am happy to investigate such issues, their resolution is beyond my control; please report such issues to activestate directly (this specific bug has already been reported).
moreover, future python changes and coding techniques may impact parts of the book over time.
that's true, but  i'd like to make this a bit more formal.
you may also find the pmw package and  documentation on the book's cd.
i don't own  the examples, and do not keep them online anywhere myself.
for example, say something like this to replace all #!/usr/bin/python lines with #!
of course, whether or not running a server locally like this is easier than using a server machine, depends on your constraints and resources.
this works, because pydemos, and programs it spawns,  inherit the module search path setting made by launch_pydemos.
again, this can make for an odd user experience compared  to a traditional gui program structure -- windows seem to pop up from nowhere  -- but it's a quick way to put a gui face on a script without reworking its  code.
i also stopped keeping  track of printings after 2001, so printing numbers after that time are unknown.
it's difficult to understand the rationale for such a trivial and  non-backward-compatible change, but "col" is clearly no longer  allowed today.
you can find the scripthere.
the package import mechanism is covered inlearning python--the book that you should consult first for such core language topics.
if you want to read about o'reilly's example code reuse policy in full,  please see their web pages: http://examples.oreilly.com/ (bottom of page)
this is an especially common case in lambda expressions used to generate  callback handler functions in tkinter code (lambda introduces a new local  scope, just like a nested def statement).
pythonware is also polishing uitoolkit--a framework built on top of tkinter, which allows widgets to be easily constructed in efficient python code.
c:\...\pp2e>type .\launch_pygadgets.py #!
it also may not be as general or portable a solution; for instance,  the searchers fall back on brute-force disk searches if needed, and the  interpreter needs to do some fairly complex and platform-specific work to set  sys.executable including a similar path search (see python source file  modules/getpath.c).
while i'm on the subject: please note  that the launchers do work with the standard python installs available on the  book's cd and at www.python.org; if you do something custom, you may need to  patch the launcher scripts' code.
you can find more about this pda on this page, including a couple mid-page screen shots showing python running in console mode; you can also run python programs as qtopia apps, with a bit ofconfiguration (see also www.zaurususergroup.com).
are you as tired of waiting for your email client to download huge spam messages over 50k dial-up lines as i am?
directory name pattern matching might help, but not always.
the verdict: the book examples tree shipped on the cd includes roughly 900 source files, and 42,000 source lines.
[11/03] python on the zaurus pda: example scripts i've been testing some of the book's examples on my new zaurus linux-based  pda lately, and thought i'd post three of the first scripts i coded and ran on  that device, as supplemental examples.
among other things, komodo allows guis to be specified in xul--an xml based description language.
this appears to have been broken between python 2.2 and 2.3, though at first glance it seems to reflect a change in the underlying tk toolkit used by 2.3, rather than python itself (a tclerror is issued when "col" is used in 2.3).
this is all documented in the cd's examples\pp2e\readme-pp2e.txt file, which is the official information source for the tree.
you can't run tkinter  gui programs easily on the zaurus, but pyqt is a reasonable alternative for  this machine, is feature rich, and is fairly typical of gui apis in general  (except for its unusual slot/signal mechanism, and relative complexity).
this patch release, activepython 2.1.0 build 211 (june 15, 2001), apparently also fixes a tkinter radiobutton bug.
the  examples work again after these edits, but you don't get the nice mouse cursors.
i have no idea why this occurs, and it seems to have gotten worse in python 2.0.
this script caught and  changed 190 files (more than visitor_replace), so there must be other #!
\mypython21\python ############################################### #  pygadgets + environment search/config first ...
contents: book notes python notes changes by reprints see also: lists below of updates applied thus far in the book reprint runs  that i have seen or been told about, after the initial march 2001 release.
the cd also contains various open source packages (e.g., python), but you can find more up-to-date versions of all the cd's packages elsewhere on the web.
at the end of string argument page in  "-live" mode.
the "rexec" security module: is being withdrawn from the  standard library, due to a (somewhat obscure) security concern.
for example, a  code string such as "os.system('rm *')" run by eval or exec will only  succeed if the "os" module is available in the namespace in which the  string runs, and then only if the python process has permission to delete  files.
in 2.2, the names in the local  scopes of any and all enclosing function defs will also be visible to the  nested function.
[update, 12/03] it appears that it is possible to run the tk library, and hence python's tkinter gui toolkit, on this device.
naturally, there are  additional regulations regarding book citations in other publications, which  any good editor should be able to recite from memory.
that seems a bit harsh, given that  this example was originally present in the 1st edition, worked fine when the  2nd edition was published, and had been compiling and working correctly since  1994--for some 8 years.
however, in the last two and a half years, python did indeed sprout a  handful of new features that do not invalid this edition's examples, but do  mean that some of them can be coded slightly more simply than shown.
i should  also point out a common mistake that can arise if you generate callback  handlers within a loop, and try to use enclosing scope references to refer to  the loop variable within the generated functions.
it is  also possible to build guis on this pda with the python anygui api (a  portability layer that maps basic gui calls to a variety of underlying  toolkits, including qt), and possibly with jython (the java-based  implementation of python).
secondly, if the spams are big and frequent, this script does not prevent  your email box from overflowing your quota, unless it's run often enough.
when it does, it produces  an error popup, and needs to reload all email from scratch.
2.3 also renders some  buttons a bit smaller on windows, but this is less intrusive.
if anyone has a better clue, i'd love to hear it; for now, you should simply ignore this socket error message pop-up if you ever see it and press "load" again, unless and until a workaround surfaces.
however, some servers and systems detect the end of the headers by simply noticing a blank line, or a line that does not contain a colon (":").
this is not yet a simple process, but is an  alternative to using qt, anygui, or jython for guis on the zaurus, especially  if you have existing tkinter programs.
the zaurus runs qt/qtopia directly on the video frame buffer, not on x  windows; x can run on the zaurus, but not without a bit of work (there is  apparently a newx11 rom for the c7x0 series, which might enable tkinter  programming, but might not run qtopia apps; see also the update below).
you can always build a small c extension module to expose this c  function to python, but that requires a c compiler.
import nested_scopes".
see the wing idehome page, or python.org for links.
secondly, many people learn best by example,  especially after mastering language basics.
[4/01] more on python-friendly web servers
for example, given a directory structure:root\a\b\c.py, and an import statement of the form: import a.b.c: for the book's package, this means that if you copy the pp2e package directory from cd to a directory on your hard-drive, make sure to add the directory containing the pp2e directory to your module search path.
so far, two book examples have been identified which use the  "col" synonym, both of which appear near page 409 in chapter 8,  "a tkinter tour, part 2" (other gridding examples use the longer  "column").
this is most  useful when using lambas, since they typically are nested in a function or  method.
in other words, this is a use-at-your-own-risk feature, and is thus not enabled in the upcoming 2.1 release.
speaking of tools, also see pychecker--a new program that does simple lint-like program analysis, and pyprof--a simplified interface to the python profiler.
note that this changes the icon both for the open window itself, as well  as for the program's minimized entry in the launcher bar.
the launch_pydemos script accomodates this by configuring the search path automatically, and then spawning pydemos.pyw.
i've now verified this: as of  python 2.3, you can change the icon to one of your own, with code lack that in  this example script:testicon.py, which makes a window that looks like this.
a few library modules coded in c may require a compile with gcc or similar (i haven't needed to yet).
prior to 2.0, that module only tried os.fork, and so was a unix-only tool; in 2.0 and beyond, os.popen2 is used to start cgi scripts on windows.
note that this is not  the entire cd, but you probably will only care about getting this part of it.
see more about the 2.2 release earlier on this page, and see thebook note on this page that describes this language change in more detail.
as mentioned in the book, pmw adds additional widgets to the roughly 20 widgets native to tkinter.
naturally, if you have a windows or linux box on your network,  you may also be able to simply copy the cd contents to one of those machines,  and ftp or otherwise transfer it over to your unix box.
in fact, i encourage code reuse whenever possible--python code wants to be both reused, and free.
none of  these impact program examples, or the book's technical accuracy.
python notes see also: new recent python changes summary earlier on this  page.
the package import mechanism is covered inlearning python--the  book that you should consult first for such core language topics.
package imports are introduced in that book's 1st edition, and covered in more depth in that book's upcoming 2nd edition.
this mode isn't stated explicitly at this point in the  book, because urls and server-side scripts are not covered until much later  (chapter 11 and beyond).
per a hint from fredrik lundh, change the code below  to use state='readonly' for the entry field to get a disabled but not  greyed-out display in the calculator.
one noteable exception: defaults are still sometimes required in loops (seethis note).
alternatively, you could try coding and running  a web server in python with the standard cgihttpserver module (see the example  near the end of the advanced internet topics chapter), or consult a list of  python-friendly web providers (one is maintainedhere, but you should also check  the archives at python.org; most isps likely have or will install python these  days).
so, these examples should work fine under all activepython distributions, except for the original 2.1 release (and you may simply fetch the patch release if you have the original 2.1 release).
more generally, pippy promises to bring python's productivity and maintainability benefits to the embedded systems domain.
also: be sure to change internetmode to  "-live" in this file if you want to view web examples remotely (see  file comments).
this can work portably, because the python 2.0 cgihttpserver module now tries os.popen2 to spawn the cgi script if no os.fork exists (and falls back on execfile() if neither exists).
long file names on joilet cds can be read correctly today on windows, linux, and macs, but not on some unix systems that lack joliet support.
if you feel ambitious and get to this before i do, you might also be able to code a copy-and-rename script yourself (seethis gzipped text file for the output of a "dir /s /b"
since  poplib is careful to close and delete the socket used to fetch email, this is  probably related to the underlying socket library on windows.
i've been testing some of the book's examples on my new zaurus linux-based pda lately, and thought i'd post three of the first scripts i coded and ran on that device, as supplemental examples.
secondly, many people learn best by example, especially after mastering language basics.
#  self.entry.config(state='disabled') else: ...
although all the embedding techniques  shown in the chapter have been used in practice, the most common embedding  technique i've seen applied recently is also the simplest: the pyrun_simplestring call, presented on page 1151.
.\integrate\mixed\exports\classandmod\setup-class.csh visited 1475 files and 133 dirs, changed 190 files .\towriteable.py
it's a simple script, and true spam filters such as spambayes are much more powerful solutions; but running this script before my email client by clicking a desktop shortcut is usually all i need.
luckily, o'reilly maintains the book cd's examples directory online, at this site: http://examples.oreilly.com/python2.
\python21\python: c:\...\pp2e>python pytools\visitor_replace.py #!/usr/bin/python #!\python21\pythonlots of status messages scroll by unless redirected to a file.
secondly, i want to reiterate that this edition has been redesigned to be  an advanced follow-up to learning python.
release 2.1 will also include the pyunit automated testing system--see 2.1 release notes for more details.
for a simplistic example of this technique, see  the following off-page scripts: nongui.py gui.py start the nongui script--it spawns the gui script,  which displays a popup window that shows the text printed in the nongui script  (the date and time, sent once every 2 seconds from nongui to gui over a  socket).
it states that by default, python code normally  has access to everything in the python language and library.
that probably won't matter, but if it does, it's easy to write your own  visitor subclass to be more accurate.
launch_* scripts, path setup be sure to click/run the launch_pydemos.pyw auto-configuring script in the  examples\pp2e directory for a quick look, not file pydemos.pyw itself.
first of all,  using the language for real tasks represents the second, and much larger half  of the python learning experience.
in book example code, all cross-directory imports are always relative to the pp2e root directory (e.g.,import pp2e.gui.xxx); imports of files that live in the top-level script's home directory are not (e.g.,import xxx) because the home directory is searched first.
the 2.2 release notes say of the original 3rd argument removal: "if this affects you, you were cheating."
python 2.2 was released near the end of 2001, roughly a year after this book's 2nd edition was finished.
this is not a replacement for those directory search tools in general, though--they are also used to search for other files in various examples.
in the worst  case, most linux users may also copy the cd to a hard disk under windows, and  then copy it over to your linux partition.
but as a service to readers concerned about life on the bleeding edge, and in lieu of a hypothetical 3rd edition, here is a quick summary of the most prominent python changes that impact this edition, in roughly decreasing relevance order: python recently started showing many more decimal digits for the repr() string of certain floating point numbers.
in fact, i still have python 1.5.2 installed on one of the development machines used to write this book--for which, of course, i am deeply ashamed :-).
the best answer to this query is probably to take the plunge and restructure the program as a real gui: initialize widgets on start-up, call mainloop once to start event processing and display the main window, and move all program logic into callback functions triggered in response to user actions.
so far, two book examples have been identified which use the "col" synonym, both of which appear near page 409 in chapter 8, "a tkinter tour, part 2" (other gridding examples use the longer "column").
in python-speak, a directory of modules and subdirectories is called a package.
to see why the  server name "localhost" works such magic, see the client-side socket  calls overview on page 530 and beyond (as noted in the book, your web browser  is a socket client).
posted forms  fail, but get requests to the exact same script (a form with method=get, or a  url with an appended query string) work fine.
note: when running such a python-coded web server locally on windows and contacting it with an internet explorer client on the same machine, there appears to be an issue with post style requests to scripts.
for instance, the original non-gui code can be started by widgets on  the main gui window.
part of the confusion expressed by some readers may revolve around the examples\__init__.py example file on the cd.
programming python 2nd edition
for  python 2.2, the first item added should generally be changed from  r"c:\python20" to r"c:\python22" to avoid long startup  times; for 2.1, it should be r"c:\python21".
in 2.2 and earlier, disabled entry widgets showed their text normally, but did not allow edits, and did not participate in keyboard tab focus traversals.
unfortunately, because the calculator guis that show up in the book's text and language chapter convert numeric results for display with backquotes (`n`), you may now sometimes see more decimal digits than before.
some people run a full-blown server like apache locally in such a role.
the book notes and updates page this page provides updates on points that arose after publication, and  serves as a virtual appendix to the book.
the new  sys.executable attribute might yield a better solution as well (see note below).
this is a break from both the 1st edition and o'reilly perl books, but was made deliberately for at least three reasons.
additionally, there is a new  "os.startfile", which is like spawning a dos "start"  command on windows with "os.system", but no dos console window pops  up along the way.
once installed, pippy actually provides a python command-line on the palm; you can import modules installed, and type and run python code interactively on a palm device.
half a year after the book  was published, my isp account was aquired by earthlink, which now requires the  leading "www" to reach my website.
this is sometimes frowned  on, though, because it leaves the true nature of the file's data  ambiguous--it's usually better to let the user/client decide how to handle  downloaded data, rather than force the save-as behavior.
] tkinter: displaying gui windows from a non-gui script [03/04] tkinter: grid requires "column=" instead of  "col=" in 2.3 [11/03] python on the zaurus pda: example scripts [11/03] tkinter, calculator: disabled entry greyed-out in 2.3 [11/03] book cd examples directory download site
performance enhancements: this is more of an internals thing, but  the python interpreter has been sped up substantially in recent years.
it's okay to call mainloop more than once, but this script takes care to recreate the gui's widgets before each call, because they are destroyed when the previous mainloop call exits (widgets are destroyed internally inside tk, even though the corresponding python dialog object still exists).
regrettably, the python c api is more prone to change than the core language.
however, some  servers and systems detect the end of the headers by simply noticing a blank  line, or a line that does not contain a colon (":").
_pytuple_resize(&args, (1 + pytuple_size(args)), 1)
you can always build a small c extension module to expose this c function to python, but that requires a c compiler.
you can even usegcc to compile c extensions to .so files right on the pda,  and import them into your scripts.
you can still use the lower-level tools like the "rfc822" module  shown in the book, but "email" makes some email coding tasks simpler,  especially when it comes to things like attachments.
this new variable lookup layer has been added between the l  and the g in the lgb rule: on variable references, python now searches the  local scope, then all enclosing defs (if any) from inner to outer, then the  module, and finally the built-in scope.
all of  these features will be covered in detail in the upcoming booklearning python  2nd edition, and some are described elsewhere on this updates page.
with respect to the book's examples, perhaps  the most significant change in 2.2 is the introduction of arbitrarily nested  static (a.k.a. lexical) scopes.
you can grab it from the following urls, or at the vaults site-- home:  http://hackicon.sourceforge.net, download:   http://prdownloads.sourceforge.net/hackicon/hackicon00003.zip.
this python change does not break examples in the book (they will still work with 2.2 and later), but it does mean that callbacks in some of the examples can be coded in somewhat simpler terms after the 2.2 release.
the guiinput and guioutput  classes in that example assume that there is a mainloop call running somewhere  (they're gui, after all).
none self.hist.append(code) result =
this is a  minor mutation, but makes it easy to consult example code quickly--something  i've done often enough to warrant the change.
the first of these constraints can be met by a string of the form  "import os; os.system('rm *')", but the second of these is an  operating-system level guard outside of python.
for instance, code of the following form: class mygui: def action(self, tree): print tree def makewidgets(self): tree = 'larch' button(text='spam', command=(lambda: s=self, t=tree: s.action(t))).pack()can now be coded in the simpler way: class mygui: def action(self, tree): print tree def makewidgets(self): tree = 'larch' button(text='spam', command=(lambda: self.action(tree))).pack()simply because the variables "self" and "tree" from the enclosing def scope (the method) are automatically retained for later use by code in the body of the lambda function.
.\integrate\mixed\exports\classandmod\output.prog1 1475 =>
you can tell which printing you have by looking near the bottom of the publishing details page (near the front).
note that these are  standard tk cursor settings, and should work in all tkinters.
really, the "pp2e" subdirectory is the examplepackage root, and directory "examples" represents an arbitrary container for the package root.
that is, it focuses on ways to  use python syntax for real tasks, rather than the syntax itself.
it includes new language features such as: the latest and greatest python release, version 2.1, may now be fetched frompython.org.
again, this only impacts users on unix systems for which a joliet-format cd reader does not exist, and who do not have access to other kinds of machines; the cd should work fine today on recent versions of windows, linux, macs, and other unix boxes.
check out the new online python journal.
it changes  every first line that starts with #! and name "python", to a line you  pass in on the command line or assign in the script: c:\...\pp2e>python pytools\visitor_poundbang.py #!
the last code listing on page 66 almost looks like a typo, but it's not.
visitor_replace does a simple global search-and-replace operation on  all non-binary files in an entire directory tree (it recursively visits all  subdirectories).
if i find a better solution, i'll post it here.
the swig code generator is better too, with new support for  c++ esoteric features such as templates.
visitor_replace does a simple global search-and-replace operation on all non-binary files in an entire directory tree (it recursively visits all subdirectories).
two new packages were recently announced that merit a blurb here: check out thepygame 1.0 package, a set of extension modules for writing games with python and the cross-platform sdl directmedia library.
if there are no details here for a printing listed below, it is because i was not consulted for edits before that print run; see o'reilly's errata list for any changes made.
speaking of tkinter: i also recommend the manning book "python and tkinter programming" as a follow-up to the material in the gui part of this 2nd edition; in particular, its coverage of the supplemental widgets in the pmw extension may prove valuable if you need to do any industrial strength gui development.
in that  mode, the nested mainloop call returns when the dialog's quit method is called,  but we return to the enclosing mainloop layer, and remain in the realm of  event-driven programming.
second printing: april, 2001 [4/01] third printing: june, 2001
it's also a bit naive: it won't change other #!
in fact, i encourage code reuse whenever  possible--python code wants to be both reused, and free.
copy this file into your pp2e\pytools directory.
as one reader wrote recently, some of the readme files on the book cd might be a bit misleading about the source-code tree's structure and installation.
they reuse the  finder and visitor examples to do directory traversals.
when run, this script converts  all #!
on the cd, the top-level examples directory is pp2e's container, and  so is the one to add to the module search path (unless you use the  self-configuring launchers).
other  entries are book clarifications or corrections.
to take a look, or to use these scripts for metrics of your own,click here.
if you  don't have access to a remote server, though, this can be convenient (for  example, i started using the webserver.py script in 2003 to test cgi-based  programs on alinux pda, without a network or modem card).
[11/01] extra examples: sloc counter scripts just for fun, i recently coded four simple scripts that count the number  of lines of source code in the examples shipped with the book.
it also may not be as general or portable a solution; for instance, the searchers fall back on brute-force disk searches if needed, and the interpreter needs to do some fairly complex and platform-specific work to set sys.executable including a similar path search (see python source file modules/getpath.c).
given that most of this line count represents python code, multiply by 3 or 4 to derive the sloc equivalent for c, c++, or java.
you can find more about this pda on this page, including a couple mid-page  screen shots showing python running in console mode; you can also run python  programs as qtopia apps, with a bit ofconfiguration (see also  www.zaurususergroup.com).
alas,  this was probably the biggest problem that this particularly prolific email  worm created for dial-up users; if you cannot run scripts on the server, and  are not constantly connected to it, you may effectively have a service outage.
note that launchbrowser can only  perform get style invocations (with query strings in urls), not posts; see page  707 for details--you probably only need to care for very large parameter data,  and selected sites/scripts.
the second printing is scheduled to happen in april 2001 (about a month after the first printing), so this issue is unlikely to exist in most copies of the book.
typically, __init__.py files are not meant to  be useful if executed directly; they are run automatically during imports, the  first time python goes through a directory.
i have so far been unable to recreate this  behavior in python 2.2, so it may or may not have been improved in a later  python release.
pydemos.pyw, chapter 8, rmi.net url change: in function onlinks()  near the end, there are two hardcoded "rmi.net/~lutz" urls that  should be changed to "www.rmi.net/~lutz" if you want these link  buttons to open the book and author web pages today.
also note that on recent versions of linux, the cd works fine, but be careful to read it in such a way as to preserve the original unmangled file names; see your mount and fstab man pages if you need help (e.g., you may need to specify iso9660 and/or joliet keywords in your /etc/fstab file on some installations).
string methods: these days, users are probably better off using  string methods (e.g., str.split()), instead of functions in the original string  module (e.g., string.split(str)).
note that this is not the entire cd, but you probably will only care about getting this part of it.
use your browser's save-as option to  store locally, if needed, and place this file in your pp2e root directory.
with respect to the book's examples, perhaps the most significant change in 2.2 is the introduction of arbitrarily nested static (a.k.a. lexical) scopes.
at 1250 pages, we had to draw a few lines.
scripts generate identical output  for both post and get, so this is not a bug in the examples, but seems to be  related to the windows socket model used by os.popen2.
unix systems that don't support joliet format generally want to find the rock ridge long filenames extensions on the cd instead; you can still read the book cd on such unix systems, but you'll get the straight iso 8.3 mangled filenames, not the joliet long names.
in contrast, the os module's write call does not do buffering  by default, so its text winds up first in the file, even though it is written  second.
in brief, this new nested scopes rule allows  code within both nested def statements and lambda expressions to automatically  have access to names defined in the scope of all enclosing function defs.
python does evolve, but not so fast that two years is the software eternity that some might imagine.
you never know when an important  message may match your deletion criteria.
in some cases, and on some platforms, this  call might be able to replace some of the python interpreter searches that are  performed in a few examples early in the book (see the launcher utilities for  more details).
a few people have asked about ways to change the #! line at the top of  script files (this line gives the path to the python interpreter on unix-like  machines).
here  is my opinion, and o'reilly's.
it's an example of the sort of tactical things you can do when you know a scripting language like python.
as such, this is another way to  test and run cgi scripts without having an account on a web server machine that  supports python.
update: these typos will be fixed in the third printing of the  book, scheduled to happen in early june, 2001.
if you look closely, you'll notice that the first output line shows up second in the output file.
that is, it can be used to serve up local html files and  cgi scripts with just a standard python install on windows, and without  connecting to the internet at all.
if your pythonpath is not set (either manually, or by the top-level launch_pydemos script), pydemos pograms that depend on the module search path setting will not work.
###############################################################################  ## 2/03: else new full precision oddness ## result =
pymailgui, the tkinter client-side email tool in part iii, seems to run into "bad file descriptor" type errors after running awhile on windows, especially after downloading lots of email.
when augmented with a c extension module like this, simple strings  are often sufficient for embedding tasks, and much simpler to program than  other embedding api schemes.
it saves a few  keystrokes, and sometimes may run faster than the non-augmented form  ("x" runs only once, and in-place operations may be used).
i've never been burned by this in the two years that i've been using these examples, so it's a very obscure thing, and not quite a bug.
note that the grey-out effect in 2.3 has only been observed on windows;  this may or may not be an issue on other platforms.
the pythonworks ide has sprouted a very nice refactoring feature, which automatically changes and rearranges code for clarity and maintainability.
extract.py converts a ".pdb" palm memo database to simple text  files, one file per memo, and demos the pythonstruct module for parsing  binary file data.
it adds buttons on the right that automatically pop-up each demo's source code files in pyedit windows.
caveats: this works for  my use of the datebook, but may not be generally applicable.
finally, notice that you could modify this script to automatically delete  some such messages based on their sizes or header contents, but this is  inaccurate, and can be fairly dangerous.
this is not exactly like disabled in 2.2  (the field background is a bit shaded), but is better than either the disabled  or normal states in 2.3.]
this new variable lookup layer has been added between the l and the g in the lgb rule: on variable references, python now searches the local scope, then all enclosing defs (if any) from inner to outer, then the module, and finally the built-in scope.
that is, pp2e's  container must be the home directory, or listed in pythonpath or other  settings.
to mimic the palm, text from the first line of the memo,  appropriately massaged, is used in the filename.
given that most of this line count represents python code,  multiply by 3 or 4 to derive the sloc equivalent for c, c++, or java.
the 7 line webserver.py script on page 940 can also, with a few  customizations, be used to run a cgi-capable web server on your local windows  (or other) machine.
as far as i'm concerned, you may freely use the book examples in your own software systems, in any fashion you like.
and on page 1040, in the first line of the last interaction listing, it should read "@= ..\bases\zoo.kb" (a weird upside-down apostrophe showed up where the first backslash should be).
[11/03] tkinter, calculator: disabled entry greyed-out in 2.3 [update 9/04:
you cannot do any more than is  normally allowed by the underlying operating system.
new popular frameworks: in the gui domain, wxpython and pyqt are  now probably the 2nd and 3rd most popular options, behind tkinter (wxpython  seems closer behind than before).
i worked on two of these on a plane,  while simultaneously listening to mp3s on the same pda; it doesn't get much  better than that :-).
under 2.3, this field is now difficult to read because of the new grey-out effect.
python now has a sys.executable builtin that gives the full directory path name of the python interpreter program that is running the calling script: >>> import sys >>> sys.executable 'c:\\program files\\python\\python.exe'in some cases, and on some platforms, this call might be able to replace some of the python interpreter searches that are performed in a few examples early in the book (see the launcher utilities for more details).
more  details will be posted here as they emerge (no pun intended).
although this text went through  rigorous testing and review, a few bugs and typos are statistically inevitable  in a 1250 page book and42k lines of example source code.
the tkinter in the latest python release, 2.3, now greys-out (stipples)  text in entry widgets that are marked as disabled.
in short, x windows and tk need  to be enabled in one of a variety of ways, and the python tk interface module  must be compiled as well.
on the web front, webware, quixote, and  twisted, seem to have attracted attention as network development frameworks,  along with zope.
the relevant code appears on page 665; like the sidebar says: a  suggested exercise.
simply start webserver.py on your local machine, and use server name  "localhost" in your urls (e.g., type  "http://localhost/cgi-bin/test0.cgi" at the top of your browser to  contact your locally-running webserver).
update: see also the note above about running webserver.py locally.
see thepippy home page or python.org for downloads and more details; to go straight to some pippy screen-shots,click here.
i've heard of a few cds being  broken on receipt as well.
because enclosing scope names are now visible, it is usually no longer required to save names from an enclosing scope by passing them into nested defs and lambdas with default arguments.
; to this: oops = _pytuple_resize(&args, (1 + pytuple_size(args))); note that this fix will make ppembed compile, but may not by itself make  debugged function calls work as before, though non-debugged calls should work  fine.
[6/02] five random footnotes: cgi, embedding, email, joins, rexec i'd like to insert footnotes about five unrelated issues that came up  recently, by email or otherwise: cgi downloads--forcing the issue chapter 12, server-side  scripting, develops a script namedgetfile.cgi, a python cgi program  designed to display any public server-side file, within a web browser (or other  recipient) on the requesting client machine.
a newly-emerged ide for python development, demoed at the ipc9 conference.
at the least, i hope this functionality is exposed to python in a future tkinter release.
there is also a dedicated website,www.pydoc.org , which includes pydoc pages for the python standard library.
and speaking of files: be sure to see the standard struct module if you're looking for tools that unpack and pack strings transferred from/tobinary mode files; this seems to be a commonly-asked question.
first of all, using the language for real tasks represents the second, and much larger half of the python learning experience.
in all prior releases, code that  referenced a variable name only had access to names defined in the local scope  (def or lambda body), the enclosing global scope (module), and the built-in  scope--a 3-scope search known as the lgb rule.
unfortunately, the numeric display in the book's final calculator  gui uses a disabled entry field, to disallow user changes.
to fix,  comment out the disable call in file pp2e\lang\calculator\calculator.py: class calcgui(guimixin, frame): ... def __init__(self, parent=
other entries are book clarifications or corrections.
this backwards compatibility was one reason that  examples use things like string module calls, not 2.0 string methods (string  methods are discussed in the text itself).
also, many spam filters must  download full messages (not workable over a modem when there are 10m of them),  this script is immune to differences in the filtering tools of email clients,  and coding this was much quicker than becoming an expert in such things.
i mentioned the new nested scopes lookup on this page previously.
and on page 1040, in the first line of the last  interaction listing, it should read "@= ..\bases\zoo.kb" (a weird  upside-down apostrophe showed up where the first backslash should be).
a few library  modules coded in c may require a compile with gcc or similar (i haven't needed  to yet).
this issue was reported on the python bug list at sourceforge on 5/29; you can probably read the report's statushere.
(update 01/03: see the newer and related note).
in fact, a few email examples in  part iii of the book omit the blank line (smtpmail, pymailgui, and pymailcgi),  yet all the email examples in the book work correctly as shown.
in fact, examples\__init__.py is ignored and  never run by imports--it if was, book examples would generate error messages  and abort (examples\__init__.py contains imports of old directory names which  no longer exist in the examples tree!).
that is, it can be used to serve up local html files and cgi scripts with just a standard python install on windows, and without connecting to the internet at all.
the trick is that mainloop doesn't return until the gui main window is closed by the user (or quit method calls), so you cannot retrieve user inputs from widgets after mainloop returns.
this is a fairly major language change.
i want to clarify two points related to the preface, about which i've already gotten email.
spawning the gui as a separate program might help with the guistreams  example too, as long as inputs and outputs are communicated to the gui over ipc  mechanisms, and the widget after() method (or similar) is used by the gui  program to detect incoming output to be displayed.
spawning the gui as a separate program might help with the guistreams example too, as long as inputs and outputs are communicated to the gui over ipc mechanisms, and the widget after() method (or similar) is used by the gui program to detect incoming output to be displayed.
in 2.2, the names in the local scopes of any and all enclosing function defs will also be visible to the nested function.
[update, 08/01]: the py2exe packaging/distribution  tool now also has a way to change the icon: simply pass a .ico file name to the  script's --icon command-line argument.
if there are no details here for a printing  listed below, it is because i was not consulted for edits before that print  run; see o'reilly's errata list for any changes made.
the non-gui script would not be blocked by a mainloop call.
on  page 1041, in the first indented paragraph, "awg" should be  "awk" (of course!).
apparently, there is no way in a python script to replace the default red  "tk" icon that shows up in the upper left hand corner of all toplevel  tkinter windows.
note: when running such a python-coded web server locally on  windows and contacting it with an internet explorer client on the same machine,  there appears to be an issue with post style requests to scripts.
by using various  mime header line settings, you can make the data type unknown, and effectively  render the browser clueless about data handling.
[1/02] o'reilly's policy on example code reuse i've recently received a handful of email queries about copyright issues  associated with reusing the book's example source code in other systems.
activestate's komodo system is a python development ide that is free, portable, and based on the mozilla application framework.
py2exe is similar to the installer tool,  and builds upon the distutils extension.
in this scheme, the python-coded web server  and your web browser run on the same machine.
you can even usegcc to compile c extensions to .so files right on the pda, and import them into your scripts.
the visitor class framework essentially wraps the os.path.walk call (see chapter 5).
again, this only impacts users on unix systems for which a  joliet-format cd reader does not exist, and who do not have access to other  kinds of machines; the cd should work fine today on recent versions of windows,  linux, macs, and other unix boxes.
it uses a content-type of  text/plain or text/html to make the requested file's text show up properly  inside a browser.
python 2.1 will include the pydoc system--a tool that extracts documentation strings from python programs, and nicely formats them into a html (and other) formats for viewing.
the book doesn't described this format, and you don't actually need the blank line in most cases.
this was not demonstrated  directly in the book due to problems with python's http server support on  windows in 1.5.2 and 2.0 described below; in other contexts, this technique  works fine.
seeactivestate for more details.
you can simply edit the guimaker.py script on your machine: find and  delete the two "cursor=" configuration options in this script.
if your  pythonpath is not set (either manually, or by the top-level launch_pydemos  script), pydemos pograms that depend on the module search path setting will not  work.
also note that leaving the  entry field enabled means you can change its text (but probably shouldn't; a  better solution may be to use a label for the display).
augmented assignment: this shorthand (e.g., x += y, versus x = x +  y) is optional, but could be used in many of the examples.
of course, in python 2.3, the new standard library "set"
\python21\python: c:\...\pp2e>python pytools\visitor_replace.py #!/usr/bin/python  #!
see the registration example on page  1162, for tips on combining embedding calls and an extension module in a single  program.
there is a bug in activepython2.1's implementation of tkinter that makes a few of the book examples fail on windows.
... 1 => .\__init__.py 2 =>
speaking of email formats: see also the  new "email" standard library package in python 2.2 for other ways to  parse and compose email messages.
[update, 07/01]: matt butler recently announced a small  extension which lets you easily change the window icon of toplevel windows in  tk on windows (you pass it a .ico icon file name to replace the default red  icon).
really, code run by the python  interpreter can only perform tasks that are allowed for the user id under which  the python interpreter process is running.
this looked like a bug to me too when i reread it, but it does work  exactly as shown.
the advantage to this approach is that it provides a separation of gui and non-gui code; the non-gui script would only have to be modified to spawn and wait for user results to appear from the separate gui program, but could otherwise be used as is.
and finally, if you set up your module search path manually, be sure to  add the directory thatcontains the pp2e root to your pythonpath setting.
update: these examples will be made more robust as described above, in the second printing of the book.
the good news is that o'reilly's policy is very  liberal: in short, if you reuse example code directly, they only require some  sort of attribution that names the original book/author.
that is, the code works as is and as shown so  this is not quite a bug; but the # at fragment name attributes is unnecessary,  and is usually omitted.
naturally, there are additional regulations regarding book citations in other publications, which any good editor should be able to recite from memory.
the book's demo launchers do work with the  activepython install too, but that install includes an unrelated tkinter bug in  release 2.1 that makes some demos fail (see the prior note).
and finally, if you set up your module search path manually, be sure to add the directory thatcontains the pp2e root to your pythonpath setting.
the 7 line webserver.py script on page 940 can also, with a few customizations, be used to run a cgi-capable web server on your local windows (or other) machine.
in this architecture, the imported c  accessor function calls effectively provide inputs and outputs for the embedded  python code.
[5/01] demo launchers clarification:
\mypython21\python  are you sure?y .
c:\...\pp2e>type .\launch_pygadgets.py
the __init__.py files in package directories seem to be most prone to confuse.
i thought that this launcher structure was explained clearly enough in the  book's preface and cd readme files, but a few people have already been burned  by this (and to be fair, there is a less clear descripton of the demo launchers  structure in the pragmatics appendix).
for an example of this technique, see the off-page demo program: popup1...
this scheme avoids potential name collisions.
i have no idea why  this occurs, and it seems to have gotten worse in python 2.0.
[8/01] more minor narrative typos we still occasionally find typos in the narrative that were missed during  the copyedit (it happens, no matter how many people proof a book).
but i will use  this entry to note any odd or missing word reports.
you cannot, for example, apply this technique to use  utilities like the guistreams.py example on page 457-459 to route user  interaction from non-gui code to gui windows.
string methods require a bit less typing  (and no module import), and probably run quicker; the string module maps  function calls back to the methods, incurring an extra call along the way.
module makes implementing set types just a coding exercise.
a workaround (e.g., a 8.3-to-long file copy and rename script) is still being researched, but please contact me as requested above for the time being if this is effecting you.
but for details on the changes made,click here.
like i  said, typos happen.
this isn't discussed in the book at all, but i've gotten a few questions  about this in classes, and it has come up on the python newsgroup as well.
because enclosing scope  references are evaluated when the function is called (not created), they all  wind up referring to the same setting of that variable--the one made by the  last loop iteration.
as such, this is another way to test and run cgi scripts without having an account on a web server machine that supports python.
.\towriteable.py ...
but to be general,  either concatenate an extra "\n" after the header lines, or be sure  to type a blank first line in the message if the first real line contains a  ":".
it is not a bug  in pymailgui itself, but appears to be in the python libraries or lower.
really, the mainloopdemo.py demo above works only because the gui can interact with the user independently, while the mainloop call runs; the script is able to surrender control to the tkinter mainloop call and wait for results.
line patterns  that mention python (e.g., you'll have to run it again to change  #!
see the standard c api documentation for details.
[11/03] tkinter: changing the red tk icon now works
update: these examples will be made more robust as described above,  in the second printing of the book.
fredrik lundh has implemented some nice tools for doing xml-rpc from python--a protocol that lets scripts invoke methods on a remote machine, and passes data between caller and callee as xml-formatted text streams over sockets.
it can be run locally on a linux or unix machine almost out of  the box, and should work on windows with a few caveats mentioned in the prior  note (there was a bug with post requests and internet explorer as i wrote this,  which may be fixed by the time you read this).
the combination  of tkinter and pmw is at least as rich as wxpython, and does not suffer from  wxpython's initial framework complexity and documentation shortage (he says,  trying very hard to be objective :-).
alternatively, the gui could be spawned by the non-gui script as a  separate program; user interaction results can be communicated from the spawned  gui to the script using sockets, files, or other ipc mechanisms.
also notice that this is different from using recursive/nested mainloop calls to implement modal dialogs, as shown in the book on page 317.
each directory listed in a script's import statement must have an __init__.py file.
[5/01] cd file names mangled to 8.3 on some unix platforms there has been a report that file names on the book cd get mangled to 8.3  dos format when the high sierra file system is mounted on the cd under solaris  (rock ridge extensions aren't supported).
this includes pyedit, pyview, pymail (its mail composition windows), and probably big_gui and shellgui.
the mainloopdemo.py example instead runs mainloop two  different times, stepping into and out of the event-driven model twice.
therefore, without the blank line separator, if the first line of the message text happens to contain a ":", it might be classified as a header, and dropped from the message body.
in particular, be careful to  not add the pp2e directory itself to the module path, but instead add its  parent.
but perhaps a more robust and release-neutral solution might be  to either use the "from" address verbatim without any parsing (as  done by the pymailcgi example later in the book, page 793), or blindly add  quotes around the user name always (assuming it is not already quoted, and is  present at all, of course).
for instance, code run on web  servers under user id "nobody" will generally have limited machine  access, beyond the constraints provided by the python rexec module.
transferred from/tobinary mode files; this seems to be a commonly-asked  question.
# 2.3: no way to disable but show normal?
for details, see the "nested scopes gotcha" write-up in the learning python 2eupdates page, near the end of its "more python gotchas" section.
generator functions and iterators: similarly interesting for  distributing computation over time and advanced algorithmic work, but have no  clear application to this edition's code.
i thought that this launcher structure was explained clearly enough in the book's preface and cd readme files, but a few people have already been burned by this (and to be fair, there is a less clear descripton of the demo launchers structure in the pragmatics appendix).
type "2 / 5.0" at the python  interactive prompt, and you'll see what i mean: today you get  0.40000000000000002, not the 0.4 of prior releases.
you can play with nested scopes in 2.1 by saying "from __future__
i suppose such a script  could be extended to automatically run every hour or so, and dial out before  connecting to the mail server (assuming you're not using the phone line), but  that seems like an awful lot of work just to be able to read your email.
line  patterns lurking in the examples tree besides #!/usr/bin/python.
[06/04] tkinter: displaying gui windows from a non-gui script a reader wrote to ask about displaying gui pop-up windows from a non-gui  program.
as an author, i consider this a form of compliment, and i'm always glad to hear that the examples are finding practical application.
in fact, tracing shows  that scripts receive correct inputs and generate correct outputs for post too,  but the output appears to be lost or munged on the way back to the web browser.
also note that although i am happy to investigate such  issues, their resolution is beyond my control; please report such issues to  activestate directly (this specific bug has already been reported).
they seem to be standing up to time well, but a few tweaks are worth mentioning: just for fun, i recently coded four simple scripts that count the number of lines of source code in the examples shipped with the book.
the c api: has gone through some changes related to the blurring of  the type/class distinction.
because of that, you should take the  examples directory's __init__.py file as nothing more than an example, not a  required component, and view the cd's examples root directory as simply a  representative stub.
i should also point out a common mistake that can arise if you generate callback handlers within a loop, and try to use enclosing scope references to refer to the loop variable within the generated functions.
that is, for repr(n), (and backquotes  `n`, which is the same as repr), python today shows more digits after the  decimal point than it used to.
embedding python and common practice chapter 20, embedding  python, lays out a variety of techniques for invoking python code from a c/c++  program, ranging from strings to direct object calls.
python code in this scheme is a c string, which may live on a file or  database, be fetched from an xml document or gui, and so on.
the  settings do work as advertised in the standard python 2.1 release.
it's difficult to understand the rationale for such a trivial and non-backward-compatible change, but "col" is clearly no longer allowed today.
seeapache's site for details; this is probably not for the novice, but isn't too difficult in general.
that is, the text writtenfirst with the file object write method appears after the text writtensecond with the os module write call.
that scheme won't work if you must run any non-gui code while the gui is open.
at the top-level of the book cd, the "examples\pp2e" directory contains all the examples' source-code.
[11/03] book cd examples directory download site a number of people have emailed me to say that they broke or lost their  cds, and need a copy of the book's examples.
this script is another example of the sorts  of tactical things you can do with python; the fact that you can both code and  run such things directly on the pda is a huge bonus.
for instance, if you copy the cd's examples\pp2e directory to "c:\pp2e", then you must add "c:" to pythonpath (not "c:\pp2e").
the  latter of these assumes that your python module search path (pythonpath) is set  to include the book's source-code package root.
as you might expect, python works very well on this machine, because it's  linux.
directory root must be on the module search path (not root\a).
if this design shift is still not clear, please see the preface for more about this edition's structure.
subsequent reports have suggested that this also may occur on some other flavors of unix.
these files are present to identify a directory as an importable  module package, and initialize the directory's namespace.
this may partly be because some of these files are legacy code meant only as extra examples, and have comments that reflect a prior tree structure different than the one shipped (e.g., some directory names don't match reality anymore).
however, this is only known to be an issue on a handful of platforms; the cd should work fine on recent windows, linux, and mac machines, and on unix platforms with proper support.
(if you want to try, the tk binary library file installs with python, and tk source code is already available on the book cd).
python 2.1 alpha introduced, and then retracted, a change which will allow scopes to nest arbitrarily, when scope constructs (class, def, and lambda) are nested syntactically.
(update 6/02: see also the new "email" standard library package in python2.2, for other ways to format and parse email messages.)
[3/01] python version clarification i want to clarify two points related to the preface, about which i've  already gotten email.
none  return result [1/03] clarification of cd's example package structure, installation as one reader wrote recently, some of the readme files on the book cd  might be a bit misleading about the source-code tree's structure and  installation.
in contrast, the os module's write call does not do buffering by default, so its text winds up first in the file, even though it is written second.
but as a  service to readers concerned about life on the bleeding edge, and in lieu of a  hypothetical 3rd edition, here is a quick summary of the most prominent python  changes that impact this edition, in roughly decreasing relevance order: nested function scopes: because python's scope rules now  automatically search enclosing functions' scopes, you usually no longer need to  pass in values from the enclosing scope with default arguments.
really, the "pp2e"  subdirectory is the examplepackage root, and directory  "examples" represents an arbitrary container for the package root.
first of all, if you have an existing python 1.5.2 installation, you donot need to install python 2.0 to run most examples in this book; they should work fine under 1.5.2, even though the preface states that this edition covers 2.0.
there might be a way to replace the window border icon with a bitmap of your own in the tk c library: the c functiontk_setwindowborderpixmap(tkwin , pixmap) looks like a good bet, but it can only be used from c, not python.
at the top-level of the book cd, the "examples\pp2e"  directory contains all the examples' source-code.
however, all of these examples still work under the standard  python2.1 release for windows that is available from www.python.org (as well as  all older versions available on the book's cd).
[update 9/04: per a hint from fredrik lundh, change the code below to use state='readonly' for the entry field to get a disabled but not greyed-out display in the calculator.
as stated in its preface,programming python 2nd edition is oriented more towards application-level programming concepts, and so does not itself pretend to teach package import details in any sort of depth.
that is, launchbrowser is not limited to static html pages--it can also invoke  programs on a server.
to see why the server name "localhost" works such magic, see the client-side socket calls overview on page 530 and beyond (as noted in the book, your web browser is a socket client).
in this earlier note, i suggested that it may now be possible to change the red tk icon in python tkinter gui programs.
the  directory containing pp2e doesnot need an __init__.py file (though it is  simply ignored if present).
the mainloopdemo.py example instead runs mainloop two different times, stepping into and out of the event-driven model twice.
it can be run locally on a linux or unix machine almost out of the box, and should work on windows with a few caveats mentioned in the prior note (there was a bug with post requests and internet explorer as i wrote this, which may be fixed by the time you read this).
defaults still work, but are no longer needed for this in most cases  (though they may still be when generating functions within loops).
finally, note that this scheme only works if you don't have to run any  non-gui code while the gui is open, because your script is inactive and blocked  while mainloop runs.
when compiling under 2.2, the following error is reported: ppembed-callables.c:
they do not  perform a deeper structural analysis to detect valid header lines (python  doesn't either--see method readheaders in the source code of python's rfc822  module for an example).
more recent notes appear  first in these lists.
technically, though, my publisher (o'reilly) owns the copyright on the  book and its examples, so you'll want to consult their policy if you need a  legally-binding answer.
as implied by the socket chapter, it is possible to test server-side cgi scripts without connecting to the internet.
for an example  of this technique, see the off-page demo program: mainloopdemo.py this demo makes a simple 2-button main window,  which launches file selection dialogs.
because enclosing scope references are evaluated when the function is called (not created), they all wind up referring to the same setting of that variable--the one made by the last loop iteration.
technically speaking, komodo takes something of anagnostic approach to language choice: it will serve as an ide for a variety of programming languages.
in all prior releases, code that referenced a variable name only had access to names defined in the local scope (def or lambda body), the enclosing global scope (module), and the built-in scope--a 3-scope search known as the lgb rule.
that  way, you can run code while gui windows are active.
it's okay to call mainloop more  than once, but this script takes care to recreate the gui's widgets before each  call, because they are destroyed when the previous mainloop call exits (widgets  are destroyed internally inside tk, even though the corresponding python dialog  object still exists).
before going into cgi upload techniques, page 755 goes so far  as to compare the getfile.cgi script to a generalized cgi download tool, when  augmented with cut-and-paste or save-as interactions.
there are a few additional unix-only calls in some of the book's cgi scripts (e.g., os.path.samefile in getfile.cgi) that may require more customization for a server running on windows, and you'll want to run the fixsitename.py script to replace any lurking "starship.python.net/~lutz" references in html files to "localhost" (see the server side scripting chapter for details).
[5/01] using webserver.py to run cgi scripts locally as implied by the socket chapter, it is possible to test server-side cgi  scripts without connecting to the internet.
you can fetch a slightly enhanced version of the book's pydemos top-level  demo launcher script, byclicking here.
this is not a replacement for those directory search tools in  general, though--they are also used to search for other files in various  examples.
cd listing run on dos, sorted by full pathname).
the tkinter in the latest python release, 2.3, now greys-out (stipples) text in entry widgets that are marked as disabled.
and speaking of files: be sure to see the standard struct module if you're looking for tools that unpack and pack strings
here's why: in this case, the file object's output written first isbuffered by the stdio file system, and is not actually transferred to the file until the object's close method is called at the end of the interaction.
for a complete list of typo  fixes i requested for the third printing,click here.
see also: new recent python changes summary earlier on this page.
some of these represent recent python developments.
for details, see the "nested scopes gotcha" write-up in the  learning python 2eupdates page, near the end of its "more python  gotchas" section.
the impacted examples are grid5b.py, and grid5c.py, both  in directory examples\pp2e\gui\tour\grid on the cd.
the net effect is that these classes can only be used in the context of a fully gui program.
moreover, the non-gui script would not be blocked while an in-process mainloop call runs (only the gui process would run a mainloop), and the gui program could persist after the point at which user inputs are required by the script, leading to fewer pop-up windows.
this change will also obviate the familiar lgb scope rule (local-global-builtin 3-scope name lookup); or if you prefer, it generalizes "l" to be an arbitrary number of scopes.
i'd like to insert footnotes about five unrelated issues that came up recently, by email or otherwise: due to a recent change in the python c api, the ppembed-callables.c embedding example source file needs to be changed for use with recent python releases.
there might be a way to replace the window border icon with a bitmap of  your own in the tk c library: the c functiontk_setwindowborderpixmap(tkwin , pixmap) looks like a good bet, but it can only be used from c,  not python.
this is new as of python 2.3; the example does not change the icon in python 2.2 (yet another reason to upgrade).
to fix, simply change  "col" to "column" in the "grid()" calls; for  example, in grid5b.py, change line 19: from: l.grid(row=numrow, col=i, sticky=nsew) to: l.grid(row=numrow,  column=i, sticky=nsew)
more on package imports the __init__.py files in package directories seem to be most prone to  confuse.
that is, pp2e's container must be the home directory, or listed in pythonpath or other settings.
details about the tk configuration are available onthis page.
back to the pp2e home page
be sure to click/run the launch_pydemos.pyw auto-configuring script in the examples\pp2e directory for a quick look, not file pydemos.pyw itself.
.\launch_pygadgets.py
http://www.oreilly.com/ask_tim/codepolicy_1101.html [1/02] three minor launcher script updates the following notes pertain to the auto-launcher scripts presented near  the end of chapters 4 and 8.
c:/python23/python.exe d:/temp/new.txt popup2...
the enclosing def scope (the method) are automatically retained for later use  by code in the body of the lambda function.
joliet is an extension to the iso-9660 cd-r standard that is used to support long filenames, and overcome the 8.3 file naming limit of straight iso.
at the least, any example that uses the guimaker.py tool will not work as is under activepython2.1.
python 2.2 was released late in december, 2001.
even though nested scope lookup does simplify much  callback code, you must still use defaults to rembember the value in this case,  because defaults are evaluated at function creation time instead.
_pytuple_resize(&args, (1 + pytuple_size(args)), 1);to this: oops =
more on this here and here.
\mypython21\python ############################################### # pygadgets + environment search/config first ...
a replacement  should eventually appear, but this is not yet resolved.
to setup your module search path for the examples source tree, you will  add the directorycontaining pp2e on your machine.
pyqt0.py is the world's simplest pyqt gui program, but runs out of the box  after installing the free python and pyqt packages fromriverbank.
because of that, i won't post a patch to fix this in the examples themselves; it doesn't make sense to cripple code for a particular distribution's bug.
this is not exactly like disabled in 2.2 (the field background is a bit shaded), but is better than either the disabled or normal states in 2.3.]
the non-gui script would not  be blocked by a mainloop call.
the directory containing pp2e doesnot need an __init__.py file (though it is simply ignored if present).
this call is a nice option for tools like os.spawnv, though, which need a python interpreter path passed in.
you can fetch a slightly enhanced version of the book's pydemos top-level demo launcher script, byclicking here.
in that mode, the nested mainloop call returns when the dialog's quit method is called, but we return to the enclosing mainloop layer, and remain in the realm of event-driven programming.
this script caught and changed 190 files (more than visitor_replace), so there must be other #!
as mentioned in the book, pmw adds additional widgets to the  roughly 20 widgets native to tkinter.
you should  consult other sources for protocol details.
list comprehensions can also quickly become  (well...) incomprehensible; but for simple operation mappings, they are a nice  coding option.
you can also get interfaces for mysql, sqlite, numeric tools,  etc.
it has been resurrected, and is being refashioned into an interactive site.
the "#" character is generally only required at the href  attribute (of course), but is completely harmless if used in the name attribute  as well, under internet explorer.
as far as i'm concerned, you may freely use the book examples in your own  software systems, in any fashion you like.
this is an especially common case in lambda expressions used to generate callback handler functions in tkinter code (lambda introduces a new local scope, just like a nested def statement).
thesplit is required, because the smtplib's sendmail call  requires a list of individual addresses, not a single string; the split list  format is also convenient if you wish to extend it (e.g., adding "cc"  addresses).
of course, whether or not running a server locally like this is easier  than using a server machine, depends on your constraints and resources.
date information is encoded in bitfields, which i deciphered by inspecting the  binary bits with another script,dumpfile.py.
the latter of these assumes that your python module search path (pythonpath) is set to include the book's source-code package root.
for the most part, this edition is still valid and perfectly compatible with the current version of python (2.3), and its examples still work as described.
with a few customizations, that script can serve up html files and cgi scripts on the local machine, and without having to connect to the net; simply use a url of the form "http://localhost/..." in your browser to contact the local server.
therefore, without the blank line separator, if the  first line of the message text happens to contain a ":", it might be  classified as a header, and dropped from the message body.
the datebook database is similar in structure to memos, but  records start with some packed binary data that gives event time/date details.
unfortunately, the numeric display in the book's final calculator gui uses a disabled entry field, to disallow user changes.
this scope rule change was available in 2.1 as an optional extension, but had to be explicitly enabled with a "from __future__"
and as it states repeatedly, please also keep in mind that this book is about python coding; it is not intended as a formal guide to all the jots and tittles of internet protocol standards (many of which are not enforced by commonly-used internet systems).
this is all described in the cd readme files and book, and is required because cross-directory imports in the book examples are always relative to the pp2e module package root; for example: from pp2e.gui.
we're exploring a fix, but if you're having trouble seeing the original  file names on the cd, don't have access to a supported machine, and can't find  another way to read the cd on your machine, for now please send an email to lutz@rmi.net for a link to an alternative examples package on the web (a  tar/gzip file).
first of all, if you have an existing python 1.5.2  installation, you donot need to install python 2.0 to run most examples  in this book; they should work fine under 1.5.2, even though the preface states  that this edition covers 2.0.
c:/python23/dir1/__init__.py d:/temp/public_html/calendar.html ending... notice that this program calls mainloop twice, to implement two modal user interactions from an otherwise non-gui script.
on the other hand, it was much  easier than copying my 700 old events by hand.
like i said, typos happen.
a reader wrote to ask about displaying gui pop-up windows from a non-gui program.
if this  design shift is still not clear, please see the preface for more about this  edition's structure.
a single join call is completely harmless in a simple script like this  one (and personally, i wouldn't wager too much on the significance of the speed  difference between the two approaches).
line patterns that mention python (e.g., you'll have to run it again to change #!
this gives me as good an excuse as any to say a few more words about  the tkinter mainloop call, event-driven programs, and socket connections.
see the way that the non-gui pack and unpack scripts are run from a gui so that their results appear in a gui on page 460 for an example.
there are not as many features in this release as there were in 2.0, but it's worth a peek.
and thirdly, the scope of this new  edition's examples makes it possible to illustrate larger design concepts such  as oop and component reuse in a more meaningful and satisfying way.
and as it states repeatedly, please also  keep in mind that this book is about python coding; it is not intended as a  formal guide to all the jots and tittles of internet protocol standards (many  of which are not enforced by commonly-used internet systems).
extract-calendar.py is a takeoff of the first, which converts event  entries in a palm "datebookdb.pdb" database file to simple text  files, one file per event, with the event's date and part of its text used in  the filename.
python does evolve, but  not so fast that two years is the software eternity that some might imagine.
such urls should also allow python scripts to contact a locally-running server with the python urllib module.
browse the vaults of parnassus for  more on 3rd party tools and extensions.
the lambda is still needed to defer execution of the action method call (until the invocation of the generated anonymous function at event time), but there is no need to also pass in data from the enclosing scope.
this is the way that module package imports work in  general.
the "new style class" concept: this model recently  introduced to python is interesting from an academic perspective, but offers no  significant benefit for this edition's examples (this edition focuses on  application-level programming, not language details).
[3/01] enhanced pydemos example: source-code viewers
calling the window's iconbitmap method with the name of a properly-formatted icon file as the  argument apparently does change the icon today (i haven't had a chance to  verify this yet).update: now verified: see this note.
[03/04] tkinter: grid requires "column=" instead of  "col=" in 2.3 beginning with python release 2.3, you can no longer use the  "col" keyword argument as a short synonym for "column",  when using the "grid" widget method to arrange widgets with gridding.
simply start webserver.py on your local machine, and use server name "localhost" in your urls (e.g., type "http://localhost/cgi-bin/test0.cgi" at the top of your browser to contact your locally-running webserver).
get the examples.zip file there; it contains all the book's examples, and  is a simple zip file which you can download and unpack.
as mentioned elsewhere on this page, arbitrarily nested scopes were retracted from 2.1, but can be turned on as an option, and will likely appear in 2.2 late this year.
finally, note that this scheme only works if you don't have to run any non-gui code while the gui is open, because your script is inactive and blocked while mainloop runs.
[new] you can also fetch and install the activepython2.1 patch release,  which will include a fix for this bug (see theupdate paragraph below).
[2/03] new numeric display formatting and calculator gui python recently started showing many more decimal digits for the repr()  string of certain floating point numbers.
it's possible that  classes will have to be derived from class "object" in the far future  (not stand-alone), but this is unclear, and a non-issue today.
fredrik also has a soaplib module in the works to support the somewhat similar soap protocol.
unless you provide both formats on the same cd, one or the other gets 8.3 iso names.
it's  an example of the sort of tactical things you can do when you know a scripting  language like python.
package  imports are introduced in that book's 1st edition, and covered in more depth in  that book's upcoming 2nd edition.
this is a break from both the 1st edition and o'reilly perl  books, but was made deliberately for at least three reasons.
this is all documented in the cd's  examples\pp2e\readme-pp2e.txt file, which is the official information source  for the tree.
subclassable types, new "set" module: today, a set or  stack data structure might be better implemented as a subclass of a built-in  type such as list or dict, instead of a wrapper class that embeds a list or  dictionary.
in function `pp_debug_function': ppembed-callables.c:51: too many arguments to function `_pytuple_resize' basically, api function _pytuple_resize has been changed in python's api to accept just 2 arguments now, as documented in 2.2 python release notes: tupleobject.h: extern dl_import(int) _pytuple_resize(pyobject **, int); to make the ppembed example compile, change this line: oops =
unfortunately, joliet won't work on some unix systems, and rock ridge apparently won't work on windows.
if not parent or not isinstance(parent, frame):  ... # 2.3: no way to disable but show normal?
each directory listed  in a script's import statement must have an __init__.py file.
the format of such numbers  returned by the str(n) call (and by proxy, the print statement) is as before,  without the full numeric precision: str(2 / 5.0) yields '0.4'.
i've now verified this: as of python 2.3, you can change the icon to one of your own, with code lack that in this example script:testicon.py, which makes a window that looks like this.
you'll probably need to subclass cgihttprequesthandler to tailor directory and file extension names--it only recognizes .py
also, many spam filters must download full messages (not workable over a modem when there are 10m of them), this script is immune to differences in the filtering tools of email clients, and coding this was much quicker than becoming an expert in such things.
for more details, please consult the activepython bug reports pages at activestate.com.
since poplib is careful to close and delete the socket used to fetch email, this is probably related to the underlying socket library on windows.
unless you  provide both formats on the same cd, one or the other gets 8.3 iso names.
the layout of palm database  files is describedhere, here, and here , and other places, though some of this  is overkill for extracting memos (they are really just null-terminated strings  at offsets specified in a table).
for more  details, please consult a cgi-specific text, or try a google.com search on  "cgi download".
this is a bug in activepython2.1, and has been reported to activestate.
this  version's new main windowlooks like this.
[10/01] python 2.2 nested scopes and lambda defaults python 2.2 was released near the end of 2001, roughly a year after this  book's 2nd edition was finished.
unix systems that don't support joliet format generally want to find  the rock ridge long filenames extensions on the cd instead; you can still read  the book cd on such unix systems, but you'll get the straight iso 8.3 mangled  filenames, not the joliet long names.
if you are unable to access the site above, please contact o'reilly.
joliet is an extension to the iso-9660 cd-r standard  that is used to support long filenames, and overcome the 8.3 file naming limit  of straight iso.
[update, 12/03] it appears that it is possible to run the tk  library, and hence python's tkinter gui toolkit, on this device.
activepython2.1 bug breaks some gui examples on windows update 5/22/01: activestate will include a fix for this bug in an  activepython2.1 patch release, scheduled to be out within a month; it was  apparently a windows resource build option bug.
to take a look, or to  use these scripts for metrics of your own,click here.
for more background details, see the cd-r faq entries here and here.
that sidebar shows how  raw user names returned from rfc822 parsing calls must be explicitly quoted (or  often, re-quoted) if they contain a comma, to avoid confusing the mail server  (e.g., "doe, john " required manual insertion of  extra quotes around "doe, john").
import sys >>> sys.executable 'c:\\program  files\\python\\python.exe'
oddly, this issue appears to only exist on windows for the combination of python's cgihttpserver server module, and the internet explorer client.
tools import guimakerin particular, be careful to not add the pp2e directory itself to the module path, but instead add its parent.
in the code listing on page 837, the generateindexed function adds "#" characters to both href and name attributes for html section (fragment) links, generated for the with-index display mode of pyerrata browse requests.
if not parent or not isinstance(parent, frame): ...
[3/02] c api change for embedding example due to a recent change in the python c api, the ppembed-callables.c embedding example source file needs to be changed for use with recent python  releases.
the examples cd directory in  general is only meant to stand for any pp2e container, and does not require an  __init__.py file in practice.
none of these impact program examples, or the book's technical accuracy.
it also has absolutely  nothing to do with python, hence its absence in the book (e.g., page 750 hints  at other content types, but does not document them, on purpose).
none,  fg=fg, bg=bg, font=font): ...
seeapache's site for details; this is probably not for the novice, but  isn't too difficult in general.
the advantage  to this approach is that it provides a separation of gui and non-gui code; the  non-gui script would only have to be modified to spawn and wait for user  results to appear from the separate gui program, but could otherwise be used as  is.
see the way that the  non-gui pack and unpack scripts are run from a gui so that their results appear  in a gui on page 460 for an example.
and might change occurrences besides those on a first  line.
technically, though, my publisher (o'reilly) owns the copyright on the book and its examples, so you'll want to consult their policy if you need a legally-binding answer.
activestate will include a fix for this bug in an activepython2.1 patch release, scheduled to be out within a month; it was apparently a windows resource build option bug.
if you are hunting for a detailed description of the class statement, for example, you won't find it here--core language details have now been delegated to the book learning python.
the format of such numbers returned by the str(n) call (and by proxy, the print statement) is as before, without the full numeric precision: str(2 / 5.0) yields '0.4'.
it is now mostly aboutapplications of python, not core language fundamentals.
pythonware is also at work on an optimized replacement for the current tkinter system; it will be a drop-in, compatible replacement for the current tkinter, and will ship with future python releases.
".pth" path configuration files: these are sometimes a  reasonable alternative to pythonpath settings, for configuring import search  paths.
i've never been burned by this in the two years that i've been using these  examples, so it's a very obscure thing, and not quite a bug.
in the worst case, most linux users may also copy the cd to a hard disk under windows, and then copy it over to your linux partition.
that's the way that gui programs are typically structured,  and makes for a more coherent user experience than pop-up gui windows appearing  at seemingly random times, from an otherwise non-gui script.
it changes every first line that starts with #! and name "python", to a line you pass in on the command line or assign in the script: c:\...\pp2e>python pytools\visitor_poundbang.py #!\mypython21\python are you sure?y .
this works, because pydemos, and programs it spawns, inherit the module search path setting made by launch_pydemos.
the verdict: the book  examples tree shipped on the cd includes roughly 900 source files, and 42,000  source lines.
to copy the examples to your hard-drive, copy the pp2e directory to some other container, and then add that container to your module search path.
pp2e itself, and its package subdirectories,  already have __init__.py files.
simply run a cgi-capable web server  as a background process on the local machine, and use a url of the form  "http://localhost/..." in your web browser to contact the local  server.
the launch_pydemos script  accomodates this by configuring the search path automatically, and then  spawning pydemos.pyw.
another option  not mentioned in this section: it's also possible to install the apache open  source web server on your own machine, and run the book's server scripts from  there.
but to be general, either concatenate an extra "\n" after the header lines, or be sure to type a blank first line in the message if the first real line contains a ":".
[11/03] tkinter: changing the red tk icon now works [9/03] extra example: mail prescan filter [8/03] top python changes impacting this edition [2/03] new numeric display formatting and calculator gui [1/03] clarification of cd's example package structure, installation [6/02] five random footnotes: cgi, embedding, email, joins, rexec [3/02] c api change for embedding example [1/02] o'reilly's policy on example code reuse [1/02] three minor launcher script updates [11/01] extra examples: sloc counter scripts [10/01] python 2.2 nested scopes and lambda defaults [8/01] more minor narrative typos
this scope rule change was available in  2.1 as an optional extension, but had to be explicitly enabled with a  "from __future__" import statement.
alternatively, you could try coding and running a web server in python with the standard cgihttpserver module (see the example near the end of the advanced internet topics chapter), or consult a list of python-friendly web providers (one is maintainedhere, but you should also check the archives at python.org; most isps likely have or will install python these days).
this is new as of  python 2.3; the example does not change the icon in python 2.2 (yet another  reason to upgrade).
naturally, if you have a windows or linux box on your network, you may also be able to simply copy the cd contents to one of those machines, and ftp or otherwise transfer it over to your unix box.
the guiinput and guioutput classes in that example assume that there is a mainloop call running somewhere (they're gui, after all).
this was not demonstrated directly in the book due to problems with python's http server support on windows in 1.5.2 and 2.0 described below; in other contexts, this technique works fine.
there has been a report that file names on the book cd get mangled to 8.3 dos format when the high sierra file system is mounted on the cd under solaris (rock ridge extensions aren't supported).
unfortunately, because the calculator guis that show up in the  book's text and language chapter convert numeric results for display with  backquotes (`n`), you may now sometimes see more decimal digits than before.
it may also be due to misconceptions of package imports  in general.
it's easy to do this with the visitor_replace.py script in the  book's pytools directory, and described on page 216.
even though nested scope lookup does simplify much callback code, you must still use defaults to rembember the value in this case, because defaults are evaluated at function creation time instead.
note that these are standard tk cursor settings, and should work in all tkinters.
apparently, there is no way in a python script to replace the default red "tk" icon that shows up in the upper left hand corner of all toplevel tkinter windows.
this python api call, for  running strings of python statements in a single namespace, is limited but  simple.
both are described in the book (e.g., page  19), but the string module is used in most examples, because this was in  transition when the book was written.
but once you call mainloop to popup these windows,  you can't return to your non-gui code to interact with the user until the gui  is closed, and the mainloop call returns.
however, this is only  known to be an issue on a handful of platforms; the cd should work fine on  recent windows, linux, and mac machines, and on unix platforms with proper  support.
such urls should also allow python scripts to contact a  locally-running server with the python urllib module.
items found recently: page 479, text line -3: change "best view" to "best  viewed" page 481, text line 4, second word: change "the" to  "that" page 528, text line -9/-10: change "imported form" to  "imported from" page 507, para -2, line -3: change "at the button" to "at  the bottom" page 57, note at bottom, line -3: change "print >>file" to  "print >>file," [5/01]
because of such constraints, you will generally need a  main-window-plus-callbacks model in most gui programs; callback code runs in  response to interaction, but while the gui remains open.
for  many (and perhaps most), configuring and starting a local web server may  actually bemore work than simply telneting into their server.
get the examples.zip file there; it contains all the book's examples, and is a simple zip file which you can download and unpack.
scripts generate identical output for both post and get, so this is not a bug in the examples, but seems to be related to the windows socket model used by os.popen2.
there is a bug in activepython2.1's implementation of tkinter that makes a  few of the book examples fail on windows.
top-level window object protocols that deal with icons only deal with the icon shown when a window is iconified (minimized), and don't work on windows in any event.
files by default,  (not .cgi), and wants to find cgi scripts segregated in a subdirectory like  cgi-bin.
files by default, (not .cgi), and wants to find cgi scripts segregated in a subdirectory like cgi-bin.
it contains a list of python and book  updates which i've found important enough to post, but have not had time to  organize more coherently yet (or post onpyerrata).
`eval(code, self.names,  self.names)` # try expr: string  ###############################################################################  result = str(eval(code, self.names, self.names)) # try expr: string  self.hist.append(code + ' => ' + result) # add to hist log except: exec code  in self.names, self.names # try stmt:
to work around this, all you have to do is be sure to save user inputs in a python object: the object lives on, after the gui is destroyed.
this change also breaks uses of both "from *", and "eval" and "exec" without explicit namespace dictionaries, whenever they appear within a function (the compiler cannot resolve names it doesn't know about).
_pytuple_resize(&args, (1 + pytuple_size(args))); note that this fix will make ppembed compile, but may not by itself make debugged function calls work as before, though non-debugged calls should work fine.
while i'm on the subject: please note that the launchers do work with the standard python installs available on the book's cd and at www.python.org; if you do something custom, you may need to patch the launcher scripts' code.
also note that the "to" address for a  reply is only used to set an initial value of a gui entry field here; we could  expect the user to add quotes manually if needed, but that wouldn't exactly be  polite.
i have also recently seen systems that run python code as standalone  files, launched as processes, and which communicate with the launching c  program through sockets--the ipc mechanism described in chapter 10, network  scripting.
when you install pmw, you also get a  tabbed notebook, paned windows, spin (combo) boxes, and so on.
although this is outside this book's scope, here are a few more words of clarification.
this page provides updates on points that arose after publication, and serves as a virtual appendix to the book.
strings still work today (in python 2.3),  so this is still a non-issue.
for more details on mail message formats, please see http://www.faqs.org/rfcs/rfc822.html.
[4/01] tkinter notes: window border icons, pmw [update, 09/03]: someone reported that the tk icon issue may  have been fixed in tk 8.4, which is part of python 2.3.
directory root does not need to have an __init__.py file.
or just use one i coded: click here to fetch script visitor_poundbang.py.
# self.entry.config(state='disabled') else: ... note that the grey-out effect in 2.3 has only been observed on windows; this may or may not be an issue on other platforms.
however, if you want to add a simple gui user interaction to an existing  non-gui script (e.g., to select files to open or save), it is possible to do so  by configuring widgets and calling mainloop from the non-gui main program when  you need to interact with the user.
one usage note: some standard library modules are missing in the riverbank package; as a work-around, i simply copied the 2.3 standard library directory (from the source package) onto a cf card, and put that directory on my pythonpath, to get some extra library modules (e.g., glob).
for many (and perhaps most), configuring and starting a local web server may actually bemore work than simply telneting into their server.
update: these typos will be fixed in the third printing of the book, scheduled to happen in early june, 2001.
the 2.2 release notes say of the original 3rd argument removal: "if  this affects you, you were cheating."
the reason is that activepython2.1's tkinter for windows does not recognize thecursor='hand2' and cursor='gumby' configuration options used by the guimaker.py module for toolbars and help buttons.
[5/01] sys.executable and python.exe interpreter searches python now has a sys.executable builtin that gives the full directory path  name of the python interpreter program that is running the calling script: >>>
a  workaround (e.g., a 8.3-to-long file copy and rename script) is still being  researched, but please contact me as requested above for the time being if this  is effecting you.
for instance, with pippy, you can use the python socket and internet support modules to implement things like web servers and mail readers on your palm (no, really!).
because this can be annoying when doing simple calculations, you might want to  patch the calculator.py file to use str(n) instead of `n`, as follows: def runstring(self, code): try:
if you do have trouble seeing long filenames on linux and mac machines seethis page; the standard linux kernal started supporting joliet as of release 2.0.34, and some macs may require an extension download.
in fact, examples\__init__.py is ignored and never run by imports--it if was, book examples would generate error messages and abort (examples\__init__.py contains imports of old directory names which no longer exist in the examples tree!).
in this earlier note, i suggested that it may now be possible to change  the red tk icon in python tkinter gui programs.
i recently saw another case where  the extra quotes are needed--at least when using the python 1.5.2 libraries, a  period in the user name (e.g., "john q. doe") might also confuse some  mail servers if unquoted.
in  practice, companies commonly combine this embedding call with a simple c  extension module used for communication--the embedded python code strings talk  to the enclosing c/c++ layer by importing and calling c
in fact, i still have python 1.5.2  installed on one of the development machines used to write this book--for  which, of course, i am deeply ashamed :-).
this call is a nice option for tools like os.spawnv,  though, which need a python interpreter path passed in.
/usr/local/bin/python),
for example, it  discards event start and stop times, ignores event repeating details, may or  may not use the best approach for extracting dates, and does not attempt to add  events to the zaurus calendar application.
that is, the text writtenfirst with the file object  write method appears after the text writtensecond with the os module  write call.
on at least some unix systems, this may mean that although the examples on the cd and in the book are indeed coded to be platform neutral, the initial version of the cd itself is not.
the reason is that activepython2.1's tkinter for windows does not recognize  thecursor='hand2' and cursor='gumby' configuration options used  by the guimaker.py module for toolbars and help buttons.
i've heard of a few cds being broken on receipt as well.
for a simplistic example of this technique, see the following off-page scripts: beginning with python release 2.3, you can no longer use the "col" keyword argument as a short synonym for "column", when using the "grid" widget method to arrange widgets with gridding.
py2exe is similar to the installer tool, and builds upon the distutils extension.
but i will use this entry to note any odd or missing word reports.
you cannot, for example, apply this technique to use utilities like the guistreams.py example on page 457-459 to route user interaction from non-gui code to gui windows.
this is the way that module package imports work in general.
[1/02] python 2.2 released
see the close and buffering descriptions on pages 60 and 63 for more details.
as also stated later in the book, submitting explicit  urls with appended query strings is one way to reuse and test server-side  programs, though module urllib is probably more useful than launchbrowser for  this role (e.g., see pages 675 and 776).
this allows the script to invoke a remote server-side  script with parameters, and display the remote script's reply in a browser.
one noteable exception: defaults are still sometimes  required in loops (seethis note).
see pythonware for details.
the second printing is scheduled to happen  in april 2001 (about a month after the first printing), so this issue is  unlikely to exist in most copies of the book.
the  "psyco" just-in-time compiler, and frozen binary executable packaging  tools such as "py2exe" and "installer", provide other  optimization and deployment options (see the vaults of parnassus site for  links).
a more windows-friendly webserver.py may be posted here later, if i  get time to code one myself; till then, consider it a suggested exercise, and a  possible future python extension.
this includes  pyedit, pyview, pymail (its mail composition windows), and probably big_gui and  shellgui.
as an author, i consider this a form  of compliment, and i'm always glad to hear that the examples are finding  practical application.
converting paths in #!
for more details on mail message formats, please see  http://www.faqs.org/rfcs/rfc822.html.
user-defined exceptions: will probably all have to be class  instances in the future, not strings.
2.3 also renders some buttons a bit smaller on windows, but this is less intrusive.
a recent rash of such spam, about 150k  each, prompted me to tweak one of the book's pop email examples, to only fetch  message headers, and allow an email to be deleted from the server without  actually downloading the entire message.
if you are  hunting for a detailed description of the class statement, for example, you  won't find it here--core language details have now been delegated to the book  learning python.
i'll  update this list periodically, as time allows.
and  just for fun, macs define yet another incompatible format.
i found two typos that will be repaired in the book's next printing.
because this feature breaks some existing code, it is disabled by default in the upcoming 2.1 release, but may be enabled as a standard feature in 2.2.
to work around this, all you have to do is be sure to save user inputs in a  python object: the object lives on, after the gui is destroyed.
(but of course, you already know  that if you're reading this :-).
subsequent reports have suggested  that this also may occur on some other flavors of unix.
(if you want to try, the tk  binary library file installs with python, and tk source code is already  available on the book cd).
in the first server-side scripting chapter, i gave a handful of hints for locating a web server with python (you generally need one in order to install and experiment with the server-side cgi scripts in the book).
simply make a main gui  window with widgets that start the original non-gui script's code in a callback  handler, and post new dialog windows from callback handler code as needed.
if you don't have access to a remote server, though, this can be convenient (for example, i started using the webserver.py script in 2003 to test cgi-based programs on alinux pda, without a network or modem card).
it converts python scripts into standalone executable windows programs, that can be run without requiring a python installation (which is quite amazing, even apart from its ability to change the tk icon).get py2exe here.
(update, 6/02: see also the new "py" print magazine; search python.org for more details.)
you'll probably need to subclass cgihttprequesthandler to tailor directory  and file extension names--it only recognizes .py
again, this can make for an odd user experience compared to a traditional gui program structure -- windows seem to pop up from nowhere -- but it's a quick way to put a gui face on a script without reworking its code.
simply run a cgi-capable web server as a background process on the local machine, and use a url of the form "http://localhost/..." in your web browser to contact the local server.
.\pydemos2.pyw 3 => .\towriteable.py ... 1474 => .\integrate\mixed\exports\classandmod\output.prog1 1475 =>
this gives me as good an excuse as any to say a few more words about the tkinter mainloop call, event-driven programs, and socket connections.
for a complete list of typo fixes i requested for the third printing,click here.
the nongui script can keep running code to produce data, because only  gui runs a mainloop call.
one usage note: some standard library modules are missing in the riverbank  package; as a work-around, i simply copied the 2.3 standard library directory  (from the source package) onto a cf card, and put that directory on my  pythonpath, to get some extra library modules (e.g., glob).
but if you have installed activepython 2.1 and need a workaround for the problem, you have three options: again, this is a bug in activepython2.1, not in the examples or the standard python release.
calling the window's iconbitmap method with the name of a properly-formatted icon file as the argument apparently does change the icon today (i haven't had a chance to verify this yet).update: now verified: see this note.
because of such constraints, you will generally need a main-window-plus-callbacks model in most gui programs; callback code runs in response to interaction, but while the gui remains open.
(to be resolved; the resize copying order may differ now, and so may require additional code to move tuple components after each resize).
this isn't discussed in the book at all, but i've gotten a few questions about this in classes, and it has come up on the python newsgroup as well.
finally, remember that import basics like these are not really part of  this book's scope; it assumes you already understand things like __init__.py  files.
all of these features will be covered in detail in the upcoming booklearning python 2nd edition, and some are described elsewhere on this updates page.
unfortunately, python's install directory name may apparently be different for  each new release, so there is no obvious direct way to guess where  "python.exe" may live across versions, in the absence of path  settings.
it adds buttons on the right that  automatically pop-up each demo's source code files in pyedit windows.
but if you  have installed activepython 2.1 and need a workaround for the problem, you have  three options: you can instead download and install the standard python 2.1 release from  python.org (and install the win32all package separately if you want the extra  windows tool set that comes with activepython).
it may also be due to misconceptions of package imports in general.
as stated in its preface,programming  python 2nd edition is oriented more towards application-level programming  concepts, and so does not itself pretend to teach package import details in any  sort of depth.
but once you call mainloop to popup these windows, you can't return to your non-gui code to interact with the user until the gui is closed, and the mainloop call returns.
the "os.popen" shell-command call: is much improved--it  now works fine an windows (both gui and non-gui), and the os module also now  contains the popen2, popen3, and popen4 variants, which also return stdout and  stderr file object connections.
the book's demo launchers do work with the activepython install too, but that install includes an unrelated tkinter bug in release 2.1 that makes some demos fail (see the prior note).
on seemingly superfluous joins a reader asked why, on page  612, the "to" email address is split into a string around ';'  delimiters, and then later joined again in the same script with ";"  separators.
it is a complete, up-to-date python, which comes with threads, sockets for internet scripting, a full os module including popen and fork, pyqt for guis, and so on.
also note that on  recent versions of linux, the cd works fine, but be careful to read it in such  a way as to preserve the original unmangled file names; see your mount and  fstab man pages if you need help (e.g., you may need to specify iso9660 and/or  joliet keywords in your /etc/fstab file on some installations).
under 2.3, this  field is now difficult to read because of the new grey-out effect.
we still occasionally find typos in the narrative that were missed during the copyedit (it happens, no matter how many people proof a book).
you can grab it from the following urls, or at the vaults site-- home: http://hackicon.sourceforge.net, download: http://prdownloads.sourceforge.net/hackicon/hackicon00003.zip.
if you want to truly and directly download a file by  cgi (instead of displaying it in a browser or opening it with an application),  you can usually force the browser to pop up a "save as" dialog for  the file on the client, by supplying the appropriate content-type line in the  cgi reply.
get/set extension  functions, which provide access to c data.
the trick is that mainloop  doesn't return until the gui main window is closed by the user (or quit method  calls), so you cannot retrieve user inputs from widgets after mainloop returns.
[update, 08/01]: the py2exe packaging/distribution tool now also has a way to change the icon: simply pass a .ico file name to the script's --icon command-line argument.
c:/python23/dir1/__init__.py d:/temp/public_html/calendar.html ending... notice that this program calls mainloop twice, to implement two modal user  interactions from an otherwise non-gui script.
subtle thing: when sending email with the smtplib module, you should generally insert a blank line between the mail header lines and the text of the message, to be robust.
in short, 2.1 introduces rich comparison overloading methods, a warning framework, "weak" references, function attributes, the pydoc and pyunit tools, a new xreadlines method for files, a new c build system, and a bit more.
more on more on email reply addresses page 652 contains a  sidebar, "more on reply addresses", which describes issues related to  using the parsed "from" address returned by the rfc822 module as a  "to" address inpymailgui email replies.
this issue was  reported on the python bug list at sourceforge on 5/29; you can probably read  the report's statushere.
the book doesn't described this format, and you don't  actually need the blank line in most cases.
note that this changes the icon both for the open window itself, as well as for the program's minimized entry in the launcher bar.
you can find all these on python.org, or the vaults of parnassus.
the new "email" module package: in the standard library,  provides a higher-level interface for parsing and constructing email messages.
[4/01] email examples: blank line for smtplib subtle thing: when sending email with the smtplib module, you should  generally insert a blank line between the mail header lines and the text of the  message, to be robust.
its output, printed as the main windows  are closed, looks like this:
also notice that this is different from using recursive/nested mainloop  calls to implement modal dialogs, as shown in the book on page 317.
for instance, a content-type  of "application/octet-stream" in the cgi reply generally triggers the  standard save-as dialog box in a browser.
launchbrowser.py, chapter 4, query strings work too: because this  program works by passing a url to a web browser in a command line, it will also  accept aquery string at the end of the url--simply include text of the  form "?
because of that, i won't post a patch to fix this in  the examples themselves; it doesn't make sense to cripple code for a particular  distribution's bug.
this is all described in the cd readme files and book, and is required because  cross-directory imports in the book examples are always relative to the pp2e  module package root; for example: from pp2e.gui.
luckily, o'reilly maintains the book cd's examples  directory online, at this site: http://examples.oreilly.com/python2.
lines at the top of scripts
on the cd, the top-level examples directory is pp2e's container, and so is the one to add to the module search path (unless you use the self-configuring launchers).
when it does, it produces an error popup, and needs to reload all email from scratch.
a beta release of pippy--a port of python to the palm platform--is now available.
contents: see also: lists below of updates applied thus far in the book reprint runs that i have seen or been told about, after the initial march 2001 release.
oddly, this issue appears to only exist on windows for the combination of  python's cgihttpserver server module, and the internet explorer client.
this may partly be because some of these files are legacy code  meant only as extra examples, and have comments that reflect a prior tree  structure different than the one shipped (e.g., some directory names don't  match reality anymore).
to fix, simply change "col" to "column" in the "grid()" calls; for example, in grid5b.py, change line 19: from: l.grid(row=numrow, col=i, sticky=nsew) to: l.grid(row=numrow, column=i, sticky=nsew)
[5/01] converting paths in #!
as you might expect, python works very well on this machine, because it's linux.
more recent notes appear first in these lists.
tools import guimaker
type "2 / 5.0" at the python interactive prompt, and you'll see what i mean: today you get 0.40000000000000002, not the 0.4 of prior releases.
line patterns lurking in the examples tree besides #!
to fix, comment out the disable call in file pp2e\lang\calculator\calculator.py: class calcgui(guimixin, frame): ... def __init__(self, parent=
if you want to read about o'reilly's example code reuse policy in full, please see their web pages: the following notes pertain to the auto-launcher scripts presented near the end of chapters 4 and 8.
posted forms fail, but get requests to the exact same script (a form with method=get, or a url with an appended query string) work fine.
if you do have trouble seeing long filenames  on linux and mac machines seethis page; the standard linux kernal started  supporting joliet as of release 2.0.34, and some macs may require an extension  download.
this version also demonstrates pyedit being used in pop-up (toplevel) mode, rather than as an attached component or spawned stand-alone program.
strictly speaking, the laterjoin is not required, since the  result is the same as the original unsplit "to" string--i could have  instead saved the original string or used a different variable for the split  result (e.g., see the pymailgui and pymailcgi approaches on pages 663 and 774).
to setup your module search path for the examples source tree, you will add the directorycontaining pp2e on your machine.
here is my opinion, and o'reilly's.
pp2e itself, and its package subdirectories, already have __init__.py files.
if anyone has a  better clue, i'd love to hear it; for now, you should simply ignore this socket  error message pop-up if you ever see it and press "load" again,  unless and until a workaround surfaces.
moreover, future  python changes and coding techniques may impact parts of the book over time.
list comprehensions: today, when you need to apply an operation to  every item in a sequence, list comprehension expressions (e.g., [x*2 for x in  range(5)]) are often easier to code, and quicker to run, than the equivalent  map/filter calls or for loops.
much worse, activepython's tkinter not only does not implement these options, it raises an exception for them, which makes programs that use these (and likely other) cursors fail.
if you feel ambitious and get to this before i do, you might  also be able to code a copy-and-rename script yourself (seethis gzipped text  file for the output of a "dir /s /b"
in brief, this new nested scopes rule allows code within both nested def statements and lambda expressions to automatically have access to names defined in the scope of all enclosing function defs.
.\integrate\mixed\exports\classandmod\setup-class.csh visited 1475 files and  133 dirs, changed 190 files .\towriteable.py
at the least, any example that uses  the guimaker.py tool will not work as is under activepython2.1.
that is, for repr(n), (and backquotes `n`, which is the same as repr), python today shows more digits after the decimal point than it used to.
in short, x windows and tk need to be enabled in one of a variety of ways, and the python tk interface module must be compiled as well.
source-tree structure
browsers decide what to do with a file using either the  file's suffix (e.g., "xxxx.jpg" is interpreted as an image), or the  content-type line (e.g., "text/html" is html code).
unfortunately, joliet won't work on some  unix systems, and rock ridge apparently won't work on windows.
[3/01] book design clarification
finally, remember that import basics like these are not really part of this book's scope; it assumes you already understand things like __init__.py files.
they do not perform a deeper structural analysis to detect valid header lines (python doesn't either--see method readheaders in the source code of python's rfc822 module for an example).
the impacted examples are grid5b.py, and grid5c.py, both in directory examples\pp2e\gui\tour\grid on the cd.
use your browser's save-as option to store locally, if needed, and place this file in your pp2e root directory.
they seem to be standing up to time well, but a  few tweaks are worth mentioning: launcher.py, chapter 4, python2.x install paths change: when  running on windows, function guesslocation() builds up a list of directories to  search for file "python.exe", the python interpreter.
because  enclosing scope names are now visible, it is usually no longer required to save  names from an enclosing scope by passing them into nested defs and lambdas with  default arguments.
so, these examples should work  fine under all activepython distributions, except for the original 2.1 release  (and you may simply fetch the patch release if you have the original 2.1  release).
printing: september, 2003 [9/03] o'reilly's errata list [06/05] more on nested scopes and guis: loops gotcha [06/04
.\launch_pygadgets.py .\launch_pydemos.pyw ...
in 2.2 and earlier, disabled entry widgets showed their text normally,  but did not allow edits, and did not participate in keyboard tab focus  traversals.
we're exploring a fix, but if you're having trouble seeing the original file names on the cd, don't have access to a supported machine, and can't find another way to read the cd on your machine, for now please send an email to lutz@rmi.net for a link to an alternative examples package on the web (a tar/gzip file).
this appears to have been broken between python 2.2 and 2.3, though at first  glance it seems to reflect a change in the underlying tk toolkit used by 2.3,  rather than python itself (a tclerror is issued when "col" is used in  2.3).
[4/01] email example: pymailgui connection errors [4/01] email examples: blank line for smtplib [3/01] enhanced pydemos example: source-code viewers [3/01] python version clarification [3/01] book design clarification [06/05] more on nested scopes and guis: loops gotcha
it is not a bug in pymailgui itself, but appears to be in the python libraries or lower.
[9/03] extra example: mail prescan filter are you as tired of waiting for your email client to download huge spam  messages over 50k dial-up lines as i am?
with a few customizations, that script can serve up html files and cgi scripts  on the local machine, and without having to connect to the net; simply use a  url of the form "http://localhost/..." in your browser to contact the  local server.
i don't own the examples, and do not keep them online anywhere myself.
i also stopped keeping track of printings after 2001, so printing numbers after that time are unknown. .
i worked on two of these on a plane, while simultaneously listening to mp3s on the same pda; it doesn't get much better than that :-).
lines at the top of scripts [5/01] using webserver.py to run cgi scripts locally [5/01] sys.executable and python.exe interpreter searches [5/01] activepython2.1 bug breaks some gui examples on windows [5/01] demo launchers clarification: launch_* scripts, path setup [5/01] clarification: odd file example on page 66 [5/01] clarification: # not needed in html fragment name, p837 [5/01] cd file names mangled to 8.3 on some unix platforms [4/01] more on python-friendly web servers [4/01] two chapter 18 typos [4/01] tkinter notes: window border icons, pmw (updated 9/03)
typically, __init__.py files are not meant to be useful if executed directly; they are run automatically during imports, the first time python goes through a directory.
this backwards compatibility was one reason that examples use things like string module calls, not 2.0 string methods (string methods are discussed in the text itself).
this is a minor mutation, but makes it easy to consult example code quickly--something i've done often enough to warrant the change.
when you install pmw, you also get a tabbed notebook, paned windows, spin (combo) boxes, and so on.
that way, you can run code while gui windows are active.
this can work portably, because the  python 2.0 cgihttpserver module now tries os.popen2 to spawn the cgi script if  no os.fork exists (and falls back on execfile() if neither exists).
on at least some unix systems, this may mean that  although the examples on the cd and in the book are indeed coded to be platform  neutral, the initial version of the cd itself is not.
the cd also contains various open source packages (e.g., python), but you can  find more up-to-date versions of all the cd's packages elsewhere on the web.
that probably won't matter, but if it does, it's easy to write your own visitor subclass to be more accurate.
although this is outside this book's scope, here are a few more  words of clarification.
details about  the tk configuration are available onthis page.
but for details on the changes  made,click here.
prior to  2.0, that module only tried os.fork, and so was a unix-only tool; in 2.0 and  beyond, os.popen2 is used to start cgi scripts on windows.
of course, if you have to work that hard anyhow, you  might as well just make your script a traditional gui program with a main  window.
for instance, the original non-gui code can be started by widgets on the main gui window.
however, all of these examples still work under the standard python2.1 release for windows that is available from www.python.org (as well as all older versions available on the book's cd).
you  can tell which printing you have by looking near the bottom of the publishing  details page (near the front).
an  alternative python zaurus distribution is availablehere.
for example, say something  like this to replace all #!/usr/bin/python lines with #!
you can also get interfaces for mysql, sqlite, numeric tools, etc.
[update, 07/01]: matt butler recently announced a small extension which lets you easily change the window icon of toplevel windows in tk on windows (you pass it a .ico icon file name to replace the default red icon).
such code will still work under the new scheme, but names from an enclosing scope will be naturally visible without the use of default arguments.
if  you are unable to access the site above, please contact o'reilly.
for example,  given a directory structure:root\a\b\c.py, and an import statement of the form:  import a.b.c: directories a and b must each have an __init__.py file.
[added 12/02]  pages 914-917 describe the rexec module, which provides a restricted execution  mode for running python code.
the best answer to this query is probably to take the plunge and  restructure the program as a real gui: initialize widgets on start-up, call  mainloop once to start event processing and display the main window, and move  all program logic into callback functions triggered in response to user  actions.
as is, it first  includes hardcoded paths relevant to the python 2.0 and 1.5.2 installs.
that's the way that gui programs are typically structured, and makes for a more coherent user experience than pop-up gui windows appearing at seemingly random times, from an otherwise non-gui script.
in the code listing on page 837, the generateindexed function adds  "#" characters to both href and name attributes for html section  (fragment) links, generated for the with-index display mode of pyerrata browse  requests.
[update, 09/03]: someone reported that the tk icon issue may have been fixed in tk 8.4, which is part of python 2.3.
that seems a bit harsh, given that this example was originally present in the 1st edition, worked fine when the 2nd edition was published, and had been compiling and working correctly since 1994--for some 8 years.
this version also demonstrates  pyedit being used in pop-up (toplevel) mode, rather than as an attached  component or spawned stand-alone program.
in python-speak, a directory of modules and subdirectories is called a  package.
items found recently: a few people have asked about ways to change the #! line at the top of script files (this line gives the path to the python interpreter on unix-like machines).
in the first server-side scripting chapter, i gave a handful of hints for  locating a web server with python (you generally need one in order to install  and experiment with the server-side cgi scripts in the book).
however, in the last two and a half years, python did indeed sprout a handful of new features that do not invalid this edition's examples, but do mean that some of them can be coded slightly more simply than shown.
i've recently received a handful of email queries about copyright issues associated with reusing the book's example source code in other systems.
alternatively, the gui could be spawned by the non-gui script as a separate program; user interaction results can be communicated from the spawned gui to the script using sockets, files, or other ipc mechanisms.
lines in all script files in the entire book examples tree.
for instance, code of the following  form: class mygui: def action(self, tree): print tree def makewidgets(self):  tree = 'larch' button(text='spam', command=(lambda: s=self, t=tree:  s.action(t))).pack() can now be coded in the simpler way: class mygui: def action(self, tree): print tree def makewidgets(self):  tree = 'larch' button(text='spam', command=(lambda: self.action(tree))).pack() simply because the variables "self" and "tree" from
the lambda is still needed to defer  execution of the action method call (until the invocation of the generated  anonymous function at event time), but there is no need to also pass in data  from the enclosing scope.
speaking of tkinter: i also recommend the manning book "python and  tkinter programming" as a follow-up to the material in the gui part of  this 2nd edition; in particular, its coverage of the supplemental widgets in  the pmw extension may prove valuable if you need to do any industrial strength  gui development.
such a scheme is certainly useful in some contexts, but is also less  direct, and generally slower than, the in-process techniques described as  embedding in the text.
and thirdly, the scope of this new edition's examples makes it possible to illustrate larger design concepts such as oop and component reuse in a more meaningful and satisfying way.
moreover, the non-gui script would not be blocked while an in-process  mainloop call runs (only the gui process would run a mainloop), and the gui  program could persist after the point at which user inputs are required by the  script, leading to fewer pop-up windows.
in fact, a few email examples in part iii of the book omit the blank line (smtpmail, pymailgui, and pymailcgi), yet all the email examples in the book work correctly as shown.
it's easy to do this with the visitor_replace.py script in the book's pytools directory, and described on page 216.