datetime.now().year # convert year to a string  because we'll be # building a date string below year = str(year) # the format  of the date string we'll be building python_str_date_fmt = '
slope =  lm['coefficients']['x']
here’s some example code and a video of the resulting interaction.
[i*pi/180 - width/2 for i in x] ax.bar(x,[1,2,3,4,5,6], width=width) show() the following is slightly modifed from the matplotlib examples: import numpy as npy import matplotlib.cm as cm from matplotlib.pyplot import figure, show, rc # force square figure and square axes (looks better for polar, imho)
the sort() method of list objects in python is quite flexible.
script to convert awkwardly-formatted weather data into an excel  spreadsheet using python and xlwt. '''
from datetime import datetime import xlwt # create workbook and worksheet wbk = xlwt.
3 comments tags: key, python, sort.
[30,60,90,120,150,180] # convert to radians and subtract half  the width # of a bar to center it.
here’s how to  get started using sphinx.
you can use this script from the command line using options, or import it into another script.
see, it takes some digging around to get what  you need, but now since i’ve done the work for you, you can now do linear  regressions from python.
min 1q median 3q max -1.5675 -0.5899 0.1549 0.4613 1.1366
your docstrings end up looking so nice that sometimes it makes you want to write more of them!
from datetime import datetime import  xlwt # create workbook and worksheet wbk = xlwt.
you can use  this script from the command line using options, or import it into another  script.
polar bar plot in python published on july 20, 2008 in matplotlib,  plotting and python.
r('linear_model = lm(y~x)')
turns out python can’t convert everything  perfectly, and a little more exploration is in order.
script to convert awkwardly-formatted weather data into an excel spreadsheet using python and xlwt. '''
ok, here’s where it take a little exploring.
error t value pr(>|t|)  (intercept)
it’s nowhere to be seen in that dictionary.
fig.add_subplot(111,  polar=true)
for line in f: # separate fields by commas l = line.rstrip().split(',') # skip this line if all fields not present if len(l)  now send it to r: r.assign('x',x) r.assign('y',y)
for example, a list of strings is sorted by the first letter of each string.
n = 20 theta = npy.arange(0.0, 2*npy.pi, 2*npy.pi/n) # random  angles radii =
in r, run the linear model and save it as a variable in r. here, i’m simultaneously saving it as a python dictionary (sneaky!)
first, you need the packagevegan installed, which is fantastic for multivariate  stats.
sheet2.write(0,0,'some text')
rather than recap it all here, i encourage you to grab a copy of the source code, in which you can find the examples directory.
true #  set the style's font to this new one you set up style.font = font # use the  style when writing sheet.write(0, 0, 'some bold times text', style)
0.2849 0.5398 0.528 0.612 x 0.8621 0.1011 8.526 2.75e-05 *** ---  signif.
all together it looks like this (can be wrapped in a function or class for your own reuse): r.assign('x', x) r.assign('y', y) lm =
here’s a heavily commented script, rpy-demo.py, that will: if you have rpy installed and the vegan package installed, you should be able to just run this python script.
i tried to add lots of comments so you can modify it for your own needs.
[i*pi/180 - width/2 for i in x]  ax.bar(x,[1,2,3,4,5,6], width=width) show() get funky . . .
published on april 25, 2008 in python  andutilities.
it’s very easy to make subplots that share an x-axis, so that when  you pan and zoom on one axis, the others automatically pan and zoom as well.
# random angles radii = 10*npy.random.rand(n) # random bar heights width = npy.pi/4*npy.random.rand(n) # random widths # create the bar plot bars =
r('lm_summary = summary(linear_model)')
10*npy.random.rand(n) # random bar heights width =  npy.pi/4*npy.random.rand(n) # random widths # create the bar plot bars =
i showed you how  to read excel files with python.
11 comments here’s how to get a nice automatic documentation of your python code  usingsphinx.
xlwt allows you to format your spreadsheets on a cell-by-cell basis or by  entire rows; it also allows you to add hyperlinks or even formulas.
for line in f: # separate  fields by commas l = line.rstrip().split(',') # skip this line if all fields  not present if len(l)  now send it to r:  r.assign('x',x) r.assign('y',y)
my solution for now is to use a localtiddlywiki as the glue for my figures, since i can embed figures in tiddlers (the microcontent entries that are the bread and butter of tiddlywikis), and tag and search those entries.
# initialize a style style =
true # set the style's font to this new one you set up style.font =
xfstyle() # create a font to use with the style font =
(exercise for the reader: instead of assigning x and y individually, how  would you get them into r as a dataframe?)
{'assign': [0, 1], 'call': ,  'coefficients': {'(intercept)': 0.28490682478866736, 'x': 0.86209804871669171},  'df.residual': 8, 'effects': array([-13.16882479, 7.83039439, 1.22245056,  0.18398967, 0.51108108, 0.8141431 , -0.45120018, -1.1985602 , 1.54636612,  0.51341949]), 'fitted.values': array([ 0.28490682, 1.14700487, 2.00910292,  2.87120097, 3.73329902, 4.59539707, 5.45749512, 6.31959317, 7.18169121,  8.04378926]), 'model': {'x': array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]),  'y': array([-0.64212347, 1.39389811, 3.06676323, 2.84957073, 3.99793052,  5.12226093, 4.67818603, 4.7520944 , 8.3182891 , 8.10661086])}, 'qr': {'pivot':
use sphinx for documentation
here’s some example code and a video of the resulting  interaction.
update: after some folks requested it in the comments,  i wrote another post,a minimal sphinx setup for autodocumenting python modules.
lm(x,y) ordination = rda(data) for much, much more see the online documentation for rpy, but hopefully i  gave you enough to at least get started.
p = summary['coefficients'][1,2] ok, say you have this data set to perform redundancy analysis (rda) on.
the second column is year-day, which we’ll ignore.
datetime.now().year # convert year to a string because we'll be # building a date string below year = str(year) # the format of the date string we'll be building python_str_date_fmt = '
try printing the summary  from r: r('print(lm_summary)')
xfstyle() # create a font to use with  the style font =
whew, and there you have it.
(exercise for the reader: instead of assigning x and y individually, how would you get them into r as a dataframe?)
the trick is just to specify that you want polar coordinates when you  create the axis.
here’s how to create a polar bar plot in matplotlib.
try this python script, addtiddler.py, to insert tiddlers into an existing  tiddlywiki.
sphinx can automagically slurp in all your docstrings, format them nicely, and render them as html or pdf output.
# indexing is zero based, row then column sheet.write(0,1,'test text')
what if you wanted to sort by the second letter of each string?
in order to write data to an excel spreadsheet, first you have to initialize a workbook object and then add a worksheet object to that workbook.
your docstrings end up looking  so nice that sometimes it makes you want to write more of them!
style.num_format_str =
2 comments tags: axes,  intertactive plotting, subplot.
it’s calledsphinx, and you can see what the documentation looks like by checking out the documentation for python itself (v.2.6 and 3.0).
[i*pi/180 for i in x] # convert to radians ax.bar(x,[1,2,3,4,5,6], width=0.4)  show() note that in the above example the “right” or  “clockwise-most” edge is lined up with each specified x value.
0.4 # width of the bars (in radians) fig = figure() ax =
continue reading ‘interactive subplots: make all x-axes move  together’ calculate sunrise and sunset with pyephem published on april 25,  2008 in python and python modules.
it's the current year.
first, you need the packagevegan installed, which is fantastic for multivariate stats.
workbook() sheet = wbk.add_sheet('temperatures') # set up a date format style to use in the # spreadsheet excel_date_fmt = 'm/d/yy
you can change this by subtractingwidth / 2 to each of the x values to center the bars on the x-values, like this: from matplotlib.pyplot import figure, show from math import pi width = 0.4 # width of the bars (in radians) fig = figure() ax = fig.add_subplot(111, polar=true)
wbk.add_sheet('sheet 1')
continue reading ‘use sphinx for documentation’
the dictionary you get  back may take some navigating.
useful tidbits for using open source software in science here’s how to get a nice automatic documentation of your python code usingsphinx.
min 1q median 3q max -1.5675 -0.5899  0.1549 0.4613 1.1366
[1.316227766016838, 1.2663078500948464], 'rank': 2, 'tol': 9.9999999999999995e-08}, 'rank': 2, 'residuals': array([-0.92703029, 0.24689324, 1.05766031, -0.02163025, 0.2646315 , 0.52686386, -0.77930909, -1.56749877, 1.13659789, 0.0628216 ]), 'terms': , 'xlevels': {}}
here, it looks like the key  ‘coefficients’ in the summary dictionary in python gives the  numbers in the 2nd row, 3rd column: p = summary['coefficients'][1,2]
so if all we were after were the slope and intercept, then slope = lm['coefficients']['x'] intercept = lm['coefficients']['(intercept)']
see, it takes some digging around to get what you need, but now since i’ve done the work for you, you can now do linear regressions from python.
(which of  course would result in better-documented code).
now for the reverse: writing excel files.
so save it in r (just in case) and simultaneously  save it in python: summary =
the third column has the time.
often-run analyses that you need r for can be wrapped in a class or module to encapsulate your data analysis needs, so you don’t need to clutter your code with it.
try this python script, addtiddler.py, to insert tiddlers into an existing tiddlywiki.
organizing them on disk just isn’t cutting it.
the second  column is year-day, which we’ll ignore.
lm = r('linear_model = lm(y~x)')
pyephem (from the greek word ephemeris) is the way to calculate the  positions of all sorts of astronomical bodies in python.
rather than  recap it all here, i encourage you to grab a copy of the source code, in which  you can find the examples directory.
ax.bar(theta, radii, width=width, bottom=0.0) # step through bars (a list of rectangle objects) and # change color based on its height and set its alpha transparency # to 0.5 for r,bar in zip(radii, bars): bar.set_facecolor( cm.jet(r/10.)) bar.set_alpha(0.5) show() and the result: it’s very easy to make subplots that share an x-axis, so that when you pan and zoom on one axis, the others automatically pan and zoom as well.
non-trivial example here’s an example of some data where the dates not formatted well for  easy import into excel: 20 sep, 263, 1148, 0, 1, 0, 0, 1, 12.1, 13.9, 1+1, 19.9 20 sep, 263,  1118, 0, 1, 0, 360, 0, 14.1, 15.3, 1+1, 19.9 20 sep, 263, 1048, 0, 1, 0, 0, 0,  14.2, 15.1, 1+1, 19.9 20 sep, 263, 1018, 0, 1, 0, 360, 0, 14.2, 15.9, 1+1, 19.9  20 sep, 263, 0948, 0, 1, 0, 0, 0, 14.4, 15.3, 1+1, 19.9 the first column has the day and month separated by a space.
if you have rpy installed and the vegan package installed, you should be  able to just run this python script.
you  can change this by subtractingwidth / 2 to each of the x values to center the  bars on the x-values, like this: from matplotlib.pyplot import figure, show from math import pi width =
turns out, you need thesummary() function in r, and it takes  as its input a linear model (among other possible inputs, but here we’re  just using a linear model).
i’ve been generating many figures, and i want to be able to find them  again and browse them easily.
turns out python can’t convert everything perfectly, and a little more exploration is in order.
excel_date_fmt # weather data has no year, so assume it's the current year.
ax = fig.add_axes([0.1, 0.1, 0.8,  0.8], polar=true)
you can optionally specify an image name (relative to the output file, see the documentation in the source code) to be embedded.
organizing them on disk just isn’t cutting  it.
%d %b-%h%m-%y' row  = 0 # row counter f =
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8], polar=true)
(which of course would result in better-documented code).
{'assign': [0, 1], 'call': , 'coefficients': {
in r, run the linear model and save it as a variable in r. here, i’m  simultaneously saving it as a python dictionary (sneaky!)
let me know if you find bugs so i can fix them.
[1, 2], 'qr': array([[ -3.16227766, -14.23024947], [ 0.31622777, 9.08295106], [  0.31622777, 0.15621147], [ 0.31622777, 0.0461151 ], [ 0.31622777, -0.06398128],  [ 0.31622777, -0.17407766], [ 0.31622777, -0.28417403], [ 0.31622777,  -0.39427041], [ 0.31622777, -0.50436679], [ 0.31622777, -0.61446316]]),  'qraux':
continue reading ‘calculate sunrise and sunset with pyephem’
some highlights from the examples directory in the source code: dates.py, which shows how to use the different date formats hyperlinks.py, which shows how to create hyperlinks ( hint: you need to use a formula) merged.py, which shows how to merge cells row_styles.py, which shows how to apply styles to entire rows.
n = 20 theta = npy.arange(0.0, 2*npy.pi, 2*npy.pi/n)
r('summary_lm = summary(linear_model)') slope = lm['coefficients']['x'] intercept = lm['coefficients']['(intercept)']
you might want to check this out if you’re specifically interested in  automatically documenting your code with sphinx.
[30,60,90,120,150,180] # convert to radians and subtract half the width # of a bar to center it.
excel_date_fmt # weather data has no year, so assume
try printing the summary from r: r('print(lm_summary)')
lm(x,y) ordination = rda(data) for much, much more see the online documentation for rpy, but hopefully i gave you enough to at least get started.
r('linear_model = lm(y~x)') summary =
looking at it for a little bit, you might notice  the ‘coefficients’ key of the dictionary lm, which in turn has two  more keys: ‘(intercept)’ and ‘x’.
save the ordination as a png print the variance explained by constrained and unconstrained axes as well  as each rda axis.
you can optionally specify an image name (relative to the output  file, see the documentation in the source code) to be embedded.
turns out, you need thesummary() function in r, and it takes as its input a linear model (among other possible inputs, but here we’re just using a linear model).
3 comments tags: pyephem, sunrise, sunset.
i’ve been doing quite a bit of code documentation lately, and i  decided to try and figure out the best tool to use.
xlwt allows you to format your spreadsheets on a cell-by-cell basis or by entire rows; it also allows you to add hyperlinks or even formulas.
wbk.save('test.xls')
or sort a list of people’s names by last name?continue reading ‘advanced sorting: sorting by key’ powered by wordpress and k2 entries feed and comments feed 45 queries.
bonus: i  can zip everything up and send tiddlywiki + images to my advisor so he can  browse and search them as well.
more goodies # initialize a style style = xlwt.
'(intercept)': 0.28490682478866736, 'x': 0.86209804871669171}, 'df.residual': 8, 'effects': array([-13.16882479, 7.83039439, 1.22245056, 0.18398967, 0.51108108, 0.8141431 , -0.45120018, -1.1985602 , 1.54636612, 0.51341949]), 'fitted.values': array([ 0.28490682, 1.14700487, 2.00910292, 2.87120097, 3.73329902, 4.59539707, 5.45749512, 6.31959317, 7.18169121, 8.04378926]), 'model': {'x': array([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]), 'y': array([-0.64212347, 1.39389811, 3.06676323, 2.84957073, 3.99793052, 5.12226093, 4.67818603, 4.7520944 , 8.3182891 , 8.10661086])}, 'qr': {'pivot':
it’s probably best to fire up r proper (from a command line, or  the gui if you have it in windows or osx) and run install.packages("vegan", dep=t)
now you can overwrite sheet 2 (but not sheet 1).
font() font.name = 'times new roman' font.bold =
codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’  0.05 ‘.’ 0.1 ‘ ’ 1 residual standard error: 0.9184 on 8  degrees of freedom multiple r-squared: 0.9009, adjusted r-squared: 0.8885  f-statistic: 72.7 on 1 and 8 df, p-value: 2.753e-05 the trick is to match output from the summary printout in r with the  dictionary returned to python.
sheetname=u'sheet 1' rowx=0 colx=0 to change this behavior, use the cell_overwrite_ok=true kwarg when creating the worksheet, like so: sheet2 =
often-run analyses that you need r for can be wrapped in a class or module  to encapsulate your data analysis needs, so you don’t need to clutter  your code with it.
the trick is just to specify that you want polar coordinates when you create the axis.
here’s a heavily commented script, rpy-demo.py, that will: load and format the data included in the script send the data to r perform an rda in r plot the ordination
the following is slightly modifed from the matplotlib examples: import numpy as npy import matplotlib.cm as cm from matplotlib.pyplot  import figure, show, rc # force square figure and square axes (looks better for  polar, imho) fig = figure(figsize=(8,8))
bonus: i can zip everything up and send tiddlywiki + images to my advisor so he can browse and search them as well.
here’s an example of some data where the dates not formatted well for easy import into excel: 20 sep, 263, 1148, 0, 1, 0, 0, 1, 12.1, 13.9, 1+1, 19.9 20 sep, 263, 1118, 0, 1, 0, 360, 0, 14.1, 15.3, 1+1, 19.9 20 sep, 263, 1048, 0, 1, 0, 0, 0, 14.2, 15.1, 1+1, 19.9 20 sep, 263, 1018, 0, 1, 0, 360, 0, 14.2, 15.9, 1+1, 19.9 20 sep, 263, 0948, 0, 1, 0, 0, 0, 14.4, 15.3, 1+1, 19.9 the first column has the day and month separated by a space.
p =  summary['coefficients'][1,2] redundancy analysis ok, say you have this data set to perform redundancy analysis (rda) on.
i’ve been doing quite a bit of code documentation lately, and i decided to try and figure out the best tool to use.
continue reading ‘interactive subplots: make all x-axes move together’ pyephem (from the greek word ephemeris) is the way to calculate the positions of all sorts of astronomical bodies in python.
r('summary_lm = summary(linear_model)')
from matplotlib.pyplot import figure, show from math import pi fig =  figure() ax = fig.add_subplot(111, polar=true) x
so save it in r (just in case) and simultaneously save it in python: summary =
the key to this functionality is thesharex keyword argument, which is used when creating an axis.
2 comments here’s how to create a polar bar plot in matplotlib.
sheet2 = wbk.add_sheet('sheet 2', cell_overwrite_ok=true)  sheet2.write(0,0,'some text')
worksheet objects, by default, give you a warning when you try to overwrite: sheet.write(0,0,'test') sheet.write(0,0,'oops') # returns error: # exception: attempt to overwrite cell:
continue reading ‘use sphinx for  documentation’ insert content into tiddlywikis with this python script published  onapril 17, 2008 in python and tiddlywiki.
font # use the style when writing sheet.write(0, 0, 'some bold times text', style)
or  sort a list of people’s names by last name?continue reading  ‘advanced sorting: sorting by key’ « older
continue reading  ‘minimal sphinx setup for autodocumenting python modules’ write excel files with python using xlwt published on september  20, 2009 in excel, other software and python.
wbk.add_sheet('sheet 2', cell_overwrite_ok=true)
open('weather.data.example')
%d %b-%h%m-%y' row = 0 # row counter f =
once things are set up that way, it would be as easy as from myrstuff import lm, rda results =
false, 'x': false}, 'call': , 'coefficients': array([[ 2.84906825e-01, 5.39776217e-01, 5.27823968e-01, 6.11943659e-01], [ 8.62098049e-01, 1.01109349e-01, 8.52639301e+00, 2.75251311e-05]]), 'cov.unscaled': array([[ 0.34545455, -0.05454545], [-0.05454545, 0.01212121]]), 'df': [2, 8, 2], 'fstatistic': {'dendf': 8.0, 'numdf': 1.0, 'value': 72.699377758431851}, 'r.squared': 0.90086664578818121, 'residuals': array([-0.92703029, 0.24689324, 1.05766031, -0.02163025, 0.2646315 , 0.52686386, -0.77930909, -1.56749877, 1.13659789, 0.0628216 ]), 'sigma': 0.9183712712215929, 'terms': } there’s the r-squared and adjusted r-squared,
[30,60,90,120,150,180] x =
continue reading  ‘calculate sunrise and sunset with pyephem’
in a previous post (which turned out to be pretty popular) i showed you how to read excel files with python.
fig = figure(figsize=(8,8))
it’s probably best to fire up r proper (from a command line, or the gui if you have it in windows or osx) and run install.packages("vegan", dep=t)
when you’re done, save the workbook (you don’t have to close it  like you do with a file object)
intercept = lm['coefficients']['(intercept)']
14 comments tags: documentation, sphinx, tutorial.
the key to this functionality is thesharex keyword argument, which is used when  creating an axis.
all together it looks like this (can be wrapped in a  function or class for your own reuse): r.assign('x', x) r.assign('y', y) lm =
so if all we were after were the slope and intercept, then slope = lm['coefficients']['x'] intercept =  lm['coefficients']['(intercept)']
sheet2.write(0,0,'this should overwrite')
false,  'x': false}, 'call': , 'coefficients':  array([[ 2.84906825e-01, 5.39776217e-01, 5.27823968e-01, 6.11943659e-01], [  8.62098049e-01, 1.01109349e-01, 8.52639301e+00, 2.75251311e-05]]),  'cov.unscaled': array([[ 0.34545455, -0.05454545], [-0.05454545, 0.01212121]]),  'df': [2, 8, 2], 'fstatistic': {'dendf': 8.0, 'numdf': 1.0, 'value':  72.699377758431851}, 'r.squared': 0.90086664578818121, 'residuals':  array([-0.92703029, 0.24689324, 1.05766031, -0.02163025, 0.2646315 ,  0.52686386, -0.77930909, -1.56749877, 1.13659789, 0.0628216 ]), 'sigma':  0.9183712712215929, 'terms': } there’s the r-squared and adjusted r-squared,
ax.bar(theta, radii, width=width, bottom=0.0) # step through bars (a list of  rectangle objects) and # change color based on its height and set its alpha  transparency # to 0.5 for r,bar in zip(radii, bars): bar.set_facecolor(  cm.jet(r/10.)) bar.set_alpha(0.5) show() and the result: interactive subplots: make all x-axes move together published on  may 3, 2008 in matplotlib, plotting and python.
sphinx can automagically slurp in all your docstrings, format them  nicely, and render them as html or pdf output.
the goal is to have a simple excel file where the first column is date, and the second column is temperature.
well, that makes more sense, and you can see the p value for the slope is  2.75e-5.
update: after some folks requested it in the comments, i wrote another post,a minimal sphinx setup for autodocumenting python modules.
the goal  is to have a simple excel file where the first column is date, and the second  column is temperature.
in order to write data to an excel spreadsheet, first you have to  initialize a workbook object and then add a worksheet object to that workbook.
it’s  calledsphinx, and you can see what the documentation looks like by checking out  the documentation for python itself (v.2.6 and 3.0).
r_squared = summary['adj.r.squared']
it’s nowhere to be seen in  that dictionary.
for example, a list of strings is sorted by the first letter of  each string.
coefficients: estimate std.
error t value pr(>|t|) (intercept) 0.2849 0.5398 0.528 0.612 x 0.8621 0.1011 8.526 2.75e-05 *** --- signif.
[i*pi/180 for i in x] # convert to radians ax.bar(x,[1,2,3,4,5,6], width=0.4) show() note that in the above example the “right” or “clockwise-most” edge is lined up with each specified x value.
3 comments tags: image, script,  tiddlywiki.
here’s a [heavily commented] script to do just that.
codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 residual standard error: 0.9184 on 8 degrees of freedom multiple r-squared: 0.9009, adjusted r-squared: 0.8885 f-statistic: 72.7 on 1 and 8 df, p-value: 2.753e-05 the trick is to match output from the summary printout in r with the dictionary returned to python.
here’s how to get started using sphinx.
continue reading ‘minimal sphinx setup for autodocumenting python modules’
first, you’ll need to install the xlwt package by john machin.
when you’re done, save the workbook (you don’t have to close it like you do with a file object)
looking at it for a little bit, you might notice the ‘coefficients’ key of the dictionary lm, which in turn has two more keys: ‘(intercept)’ and ‘x’.
wbk.add_sheet('temperatures') # set up a date format style to use in the #  spreadsheet excel_date_fmt = 'm/d/yy
advanced sorting: sorting by key published on april 14, 2008 in  python.
{'adj.r.squared': 0.88847497651170382, 'aliased': {'(intercept)':
it goes something like this: import xlwt wbk =
8 comments in a previous post (which turned out to be pretty popular)
from matplotlib.pyplot import figure, show from math import pi fig = figure() ax = fig.add_subplot(111, polar=true) x
archive for the 'python' category minimal sphinx setup for autodocumenting python modules published  onapril 14, 2010 in documentation and python.
sheetname=u'sheet 1' rowx=0 colx=0 to change this behavior, use the cell_overwrite_ok=true kwarg  when creating the worksheet, like so:
my solution for now is to use a localtiddlywiki as the glue for my figures,  since i can embed figures in tiddlers (the microcontent entries that are the  bread and butter of tiddlywikis), and tag and search those entries.
xfstyle() style.num_format_str =
you might want to check this out if you’re specifically interested in automatically documenting your code with sphinx.
overwriting cells worksheet objects, by default, give you a warning when you try to overwrite: sheet.write(0,0,'test') sheet.write(0,0,'oops') # returns error: #  exception: attempt to overwrite cell:
by default, it sorts on the first thing in each item of the list, which is exactly what you would expect.
[1.316227766016838, 1.2663078500948464], 'rank': 2, 'tol':  9.9999999999999995e-08}, 'rank': 2, 'residuals': array([-0.92703029,  0.24689324, 1.05766031, -0.02163025, 0.2646315 , 0.52686386, -0.77930909,  -1.56749877, 1.13659789, 0.0628216 ]), 'terms': , 'xlevels': {}}
[1, 2], 'qr': array([[ -3.16227766, -14.23024947], [ 0.31622777, 9.08295106], [ 0.31622777, 0.15621147], [ 0.31622777, 0.0461151 ], [ 0.31622777, -0.06398128], [ 0.31622777, -0.17407766], [ 0.31622777, -0.28417403], [ 0.31622777, -0.39427041], [ 0.31622777, -0.50436679], [ 0.31622777, -0.61446316]]), 'qraux':
some highlights from the examples  directory in the source code: dates.py, which shows how to use the different date formats hyperlinks.py, which shows how to create hyperlinks ( hint: you need to use a formula) merged.py, which shows how to merge cells row_styles.py, which shows how to apply styles to entire rows.
but how to extract it from python?
i’ve been generating many figures, and i want to be able to find them again and browse them easily.
the data we’re interested in is in the 9th column (temperature).
then create a bar plot as normal.
the dictionary you get back may take some navigating.
by default,  it sorts on the first thing in each item of the list, which is exactly what you  would expect.
here, it looks like the key ‘coefficients’ in the summary dictionary in python gives the numbers in the 2nd row, 3rd column: p = summary['coefficients'][1,2]
but what about a p-value for the slope?
well, that makes more sense, and you can see the p value for the slope is 2.75e-5.
now that the sheet is created, it’s very easy to write data to it.
it assumes that you have the data saved as weather.data.example.
it assumes that  you have the data saved asweather.data.example.