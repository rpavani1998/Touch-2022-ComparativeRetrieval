the s language is often the vehicle of choice for research in statistical methodology, and r provides an open source route to participation in that activity.
plotting functions include those to create boxplots, histograms, x-y plots, scatter plots, probability and contour plots, and to rotate plots in 3-d space.
this server comunicates with potencial clients using a simple corba interface.
moreover, its careful design allows advanced users to have detailed control over the solution process.
in addition to common programming features, ncl also has features that are not found in other programming languages, including features that handle the manipulation of metadata, the configuration of the output graphics, the import of data from a variety of data formats, and an algebra that supports array operations.
the statistical modeling features were enhanced by adding extensions to standard lisp arithmetic operations to perform element-wise operations on lists and vectors and also by adding a variety of basic statistical and linear algebra functions.
all errors from the r language are converted to python exceptions.
all components of the ccse applications suite except varden are designed to execute in parallel using mpi.
the available documentation includes a somewhat dated book, a more up-to-date tutorial introduction and several technical reports.
[ http://pact.llnl.gov/] pdl pdl (``perl data language'') gives standard perl the ability to compactly store and speedily manipulate the large n-dimensional data arrays which are the bread and butter of scientific computing.
further octave features include: [ http://www.octave.org/] the gnu octave repository is intended to be a central location for custom scripts, functions and extensions for gnu octave.
[http://sumppu.fmi.fi/prog/tela.html] [ http://www.ssec.wisc.edu/~billh/visad.html] the prototype object-oriented programming system is used to implement the graphics system as well as to implement statistical model representations such as linear and nonlinear regression and generalized linear models.
it compiled and installed easily on my linux box.
retrieving and converting date information drawing primitives (lines, filled areas, and markers), wind barbs, weather map symbols, isosurfaces, and graphical objects file handling 1-dimensional, 2-dimensional, and 3-dimensional interpolation, approximation, and regridding facilitating computer analysis of scalar and vector global geophysical quantities (most are based on the package known as spherepack) retrieving environment variables and executing system commands calling c and fortran external routines, which makes ncl infinitely configurable ncl incorporates the functionality of several other freely available packages including: hdf, hdf-eos and netcdf, libraries and formats for storing scientific data; lapack, a library for solving linear algebra problems; ngmath - a collection of routines for random data interpolation; spherepack - a library for the computer modeling of geophysical processes on spheres; udunits, a library for manipulating units of physical quantities.
[http://www.cwp.mines.edu/cwpcodes/] euler a numerical math program that can handle real and complex numbers, vectors and matrices, can produce 2d/3d graphics, and has a built-in programming language.
the documentation is currently available online in hypertext format, having been translated from a texinfo source file which is presumably also available.
it also features strongly typed objects in classes.
in addition, petsc includes growing support for distributed arrays.
this server comunicates with potencial clients using a simple corba interface.
if that's not possible, you can still compile octave if you have the free fortran to c translator f2c.
by defining a single, higher level, standard programming interface, it shields appplication developers from the plethora of different hardware architectures and operating systems and their non-standard features.
the routines have been written from scratch in c, and present a modern applications programming interface (api) for c programmers, allowing wrappers to be written for very high level languages.
interface is also available.
the progammable nature of the application simplifies testing and debugging.
it provides integration of a large number of methods from multiple sources such that the user does not need to be concered with problems related to data imports/exports, file formats and automation.
as the numerical python documentation states, it is "...a collection of extension modules to provide high-performance multidimensional numeric arrays to the python programming language."
panacea panacea provides a collection of services to facilitate the production of numerical simulation codes and to increase the reusability and shareability of simulation packages.
all but the book are available in both html and postscript format.
pact does not include such important tools as editors and compilers.
with strict attention to component interoperability, petsc facilitates the integration of independently developed application modules, which often most naturally employ different coding styles and data structures.
numarray offers more capability than numeric though there are some aspects of numarray which are still behind numeric, namely: [ http://www.stsci.edu/resources/software_hardware/numarray [ http://starship.python.net/crew/jhauser/numpyadds.html] it is based on a server with the numexp core functionalities.
it can do arithmetic for real and complex scalars and matrices, solve sets of nonlinear algebraic equations, integrate functions over finite and infinite intervals, and integrate systems of ordinary differential and differential-algebraic equations.
as an additional benefit, the modularization that follows from this style lends itself to natural coarse-grained parallelization of code systems.
it is a useful program for interactive calculations and graphics.
if more performance is needed the interactively developed macros can be compiled using a c++ compiler.
the basis language includes variable and function declarations, graphics, several looping and conditional control structures, array syntax, operators for matrix multiplication, dot product, transpose, array or character concatenation, and a stream i/o facility.
[ http://www.octave.org/] gnu octave repository the gnu octave repository is intended to be a central location for custom scripts, functions and extensions for gnu octave.
moreover, its careful design allows advanced users to have detailed control over the solution process.
its modular structure easily enables parallel computation across different architectures and collaborative code development between different groups.
the features of lush include: an easy way to interface c functions and libraries, and a powerful dynamic linker/loader for object files or libraries (.o, .a and .so files) written in other compiled languages.
it loads the definition of a dynamical system in an equation oriented language, translates this into c++, compiles and links this, and solves the equations numerically with the speed of a compiled (rather than interpreted) program.
this is to port elsewhere.
[ http://algae.sourceforge.net/ basis basis is the name of the program which results from loading the basis system with no attached physics.
execution sequences, the examination of the state of the running code, and the changes in the state of the code.
when carried to its logical conclusion, this method will also permit the prototyping of algorithms at the lisp level before investing the effort in writing more efficient code at a lower level.
[http://packages.debian.org/stable/math/fudgit] gnans a program and language for the numerical study of deterministic and stochastic dynamical systems, which may evolve in continuous or discrete time.
this allows the creation, viewing and printing of the usual range of 2- and 3-d and histogram plots.
the console versions of ox may be used free of charge for educational and research purposes.
lush is designed to be used in situations where one would want to combine the flexibility of a high-level, weakly-typed interpreted language, with the efficiency of a strongly-typed, natively-compiled language, and with the easy integration of code written in c, c++, or other languages.
su is intended as an extension of the unix operating system, and therefore shares many characteristics of the unix, including unix flexibility and expandibility.
[ http://pygsl.sourceforge.net/] [ http://www.nongnu.org/guile-num/] in effect, numerical python is a free alternative to commercial solutions such as matlab with the added bonus of the python language which can be argue to be much better than what can be found in most commercial solution.
in fact, lush is designed to be very simple to learn and easy to use.
finally, panacea can bind simulation packages generated by a tool, such as alpal, into entire code systems.
it is planned to used the texinfo system for documentation, which will allows several types of documentation formats to be produced from a single source file.
the package is not necessarily restricted to seismic processing tasks, however.
the underlying implementation can be changed without necessitating changes to the applications using it.
panacea complements alpal very neatly by attending to large control and data flow issues, while alpal uses the panacea services rather than getting loaded down with these issues.
by attempting to provide services to do everything that is generic to ?all? simulation codes, panacea also provides some standards of data exchange, management, and visualization.
it can manage all kinds of r objects and can execute arbitrary r functions (including the graphic functions).
when calling a compiled routine from the interactive language, basis verifies the number of arguments and coerces the types of the actual arguments to match those expected by the function.
this plan was to create a seismic processing environment for unix-based systems, written in the c language, that would extend the unix operating system to seismic processing and research tasks.
it's written in c for generic unix/x windows platforms and the source code is available.
the author says that the gnudl prototype 4 was as far as he got before he switched to starting and maintaining the gsl (gnu scientific library) project.
the progammable nature of the application simplifies testing and debugging.
the documentation available includes postscript and html versions of a user's manual as well as some flat ascii files containing descriptions of the available functions and the graphics package.
great care has been taken over the defaults for the minor design choices in graphics, but the user retains full control.
the source code (written in ansi c) is available with a configure script that recognizes sun, hp, sgi, cray, ibm, dec alpha and linux platforms, and a mac port is available in binary form.
the classes are numeric, string, function, and list with the numeric class encompassing scalars, vectors and matrices.
[ftp://ftp.uu.net/pub/math/gnans/] gnatlab the gnatlab program is designed to be a tool for fast matrix manipulation and calculation using the matrix template library.
further octave features include: support for organizing data in structures, e.g. associative arrays with indices limited to strings; variable-length argument and return lists; built-in ode and dae solvers.
authors create other programs by specifying one or more packages of variables and modules to be loaded.
the useful features of the aforementioned languages planned for replication include the immediate availability of graphing operations for data viewing with well-designed and extensible defaults, the ease and optimization of array operations, the publication quality of output graphics, and the availability on many platforms.
it uses the gnu readline library to handle reading and editing input.
the documentation is currently available online in hypertext format, having been translated from a texinfo source file which is presumably also available.
any module installed for the r system can be used from within python.
for algorithms that are not well suited for efficient computation using array facilities it is possible to write c functions (and eventually fortran) that can read and write numarray arrays that can be called from python.
the documentation is supplied in both html and gnu info formats.
using python inside a jvm has advantages because you can embed python programs inside java software or vice versa.
cactus provides easy access to many cutting edge software technologies being developed in the academic research community, including the globus metacomputing toolkit, hdf5 parallel file i/o, the petsc scientific library, adaptive mesh refinement, web interfaces, and advanced visualization tools.
[ http://ptolemy.eecs.berkeley.edu/] however, quantian differs from knoppix by adding a set of programs of interest to applied or theoretical workers in quantitative or data-driven fields.
the visualization and post-processing tools are specially constructed to efficiently handle this type of data set.
its domains extend the actor package by imposing models of computation on the interaction between entities.
scicraft is an open source data analysis software which solves these problems through an intuitive and user friendly framework where existing methods written in any programming language can easily be combined.
significant/unique algae features include: speed that is generally (and often significantly) faster than matlab (at least until recent major improvements in that product),rlab and octave; the capability of storing arrays in sparse form wherein only the nonzero elements and their locations are stored; persistent labels for each dimension of a matrix or vector (i.e. a vector element can have a label such as `mojo rate' to distinguish it from the other 5000 elements); scalars, vectors and arrays as distinct data types; and a statistical profiling capability that can show, by file and line number, where the code spends most of its time.
the design of pact was and is functionally driven.
basis' interaction with compiled routines is particularly powerful.
in addition to common programming features, ncl also has features that are not found in other programming languages, including features that handle the manipulation of metadata, the configuration of the output graphics, the import of data from a variety of data formats, and an algebra that supports array operations.
the visualization and post-processing tools are specially constructed to efficiently handle this type of data set.
it also provides a good environment to learn c++.
ncl comes with many useful built-in functions and procedures for processing and manipulating data.
the user can concentrate on the scientific aspects of data analysis without technical distractions.
much of the system is itself written in the r dialect of s, which makes it easy for users to follow the algorithmic choices made.
petsc provides many of the mechanisms needed within parallel application codes, such as simple parallel matrix and vector assembly routines that allow the overlap of communication and computation.
it supports dataflow, discrete-event, process networks, synchronous/reactive, and finite-state machine models of computation.
data types include real, double, integer, complex, logical, character, chameleon, and structure.
the underlying numerical solvers are currently standard fortran ones like lapack, linpack, odepack, the blas, etc., packaged in a library of c++ classes.
it is also an expression language interpreter capable of understanding most of c grammar.
if you do research and development in signal processing, image processing, machine learning, computer vision, bio-informatics, data mining, statistics, simulation, optimization, or artificial intelligence, and feel limited by matlab and other existing tools, lush is for you.
the author says that the gnudl prototype 4 was as far as he got before he switched to starting and maintaining the gsl (gnu scientific library) project.
algae will also recognize the proprietary boeing bcslib package.
gnatlab aims towards the full functionality of similar commercial products.
when calling a compiled routine from the interactive language, basis verifies the number of arguments and coerces the types of the actual arguments to match those expected by the function.
its actor package extends the kernel so that entities have functionality and can communicate via the relations.
finally, panacea can bind simulation packages generated by a tool, such as alpal, into entire code systems.
cactus provides easy access to many cutting edge software technologies being developed in the academic research community, including the globus metacomputing toolkit, hdf5 parallel file i/o, the petsc scientific library, adaptive mesh refinement, web interfaces, and advanced visualization tools.
the syntax of ox is similar to the c, c++ and java languages.
the graphics capabilities, accomplished via a linkage with a separate programplotmtv, included 2-d and 3-d line and curve, contour, density, vector field, and surface plots as well as bar charts and histograms.
however, the user has the option of building executables without mpi to run on serial platforms.
it can generate implementations in c and assembly code for at least two programmable dsps from certain dataflow descriptions of systems.
the goal is to allow pdl to interact with a variety of external numerical packages, graphics and visualisation systems.
[ http://www.gnu.org/software/gsl/] this project provides a python interface for the gnu scientific library (gsl).
the goal is to allow pdl to interact with a variety of external numerical packages, graphics and visualisation systems.
a broad suite of wave-related processing can be done with su, making it a somewhat more general package than the word ``seismic'' implies.
this similarity is most clear in syntax items such as loops, functions, arrays and classes.
advanced users can write c code to manipulate r objects directly.
[ http://www.stat.uiowa.edu/~luke/xls/xlsinfo/xlsinfo.html] the features of yorick include c-like syntax for the interpreted language with declarative statements, explicit array operations that don't require creating explicit loops, an x window system interactive graphics package that concentrates on x-y plots and filling and contouring quadrilateral meshes, hardcopy output to binary cgm or postscript files (with a separate cgm browser), a binary file package that can read or write floating point formats foreign to the machine on which it is running, a growing library of functions written in the native language (e.g. bessel and gamma functions; fitting by least squares, spline or rational functions; reading and writingnetcdf files, etc.), and provisions for embedding compiled subroutines and functions within the yorick interpeter (for which an example package is provided).
[ http://seesar.lbl.gov/ccse/software/index.html] the package is not necessarily restricted to seismic processing tasks, however.
the capability to solve elliptic equations on an adaptive hierarchy of grids with either cell-centered or node-centered data is contained in two of the multigrid libraries (mglib and hgproj).
the encapsulation of abstract objects in concrete representations facilitates the process of manipulating these objects symbolically.
[ http://algae.sourceforge.net/ basis programs are steerable applications, that is, applications whose behavior can be greatly modified by their users.
the encapsulation of abstract objects in concrete representations facilitates the process of manipulating these objects symbolically.
panacea provides a collection of services to facilitate the production of numerical simulation codes and to increase the reusability and shareability of simulation packages.
it is especially powerful in the areas of file input and output, data processing and graphical display.
[ http://pdl.perl.org/] petsc is easy to use for beginners.
numarray lacks a plotting module.
basis also contains optional facilities to help authors do their jobs more easily.
an interface to the simple directmedia layer (sdl) multimedia library, including a sprite class with pixel-accurate collision detection (perfect for 2d games).
panacea complements alpal very neatly by attending to large control and data flow issues, while alpal uses the panacea services rather than getting loaded down with these issues.
a primary goal is to eventually provide a vast library of numerical, signal processing, imaging processing, etc. routines that can be interactively used within the system.
jnumeric provides the same functionality as the core of numeric module and aims to provide all of the standard extensions to numeric module (fft, linearalgebra, randomarray).
it is quite reliable, and has good garbage collection, and no memory leaks.
execution sequences, the examination of the state of the running code, and the changes in the state of the code.
as far as performances are concerned, expect jython to be as fast or faster than python.
ncl can be run in interactive mode, where each line is interpreted as it is entered at your workstation, or it can be run in batch mode as an interpreter of complete scripts.
maxima itself is reasonably feature complete at this stage, with abilities such as symbolic integration, 3d plotting, and an ode solver, but there is a lot of work yet to be done in terms of bug fixing, cleanup, and documentation.
[ http://mathsrv.ku-eichstaett.de/mgf/homes/grothmann/euler/] fudgit a multi-purpose fitting program where columns of numbers can be manipulated in the form of vector arithmetic.
this will allow the use of scheme as well as a variety of other languages that can be run on top of scheme to be used for programming applications.
the added quantitative, numerical or scientific programs comprise: [ http://dirk.eddelbuettel.com/quantian.html] r provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, ...) and graphical techniques, and is highly extensible.
this ensures the bindings are up-to-date.
even though scicraft can communicate in principle with any type of computer language, we have found it useful to concentrate on high level languages that are suited for rapid development of data analysis algorithms.
a compiled function can also call a user-defined function passing arguments through common.
basis programs are steerable applications, that is, applications whose behavior can be greatly modified by their users.
this makes root a premier platform on which to build data acquisition, simulation and data analysis systems.
the ability to freely mix lisp and c in a single function.
gnudl will useguile, a scheme-based utility, as its language.
the toolboxes available with scilab include: [ http://scilabsoft.inria.fr/] scirun provides a component model, based on generalized dataflow programming, that allows different computational components and visualization components to be connected together in a tightly integrated fashion.
the pdl distribution for perl is free software and provides extensive numerical and semi-numerical functionality with support for two- and three-dimensional visualisation as well as a variety of i/o formats.
the system has been designed in such a way that it can query its databases in parallel on mpp machines or on clusters of workstations or high-end pc's.
an extensive set of graphic routines, including an object-oriented gui toolkit, an interface to opengl/glu/glut, and the openinventor scene rendering engine.
the underlying implementation can be changed without necessitating changes to the applications using it.
however, the user has the option of building executables without mpi to run on serial platforms.
if possible, the fortran subroutines are compiled with the system's fortran compiler, and called directly from the c++ functions.
yorick algae a high-level interpreted language for numerical analysis that borrows ideas from languages like c, matlab and apl.
[http://www.nuff.ox.ac.uk/users/doornik/] pact pact (portable application code toolkit) is a comprehensive, integrated, and portable software development environment created for applications having unique requirements not met with available software.
if possible, the fortran subroutines are compiled with the system's fortran compiler, and called directly from the c++ functions.
this will allow the use of scheme as well as a variety of other languages that can be run on top of scheme to be used for programming applications.
petsc provides many of the mechanisms needed within parallel application codes, such as simple parallel matrix and vector assembly routines that allow the overlap of communication and computation.
as far as performances are concerned, expect jython to be as fast or faster than python.
[ http://basis.llnl.gov/] the name cactus comes from the design of a central core (or "flesh") which connects to application modules (or "thorns") through an extensible interface.
for computationally-intensive tasks, c, c++ and fortran code can be linked and called at run time.
the structured language in rlab is similar to c in that a program is sequence of functions acting on variables, with the functions being either built-in or user defined.
when carried to its logical conclusion, this method will also permit the prototyping of algorithms at the lisp level before investing the effort in writing more efficient code at a lower level.
applications, developed on standard workstations or laptops, can be seamlessly run on clusters or supercomputers.
most bindings are automatically generated from the include files of the libraries.
it is also high level due to its interactivity which allows the user to set up, perform, and visualize experiments in real time in the context of a single environment.
because the applications depend on some or all of the more fundamental software libraries, users must download the entire package, amr uses block-structured refinement, so that the solution to an amr calculation is composed of data in multiple non-intersecting rectangular grids at multiple levels with different resolution.
therefore, while panacea helps modularize a code system so that packages or large parts of packages might be run in parallel, it does not interfere with parallelizing individual routines which permit it.
basis can be built with ncar graphics, pgs graphics or with no graphics.
guile also incorporates thetk toolkit, allowing gui applications to be custom built.
pact does not include such important tools as editors and compilers.
many, however, are purely seismic in nature.
it will provide some of the capabilities of high level languages for data analysis and plotting (e.g.yorick, matlab, octave, and idl, from which gnudl gets it name and which the gnudl author considers the most powerful of such languages).
the main idea is to identify generic blocks of functionality independent of considerations of language and specific applications.
documentation includes a user's guide in postscript format as well as online help files, man pages and some selected plotmtv documentation.
the class categories include: [ http://root.cern.ch/] many scientific fields experience an enormous increase in produced data and thus need the availability of effective data analysis software.
su is intended as an extension of the unix operating system, and therefore shares many characteristics of the unix, including unix flexibility and expandibility.
the basis system includes many facilities designed to ease porting of fortran codes among the supported platforms, including a fortran preprocessor, mppl, and a system for creating makefiles for multi-platform, multi-directory development.
it can be envisioned as a computational workbench, in which a scientist can design and modify simulations interactively via a component-based visual programming model.
[ http://octave.sourceforge.net/] [ http://www.omegahat.org/] the console versions of ox may be used free of charge for educational and research purposes.
guile also incorporates thetk toolkit, allowing gui applications to be custom built.
therefore, while panacea helps modularize a code system so that packages or large parts of packages might be run in parallel, it does not interfere with parallelizing individual routines which permit it.
basis also contains optional facilities to help authors do their jobs more easily.
one can write simple perl expressions to manipulate entire numerical arrays all at once.
ptolemy ii includes a number of support packages, such as graph, providing graph-theoretic manipulations, math, providing matrix and vector math and signal processing functions, plot, providing visual display of data, data, providing a type system, data encapsulation and an expression parser, etc.
the features include interactive evaluation of numerical expressions, matrix functions, statistical functions and random numbers, online help, and more.
if you build basis withpact, then you can use the interface to pact's pdb portable self-describing data files.
a library of basis packages is available that can be easily added to a program.
i have used panacea with the pact scheme interpreter to give users of one panacea code the ability to manipulate the code in very broad and general ways.
it is designed to be easily expandable, with a simple programming interface.
i had no problems compiling and installing it on my linux platform.
it has a gui that allows the program to be controlled and the parameters changed easily.
the interpreter allows for fast prototyping of the macros since it removes the time consuming compile/link cycle.
[ http://software.sci.utah.edu/scirun.html] [http://www.netlib.org/slatec/] the features of tela include a copmlete fortran 90 style array language, fast execution in interpreted mode (with a translator to c++ in the works), a full suite of linear algebra tools, a full set of fast fourier transform routines, the capability of running unix system commands from within tela, the capability of working with files in hdf, netcdf, ascii, matlab, and pbm formats, and several built-in numerical analysis routines, e.g. linear interpolation, integration, root finding, nonlinear fitting, etc.
it is also a front end for any plotting program supporting commands from stdin, e.g. gnuplot.
furthermore, they intended that the package be freely available as full source code to anyone who would want it.
if you want a simple environment to experiment with graphics, video, and sounds, lush is for you.
its kernel package supports clustered hierarchical graphs, which are collections of entities and relations between those entities.
some features include fourier transforms, spline interpolation, smoothing, a built-in calculator, access to the c math library, and a collection of fitting routines.
[ http://www.r-project.org/] rpy is a very simple, yet robust, python interface to the r programming language.
now, we know this is almost impossible without more open-source hackers.
a library of basis packages is available that can be easily added to a program.
if that's not possible, you can still compile octave if you have the free fortran to c translator f2c.
whereas mixing c and python must be done with care by people wide awake, mixing java and jython is a no brainer.
the documentation includes a tutorial and a manual for the built-in functions in both html and postscript format.
a broad suite of wave-related processing can be done with su, making it a somewhat more general package than the word ``seismic'' implies.
the basis language includes variable and function declarations, graphics, several looping and conditional control structures, array syntax, operators for matrix multiplication, dot product, transpose, array or character concatenation, and a stream i/o facility.
the basis system includes many facilities designed to ease porting of fortran codes among the supported platforms, including a fortran preprocessor, mppl, and a system for creating makefiles for multi-platform, multi-directory development.
this puts panacea on a sound conceptual basis and helps to delineate the generic from the specific in simulation code systems.
[ http://www.cactuscode.org/] amr uses block-structured refinement, so that the solution to an amr calculation is composed of data in multiple non-intersecting rectangular grids at multiple levels with different resolution.
the available source code can be compiled usinggcc/g++ and also with some native c++ compilers.
i have used panacea with the pact scheme interpreter to give users of one panacea code the ability to manipulate the code in very broad and general ways.
using python inside a jvm has advantages because you can embed python programs inside java software or vice versa.
using numarray, it is possible to write many efficient numerical data processing applications directly in python without using any c, c++ or fortran code (as well as doing such analysis interactively within python or pyraf).
gnudl will provide x window and postscript rendering of all plots (perhaps via ghostview) to provide publication quality graphical output.
whereas mixing c and python must be done with care by people wide awake, mixing java and jython is a no brainer.
ncl comes with many useful built-in functions and procedures for processing and manipulating data.
numarray offers more capability than numeric though there are some aspects of numarray which are still behind numeric, namely: numarray is efficient for large arrays (>20,000 elements) but is slower than numeric for small arrays by a factor of 2 to 4.
data types include real, double, integer, complex, logical, character, chameleon, and structure.
a compiled function can also call a user-defined function passing arguments through common.
if you want a simple environment to experiment with graphics, video, and sounds, lush is for you.
[ http://jnumerical.sourceforge.net/] lush can be used advantageously for projects where one would otherwise use a combination of an interpreted language like matlab, python, perl, s+, or even (gasp!)
other thorns from a standard computational toolkit provide a range of computational capabilities, such as parallel i/o, data distribution, or checkpointing.
[ http://pygsl.sourceforge.net/] guile-numerics guile-numerics provides guile bindings for the gnu scientific library (gsl), libsndfile, fftw and lapack.
[ http://www.scicraft.org/] scilab includes hundreds of mathematical functions with the possibility to add interactively programs from various languages (c, fortran...).
the documentation is supplied in both html and gnu info formats.
commercial data analysis software packages exist that can be used, however they are often expensive, have a limited number of methods available and are very restrictive with their licenses.
the main idea is to identify generic blocks of functionality independent of considerations of language and specific applications.
the core of the seismic unix program set performs a broad collection of tasks, which may be viewed as being common to a large collection of research and processing disciplines.
it allows scientists to modify geometric models and interactively change numerical parameters and boundary conditions, as well as to modify the level of mesh adaptation needed for an accurate numerical solution.
it has a symbolic debugger source level debugger for maxima code.
applications, developed on standard workstations or laptops, can be seamlessly run on clusters or supercomputers.
by default, the line editing commands are similar to the cursor movement commands used by gnu emacs, and a vi-style line editing
the pdl distribution for perl is free software and provides extensive numerical and semi-numerical functionality with support for two- and three-dimensional visualisation as well as a variety of i/o formats.
thorns can implement custom developed scientific or engineering applications, such as computational fluid dynamics.
other thorns from a standard computational toolkit provide a range of computational capabilities, such as parallel i/o, data distribution, or checkpointing.
in addition, petsc includes growing support for distributed arrays.
if you do research and development in signal processing, image processing, machine learning, computer vision, bio-informatics, data mining, statistics, simulation, optimization, or artificial intelligence, and feel limited by matlab and other existing tools, lush is for you.
scirun facilitates the interactive construction, debugging and steering of large-scale, typically parallel, scientific computations.
in general its interface is very similar.
the design of pact was and is functionally driven.
in fact, lush is designed to be very simple to learn and easy to use.
it is full featured doing symbolic manipulation of polynomials, matrices, rational functions, integration, todd-coxeter, graphing, bigfloats.
use of the object oriented features is optional, but facilitates code re-use.
thorns can implement custom developed scientific or engineering applications, such as computational fluid dynamics.
all components of the ccse applications suite except varden are designed to execute in parallel using mpi.
[ http://www.nongnu.org/guile-num/] jnumeric jnumeric provides the functionality for jython that numerical python does for python (cpython).
[ http://basis.llnl.gov/] cactus cactus is an open source problem solving environment designed for scientists and engineers.
at the end of each session, the command history is saved, so that commands entered during previous sessions are not lost.
this puts panacea on a sound conceptual basis and helps to delineate the generic from the specific in simulation code systems.
by attempting to provide services to do everything that is generic to ?all? simulation codes, panacea also provides some standards of data exchange, management, and visualization.
it includes: r, like s, is designed around a true computer language, and it allows users to add additional functionality by defining new functions.
several libraries for machine learning, neural net, statistical estimation, hidden markov models (gblearn2, torch, htk).
numarray has native packages for convolution and multi-dimensional image processing.
it is planned to used the texinfo system for documentation, which will allows several types of documentation formats to be produced from a single source file.
one of r's strengths is the ease with which well-designed publication-quality plots can be produced, including mathematical symbols and formulae where needed.
[ http://pact.llnl.gov/] pdl turns perl into a free, array-oriented, numerical language similar to such commerical packages as idl and matlab.
if you build basis withpact, then you can use the interface to pact's pdb portable self-describing data files.
it is based on a server with the numexp core functionalities.
[ http://rlab.sourceforge.net/] thanks to the builtin cint c++ interpreter the command language, the scripting, or macro, language and the programming language are all c++.
the most basic components for building amr applications are contained in boxlib and amrlib; the most complete applications are the two solvers.
in effect, numerical python is a free alternative to commercial solutions such as matlab with the added bonus of the python language which can be argue to be much better than what can be found in most commercial solution.
gnudl will provide x window and postscript rendering of all plots (perhaps via ghostview) to provide publication quality graphical output.
algae will also recognize the proprietary boeing bcslib package.
combining the methods with external software usually requires time-consuming data format and interface handling that hinders the investigator.
it has sophisticated data structures (including lists, polynomials, rational functions, linear systems...), an interpreter and a high level programming language.
[ http://ngwww.ucar.edu/ncl/] numarray numarray provides array manipulation and computational capabilities similar to those found in idl, matlab, or octave.
as an additional benefit, the modularization that follows from this style lends itself to natural coarse-grained parallelization of code systems.
other packages that aren't required but are quite helpful and will be used by the package if available aregnuplot, blas (although the generic version is supplied with the package),lapack (with the generic version of this also supplied with the package), and the gnu readline library.
significant/unique algae features include: algae is distributed as source code and also in binary form for linux elf platforms.
there is analphabetized list of the over 600 functions in the repository.
it uses the matrix template library to do the calculations and it interfaces with the mtl in such a way that updates and changes to the mtl can be quickly incorperated into the program.
the underlying numerical solvers are currently standard fortran ones like lapack, linpack, odepack, the blas, etc., packaged in a library of c++ classes.
in practice, packages can also be organized so as to make fine grained parallelization possible because the controlling structures and the data objects of panacea do not really intrude into the detailed workings of the simulation algorithms.
go to a specific package or browse the lot.
although coded in c, panacea is coded in an object-oriented style.
the features of lush include: maxima itself is reasonably feature complete at this stage, with abilities such as symbolic integration, 3d plotting, and an ode solver, but there is a lot of work yet to be done in terms of bug fixing, cleanup, and documentation.
in practice, packages can also be organized so as to make fine grained parallelization possible because the controlling structures and the data objects of panacea do not really intrude into the detailed workings of the simulation algorithms.
[ http://www.omegahat.org/] ox ox is an object-oriented matrix language with a comprehensive mathematical and statistical function library.
one can write simple perl expressions to manipulate entire numerical arrays all at once.
[ http://rpy.sourceforge.net/] rlab is called a high level language because typing and dimensioning of variables aren't performed by the user but rather are inferred by the program from usage context.
other packages that aren't required but are quite helpful and will be used by the package if available aregnuplot, blas (although the generic version is supplied with the package),lapack (with the generic version of this also supplied with the package), and the gnu readline library.
a powerful set of vector/matrix/tensor operations a huge library of over 10,000 numerical routines, including full interfaces to gsl, lapack, and blas a library of image and signal processing routines.
the core of the seismic unix program set performs a broad collection of tasks, which may be viewed as being common to a large collection of research and processing disciplines.
there is analphabetized list of the over 600 functions in the repository.