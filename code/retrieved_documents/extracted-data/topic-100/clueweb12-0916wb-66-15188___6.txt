it's too verbose, it requires too much "expertise", and  it's a nightmare to maintain.
there are also lots of web pages which provide information for folk migrating to python from idl (example).
(in this context, it's worth noting that calling c and fortran from  python is apparently much easier than doing so from idl.)
my suspicion is that those that don't look under the hood wont care, provided it's easy to use, and well documented.
obviously most of the folks who use our data do so in postgraduate or other environments, and at least for ncas, most of those will have idl in the vicinity, if not on their desktop.
my feeling is that the big advantage of python over matlab is the  integration with all the other bits and pieces one wants as soon as a workflow  gets sufficiently interesting (guis, databases, xml parsers, other people's  libraries etc), and the easy extensibility.
nick barnes on wednesday 13 october, 2010:thanks for the ccc link, bryan.
in truth, i don't know that much about matlab.
overall, it appears that a ranking of programming language provision would be: c++ matlab python off the cuff comments from a member of the institute of physics asked if they had any insight into the provision of programming languages in a wider group of physics departments suggest these results aren't unique to the russell group departments (but also that python, having been off the radar, is increasing rapidly).
we'll get back to that ... and russell: a small number of identified universities which we might a priori assume to have high quality courses).
you can  even use the ncar graphics library from python (viapyngl even if some are  curmudgeonly about the interface).
that person had not heard of idl (which is mostly used in research departments, and then mainly in astrophysics/solar-terrestrial/astronomy and atmospheric physics).
however, if using r libraries is important, we can do that from python ... and it's not a natural language for complex workflow development, so we'll park r in the "useful addendum to python" corner ...
i appreciate that there may be some resistance to this, particularly from  those scientists who like to look under the hood and understand and extend  library functions.
clearly on the table we have matlab and python (given the results above).
excel and ms friends are common (but so is the influenza, and neither can do big data processing tasks).
for reading multidimensional rasters in scientific data formats (which is mainly what i do), i still prefer the unidata java tools.
both of whom ideally  would use the same toolset.
inbound: bloglines publications talks committees grants research students teaching notes, metadata data policy security software mint wikiformat ceda, nceo ncas/badc ndg/discovery go-essp,
folk moving from idl to python, and some pretty coherent analyses of why  one might use python in comparison to idl (e.g.here)
of course, one might make arguments like those about other languages, and  folks do, but mostly i get arguments about two particular languages: idl- which is obviously familiar to many (but far from all) of both our  data suppliers and consumers, and java - particularly given the unidata toolsets, and because some of my  software engineers complain about various (arcane) aspects of python.
in the remainder of this piece, i introduce some context: some results from a recent user survey at the badc, a quick (and incomplete) survey of what is taught in a few uk university physics departments - with a few adhoc and non-attributable comments from someone involved with a much wider group of uk physics departments.
(in this context, it's worth noting that calling c and fortran from python is apparently much easier than doing so from idl.)
well, clearly it's useful, and clearly folks will use it for a long time to come.
the bottom line is that i think there are two players: python and matlab with and r and idl as also rans, and that for me, python is the clear winner - especially since with the right kind of library structure, users can mix and match between r, python and idl.
clearly on the table we  have matlab and python (given the results above).
we'll get to the idl arguments below, but w.r.t.
the other thing that i believe to be a killer reason for using python:  proper support for unit testing: if we could inculcate testing into the  scientific development workflow, i, for one, believe a lot of time would be  saved in scientific coding.
this page last modified wednesday 13 october, 2010
as scientists they need to be able to unpick the internals and be sure they trust them, but they'll also be lazy; once trusted,tools need to be simultaneously easy and extensible.
a number of computer science departments are now teaching python as their first programming language as well (s. easterbrook in private conversation).
overall, it appears that a ranking of programming language provision would  be: c++ matlab python off the cuff comments from a member of the institute of physics asked if  they had any insight into the provision of programming languages in a wider  group of physics departments suggest these results aren't unique to the russell  group departments (but also that python, having been off the radar, is  increasing rapidly).
some supporting arguments for that position are here (10 minute video) and here (interesting blog article).
we've seen that i believe python is easy to learn, and that at least two uk departments have built their courses around it.
excel and ms friends are common (but so is the influenza, and neither can  do big data processing tasks).
we'll get back to that ... and russell: a small  number of identified universities which we might a priori assume to have high  quality courses).
ken caldeira on sunday 17 october, 2010:we do most of our post-processing of climate model output in python using cdat, but i would never dream to write a model in it.
which leaves us with matlab.
so if you really want idl, but wanted  "my new toolset", (if we wrote it properly) you could call it from  idl anyway.
so, i'm still convinced that that the community should migrate away from  idl to python, and the way to do that is to build a library that can be called  from idl, but is in native python.
that person had not heard of idl (which is mostly used in  research departments, and then mainly in  astrophysics/solar-terrestrial/astronomy and atmospheric physics).
categories: python jon blower on wednesday 13 october, 2010:i might surprise you with agreeing with most of this, and in fact i'm planning to use python (probably with cdat unless someone can give me a better idea) to deliver my upcoming msc module on data manipulation and visualization.
southampton, cardiff and nottingham have focused particularly on concentrating  on one language that is integrated into wider course material (matlab in  nottingham, and python in cardiff and sheffield).
what should an organisation like ourselves, or even the met office for example, consider for their main "toolset" development language?
nb: i will update this entry over time if folk give me useful feedback.
clear climate code are using python of course!
the context is clearly that we have data producers and  data consumers - who are not the same communities - and
the idl community of use is rather limited in comparison to python - and, you can call python from idl anyway.
if we look at this, we see that the common scripting languages (perl and python) are not that commonly used by our community (but active python usage is more prevalent than perl and we can ignore tcl/tk).
the  motivation for that has been my contention that python is easy to learn (particularly on one's own using a book  supplemented by the web) - and that's important when we are mostly hiring  scientists who we want to code, not software engineers to do science, the python syntax is conducive to writing "easier to maintain"  code (although obviously it's possible to write obscure code in python, the  syntax, at least, promotes easier-to-read code).
admin login this longer piece summarises my thinking as to what language folks like ourselves should use to develop new data processing (including manipulation and visualisation) tools.
discussion at this point we need to focus down to some contenders.
folk moving from idl to python, and some pretty coherent analyses of why one might use python in comparison to idl (e.g.here)
i might even rest happier about many of the results in the literature.
comments presently read-only.
what about idl then?
what should an  organisation like ourselves, or even the met office for example, consider for  their main "toolset" development language?
there has been a move away from fortran as the language of choice to other languages such as c++ and python.
:) jon blower on thursday 14 october, 2010:david - good point about jython.
(many of those folks are going to have been physicists, which was why i started by looking at what physics courses have been up to.)
oxford, on the other hand, is a notable exception where a wide number of languages are introduced in years 1 and 2.
(we  asked about some other languages too, but these are the main responses.)
see also my article in nature today http://www.nature.com/news/2010/101013/full/467753a.html which doesn't mention python for reasons of space.
atom:headlines, full categories: climate, environment, curation, badc, ...more.
we surveyed our users and asked them about their proficiency with a  variety of programming languages/packages: the basic results are depicted in  this bar chart: the results are from around 280 responses (red means: geek level; orange:
well, yes, it's relatively straightforward, but  it's not a great language for maintaining code in, and it's commercial (and not  cheap!).
(gdal and its bindings are wonderful if your rasters are 2d. i'm admittedly behind on cdat raster compatibility.)
context: user surveys (this section is based on material collected and analysed by my colleague:  graham parton.)
oxford, on the other hand, is a notable  exception where a wide number of languages are introduced in years 1 and 2.
the bottom line is that i think there are two players:  python and matlab with and r and idl as also rans, and that for me, python is  the clear winner - especially since with the right kind of library structure,  users can mix and match between r, python and idl.
david jones on thursday 14 october, 2010:obviously we (ccf) approve of your stance on python.
well, clearly it's useful, and clearly folks will use  it for a long time to come.
physics: graduates who are more likely to go under the hood ...
i'll then report on a few experiences in the badc, before summarising with my conclusions - which of course are both overtly subjective and come with considerable input bias.
it's too verbose, it requires too much "expertise", and it's a nightmare to maintain.
in principle that means staff should be more flexible in what they can
most departments reported using a wide range of programming  languages/packages (e.g fortran, c++, idl, matlab) depending on what was the  predominant processing package in the research group/field, e.g. idl for  astronomy, c++ for particle physics.
context: university undergraduate teaching obviously most of the folks who use our data do so in postgraduate or  other environments, and at least for ncas, most of those will have idl in the  vicinity, if not on their desktop.
green: taught, orange: accepted but not  taught, p: project work, 1/2/3: year in which it is taught, if known).
but what about the wider  community?
given the importance of statistics to our field, and the fact that r is in relatively common usage and has anoutlet for publishing code we should also keep it in the mix.
green: taught, orange: accepted but not taught, p: project work, 1/2/3: year in which it is taught, if known).
southampton, cardiff and nottingham have focused particularly on concentrating on one language that is integrated into wider course material (matlab in nottingham, and python in cardiff and sheffield).
my feeling is that the big advantage of python over matlab is the integration with all the other bits and pieces one wants as soon as a workflow gets sufficiently interesting (guis, databases, xml parsers, other people's libraries etc), and the easy extensibility.
i actually used jython for the first version of our ncwms software, but abandoned it in favour of "pure java" because of the difficulty of refactoring and maintaining a largish python codebase (too many runtime errors!).
as a proxy for entry level into our community, we (ok, graham parton  again), did a quick survey as to what programming is taught in russell group  universities (why physics, why russel group?
i had thought that project was moribund but checking back it seems like it's active again.
in principle that means staff should be more flexible in what they can do (both in terms of their day jobs and in backing up others) without learning a plethora of languages.
however, idl still only hits half the audience!!!
if we split all the responses into those from our "target"  community (users who claimed to be atmospheric or climate related - roughly  half of the total responses): we find broadly similar results, except that idl is marginally stronger  than matlab (at least as far as the usage goes - even if there is still more  folk who are aware of matlab).
grape moles, metafor inspire
however, what skills do they enter with?
however, if using r libraries is important, we can do that  from python ... and it's not a natural language for complex workflow  development, so we'll park r in the "useful addendum to python"  corner ...
happy to use it; yellow: use it on and off; green: aware of, but not used  lately: and blues : complete mystery or no response).
however, most ordinary idl users are likely to be able to read python very easily - even if they have never seen python before: for a time we used to give candidates for jobs at the badc a bit of python code and ask them to explain what it did, and we only did that to folk whohadn't seen python before.
(that said, for a class of problems, we have used, and continue to use, r in production services at the badc.)
imperial is reviewing programming provision and there is a strong lobby for matlab within their department.
python helps with the latter too: with documentation utilities vastly superior to anything available in the idl (and i suspect, matlab) space.
jon blower on thursday 14 october, 2010:david - good point about jython.
(we asked about some other languages too, but these are the main responses.)
introduction for nearly a decade now, the badc has been mainly a python shop, even as  much of, but not all, the nerc climate community has been exploiting idl.
the other thing that i believe to be a killer reason for using python: proper support for unit testing: if we could inculcate testing into the scientific development workflow, i, for one, believe a lot of time would be saved in scientific coding.
(that said, for a class of problems, we have used, and continue to  use, r in production services at the badc.)
the big packages (matlab, idl, r) rank in that order (but note that r is  more commonly used than python).
physics: graduates who are more  likely to go under the hood ...
well, yes, it's relatively straightforward, but it's not a great language for maintaining code in, and it's commercial (and not cheap!).
if we look at this, we see that the common scripting languages (perl and python) are not that commonly used  by our community (but active python usage is more prevalent than perl and we  can ignore tcl/tk).
jon blower on thursday 14 october, 2010:sean - yes, i guess i was thinking of python library limitations in the ogc space, rather than gis per se.
in truth, i don't know that much about  matlab.
we had intended it as a discriminator of folks ability to interpret something they hadn't seen before, but in most cases they just "got it right".
(common feedback on why matlab was chosen indicated that one of the  drivers was the relatively pain-free path from programming to getting decent  graphics at the other end.)
java: it's not really a contender, it's simply not suitable as a general purpose language in our environment.
so, after all that: the choice is (still)
these three universities have  focused on one language to avoid confusion with others, focusing on aiming for  fluency in programming that can be later translated to other languages as  opposed to exposure to many languages.
some of those scientists are very familiar with idl - but my  gut feeling is that those are also the very same ones, that, if they spent an  afternoon familiarising themselves with python, would find they can go faster  and further with python.
we obviously needed something a bit more complicated (in which case the more obscure python syntax might have got in the way), but as it was, what we learned from that exercise was mostly that "python is easy to read"!
do (both in terms of their day jobs and in backing up others) without learning  a plethora of languages.
i'll then report on a few experiences in the badc, before summarising with  my conclusions - which of course are both overtly subjective and come with  considerable input bias.
this longer piece summarises my thinking as to what language folks like  ourselves should use to develop new data processing (including manipulation and  visualisation) tools.
java: it's not really a  contender, it's simply not suitable as a general purpose language in our  environment.
we obviously needed something a bit more complicated  (in which case the more obscure python syntax might have got in the way), but  as it was, what we learned from that exercise was mostly that "python is  easy to read"!
what about writing idl?
at this point we need to focus down to some contenders.
a number of computer science departments are now teaching python as their  first programming language as well (s. easterbrook in private conversation).
the context is clearly that we have data producers and data consumers - who are not the same communities - and both of whom ideally would use the same toolset.
there are also lots of web pages which provide information for folk  migrating to python from idl (example).
python can be deployed at all levels: from interaction with the system,  building workflow, scientific processing and visualisation, and for web  services (both backend services and front end guis via tools like django and  pylons).
python helps with the  latter too: with documentation utilities vastly superior to anything available  in the idl (and i suspect, matlab) space.
so if you really want idl, but wanted "my new toolset", (if we wrote it properly) you could call it from idl anyway.
ideally of course, one wants to develop toolsets that the community will start to own themselves, so that the ongoing maintenance and development doesn't become an unwelcome burden (even as we might invest ourselves in ongoing support, we want that support to be manageable, and even better, we might want collaborators to take some of that on too)!
you can use r from python.
so, i'm still convinced that that the community should migrate away from idl to python, and the way to do that is to build a library that can be called from idl, but is in native python.
we surveyed our users and asked them about their proficiency with a variety of programming languages/packages: the basic results are depicted in this bar chart: the results are from around 280 responses (red means: geek level; orange: happy to use it; yellow: use it on and off; green: aware of, but not used lately: and blues : complete mystery or no response).
the idl community of use is rather limited in comparison to python -  and, you can call python from idl anyway.
(many of those folks are going to have been  physicists, which was why i started by looking at what physics courses have  been up to.)
some of those scientists are very familiar with idl - but my gut feeling is that those are also the very same ones, that, if they spent an afternoon familiarising themselves with python, would find they can go faster and further with python.
i'm another dedicated pythonista - i've been using it for quite some time now, and it's my go-to tool for tackling virtually any programming challenge), mainly because it's so simple to bang out a cohesive, well-structured program in a short period of time.
what we find is that most of them offer programming courses to some level  as an introduction to computational physics.
probably more importantly for my thesis, is that the well regarded software  carpentry course which provides an introduction to things working scientists  most need to know uses python.
as a proxy for entry level into our community, we (ok, graham parton again), did a quick survey as to what programming is taught in russell group universities (why physics, why russel group?
imperial is reviewing programming provision and there is a strong lobby for  matlab within their department.
given the importance of statistics to our field, and the fact that r is in  relatively common usage and has anoutlet for publishing code we should also  keep it in the mix.
you can even use the ncar graphics library from python (viapyngl even if some are curmudgeonly about the interface).
the results that we could get in an afternoon are here: (key: red: integrated courses.
the motivation for that has been my contention that python is easy to learn (particularly on one's own using a book supplemented by the web) - and that's important when we are mostly hiring scientists who we want to code, not software engineers to do science, the python syntax is conducive to writing "easier to maintain" code (although obviously it's possible to write obscure code in python, the syntax, at least, promotes easier-to-read code).
the big packages (matlab, idl, r) rank in that order (but note that r is more commonly used than python).
of the high level programming languages (fortran, java, c and friends), fortran is the team leader (as you might expect for our community).
if we split all the responses into those from our "target" community (users who claimed to be atmospheric or climate related - roughly half of the total responses): we find broadly similar results, except that idl is marginally stronger than matlab (at least as far as the usage goes - even if there is still more folk who are aware of matlab).
but what about the wider community?
of the high level programming languages (fortran, java, c and friends),  fortran is the team leader (as you might expect for our community).
the choice is python
(common feedback on why matlab was chosen indicated that one of the drivers was the relatively pain-free path from programming to getting decent graphics at the other end.)
we've seen that i believe python is easy to learn, and that at least two  uk departments have built their courses around it.
my suspicion is that those that don't look under the hood wont  care, provided it's easy to use, and well documented.
however, most ordinary idl users are likely to be  able to read python very easily - even if they have never seen python before:
as scientists they need to be able to unpick the  internals and be sure they trust them, but they'll also be lazy; once  trusted,tools need to be simultaneously easy and extensible.
for nearly a decade now, the badc has been mainly a python shop, even as much of, but not all, the nerc climate community has been exploiting idl.
grads has usage comparable to r and python, but ferret isn't much in use in  our community.
philip kershaw on thursday 14 october, 2010:i have to pick up on some of those points raised having written lots of idl and python.
there is clearly a lot of momentum:
there has been a move away from  fortran as the language of choice to other languages such as c++ and python.
i might even rest happier about many of the results  in the literature.
i appreciate that there may be some resistance to this, particularly from those scientists who like to look under the hood and understand and extend library functions.
of course, one might make arguments like those about other languages, and folks do, but mostly i get arguments about two particular languages: idl- which is obviously familiar to many (but far from all) of both our data suppliers and consumers, and java - particularly given the unidata toolsets, and because some of my software engineers complain about various (arcane) aspects of python.
probably more importantly for my thesis, is that the well regarded software carpentry course which provides an introduction to things working scientists most need to know uses python.
we had intended it as a discriminator of folks ability  to interpret something they hadn't seen before, but in most cases they just  "got it right".
for a time we used to give candidates for jobs at the badc a bit of python code  and ask them to explain what it did, and we only did that to folk whohadn't seen python before.
in the remainder of this piece, i introduce some context: some results  from a recent user survey at the badc, a quick (and incomplete) survey of what  is taught in a few uk university physics departments - with a few adhoc and  non-attributable comments from someone involved with a much wider group of uk  physics departments.
sean gillies on thursday 14 october, 2010:"try refactoring a medium to large python project and ..." daniel rothenberg on thursday 14 october, 2010:another dimension to this discussion should address the issue of what sorts of technologies/tools we should be teaching to students and up-and-coming scientists.
python can be deployed at all levels: from interaction with the system, building workflow, scientific processing and visualisation, and for web services (both backend services and front end guis via tools like django and pylons).
these three universities have focused on one language to avoid confusion with others, focusing on aiming for fluency in programming that can be later translated to other languages as opposed to exposure to many languages.
(this section is based on material collected and analysed by my colleague: graham parton.)
most departments reported using a wide range of programming languages/packages (e.g fortran, c++, idl, matlab) depending on what was the predominant processing package in the research group/field, e.g. idl for astronomy, c++ for particle physics.
what we find is that most of them offer programming courses to some level as an introduction to computational physics.
ideally of course,  one wants to develop toolsets that the community will start to own themselves,  so that the ongoing maintenance and development doesn't become an unwelcome  burden (even as we might invest ourselves in ongoing support, we want that  support to be manageable, and even better, we might want collaborators to take  some of that on too)!
grads has usage comparable to r and python, but ferret isn't much in use in our community.