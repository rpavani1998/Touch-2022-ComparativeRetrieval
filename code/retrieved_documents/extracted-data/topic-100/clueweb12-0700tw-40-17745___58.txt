xml is well-defined by the w3c. it would make sense to have similarly well-defined, carefully specified meta-languages for cl languages.
and out there it will exist not as characters, but as mere 1′s and 0′s, a jumble of dits and dots, charged and uncharged particles.
file_a.txt attrib +readonly +archive file_a.txt some applications, especially on unix, make a distinction between single-character keys and multi-character keys (“long options”), with a single-dash sigil "-"indicating the beginning of a single-character key, and a double dash "--"sigil indicating the beginning of a multi-character key.
you can see it on your screen.
we want to hide the plain text of our message byencrypting and decrypting it — basically, by keeping the algorithms for encoding and decoding secret and private.
rest markup is context-sensitive, or maybe i should say whitespace sensitive.
we have been warned for years, by everyone from the government to our own doctors, about the dangers of junk food diets, of which the chocoholic’s diet is an example.
which means that you always need to use “rb” and “wb”, regardless of the kind of object that you are pickling.
a file that has been encoded using utf-16 is an ordered sequence of 2-byte chunks.
rest rejected irregular indentation in a paragraph in the previous example, but now rest is accepting irregular indentation and acting as if line b was an indented paragraph.
suppose the customer wants the system to support some new functionality.
so, if you are such a programmer — this tutorial is for you.
i have had the situation where a module grew to the point where it needed to be split into two modules.
in short, as a methodology the use case approach is too mushy to provide any real guidance in gathering requirements.
suppose we create an instance of c and invoke its foo() method.
which reminds us that, in a different context, even speech itself — language — may be regarded as a form of encoding.
"http://docs.python.org/library/webbrowser.html" webbrowser.open(url,new=new) # open an html file on my own (windows) computer url = "file://x:/miscdev/language_links.html" webbrowser.open(url,
basically, that function specifies what the gui will do when the button is clicked.
for instance, we can describe the process of a member borrowing a book and the process of returning it, the process of reserving a book and the process of notifying a member when a reserved book becomes available for checkout, the process of sending out overdue notices, and so on.
but i’ve discovered a few major gotchas.
and we can always throw a red herring into the mix — assigment statements like a = b = 0 suggest that python supports chained assignments, and that assignment statements return values.
there is, then, no such thing as the unicode encoding system or method.
when i make the changes, my editor automatically creates a backup file: projectx/projectx_constants.py.bak.
there are three types of command line argument: positional arguments, named arguments, and flags.
but suppose you need to create a function that is going to be used only once — called fromonly one place in your application.
my example problem will be “miss grant’s controller”, which is based on an example problem from the introduction to martin fowler’s new (2010) bookdomain-specific languages.
earlier, i said “when you are working on a subversion project, there are actually two directories that you are working with… the repository and the working copy.”
in short, as descriptions of the system-to-be, use cases belong in step 2 — describing the proposed solution to the problem.
if we produce just the use cases without first creating the description of the problem domain, then the descriptions of the use cases are fundamentally flawed by using undefined terms.
why encode something in unicode?
neither, of course, is responsible for any mistakes that i might have made in presenting their ideas, or for cases in which my opinion or terminology differs from theirs.
i’m thinking of books likebeautiful code and dreaming in code.
nobody really knows what a use case description looks like.
many organizations see uca as a silver bullet for their biggest requirements gathering problem… which, incidently, seems often not to behow do you gather requirements effectively?, but what do you say when somebody asks you what your official requirements gathering methodology is?
[or pvcs, or other lock-based vcss?
in this paper, i will present a small argument-by-example for jsd event-oriented specifications.
modules can also be written to.
or rather i should say, it supports a limited form of multiple inheritance.
superedit (a christmas story.doc) (clement moore) … or named arguments like this.
so it seems worth-while to talk a bit more about the bom.
well, situations in which we need a simple one-off function: a function that is going to be used only once.
the communication between “normal” modules and globals modules is a two-way street.
one potentially attractive view, is that the concerns of computer science are bounded by the interface between the computer and the world outside it….
for computer professionals, it is tempting to blame such problems on the clients.
the folders are hidden folders, so depending on the windows settings you may not see them, but they are there.
this means that — as far as an application is concerned — the process of using command-line arguments always looks like this: step 2 — specifying the cl semantics — is the step in which the application specifies (for example) what named arguments and flags it accepts, and which are required.
on the other hand, we may wish to say that our plain text looks like this: 26 upper-case letters, 26 lower-case letters, 10 numeric digits, the space character, and a dozen types of punctuation marks: period, comma, double-quote, left parenthesis, right parenthesis, and so on.
they choose to make it a rule that a class can inherit from as manyfully abstract classes it wants, but can inherit from only onepartially abstract class.
well, first of all, you don’t need to give the function a name.
i’m pretty sure that if i work with rest long enough — and read allof the documentation — i will eventually grok it.
i get confused when i read this in the rest documentation: a paragraph is a chunk of text separated from other chunks by one or more blank lines.
use cases are enjoying their current popularity because the three amigos bundled them into uml along with other, truly object-oriented, techniques.
but with python3′s new strict separation of strings and bytes, it broke.
to put it bluntly, the requirements analyst’s first job is tostudy and understand the problem, not to jump right in and start proposing a solution.
one of the subversion tutorials that i found said that you must checkout your workingcopy from the main repository, because you can’t do a checkin back to the main repository if you hadn’t checked it out.
in those use cases, we don’t care about what the lambdareturns, we care about what it does.
i hadn’t ever heard of this as a programming technique.
each function will be used only once, by the particular button to which it is being supplied.
[italics mine -- steve ferg] – michael jackson, “the real world” rephrasing this point in terms of use cases: it is almost impossible for programmers to build correct software if they are given use case information but no information about the problem domain and how their program relates to what happens there.
in creating the domain model we, in a sense, construct a dictionary of words.
a “clean copy” is a copy of only the source-code files, without the .svn directory.
there have been anumber of proposals for a syntax for “multi-line lambda”, and so on.
in some conventions: i think that the best way to think of a command-line, and its arguments, is as a statement in a command-line (cl) programming language, where each application defines its own cl language.
as i write this, i realize that i don’t know how to tell pycharm to close a file without also writing it to disk.
and i ran across a problem pickling and unpickling.
if we succumb to its charms, we eat an unbalanced diet.
hopefully, by now, this myth is dying.
[note that this applies only if you are using an email client such as  thunderbird, outlook, outlook express, etc.
big-endian hardward does the reverse.
big-endian numbers are familiar.
for example, the “rename” application might accept both this rename -o file_a.txt -n file_b.txt and this rename --oldname file_a.txt --newname file_b.txt
comments (2) the best computer keyboards ever made (even when compared to the original ibm model m keyboards) were the northgate omnikey keyboards.
you hear the sound of my words and decode it back into ideas.
the upside of doing step 2 is that it enables a smart cl parsing module automatically to generate user documentation for the cl language, and to dump that documentation to the screen when it finds a syntactic or semantic error in the command line, or when the command line is a request (
normally, functions are created for one of two purposes: (a) to reduce code duplication, or (b) to modularize code.
the statement assigns a value to x.
so we can say that one of the most frequent uses of lambda is in coding “callbacks” to gui frameworks such as tkinter and wxpython.
a few concepts that might be useful when you’re tackling process issues… when i was working in quality assurance and concentrating on process improvement, we identified six factors affecting process effectiveness.
you might or might not want to have done that.
but given the popularity of the buzzword “object-oriented”, i think it is important to point out that the object-oriented-ness of use cases is a myth.
most of the problems with use cases that we’ve discussed, like the problems with chocolate, come not from the thing itself, but from its improper or excessive use.
in the slideshow, you can see the top of the keyboard sitting on a little green box that lifts it about 2.75 inches (7 cm).
the take-away here is that you need to pay special attention to backing up your email files.
this is a good thing.
a bout of online research convinced me that we really need more ergonomic keyboards, so i went shopping for one.
that’s a lot of characters.
begins something like this lambda is a tool for building callback handlers.
so now i don’t use star imports anymore.
which foo() should java invoke?
the technique is extremely simple.
but i’m doing a bit of shouting and arm-waving here because i think that somewhere there is probably at least one person for whom this post might be useful.
in embedded systems, the system’s reliance on properties of the surrounding real world are very real, and can often be safety-critical.
assuming that you have some project files that you want to put into subversion, you are told to: in that order.
so the backup utility didn’t see the appdata directory, and didn’t back it up.
so i can’t really say that mike and i disagree very much.
the subversion docs describe the update command this way: when working on a project with a team, you’ll want to update your working copy to receive any changes other developers on the project have made since your last update.
the connection between the quality of the requirements-gathering for a system, and the quality of the system that is eventually developed, seems to be invisible to most organizationsregardless of whatever particular requirements-gathering methodology the organization is officially practicing.
[1] some lambda tutorials: [2] in some programming languages, such as c, an assignment statement returns the assigned value.
or at least, the first cut at such a list.
you can invent your own from scratch if you wish, but life is a lot easier if you at least follow some standard conventions when you do.
or a single character in utf-16 encoding?
but this is the basics.
i like to use the name “mem” (in my mind, short for “globalmemory”) for this class, but of course you can use any name you prefer.
you add in characters for the funny squiggly/accented/umlauted characters in spanish, french and german.
1776 is a “big endian” number because the “biggest” (most significant) digit is stored in the leftmost position.
(i think that one of my email files  must have been corrupt, and when i compacted it, the compaction process wiped  out messages that should not have been wiped out.)
if we supplied the “rename” application with two positional arguments, like this
superedit "a christmas story.doc" "clement moore" support of quoted values means that command-line parsers must be more sophisticated… just splitting the command line on whitespace won’t do the job.
mike is talking about strategy 3 — what we might call anarguments containerpattern.
so i must not be moving,” and would not allow the pilot to engage reverse thrust.
the mappings between natural languages are too loose to guarantee that a piece of information can make the round-trip without losing something in translation.
if we used a little-endian representation, the number 1776 would be represented as 6771.
i use thunderbird (on windows vista) as my email client.
we’re going to have a problem if we code this myprog -v
according towikipedia, the terms little-endian and big-endian were introduced in 1980 by danny cohen in a paper called“on holy wars and a plea for peace”.
note that it imports mem and also imports the subordinate module, minion.
note that line 2 wraps around and there is no horizontal scrollbar.
with python generators, it is easy to do.
thanks to my co-workers mark thomas and jason herman for reviewing an earlier draft of this post.
how can you tell if you’ve identified all of the use cases for the system?
but in order to keep things simple, i will talk as if a project is just a directory.
then you can use it wherever you like.
it is not possible for an ordinary human to understand all of the ways that a grab-bag of 50, or 100, or 200 use cases are inter-related.
hammers don’t work well when you’re trying to drive a screw, nor when you need to cut a plank.
so what is a subversion workingcopy directory?
around the edges of the chip socket, carefully cut off any remaining prongs.
python’soptparse, for example, “supports only the most common command-line syntax and semantics conventionally used under unix.”
def gettotalerrorscount(self): return self.stupiderrorscount + self.sillyerrorscount # instantiate the mem class to create a global mem object mem =
there are lots more complicated details of course.
the tools/scripts directory contained two scripts (crlf.py and lfcr.py) with illustrative examples.
different commands seemed to be doing the same thing, and the tutorials used a lot of terms that were never defined or explained: “versioned”, “unversioned”, “under version control”, and so on.
it discourages the requirements analyst from examining the problem domain, by focusing attention only on what happens at the system boundary.
[sourcecode language="python" wraplines="false" collapse="false"] your source code goes here [/sourcecode]
note that the encoding is the unicode utf-16 (two-byte) encoding, not utf-8 (one-byte).that’s an important aspect of the problem, as you will see.
i especially like this passage in his post.
suppose you want to “pickle” an object — dump it to a pickle file for persistent storage.
so if you’re not backing up your  email files, take a look atfive ways to keep your emails backed up (and read  the comments, which are useful) or google something like“email  backup”.
i also found that once i had the chip lifted up, but not completely free of the motherboard, a needle-nose pliers was perfect for the final removal.
as ben kovitz points out, writing software requirements by writing use cases as they come to mind, is the requirements-writing equivalent of programming by hacking around.
how to remove the programmable chip from a non-evolution programmable keyboard for other programmable northgate keyboard models (models ending in a p for “programmable”) — 101p, 102p, ultra tp and ultra p — you can use basically the same procedure as described above for the evolution.
unicode unicode was devised to be a system capable of storing encoded representations of every plain-text character of every human language that has ever existed.
first, we start with the idea of a piece of information — a message — that exists in a representation that is understandable (perspicuous) to a human being.
on windows and ms-dos this is traditionally a colon “:”, like this.
and because you’re in a funny mood, instead of calling the numeric identifiers ”numeric identifiers”, you call them “code points”.
unfortunately, the situation is muddled by the fact that in python an expression can also be a statement.
in many of the examples that we’ve seen, parsing the command line is as simple as splitting it on whitespace.
northgate evolution keyboard what i really wanted, of course, was an ergonomic version of the omnikey ultra.
basically, the rule says that you can inherit from (extend) as many classes as you want, but if you do, onlyone of those classes can contain concrete (implemented) methods.
one technique is to use whitespace to separate argument values from keys.
notes i’d like to recommend eli bendersky’s recent post on the bytes/str dichotomy in python 3, which prodded me — finally — to put these thoughts into writing.
steve ferg ] i know there is “commit” which puts my changes into the respository, but i still have the files checked out under my working folder.
one that i stumbled across recently and really found helpful was mike driscoll’sdiscussion of lambda on the mouse vs python blog.
jim davies, bill roscoe, jim woodcock), palgrave, 2000 [kovitz, 1999] benjamin l. kovitz, practical software requirements , 1999leave a comment rss - posts theme: rubric.
turn the keyboard over, so that it is face up and you are looking at the keys.
when you pickle an object, you do two things.
in the read-ahead technique, a record is read from the input file immediately after the file is opened, and then a second “read” statement is executed after each record is processed.
the very first example that you see in most tutorials (this one included) shows how to write a lambda to return, say, the square root of x.
right now, i think we have two loosely-defined cl meta-languages, which i shall refer to as traditionally (see the wikipedia article on command line argument)
you’ve defined both a utf-8 format and a utf-16 format.
an export will be about half the size of a checkout due to the absence of the.svn folders that duplicate all content.
what’s wrong with chocolate is that it is delicious.
note that (1) first, a normal chunk of relatively short lines of python code.
he is asking himself “what is an encoding?”
results in: this is a paragraph.
in this case, fortunately, the ambiguities were so glaring that they could not be ignored.
+= 1 ... def dosomethingelse(): if mem.counter > 0: ...
this is perfectly understandable.
these are all written encodings for the spoken word.
relational database concepts data modeling (entity-relationship modeling) data-driven program design software requirements and specifications object-oriented programming domain-driven design event-driven programming data structures and algorithms process modeling, entity life-history modeling popular software design methods/tools/ideas software development management programming languages added january 5, 2010 propositional logic (to help with those tricky if-then-else tests) sets and set theory of possible interest to those interested in systems analysis methodologies.
here’s where joel spolsky’s (joel on software) excellent post the absolute minimum every software developer absolutely, positively must know about unicode and character sets (no excuses!) comes in useful.
for a follow-up post, see unicode for dummies – just use utf-8.comments (12)
practising programmers who try to adhere to this doctrine will find themselves devoting their skills to tasks that seem at best arbitrary and at worst senseless.
and this is also true of the third technique for distinguishing keys from argument values (see the next section).
guidohas rejected these proposals and blogged about some of his thinking about “pythonicity” and language features as a user interface.
now let’s try putting double newlines after line b, like this: line a line b line c
if you wish, you can initialize the global variables when you create the class.
the takeaway lesson for me was that using star imports will cripple a static code analyzer.
so, although we could code (say) def __init__(self, parent): """constructor""" frame =
produces 5 c b acomments (13)
it can be “anonymous”.
that is why, for instance, we can’t use one natural language (russian, chinese, french, navaho) as an encoding for another natural language (english, hindi, swahili).
recently i stumbled across norman matloff’s python tutorial in which he recommends doing exactly the same thing, and it dawned on me that this technique constitutes a truly idiomatic python design pattern.
on input, if newline is none, universal newlines mode is enabled.
if we know that our plain-text alphabet must be very large, then we know that we must find — or devise — a technology capable of storing a large number of encoded characters.
then you have — as a side-effect of the addition of that statement — converted x (within the scope of the function) from a global to a local.
so there is a simple rule for coding english text (i.e. text that uses only or mostly ascii characters) — always use utf-8.
or you could create a container c of some sort and 3.
sort of like this: rest is built on three fundamental concepts: paragraph, indentation, and whitespace.
superedit a christmas story.doc clement moore what we need is this.
python just assumed it by default and did it.
the thing that really makes keys that begin with a single dash different from keys that begin with a double dash is not that they are one character long, but that their length is fixed and known.
it accepted arguments like this, where the dash is the sigil that introduces the key of a named argument.
rename -ofile_a.txt -nfile_b.txt suppose that an application follows the convention that a single-dash sigil signals the start of a single-character flag argument.
the result is a keyboard that is shaped like a v rather than like a straight unbroken line.
i think a “side cutter” pliers would be too big for this job.
omnikey ultra keyboard i used only northgate omnikey ultras for years, lugging them from job to job like an itinerant medieval carpenter carrying his tools with him from town to town, and usingspecial keyboard plug adapters when keyboard plug design evolved first to ps/2 and then to usb.
… here is the output produced by a test run.
it smacked of sneaking global variables in through the back door, and of course everybody knows that globals are always bad.
the cables are short, and virtually impossible to re-attach if you pull them loose.
but that wasn’t really what the post was about.
as a simple example, we might want to start a text editor and also tell it the name of a file that it should open, like this superedit a_filename.txt in this example, “superedit” is the name of the application, and “a_filename.txt” is a command line argument: in this case, the name of a file.
but i was young and foolish, and my scripts were short.
well, consider this snippet of code that uses lambda to define the behavior of buttons in a tkinter gui interface.
in my opinion this is much easier to understand.”
you’ve just discovered sumerian cuneiform characters from the middle east and sanskit characters from india.
so i had no backup of the deleted messages.
clients and developers tend to think that their primary job on the project is to describe the “requirements” for the system (that is, to describe what the system is supposed to do, the solution to the problem), not to describe the problem or the problem domain.
"nameoffiletobeconverted" filecontents = open(filename,"r").read() f = open(filename,"w", newline="\n") f.write(filecontents) f.close() comments (7)comments (7)
in a comment on my earlier post a globals class pattern for python, mike müller wrote “no need for globals.
this technique produces a program structure like this: open input file f read a record from f # get first while not endoffile on f: process the record read the next record from f # get next close f i won’t try to explain when or why the read-ahead technique is preferable to the standard loop.
basically, regardless of the kind of object that you are pickling (even a string object), the object will be converted to a bytes representation and pickled as a byte stream.
and if it doesn’t, but contains star imports, go out and look for all of the modules that something_or_other star imports, and then analyze them.
this has nothing to do with computers.
suppose you have a number of things — x, y, and z — that you want to make available to many functions in a module.
these terms are derived from “big end in” and “little end in.”
by now, you would expect that we would have recognized that fact, and have learned to deal with it.
what’s wrong with chocolate?
because the use case approach is not object-oriented, it is completely compatible with non-object oriented methods.
but consider this a heads-up.
if we feed these lines to greed, we get: line a line b line c no surprises there.
instead of functioning like a true class, it functions as a simple container object.
the first point is that no information can be lost during encoding or decoding.
before long i had a monster on my hands, and i needed a tool that would look through all of the scripts and programs in the system and do (at least) some basic error checking.
a lot of people would like to know the answer to that one.
so now we do a little terminology substitution: abstract class = a class that contains at least one abstract method, and can also contain concrete (implemented) methods interface =
you can recover deleted email messages … but not after the email file has been compacted.
q: then why does java have the concept of an interface, as well as the concept of an abstract class?
if the workingcopy directory does not exist on your pc, it is created.
prior to python 3, the accepted way to do this was to read data from the file in binary mode, convert the newline characters in the data, and then write the data out again in binary mode.
you write the bom, and you write out your unicode strings.
for some developers, this question means simply why is the python lambda syntax so weird?
you need different tools for different jobs.
and that has interesting consequences.
there is no pre-built alternate shortcut configuration for windows-like behavior.
in actual practice, most utf-8 files do not include a bom.
you read the first two bytes.
the one that i prefer is the “import x as y” feature.
under the circumstances, the syntax for lambda had to be shoe-horned into the established python syntax in a “pythonic” way.
that’s where lambda is useful.
remember that a class can be an abstract class without being a fully abstract class.
first you “reboot” the keyboard into non-progamming mode, then you remove the chip.
so here they are, in no particular order.
second, on most windows editors (and things like netbeans and eclipse, too) if you try to close a file that has unsaved changes, the editor will warn you and ask you what you want to do.
they were designed so that certain key combinations (e.g. pressing the left shift key four times) puts the keyboard (that is, the programmable chip) into programming mode.
in most modern languages, the difference between procedures and functions is no longer enshrined in the language syntax.
the customers knew that they wanted the system to generate reports, so the system specification included a use case torun reports .
although there are some general styles that programmers often use when implementing the command-line arguments for their applications, basically every programmer is free to do whatever he (or she) wants.
python, it turns out, is the ideal language for creating executable jsd specifications.
cl languages are like markup languages.
now i’m evaluating different disk backup options.
python has the quirk that if x is a global, and a function only reads x, then within the function, x is global.
suppose we want to invoke a word-processor from the command line.
on your pc, the project’s top-level workingcopy directory has a hidden .svn subdirectory.
which means that recently i started trying to learn subversion.
sometimes this can be handy.
when you view your postas html, what you should see is square brackets around the shortcut tags, not pointy brackets.
a paragraph is a chunk of text separated from other chunks by one or more blank lines.
don’t use “global” at all.
or, just for fun, consider this… a young programmer, fresh out of computer programming school and still wet behind the ears, asks you — tough old seasoned professonal software developer that you are — for suggestions for things that he/she should learn in order to become as tough, as old, as seasoned, and as professional as you.
although the distinction between a procedure and a function has essentially vanished as a language construct, we still often use it when thinking about how a program works.
character code point bit
after 25 years of coding, the joints in my hands and wrists were starting to protest.
but it wasn’t always so obvious.
if newline is any of the other legal values, any'\n' characters written are translated to the given string.
c = chars.next() # get first while c and c ==
but in most cases some other kind of container would do as well as a class.
new=new) i’ve been reading about parsers for command-line arguments lately, for exampleplac.
if you look closely in your working copy, you may see an .svn folder in each folder of your working copy.
this makes perfect sense.
note that the reason an exported folder cannot be updated is that the update command updates the .svn directory of a workingcopy, but an export does not create an .svn directory.
so, for a project named “projectx” the workingcopy directory will be named “projectx”.
def rev(s): return s[::-1] in a comment, michael watkins has noted another possible implementation of the “rev” function.
and i’m just not seeing it.
this is what i came up with.
generators make it easy to convert a sequence into a kind of object that provides both aget next method and anend-of-file mark.
one way that the problem domain can be described is by creating a model .
i thought it might be interesting to compile a list of books in which programmers talk about programming.
as programmers, we think of plain text as being written text.
in fairness, it should be noted that the use case approach is not the culprit here.
[directory] the subversion documentation says this about workingcopy directories: a subversion working copy is an ordinary directory tree on your local system, containing a collection of files.
it would really be helpful if all subversion tutorials would stop using the term “checkin” and replace it with “commit”.
so now it is time to explore those reasons.
here’s another clue: a passage from pragmatic version control using subversion: subversion has a highly efficient network protocol and stores pristine copies of your working files locally, allowing a user to see what changes they’ve made without even contacting the server [where the central repository is stored].
for example, flag concatenation (see below) is possible because the flag keys have a known and fixed length.
it is a reincarnation of the original ibm model m. and keep on clicking… ## updated january 1, 2012comments (13)
i had only one prong left stuck in the motherboard, and i gently twisted it off with the needle-nose pliers.
it must be possible for us to send a message on a round-trip journey — from plain text to encoded text, and then back again from encoded text to plain text — and get back exactly the same plain text that we started with.
what does svn update do? executive summary:
when programmable keyboards go bad
and i often can categorize it as a procedure or a function — “the purpose of f is to do so-and-so” i will say to myself, or “the purpose of f is to calculate and return such-and-such”.
so what happens if we put a double newline after line a?
you might not even realize what you’ve done.
the basic idea is that the fixed-width encodings are very long — ucs-4 and utf-32 are 4 bytes (32 bits) long — long enough to hold the the biggest code value that we will ever need.
rest ignores single newlines, but two or more adjacent newlines (i.e. one or more blank lines) delimit a paragraph.
on windows, the sigil is typically a forward slash: “/”.
and you don’t want to try to commit files if your workingcopy/.svn is out of sync with the central repository.
it is not “module global” as in theglobals class pattern.
but we might also (or instead) want to support single quotes, back ticks, parentheses, or square/wavy/pointy brackets.
the recipient knows that the file is in utf-16 encoding.
you’ve just invented the first, non-computer, half of unicode, theuniversal character set.
when we feed this to greed, it produces roughly this: line a line b line c
here isthe third point.
leave a comment modified to use the wordpress [sourcecode] tag — 2012-01-14 there are a lot of tutorials[1] for python’s lambda out there.
we can talk about options and optionality later, when we look at semantic concepts.
line - indent * one indent char - text * one text char - possible suffix
this paragraph will result in an indented block of text, typically used for quoting other text.
note that — at this point — although project_utils.py has been “added” to the copy of the project in the workingcopy, the main repository still doesn’t know anything about it — project_utils.py hasn’t been added to the central repository on the server.
because, as we all know,global variables are always a bad thing.
i’ve been trying to grok unicode, and it hasn’t been easy.
so, since pyflakes can’t tell whether target_langage is (a) an undefined name or (b) pulled in via some star import, it does not report target_langage as an undefined name.
our only job is to figure out how to make the system do what they tell us they want it to do, in their use case descriptions.
"a b c" s = reverse(s) print(s) except exception as e: print(e) try: print(2) s =
in particular, each directory in your working copy contains a subdirectory named .svn, also known as the working copy’s administrative directory.
normally, if your file contains an undefined name — say target_langage — pyflakes will report it as an error.
if you are using a northgate keyboard with any other system, the programmable chip is basically a bad chip and should be removed.
"--xvf"(note the double dash) indicates a single multi-character flag: “xvf”.
because a subversion workingcopy directory needs a .svn subdirectory in order to work properly, you can have problems with subversion if you accidentally delete the .svn subdirectory.
using these rules means that: lambda: a if some_condition() else b lambda x: ‘big’ if x > 100 else ‘small’ second lambda is confusing because: the specification that a lambda can take only asingle expression raises the question:why?
i suspect that rest by its very nature has a lot of gotchas.
on the upside, though, pycharm provides a lot of support for keyboard shortcut customization, and you can customize the keyboard shortcuts to the behavior that you want.
if that is true, then we need to support delimiters that can enclose values that contain whitespace.
suppose, for example, we say that plain text looks like this: the 26 upper-case letters of the anglo-american alphabet, plus the space and three punctuation symbols: period (full stop), question mark, and dash (hyphen).
the take-away here is that you need to pay special attention to  backing up your email files.
but (and this is the piece that was missing) a workingcopy directory is not an ordinary directory.
unfortunately the programmable chip had software that worked only with windows 98 and earlier.
leader and minion communicate solely by means of the variables set in mem.
the most common use for lambda is to create anonymous procedures for use in gui callbacks.
and specifically, byte-order in computer architectures.
directory is what subversion calls an “administrative directory”.
so: why — as a python programmer — would i need to be able to translate a plain-text message into some encoded representation… say, a unicode representation such as utf-8?
keep on bloggin’!comments (11)
that kind of object can easily be processed using the read-ahead technique.
third, i googled the web looking for the kinds of things that you’d expect: subversion tutorial introduction beginning beginners commands.
as the collabnet documentation (quoted earlier) says: when you do a subversion checkout, every folder and subfolder contains an .svn folder.
a bit of cheering and arm-waving is in order, simply to catch some attention.
lambda event, name=button8.getlabel(): self.onbutton(event, name)
if you google around a bit, you will see a lot of posts from people asking “in python, what’s the difference between an expression and a statement?”
at the time, i felt sort of stupid doing this.
this is a story about encoding and decoding, with a minor subplot involving unicode.
we could deal with this problem by routinely enclosing all filename positional arguments in quotes, but that would be clumsy and laborious.
it will tell you, among many other things, how the famous wwii navaho codetalkers could talk about submarines and dive bombers… despite the fact that there are no navaho words for “submarine” or “dive bomber”.
(jackson says that the error, which could have been catastrophic, fortunately was not.)
there was a time — in the past, when i still used “global” — when i might find myself in a situation where my code was evolving and i needed to create more and more global variables.
in this code snippet, wraplines="false", so lines are not wrapped, but extend indefinitely, and a horizontal scrollbar is available so that you can scroll as far to the right as you need to.
this is what miss grant’s controller looks like when the action structure diagram is translated into python.
carefully lower the top of the keyboard back down onto the lower part.
next, (for reasons that we won’t explore right now) we need to be able to translate a message in a plain-text representation into some other representation.
he runs across examples that use lambda, and wants to understand what he’s seeing.
true; theonlyarg = args[0] else:
in contrast, jackson system development (jsd) specifications focus on the events and the sequence in which the events may occur.
confined to describing behavior at the system boundary, a set of use cases describes neither objects in the real world nor objects inside the computer.
the bottom line is that a python pickle file is (and always has been) a byte stream.
what i need is for it to be spelled out in big block letters.
that is, with the “little” end of 1776 — the “smallest” (least significant) digit — in the leftmost position.
the idea is a simple one.
so with a 16-bit encoding, you’re using twice as much storage as you really need (and, if you use a 32-bit encoding, you’re using four times as much as you need).
x, y: x + y # def sum(x,y): return x + y out =
put the screws back in.
then it might accept arguments like this.
== import sys, types, pprint class vector: """ demo of a class with multiple signatures for the constructor """ def __init__(self, *args, **kwargs): if len(args)
ed eykholt), cambridge university press, 1998 [jackson, 1983] michael jackson, system development, acm press, 1983 [jackson, 1995] michael jackson, software requirements and specifications, addison-wesley, 1995 [jackson, 2000] michael jackson, “the real world” in millennial perspectives in computer science: proceedings of the 1999 oxford-microsoft symposium in honour of sir anthony hoare (ed.
one of the bit combinations won’t identify a character at all, but will be sort of a continuation sign, saying (in essence) this character identifier is continued on the next several bytes.
a software developer is a software handyman.
use cases have the same problems, caused by the same combination of characteristics:
because of my familiarity with this kind of version control, i had a certain “mental model” of how a version control system works.
always the next step is to do a checkout.
just use a globals class.
this is something you should do frequently, because you don’t want the files in your workingcopy/.svn directory to get too far out of sync with the file in the central repository.
and each of the subdirectories of the workingcopy directory (if it has any), and each of their subdirectories (if they have any), and so on, has its own hidden .svn subdirectory.
do not release the esc key until the computer beeps at you, or you have to do something like entering a password.
if i simply create the file in the projectx folder, it will be an “unversioned” file in just the same way that projectx_constants.py.bak is an unversioned file: it will not exist in the projectx/.svn directory, so subversion knows nothing about it.
there are some uml proponents who advocate the requirements-gathering equivalent of a balanced diet: a requirements-gathering methodology in which use cases figure as only one element of a well-rounded diet of requirements-gathering techniques.
yet another lambda tutorial.
the email files were stored in a directory called appdata, and the appdata directory is a “hidden” directory.
produces this output 1 name 'reverse' is not defined 2  3 'str' object has no attribute 'reverse' 4 'str' object has no attribute 'reversed' fortunately, the solution is not too difficult.
some applications use multiple sigils.
pass x, y, and z as individual arguments 2.
"a b c" s.reverse() print(s) except exception as e: print(e) try: print(4) s =
most importantly, use cases can be an effective tool when they are developed in a disciplined manner, as part of a methodology that first creates a well-defined domain model.
i, and future generations of subversion newbies, will thank you for it.
consumed in moderation, as part of a well-rounded diet, chocolate adds variety and pleasure to the diet, and in some cases may provided needed calories.
so for now, let’s just say that there are some situations in which the standard loop is the right tool for the job, and there are other situations in which read-ahead is the right tool for the job.
an important feature of any useful requirements-gathering methodology is that it provides asystematic approach to identifying all of the system requirements.
you will find a way for computers to handle your ucs.
which brings us to unicode.
let’s start with these lines.
the key to what will work is the new “newline” argument for the built-in file open() function.
in our example, the sigil was a dash (a hyphen).
so there you have it.
why not multiple expressions?
finally, if you’re looking to purchase a keyboard with buckling spring key switches, you might check out the customizer line of keyboards at pckeyboards.com.
suppose you’re running a big-endian computer, and create a file in unicode’s utf-16 (two-byte) format.
that’s the first half of unicode, the universal character set.
also under stuff i wish i had known about a long time ago.
if the life of a library book includes events such as being acquired, being borrowed, being returned, etc., then the analyst will develop a use case for each of those events.
so what is the difference between a fully abstract class and an interface?
and the reverse is also true.
button expects a function object as an argument to the command parameter.
subdirectory is what makes an ordinary file system directory into a subversion workingcopy directory, a directory that subversion can recognize and manage.
if you don’t have that piece, nothing about subversion makes much sense.
for now, i prefer to take a practical, pragmatic position: so the bottom line for me is that there are occasions when some kind of globals-like technique is the best tool for the job.
it is possible to copy your local working copy of the file into the repositorywithout unlocking the file in the repository.
often, for example, an important requirement for a system is that it enforce (or at least not violate) a set of business rules or governmental regulations.
in a case that i heard about recently, a requirements analyst was working on a project for a large american railroad corporation.
the upside is that this nasty incident led me to learn some things.
these code points are used for nothing else than to indicate byte order.
the model processes running in the machine are synchronized with their real-world counterparts by means of events – events sent from the real-world processes into the machine.
so if you look at these two questions — a and b — i think it is interesting where mike and i differ, and where we agree.
it is something you have always done.
rename file_a.txt file_b.txt then the position of the arguments identifies the value.
lambda x: math.sqrt(x) here are a few other interesting examples of lambda: sum = lambda
for others, especially those with a lisp background, the question meanswhy is python’s lambda so crippled?
use cases are simply not the best tool for capturing such requirements.
that was when, thanks to the twin miracles of the web and google, i found bob tibbetts and hisnorthgate keyboard repair web site.
think of inline markup as a form of (parentheses) and use it the same way: immediately before and after the text being marked up.
which brings us to… in this section, i’m going shamelessly to rip off information from jukka k. korpela’s outstandingunicode explained from o’reilly (see the section onbyte order starting on page 300).
specifying a single big module that contains all of the customer’s business rules and (in uml terminology) extends every use case, is possible but clumsy and unnatural.
… a working copy also contains some extra files, created and maintained by subversion, to help it carry out these commands.
and when you write out a file, you choose the encoding to be used to encode your unicode charaters in bits.
first lambda is confusing because: the requirement that a lambda can take only a singleexpression raises the question:what is an expression?
why does language matter to philosophy?) finally, note that in other contexts, the “plain text” isn’t even text.
get every new post delivered to your inbox.
typos fixed 2012-02-22.
i switched from using a mouse to a using a trackball (i prefer alogitech cordless optical trackman), and that helped a lot.
when we embark on a system development project, the system to be developed is the putative solution to some problem in the user’s environment (the “application domain”).
“rocket”, “satellite”, and “launch” were not part of the conceptual vocabulary that was created in our domain description of the university library.
but it is possible to look at matters differently.
in fact, utf-8 is what is known variously as a here’s how multibyte encoding works in utf-8.
when we feed this to greed, what we get is roughly (i say “roughly” because in wordpress it is difficult to reproduce the exact html that you get from greed) this: line a line b system message: warning/2 (, line 3) definition list ends without a blank line; unexpected unindent.
earlier, i said that there were three points worth noting about the encoding/decoding process, and i discussed the first two.
third, you’re doing mostly english, and 8 bits is plenty for working with english.
[directory] projectx.py projectx_constants.py subversion introductions and tutorials often say things that are rather cryptic to someone who is trying to learn subversion.
still, i can imagine cases in which i might choose to specify wraplines=”true”, even for a whitespace-sensitive language such as python.
if you weren’t able to attend, you should really take a look… i’m sure you’ll find something worth watching.
now let’s see how some of those things make sense in light of our knowledge of the .svn subdirectory.
note the leading period in “.svn”.
you send the file out into the world, and it is downloaded by somebody running a little-endian computer.
you’ve just invented utf-8 — the 8-bit unicode transformation format, a variable length encoding in which every ucs character (code point) can be encoded in 1 to 4 bytes.
aquaplaning, a very relevant property of the real world, was not considered by the developers when they created the guidance system.
that makes sense: we don’t want projectx_constants.py.bak to be considered a project file anyway.
but even after reading many of the online subversion tutorials, i still could not grok subversion.
it helped me — finally — to grok lambda, and led me to writeyet another lambda tutorial.
rename /o:file_a.txt /n:
so now mike comes along and proposes doing exactly the same thing.
here is a jumbled grab-bag of concepts, jargon, ideas, resources (books), etc.
do not lift the top off of the keyboard.
def domore(): mem.counter
class mem: pass that is enough to create your mem container.
but whether the process of developing a particular use case is simple or tricky, its foundation must always lie in a solid understanding of the problem, and a carefully-constructed description of the problem domain.
the major feature of an ergonomic keyboard is a split design in which the left and right halves of the keyboard are split apart, separated by a few inches, and angled slightly so that you can type without bending your wrists.
let’s hope that someday, someone will write a lambda tutorial that, instead of beginning this way lambda is a tool for building anonymous functions.
he’s trying to learn how to write code for some gui framework: tkinter, say, or wxpython.
(bytes are big-endian: the leftmost bit of a byte is the biggest.
where we differ, if you could call it that, is in the answer to a. mike wrote “no need for globals.
but of course, that isn’t the end of the story.
you must thrust it into the cold, impersonal, outside world of the file system.
one thing that i learned was that the disk backup utility that i was using  at the time did not backup my email files.
consider the year of american independence — 1776.
it would be more accurate to say that there are really three directories that you are working with: that means that, on your pc, the projectx workingcopy directory looks like this.
the problems with this use case didn’t emerge until the requirements analyst began to ask the customers about the contents of the reports that they wanted to generate.
file_b.txt a flag is an argument whose presence alone is enough to convey information to the application.
this stampede of enthusiasm has produced the software development equivalent of a national health crisis.
i’m not the only one doing this.
use case description shouldn’t be theonly tool in the toolbox.
the best-known markup meta-language is xml.
"a b c" s = reversed(s) print(s) except exception as e: print(e)
here, for instance is the key code from crlf.py (windows to unix conversion) data =
clicking on the collapsed code snippet will cause it to expand.
the basic unit of work for subversion is a project.
then … “reboot” the keyboard (see the instructions given above), then shut down (power off) your pc.
… unfortunately, … the specification of computer behaviour at the interface,taken in isolation, is likely to be a description of arbitrary and therefore unintelligible behaviour.
once an organization has settled on the template that it wants to use for describing use cases, that’s it.
the most common delimiter for argument values is the double-quote symbol.
we could have written the “rename” application so that it requires two named arguments, like this rename -oldname
i often use the university library as a teaching example in my data modeling classes, just because of this ambiguity with the word “book”.
i now own 5 – one for work, one for my home vista machine, one for my home linux machine, and two backups.
this evening, while web surfing, i happened to run across a reference to coders at work: reflections on the craft of programming by peter seibel, and it occurred to me that recently there have been several new books in which programmers (often, great programmers) talk about programming.
and, as it turns out, the basics of unicode aren’t too difficult.
i suspect it is staring me in the face
are you the kind of person who enjoys thinking about this kind of stuff?
i don’t think it can be found anywhere else on the web.
so the moral of my story is this.
a second technique is to use a special (non-whitespace) character to separate argument values from keys.
for item in sequence: processitem(item)
my earlier post was about strategy 4 – aglobals container pattern.
and none of the examples use ‘wb’ (i figured that out separately)
it is a small chip about 1/4″ x 3/8″ with 24c16 embossed on it.
(see also jukka’s valuableweb page on characters and encodings.)
my hypothesis is that pyflakes doesn’t report target_langage as undefined because it can’t tell whether target_langage is truly undefined, or was pulled in by some star import.
if it is '', universal newline mode is enabled, but line endings are returned to the caller untranslated.
so now we know what a subversion administrative directory contains.
and imagine that java allows a class to extend more than one abstract class, so we can write a class c that extends both a and b. and imagine that c doesn’t implement foo().
don’t you even start.
unfortunately, the software development community seems to be eating it up.
but a few — new in the box — still existed, and he had a few for sale.
your code might look something like this.
comments (14) one of the early classics of program design is michael jackson’s principles of program design (1975), which introduced (what later came to be known as) jsp: jackson structured programming.
basically, python’s lambda is a tool for building functions (or more precisely, function objects).
this one has a line containing a very long comment.
the domain model provides an infrastructure for the requirements-gathering process, so that the development of use cases can proceedsystematically, in a way that could never happen without the domain model.
now you still have one last problem.
and (as i say) you did it all with your feather-quill pen.
some_module_with_a_big_long_hairy_name.vector i can code x
if the first two bytes of a file are 0xfeff or 0xfffe, then a unicode decoder knows that those two bytes contain a unicode bom, and knows what to do with the bom.
i asked thunderbird to compact my email files, and  it wiped out a bunch of my email messages.
the use case approach, in fact, is not a methodology at all; it is merely a notation.
if you specify wraplines=”false”, and a reader prints a paper copy of your post, the printed output will not show the scrollbar, and it will showonly the portion of long lines that were visible on the screen.
so you start out making your list with your own good english characters.
"a b c" s = rev(s) print(s) except exception as e: print(e)
what it produces is simply a sprawl of use cases.
this explains why most explanations of lambda are confusing for the typical python programmer.
that way, the question of which foo() to use will never come up.
carpal tunnel syndrome forced a friend of mine to retire on disability and put the fear into me.
but today, i finally got it.
and then to be hit over the head with it.
filehandle = open(picklefilename, "w") pickle.dump(objecttobepickled, filehandle)
what is going on???!!!
what you are not told is why you start with those two particular actions in that particular order.
the (not altogether desirable) result is that a python function is always referred to as a “function”, even when it is essentially acting as a procedure.
sometimes, they are worse than useless, because they give the impression that the system requirements have been completely specified, when in fact that is not true at all.
so (i’m embarrassed to admit it) i’m still struggling with rest.
different computer architectures use different endian-ness at the level of multi-byte data items (i’ll call themchunks of data).
and sometimes when running on unix, i need to run the newline conversion in the other direction.
some of these gentlemen give lip service to the idea of a well-balance diet, but it is only lip service.
in summary, a set of use cases is a description of the system to be constructed, the thing to be built, the solution to the problem.
(it contains a few other things, too.)
this single line is your entire program.
-r -t -- -file_a.txt -file_b.txt -file_c.txt
gradually, i realized the problem.
bob tibbetts suggested using a jeweler’s screwdriver.
so what we have here, in mem, is a truly global container.
i put it here to illustrate the effect of the wraplines argument.
[booch, 1998] grady booch, best of booch (ed.
the data in the file appears to be scrambled beyond recognition.
this is a question that comes up periodically.
it does have a commit command, which some tutorials call a “checkin”
this is not a useful category if you’re actually trying to improve a process.
the problems that i’ve been having turn out not to be with unicode, but with the introductions that i’ve found.
so now there is a problem.
this is for all subversion newbies.
in python, classes are first-class objects.
we often want to send an application multiple arguments, like this: rename file_a.txt file_b.txt
a little one-line function will do the trick.
but of course, having been written by a newb, there are all sorts of ways it could be wrong.
a third technique is to use the known length of the key to distinguish the key from the argument value.
my reading has made me realize that there is an immense range of possible syntaxes for command-line arguments, and far less consensus and standardization than i thought.
it’s not used on linux or macs and just tends to get in the way of things.
-r -t "-file_a.txt" "-file_b.txt" "-file_c.txt" an alternative is to use a special string (typically double dashes "--") to indicate the beginning of positional arguments.
in various tutorials, and in the subversion docs, you will run across the expression “clean copy”.
once you’ve done that, you’ve got to figure out a technology for storing all of the corresponding encoded-text characters.
when you are working on a subversion project, there are actually two directories that you are working with.
of course, there may be something out there and i just missed it.
i’d heard good things about pyflakes, so i thought i’d give it a try.
class mem: def __init__(self): self.stupiderrorscount = 0
now try: print(5) s =
turn the keyboard over, so that you are looking at the bottom of the keyboard.
paragraphs must have the same indentation — that is, line up at their left edge.
we don’t care how they are represented internally and how many bytes it takes to hold each character in them.
there is no way that pyflakes is going to go out, try to find the something_or_other module, and analyze it to see if it contains target_langage.
take the six screws (the ones holding the upper and lower parts of the keyboard together) out of the keyboard.
(see the answer, below.)
the pycharm online documentation is good, and detailed.
so for the most part, you’ll use only one byte per character, but if you need a document to contain some exotic charcters, you can do that.
commenting on my previous post about unicode, an anonymous commentator noted that the usage of the bom [the unicode byte order mark] with utf-8 is strongly discouraged and really only a microsoft-ism.
superedit filename(a christmas story.doc)
third, pycharm offers several alternate keyboard shortcut configurations… but they all seem to be *nix inspired.
for the purpose of writing computer software specifications, it is useful to view a computer software system as a software “machine” that transitions from state to state under the control of an input stream of events.
but there are still problems.
this slideshow requires javascript.
this should make the computer work normally.
rest just doesn’t seem to work the way i expect it to work.
i was pressed for time.
at this point — after it has been added to the .svn subdirectory — the file is said to be “under version control”.
every python programmer is familiar with one special case of the globals module pattern.
the problem of course is that with 8 bits you can make only 256 different bit combinations.
certainly, it is very unnatural to embed them in the descriptions of specific use cases.
"value reset by minion from " + mem.x
but, but, but… you say.
for those who might be interested, here it is.
a returns the value of a, which is then assigned to x. in python, assignment statements donot return a value.
so we must pass a function object in to a button via the command parameter.
when you do this, you are in a sense “updating” the repository from the working copy.
but since i was talking about globals, i was talking about a container for globals.
the solution, of course, is simply to tell the recipient that the file was encoded in utf-16on a big-endian computer.
i’m sure that many experienced python programmers are already quietly using theglobals class pattern.
i started out using “global” and had to change.
q: what is the difference between an abstract class and an interface?
[] # convert the line into a list of characters # and feed the list to the readahead generator chars =
with the plus sign “+” as a sigil, for instance, it is possible to use flags to turn options on and off.
i asked thunderbird to compact my email files, and it wiped out a bunch of my email messages.
there is really nothing at all that makes the use case approach especially “object-oriented”.
take a small screwdriver and pry the chip out.
an asterisk in another context creates inline markup for emphasis (italics).the difference in the context is whether or not the asterisk is or is not preceded or followed by whitespace.
but filenames can begin with dashes.
the translation from plain text to encoded text is called “encoding”, and the translation of encoded text back into plain text is called “decoding”.
here is a simple example.
*enclosed text* some text.
as i needed to add new arguments, i was able to add them to just one place — the container.
i strongly recommend charles petzold’s wonderful book code: the hidden language of computer hardware and software.
for the most part, and certainly if you’re working with ascii data, there is a simple rule.
well, you can lift it a little.
and it was fast, so i could run it through a directory containing a lot of .py files and it would come out alive and grinning on the other side.
the consequence is a plane in a ditch past the end of the runway, instead of safely docked in the terminal.
i should note that i come from a windows background, and i’m used to standard windows keyboard shortcuts and editor behavior.
"i found %s files in %s directories" % (filecount,foldercount) # better def str(*args): return "".join(str(x) for x in args) : : msg =
the collabnet docs say this: they are the same except that export doesn’t include the.svn folders and checkout does include them.
suppose the “rename” application uses only 1-character keys.
are the first two bytes two characters in utf-8 encoding?
make container c a global
frankly, i still think the syntax for lambda looks a little weird.
that means that you must eject your poor little string from the warm, friendly, protected home in your python program, where it exists simply as plain-text characters.
one good answer is that an expression returns (or evaluates to) a value, whereas a statement does not.
when i first started learning python, one of the most confusing concepts to get my head around was the lambda statement.
basically, the glidepoint cables act as a sort of tether between the upper and lower halves of the keyboard.
when you encounter the expression “working copy” you assume that you are dealing with an ordinary filesystem directory that is being used to hold a copy of the files in your project.
the simplest such system is one in which every character in the plain-text alphabet has one and only one corresponding representation in the encoded text.
it is my favorite keyboard ever.
if you run leader.py it imports minion and mem, and uses mem as a container for variable x.
and that leads us to a nice place.
that function object will be the function that the button calls when it (the button) is clicked.
checkin vs. commit pvcs (and sourcesafe, and many other version control systems) work on a locking model.
button(frame, text="22", command=lambda: self.printnum(22)) btn22.pack(side=tk.
if you don't use an email client,  and do all of your email work through a web interface to your internet service  provider, then this is not an issue.]
a class that is fully abstract — it has abstract methods, butno concrete methods with those substitutions, you get the familiar java rule: a class can extend at most one abstract class, but may implement many interfaces.
they talk very little about writing stuff *to* imported modules.
the basic concepts are simple.
in most cases, uca is riding on the coat-tails of uml.
this special character could be any character that cannot occur in either the key or argument value.
"leader.py" import mem import minion mem.x = "foo" print("leader says:",mem.x) minion.main() print("leader says:",mem.x) print() mem.x = "bar" print("leader says:",mem.x) minion.main() print("leader says:",mem.x)
the plane’s guidance system thought, in effect, “i’m on the ground, but my wheels aren’t turning.
the goal is to leave no prongs sticking up that might touch each other or anything else.
-x -v -f some_filename.tar or this, where several flag arguments are specified together tar -xvf some_filename.tar here is where the distinction between the single-dash sigil and the double-dash sigil becomes important.
but — whether or not you realized it — whenever one of your programs wrote or read strings from a file, python was busy behind the scene, doing the encoding and decoding for you.
that’s out of scope for this blog entry, and a good book on jsp can explain that better than i can.
that was me, brother.
be that as it may, guido has explained why lambda’s syntax is not going to change.
this step is necessary for the parser to do certain kinds of semantic checking: (for example) to automatically reject unrecognized keys, or to automatically report required arguments that were not provided.
only after that happens are your files properly “under version control”.
this is the same result as before, but with more space between line a and line b.
i guess i would say it wasn’t a major problem because i found the solution fairly quickly with a bit of googling around.
as far as i can tell, once a reader has expanded a snippet that was initially collapsed, there is no way for him to re-collapse it.
as of july 25, 2010,: if it is (or becomes) possible to consider wincl and nixcl to be well-defined cl meta-languages, then the first step of specifying a cl language for an application (which i gave earlier): could be simply an alternative is to use a parser utility that is designed to handle specifically wincl or nixcl.
where we should consume a variety of foods to obtain a balanced intake of nutrients, chocolate tempts us to ignore other foods and eat only chocolate.
in much of early modern philosophy (think of hobbes and locke) speech (or language) was basically considered to be an encoding of thoughts and ideas.
it was called the omnikey evolution keyboard.
it exists in the projectx directory, but not in the projectx/.svn directory, so subversion knows nothing about it.
it is an essential foundation for those descriptions.
in short, the printed output might cut off the right-hand part of long lines.
so the backup utility didn’t see the appdata directory, and  didn’t back it up.
now i want to change that.
this gives us a plain-text alphabet of 30 characters.
after using pvcs for many years, our office recently started moving to subversion.
here are two technical terms: “big endian” and “little endian”.
–entry “scenarios” in [booch, 1998] there is nothing wrong with not being object-oriented, of course.
at that point, nobody can unlock it except you.
as such, i want to find: i’ve found these to be pretty useful.
line a being the term, line b being the definition .
so you have two basic questions to answer.
in this code snippet, wraplines="true", so lines are are wrapped.
so you have a brilliant idea.
i hope that ben and michael will consider theft the sincerest form of flattery.
but i think a little bit of hoopla is in order.
suppose you are happily sitting at your pc, working with your favorite text editor, writing the standard hello world program in python (specifically, in python 3+).
"a b c" s.reversed() print(s) except exception as e: print(e)
what the tutorial was trying to say, i think, was that in order to work with subversion, you must create a workingcopy directory (that is, a directory that contains an .svn administrative subdirectory).
as it happens, i had stumbled onto the arguments container pattern myself, not in python but in java.
but without any training in user-interface design … there is little hope that [the end-users] will make a good job of it.
why only one expression?
if you use theglobals class pattern, you avoid that wart.
there was a reason for the invention of the wordchocoholic.
i’d show you the contents of mem.py, except for the fact that there aren’t any.
leader sets values that minion reads, and minion sets values that leader reads.
just explicitly pass your container.
it can benone, '', '\n', '\r', and '\r\n'.
oh, it warns you about the star imports.
so now, when you read a file, you first read the bom, which tells you what encoding was used to create the file.
which brings us back to something i said earlier.
print("hello, world!")
open(filename, "rb").read() newdata = data.replace("\r\n", "\n") if newdata !
so big and little are not the same as left and right.
(and because i don’t have a java blog!)
our investigation of the bom has led us to take a closer look at utf-8 and multibyte encoding.
class pattern is a better tool for the job than globals themselves.
let’s start with the intended container module, mem.py.
other systems (e.g. systems in the physical and social sciences) are heavily algorithm-driven.
in spite of all of the problems we’ve discussed, use casescan be useful — when they are used properly.
and that brings us tothe second point.
in order for the mapping between the plain text and the encoded text to be very tight — which is to say: in order for us to be able to specify very precisely how the encoding and decoding processes work — we must specify very precisely what the plain text representation looks like.
class mem: counter = 0
he also, in a manner of speaking, saved my wrists.
then seek therapy immediately!
here is the tag i like to use for snippets of python code.
by the time that it was added, python syntax had become well established.
a: java has a rule that a class can extend only one abstract class, but can implement multiple interfaces (fully abstract classes).
why might we want to translate a message in a plain-text representation into some other representation?
so that’s why you — as a python programmer — need to be able to encode and decode text into, and out of, utf-8 (or some other encoding: utf-16, ascii, whatever).
for example: this is a paragraph.
the thing to remember here is that a tk.
i have had modules that processed nested kinds of things: a, b, and c. it was helpful to have different groups of globals for the different kinds of things.
the naming convention is “utf-” and “ucs-” some (e.g. ucs-4 and utf-32) are functionally equivalent.
the obvious techniques don’t work.
when keyword arguments are used, there must be some mechanism for distinguishing a key from a value or from a positional argument.
fixing the problem is a two-step process.
this is what i would have expected.
for example, when i’m reading the source code of a program and see some function f, i try to figure out what f does.
this allowschained assignments such as x =
the trick is in the standard library, in the webbrowser module.
but if you try to do that with python 3+, it won’t work.
and it was common to see programs whose top-level control structure looked like (what i will call) the “standard loop”: open input file f while not endoffile on f: read a record process the record close f jackson showed that this way of processing a sequence almost always created unnecessary problems in the program logic, and that a better way was to use what he called a “read-ahead” technique.
file_b.txt an application might permit whitespace before and after the equal sign, like this.
in my experience, greed’s page layout doesn’t work very well under firefox, but works just fine with internet explorer.
the caller module is leader.py.
comments (16) two comments on my recent posts on a globals class pattern for python and an arguments container pattern reminded me that there is one more container for globals that is worth noting: the module.
our everyday “arabic” numerals are big-endian representations of numbers.
one source of confusion is the fact that (as we will see in the next section) the word “updating” in the context of subversion means exactly the opposite of what it means in the context of pvcs.
the problem with chocolate, then, lies in a combination of things: it does not provide a complete, balanced nutritional intake; it is extremely attractive, tempting one to consume only chocolate and ignore other foods; and it is very difficult to make the connection between excessive chocolate consumption and its undesirable consequences.
everywhere, we are surrounded by encoding and decoding.
he googles for “python lambda tutorial”.
arguments are options if they begin with a hyphen.
since the point of that post was to point out the usefulness of a class as a container, i called the proposed pattern theglobals class pattern.
procedures were fordoing stuff, and did not return anything.
you’ve just invented the byte order mark, or bom (aka “encoding signature”).
this also means that if you (in the role, say, of a forensic computer scientist) must process a mystery file, and you see that the file’s first two bytes contain one of the two unicode boms, you can (with a high probability of being correct) infer that the file is encoded in unicode utf-16 format.
to some of them, a “train” was a particular collection of rolling stock (a locomotive and all the cars it pulled).
they’re pretty confusing.
suppose we have several available technologies for storing encoded messages: one technology supports an encoded alphabet of 256 characters, another technology supports only 128 encoded characters, and a third technology supports only 64 encoded characters.
a while ago, one of my northgate keyboards seemed spontaneously to sustain some kind of brain injury.
– http://www.uidesign.net/1999/imho/feb_imho.html the result, in short, is not only that the user-interface design is being done at the wrong time, it is being done by the wrong people.
the python docs contain correctexample code.
but the situation gets more complicated if values can contain whitespace.
when a gui program has this kind of code, the button object is said to “call back” to the function object that was supplied to it as its command.
we can imagine a case in which a malevolent programmer wrote superedit to expect positional arguments like this.
we only start caring about this when encoding strings into bytes (for example, in order to send them over a communication channel), or decoding strings from bytes (for the other direction).
paragraphs that start indented will result in indented quote paragraphs.
a lot of what i will write will be shamelessly ripped off from other descriptions that i’ve found useful, including we start with the observation that “unicode” is actually two separate and distinct things.
the developer begins by creating a model of the “real world”, i.e. the part of the real world that is relevant to the problem at hand, the part of reality with which the system is concerned and which furnishes its subject matter.
functions were for calculating andreturning values.
what that adds up to — for at least some newbies — is that it has a lot of gotchas.
as eric wrote, in a comment on the first version of this post, many modern programs allow keyword arguments to be specified after (or even between) positional arguments and even very old programs do it too.
importing star (asterisk, everything) is a python worst practice.
the domain model describes the objects in the problem domain, including the events in the lives of objects.
finally, the globals class pattern makes it possible to pass your globals as arguments.
it creates a workingcopy directory containing the project files.
so a bom should be considered mandatoryfor files encoded using utf-16.
an introduction to subversion (which is also a nice introduction to the tortoisesvn open-source windows gui client for subversion) explains things nicely.
in the memory of big-endian computers, the “big” end of a data chunk is stored leftmost.
and your list has way more than 256 characters.
since the 1980′s, jsd experts have had a vision of executable jsd specifications.
these.svn folders contain clean copies of all files checked out and .tmp
… paragraphs must have the same indentation — that is, line up at their left edge.
i use thunderbird (on windows  vista) as my email client.
the use of the expression “working copy” is one of the most confusing things about subversion tutorials and even the subversion documentation itself.
in earlier versions of python, the encoding scheme wasascii.
join 38 other followerspowered by wordpress.com
there simply are no answers to these questions.
how can you tell if the use cases leave any gaps?
recently, someone else had the same desire, and posted his question on comp.lang.python.
this means that a data chunk of 0×12345678 is stored as 4 bytes with the most significant byte to the left, like this: 0×12 0×34 0×56 0×78.
english, french, spanish.
it exposes the students to the issue of ambiguity in domain descriptions, and helps me make the point that one of the requirements analyst’s most important tasks is the detection and removal of such ambiguities.
this is a useful technique, and one worth pointing out for the benefit of those who have not yet discovered it.
but there are techniques for dealing with more intricate situations.
pass container c as an argument 4.
(and if you really want to “talk unicode”, don’t call plain-text characters “characters”.
now we’re ready to talk about byte order.
everybody is using computers.
rest is trying to do so much (e.g. to support advanced markup structures such as definition lists) with so little (simple ascii text) that it must read a lot into what (in other circumstances) would be meaningless differences.
what’s not to like!!??
the (import, checkout) usage pattern for getting started with subversion most “getting started with subversion” tutorials start the same way.
one person who posted a question about this problem on the python forum was aware of the issue, but confused because he was trying to pickle a string.
to help explain, first let me introduce some terminology that i hope will help clarify the situation.
checking out a file gives you exclusive update privileges on it until you check it back in.
if this was your list for a beginning programmer, what things would you add to it, or change?
that isn’t appropriate for python, so i specifywraplines=”false”.
i simply stopped using “global” and got rid of all those “global” statements that were cluttering up my code.
for example, an asterisk in one context creates a bullet for a bullet-list.
and if there is something that i missed here, i’d appreciate a comment about that too.
but as long as the programmable chip is still in the keyboard, similar problems can occur again at any time.
when i wrote code like this, i got back this error message: pickler(file, protocol, fix_imports=fix_imports).dump(obj) typeerror: must be str, not bytes talk about a crappy error message!!!
they were frustrated by the fact that a jsd model process is a coroutine, but cobol – the programming language in use in the business community where jsd was most popular – did not support coroutines.
and, as michele simionato says: there is no want of command line arguments parsers in the python world.
(3) this is what a similar code snippet would look like if we had specified wraplines=true.
to others, a “train” was a regularly scheduled run, as in “i’ll catch the 6 o’clock train to boston”.
but for every such reasonable guru, there is at least one snake-oil salesman pushing use cases as the solution for all your requirements methodology needs.
in most cases, i think, this should not be a problem.
[x for x in vector.values] def initializefromargs(self, *args): self.values =
when you do a subversion checkout, every folder and subfolder contains an .svn folder.
a workingcopy directory is a directory that has a hidden subdirectory called “.svn”.
we have a string (called “line”) consisting of characters.
don’t “import star”!
this allows you to decode the file into code points (however code points are represented internally in your programming language: java, python, whatever).
the only guidance that the use case approach provides is the most generic question possible: “what would you like to do with the system, and how would you like it to behave?”
this is exactly what the unicode byte order mark (bom) is designed to do.
don’t just a log off or do a “soft” reboot.
none if foundonearg and isinstance(theonlyarg, types.
but we can not describe a use case in which a university member presses a button that triggers the rocket launch of a weather satellite into orbit.
memb: pass class memc: pass 6.
is it saying that the definition of a paragraph is: a chunk of lines that is separated from other chunks of lines by two newlinesand contains lines all of which have the same indentation?
and because, in those olden times, ascii was pretty much the only game in town, you didn’t need to specify that you wanted to write and read your files in ascii.
changing “w” to “wb”, and “r” to “rb”, fixed it.
in system requirements and specifications, see especially the entry on “the problem context”.)
the command-line parser must recognize and correctly handle quote characters… and escaped quote characters inside of quoted strings.
this all seems pretty straight-forward.
so you go to open a file and start reading.
so here is the code for a python driver program that creates a sequence of event objects and feeds them to the python specification for miss grant’s controller.
blog at wordpress.com
this obviously will not work.
thanks anonymous, and clinton, for reporting the typos.
unicode contains two code points reserved specifically for the purpose of indicating byte order: u+feff (big endian) and u+fffe (little endian).
as i say, there is a lot to like about pycharm and i don’t want to slam it.
i’m sure other new programmers get confused by it as well… mike’s discussion is excellent: clear, straight-forward, with useful illustrative examples.
a familiar example is morse code, in which “sos” in plain text corresponds to ... --- ...
and finally you have a very long list of about a zillion characters.
mike’s comment led me to some further thoughts on the subject.
so suppose that — as your code evolves — you add an assignment statement deep in the bowels of the function.
if you are googling for “subversion command line tutorial introduction for beginners”, read this first!
occasionally when running on windows i need to read in a file containing windows newlines and write it out with unix/linux newlines.
symbol: # process text characters textchars.append(c) c = chars.next() if c and c ==
you know what it means.
b. do you make them available individually, or do you put them in some kind of container and make the container available?
remember our “rename” application?
we get roughly this: line a line b line c
the most important thing about these methods is that some are fixed-width encodings and some are variable-width encodings.
it was about the answer to question b.
now you borrow guido’s time machine and fast-forward 260 years to 2010.
a number of the keys seemed to have gone haywire.
we start by modeling the real world (rather than describing the functionality that we wish the system-to-be to provide) because the model supplies essential components that we need in order to create our descriptions of the system functionality.
comments (3) with the improved support for unicode in python3, more and more folks will be working with languages (arabic, hebrew, etc.) that read right-to-left rather than left-to-right.
but i code it explicitly, as a reminder that if i ever want to collapse a long code snippet, i can.
as joel notes some people are under the misconception that unicode is simply a 16-bit code where each character takes 16 bits and therefore there are 65,536 possible characters.
carefully turn the keyboard over, making sure to keep the two halves of the keyboard together.
so if we restrict our concerns to the behaviour of the computer itself we can set aside the disagreeably complex and informal nature of the problem world.
lines in the input can end in'\n', '\r', or '\r\n', and these are translated into'\n' before being returned to the caller.
evolutions were very advanced for their time, and very few were made.
http://cometdemo.lshift.net:8080/greed/welcome_document/ i’m not quite sure what to call it, so i’ll call it “greed” — that’s a nice memorable name.
when subversion shows file changes (that is, shows diffs) it is actually showing diffs between “unversioned” files vs. files “under version control” suppose that i make a change to one of my files: to projectx/projectx_constants.py.
the globals statement is redundant.
the result is that whenever you encounter an application for the first time, you can’t safely assume anything about the syntax of its command-line arguments.
undoubtedly, it is just a matter of time and experience.
if newline is'', no translation takes place.
that means that aglobals class can be passed — as a parameter — from a function in one module to a function in another module.
during the process, i learned that pyflakes is designed to be a bit on the quick and dirty side itself, with the quick making up for the dirty.
since a lambda specification must contain only a single expression, and that expression must return a value, an anonymous function created by lambda implicitly returns the value returned by the expression.
so i can write an import statement this way: import some_module_with_a_big_long_hairy_name as bx and rather than coding x =
ignore the fact that the short form of the commit command is ci (which stood for “checkin” in an earlier incarnation of subversion).
technically, a project is a subtree: a directory, including all of its files and subdirectories, and all of those subdirectories’ files and subdirectories, etc.
so i tried mozbackup, and those claims seem to be true.
yet one of the most common causes for major project problems is the failure of developers and their clients seriously to consider that ambiguity might exist in their requirements documents.
in the number 1776: so we say that 1 is located at the big end of 1776 and 6 is located at the small end of 1776.
what possible reason could i have for wanting to create a short, anonymous function?
there’s a reason why java has such a rule.
next, (for reasons that we won’t explore right now) we need to be able to translate a message in a plain-text representation into some other representation (let’s call that representation the “encoded text”), and we need to be able to translate the encoded text back into plain text.
in some organizations, use cases may be written at a very high level.
how can you possbily encode every character in the entire unicode character set using only 8 bits!!!!
but i think it is actually wrong.
each line consists of zero or more indent characters, some text characters, and (optionally) a special symbol character followed by some suffix characters.
second, the investigation began with command-line parsers, and in the context of a discussion of parsers and parsing, keyword argument seems a more traditional and appropriate term thanoption.
… i’ve been playing with pycharm, the new python ide.
but the bytes are not in the order that he (with his little-endian computer) expects.
but, as michael jackson points out, before you can effectively start building the solution to a problem, “first you must concentrate your attention on the application domain to learn what the problem is about.”
this creates emphasis.
as grady booch observed [a] very real danger is that your development team will take [its] object-oriented scenarios and turn them into a very nonobject-oriented implementation.
here, “hello, world!” is plain text.
and note that — since different buttons do different things — we need a different function object for each button object.
and the communication is clearly two-way.
this is a form of limited multiple inheritance.
the default for collapse is false, which is what i normally want.
i carry a lot of conceptual baggage — it may just be that rest is different from structured-text dialects that i’ve worked with in the past.
on many projects the ambiguities are not so intrusive, so they are left hidden, like ticking time bombs.
in addition, as the editor of www.uidesign.net observed, in many organizations the clients or end-users are the ones who write the use case descriptions.
it found the basic kinds of errors that i wanted it to find.
you will make a list of all characters in all languages ever used.
in other organizations, use cases may be written at a detailed, implementation-specific level, describing the mechanics of the graphical user interface (gui), complete with buttons, menus, and drop-down list boxes.
the good news is that if you have a beloved old northgate that is showing its age, northgate keyboard repair is still in the business of cleaning and repairing northgate keyboards.
one day, in an email to bob, i mentioned that although i loved my ultras (one of which bob was cleaning and repairing at the time), what ireally wished for was an ergonomic v-shaped version of the ultra.
in keeping with the earlier posts’ grandiosity, i will call this use of an imported module the globals module pattern.
xml is not a markup language; it is a markupmeta-language … roughly: a style, or set of conventions, or template for creating specific markup languages.
first of all, the python language itself masks the distinction between a function and a procedure.
but that command doesnot do the same thing as a pvcs checkin.
in addition to working with python, i also work with java quite a lot.
when manipulating strings, we’re living in blissful ignorance.
i searched the web without finding one, so i thought it would be interesting to try to write one.
[note that this applies only if you are using an email client such as thunderbird, outlook, outlook express, etc.
anyway, at this point i am a rest newbie.
and to get it back from a file, you must read the file and decode the collection of 1s and 0s back into plain text.
bob belongs to the school of minimalist website design, but his keyboard expertise and repair skills are totally maximal, and he really saved my bacon keyboards.
use case descriptions that are written at too-high a level are often useless.
here are some examples.
i haven’t yet found a good explanation of rest’s world-view.
the email files were stored in a  directory called appdata, and the appdata directory is a “hidden”  directory.
and you can just define it right in the place where you want to use it.
in the memory of little-endian computers, the “little” end of a data chunk is stored leftmost.
but by now, knowing about the hidden .svn administrative directory and what it does, you can probably figure that out.
you can use a module as a container.
you can edit these files however you wish, and if they’re source code files, you can compile your program from them in the usual way.
when you run leader.py, you see this output: leader says: foo minion says: foo leader says: value reset by minion from foo leader says: bar minion says: bar leader says: value reset by minion from bar note that leader.py passes no arguments to minion.main() and minion.main() doesn’t return anything (other than none, of course).
it is much easier (and clearer) to code def __init__(self, parent): """constructor""" frame =
the best metaphor for methodology skills is a handyman’s toolbox.
a string consists of characters, which are also abstract entities not tied to any particular binary representation.
author(clement moore)
i think the use of the globals class pattern makes the work of static code analyzers (e.g. pyflakes) easier.
the answer is: what kind of situations?
def rev(s): ''.join(reversed(s))
lift the top half of the keyboard just enough to free it from the bottom half, then rotate the top clockwise about 4 or 5 inches, just enough to expose the programmable chip.
a python function, for instance, can act like a procedure, a function, or both.
my topic today is how to post source code on wordpress.
(if it doesn’t, then the problem was something other than the programmable chip.)
and the first of these things has nothing to do with computers.
i call the function “rev” rather than “reverse” on the chance that python will eventually acquire its own builtin function named “reverse”.
or at least, cripple the feature that i most want a code analyser for… to find and report undefined names.
here, the downside of the use-case approach is that it draws the requirements analyst’s attention away from the task of describing properties of the real world, and focuses his attention on the narrow area where the real world interacts directly with the system.
in a sense, the keyboard is bent so your wrists don’t have to be.
so the first task of the unicode initiative was simply to list all of those characters, and count them.
at the beginning of this post i said we start with the idea of a piece of information — a message — that exists in a representation that is understandable (perspicuous) to a human being.
so i should probably say something about my choice of technical terminology.
listtype): self.initializefromlist(theonlyarg) elif foundonearg and isinstance(theonlyarg,vector): self.initializefromvector(theonlyarg) else: self.initializefromargs(*args) pprint.pprint(self.values) # for debugging only def initializefromlist(self, arglist): self.values =
doing a bit of arm-waving, and christening a globals module pattern, does one thing.
now it is time to issue a warning about the dangers of junk requirements-gathering methodologies, of which the use case approach is an example.
these values are “application global”, available to all module in an application.
if a technique is useful, it is useful, object-oriented or not.
it assigns a value to x in mem and calls minion, which reads mem.x and resets mem.x’s value, which leader then reads.
but (and here is part of the problem) the causal connection between chocolate consumption and its consequences is (in contrast to chocolate’s easily-perceived immediate charms) virtually invisible.
the difference is that non-evolution keyboards don’t have the glidepoint touchpad embedded in the top of the keyboard.
if it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.
the requirement for a lossless round-trip means that the mapping between the plain text and the encoded text must be very tight, very exact.
there are four strategies that you could use.
this means that, a data chunk whose logical value is 0×12345678 is stored as 4 bytes with the least significant byte to the left, like this: 0×78 0×56 0×34 0×12.
i say “sometimes i like an orange.”
this led to an interesting discussion on lambda the ultimate, the programming languages weblog about lambda, and about the idea that programming languages have personalities.
are roman numerals big-endian or little-endian?
button(frame, text="44", command=lambda: self.printnum(44))
those folders contain the information that subversion uses to link your working copy to the repository.
at one level, of course, nothing at all is wrong with chocolate.
the rest docs say that in a definition list, “blank lines are not allowed between term and definition.”
now computers think in 8-bit bytes.
for instance, we can think of spoken text as the plain text, and written text as the encoded text.
although it is possible to think of flags as degenerate named arguments (named arguments that have a key but no value), i find it easier to think of flags as a distinct type of argument, different from named arguments.
it worked very nicely.
how can you tell if the use cases conflict?
indent_char: # process indent characters indentcount += 1 c = chars.next() while c and c !=
one of the joys of python is that python makes it so easy to do “standard loop” processing on a sequence such as a list or a string.
the circumstances were very similar to the circumstances that led to the pythonglobals class pattern.
comments (7) i use python on both windows and unix.
this is not a specifically python pattern.
in theory, line a and line b form a single, double-newline-delimited paragraph, withirregular indentation.
what i have calledkeyword arguments are — on unix platforms — traditionally calledoptions; what i have called values are traditionally called option arguments; and what i have calledpositional arguments, the open group calls operands.
in their methodology books and courses, they pause briefly to give a cursory nod to (for instance) describing the problem domain, before spending the overwhelming bulk of discussion on use cases.
it is simply about creating a numbered list of all known characters.
if we need numbers, we can spell them out, like this: “six thousand seven hundred forty-three”.
if you are used to working with a vcs that uses the “check out, edit, check in” paradigm, and you come to understand that subversion’s commit is not the same as your old familiar check in, then your next question will almost certainly be: once you checkout a project into a working folder, how do you check it in a la sourcesafe?
something like a toenail clipper might be about right.
often, an application will support both single-character and multi-character keys for the same argument.
all of the lines in the paragraph must have the same indentation,except when the paragraph is a definition list, in which case the indentation of the definitionmust be different (greater than) the indentation of the term.
knowing the order of the bytes within the chunks is crucial to being able to decode the file into the correct unicode code points.
but that is a completely different subject.
each of these methods has its own name.
symbol: c = chars.next() # read past the symbol while c: # process suffix characters suffixchars.append(c) c = chars.next() (2) here is a different code snippet.
so let’s talk about pickling.
the answer is complicated, and it involves the “pythonicity” of python’s syntax.
it can be a partially abstract class.
in pascal, for instance,procedure and function were different keywords.
i thought i would republish it here because the use case approach — although now operating under a variety of new names — still seems to be popular.
rest seems to be acting they way i would expect it to.
but if the function assigns a value to x, x is treated as local.
it takes a directory of files — a clean copy of the files, if you will — from your hard drive and copies them into the central subversion repository on the server.
the url for the “table of contents” page is http://pycon.blip.tv/posts?view=archive&nsfw=dc.comments (2)
in any event, it is an issue that i’m not going to explore here.
… the adoption of rational unified process in its complete form is likely to set the development of good user interface design back by perhaps 20 years.
others will stumble across this problem in the future, especially because there are code examples floating around (in printed books and online posts) that will lead new python programmers to make this very same mistake.
a use case description formember checks out a book will use the terms “library member” and “book”, but if those terms have not been defined earlier (in the model of the application domain), then the use case specification is necessarily vague (i.e. not clearly defined).
import pickle a = "blah" file = open('state', 'w')
basically, a list of the tools in the toolbox of a working business software developer.
second, most tutorials introduce lambda as a tool for creating anonymous functions, things whose primary purpose is to calculate and return a result.
so now i think we can see why many explanations of lambda are confusing.
now that i think of it, another nice enhancement for wordpress would be to allow a reader to toggle wraplines on and off.
often, at a stage in the project when the primary concern should be understanding the business context and functions that the system must support, the client is instead engaging in premature user-interface design.
kids, don’t be like me.
in the world of markup languages, such standard conventions are called meta-languages.
if ever you need to get a copy of what’s in the repository, but without all the .svn folders (say for example you’re ready to publish it or hand the files over to your client), you can do an “svn export” into a new folder to get a “clean” copy of what’s in your repository.
most introductions to python tell you all about how to get stuff — that is, how to import stuff — *from* imported modules.
we can specify any function that can be described using the vocabulary of words that appear in the model/dictionary, but we cannot specify a function if its description would require terms that are not in the model.
even help questions and faqs posted on the web can be mystifying.
o no suffix o suffix - suffix symbol - suffix - one suffix char
that situation has changed in the last few years, with the increasing acceptance ofpython.
but the modules still needed to share a common global memory.
asubversion “checkin” is the same thing as a “commit”, and has nothing to do with locking.
the difference between functions and procedures was even built into some programming languages.
so you call it a “character set”.
[x for x in args] #------------ end of class definition --------------------- v = vector(1,2,3) v = vector([4,5,6]) q = vector(v);comments (8) i’ve been trying to learn rest and finding it hard going.
they told me: youcan do from something_or_other import * but don’t do it.
note that the long line is not wrapped, and a horizontal scrollbar is available so that you can scroll as far to the right as you need to.
recently i was converting some old python2 code to python3
project participants often simply assume that the meanings of familiar terms are so clear and so well known to everyone present, that no explicit definition is necessary.
but this is not the way that lambda is most commonly used, and is not what most programmers are looking for when they google “python lambda tutorial”.
but if your file includes any star imports, and your script contains an undefined name like target_langage, pyflakes won’t report the undefined name as an error.
(note the use of the print() function; we’re running python 3 here.)
now let’s add some indentation to line b: line a line b line c
it is a widely — but not universally — observed convention.
basically a checkout copies the project files from the central repository to a workingcopy directory on your pc.
most computer (hardware) architectures agree on bits (on and off) and bytes (a sequence of 8 bits), and byte-level endian-ness.
in actual practice, of course, deriving use cases from the domain model is rarely as simple and mechanical as we’ve just described.
in a really bad case i might have a dozen functions, each of which declared a dozen global variables.
you get a brilliant idea.
virtually all of the system complexity, and all the information needed to design the system, was hidden under the single use caserun reports.
it also has made me wonder if anyone had ever written an overview of, or introduction to, the basic concepts involved in command line arguments.
the trick is to use the wordpress [sourcecode] shortcut tag, as documented at http://en.support.wordpress.com/code/posting-source-code/. note that when the wordpress docs tell you to enclose the [ sourcecode] shortcut tag in square — not pointy — brackets, they mean it.
another reason that we start development with capturing information about the real world is there are properties of the real world that constrain the system, or that the system must know about, or that the system relies on, in order to satisfy the customer’s requirements.
see thewikipedia article on unicode.
[filename] [switches] with the filename positional argument appearing before the switches.
def dosomething(): mem.counter = 0 ...
to others, a “train” was a specific instance of a regularly scheduled run, so that the train that left for boston today at 6 o’clock, and the train that left for boston yesterday at the same time, are two different trains.
in order to gain access to this container, modules simply import it.
on unix-like operating systems, the sigil is typically a dash "-".
whether an argument is optional or required is a semantic issue rather than a syntactical issue.
note also that you can export from either the main repository or from the workingcopy .svn directory.
it is somebody else’s task to grapple with that.
we achieve communication when i successfully transmit a thought from my mind to your mind via language.
what happens if you have a chunk of lines that is delimited by double newlines, but contains lines with differentindentation levels?
for english-language speakers, for example, english words printed on a page, or displayed on a screen, count as plain text.
such ambiguities are quite real, and quite common.
note that the scope of the vocabulary that was created in the domain model implicitly defines (and defines the limits of) a set of possible system functions.
it reminds us that modules — used as containers for “application global” values – aren’t limited to supplying constants and pre-set values.
(this is a major theme of michael jackson’s 1995 book, system requirements and specifications and his new book, problem frames .
on unix systems, a directory whose name begins with a dot is a“hidden” (or “dotfile”) directory.
so now we have four basic kinds of arguments.
the process of converting a plain text into a specific configuration of 1s and 0s is a process ofencoding.
since mike was talking about arguments, he was talking about a container forarguments.
there is also a pretty nice rest dingus at siafoo, at www.siafoo.net/tools/rest.
the connection between characters and bit configurations is the numeric character identifier, the “code point”.
so you have to be careful not to pull them loose.
yet this is what the use case approach encourages requirements analysts to do.
if youdo realize what you’ve done, you probably need to addanother statement to the function, specifying that x is global.
(4) finally, the same code snippet with collapse=true, so the code snippet initially displays as collapsed.
"minion.py" import mem def main(): print("minion says:",mem.x) mem.x =
programmers at work: interviews with 19 programmers who shaped the computer industry by susan lammers dreaming in code: two dozen programmers, three years, 4,732 bugs, and one quest for transcendent software by scott rosenberg beautiful code: leading programmers explain how they think by andy oram and greg wilson making software: what really works, and why we believe it by andy oram and greg wilson masterminds of programming: conversations with the creators of major programming languages by federico biancuzzi and chromatic coders at work: reflections on the craft of programming by peter seibel the pragmatic programmer: from journeyman to master by andrew hunt and david thomas code complete: a practical handbook of software construction by steve mcconnell (or thesecond edition) code: the hidden language of computer hardware and software by charles petzold the soul of a new machine by tracy kidder
first, even two bytes are not enough to store a number as big as a zillion.
how to remove the programmable chip from an evolution keyboard first, make sure you have read “the anatomy of an evolution keyboard” (above).
there are three points worth noting about this process.
controls will pop up that allow you to pause the show and to step forward and backward.
when coding in python, i occasionally encounter situations in which i wish i could code multiple constructors (with different signatures) for a class, the way you can in java.
but it also has a sort of “continued on the next byte” mechanism that allows it to use 2 bytes or even 4 bytes if it needs to (as it might, for chinese characters).
(i think that one of my email files must have been corrupt, and when i compacted it, the compaction process wiped out messages that should not have been wiped out.)
i could almost as easily have called the pattern theglobals containerpattern.
chars.next()comments (6) this post is about java, and has nothing to do with python.
that mechanism is a “sigil”: a special character or string of characters that indicates the beginning of a key.
also note that an export cannot be updated.
in short, the analog of the chocoholic’s diet (in which the unfortunate dieter consumes only, or mostly, chocolate) is what we might call theuse case approach (uca) in which the unfortunate software development organization uses only, or mainly, use cases to gather and document client requirements.
this assumption is often false, and when it is false, the consequence is that significant ambiguities in the system specification remain hidden until they emerge and plague the later stages of the development project.
all they have to do is to import config.py.
and so on, and so on, and so on.
call them “code points”.)
26 z 27 a 28 b ... 52 z 53 (space) 54 ?
and that means that your happy little plain-text string must be representedby some specific configuration of 1s and 0s, so that when somebody wants to retrieve that collection of 1s and 0s and convert it back into readable plain text, they can.
(this is obscured by the fact that a single-character key is also automatically a fixed-length key.)
[jackson, 1995, p. 158] several of the ideas in this paper are derived from the works of michael jackson, and from ben kovitz’s short discussion of use cases in practical software requirements (pp.
and since the unicode standard does not require the use of the bom, virtually nobody puts a bomin files encoded using utf-8.
you can see the glidepoint cables running from the touchpad in the top of the keyboard to the motherboard in the bottom of the keyboard.
so you think: let’s just use an 8-bit encoding, but with a twist.
and i found some good stuff.
but problems come up when handling pieces of data, like large numbers and strings, that are stored in multiple bytes.
all you really need is a single line of code.
or maybe i should say, they just don’t fit my brain.
- on output, if newline is none, any '\n' characters written are translated to the system default line separator,os.linesep.
for western programmers, that means that utf-8 is both efficient and flexible, which is why utf-8 is the de facto standardard encoding for exchanging unicode text.
having the concept of a “clean copy” makes it easier to understand the next question… checkout vs. export a frequently asked question about subversion is what’s the difference between a “checkout” and an “export” from the repository?
how to “reboot” the programmable keyboard shut the computer down.
but it worked, and it made my life a lot easier.
learning that led me to investigate ways to backup my email files, and i found this:five ways to keep your emails backed up for backing up thunderbird files, it recommends mozbackup as being fast, free and easy to use.
first, we create the “read-ahead” generator: def readahead(sequence): for item in sequence: yield item yield none # return the "end of file mark" after the last item
and on those occasions theglobals
a 1 0000 b 2 0001 and so on.
comments (6) after my earlier post about northgate keyboard repair it occurred to me that this information might be useful.
fourth lambda is confusing because: tutorials on lambda typically introduce lambda as a tool for creating anonymousfunctions , when in fact the most common use of lambda is for creating anonymous procedures.
here is a final thought about wraplines.
what i means is — it doesn’t try to figure outwhat is imported by the star import.
readahead(list(line))
first, it suggested that subversion works like pvcs: that there is a typical round-trip usage pattern consisting of
when you do this, you may break a few of the prongs that hold the chip to the motherboard.
they were heavy keyboards built like tanks, featuring buckling spring key-switchesnotable for their distinctive clicking as you typed.
really, there is virtually nothing class-like about this class; for instance, you probably will never instantiate it.
just as the popularity of the “sugar buster’s diet” has forced doctors and dietitians to issue warnings about the nutritional deficiencies of such a diet, the popularity of the use case approach makes it imperative to point out the deficiencies of use cases as a requirements-gathering tool.
if you don't use an email client, and do all of your email work through a web interface to your internet service provider, then this is not an issue.]comments (1) another entry in an irregular series of posts about unicode.
i will use the term keyword argument to cover both named arguments and flags.
[x for x in arglist] def initializefromvector(self, vector): self.values =
with theglobals class pattern, a module’s globals are actually attributes of an object, a globals class.
when you make the things — x, y, and z — available: a. do you make them available in global variables, or in arguments that you pass around?
in summary, unicode = ucs (definition of a universal character set) + utf (techniques for encoding code points in bit-configurations)
so more and more folks will have a need to reverse a string.
it works as follows: -
so if you’re not backing up your email files, take a look atfive ways to keep your emails backed up (and read the comments, which are useful) or google something like“email backup”.
the importance of white space is touched on in a tip in the official rest introduction, which talks about inline markup – markup for things like italics, bold, monospaced text, etc.
just in case someone might find this useful … i recently had something bad happen to me.
imagine trying to redo a series of commands by repeatedly punching ctl+y… and watching your source code evaporate!
so the development of use cases has a place in the problem solving process… but that place is not as thefirst step, and it is not as the only step.
"-xvf"indicates the concatenation of three single-character flags: “x”, “v”, and “f”.
as i type this, it is almost midnight on march 11, 2011, and bob has only 3 evolution keyboards left.
each use case answers questions derived from specific events: “how does the system get told that a book has been returned?” or “how does the system know when to generate overdue-notice letters?”
so with utf-8, the problem of knowing the order of the bytes within the chunks is simply a non-issue, and a bom is pointless.
this can be useful sometimes.
str("i found ", filecount, " files in ", foldercount, " directories" )
for the purposes of this analysis, i prefer not to use the traditional unix vocabulary ofoptions, for a number of reason.
chained assignment (or more precisely, code thatlooks like chained assignment statements) is recognized and supported as a special case of the assignment statement.
the code was as ugly as sin and a maintenance nightmare.
and we want to specify two arguments on the command line: the name of the file, and the name of the author.
what is an encoding?
there are times, however, when you have a sequence that you need to process with the read-ahead technique.
and there are many different encodings for speech as writing.
then, like they always do, the quick-and-dirty scripts grew into programs, and then grew into a full-blown system.
second, explaining things this way was confusing because subversion doesn’t really have a checkin command.
a project is basically a directory.
you add in thecuneiform characters and the sanskrit characters and greek, japanese, chinese, and korean characters.
it should simply be there along with the other tools, so that it is available when it is the right tool for the job.
i’m a recovering “global” user.
the real difference between a single-dash sigil "-"and a double dash "--"sigil is not the difference betweenone and many, but the difference between fixed-length and variable-length keys.
“little” means “least significant”.
seesubversion docs for export.
but even if our clients will let us get away with wiggling out of all responsibility for planes in ditches (something that seems extremely unlikely), this still won’t cut it.
where the plain text is soundwaves (e.g. music), it can be encoded as an mp3 file.
i used a small (but long) electrician’s screwdriver.
these were real keyboards —no crappy “rubber dome” key switches allowed.
in fact unicode defines not one but several methods of mapping code points to code values.
how can you tell which, if any, use cases will be affected by the change?
it is the single most common myth about unicode, so if you thought that, don’t feel bad.
the workingcopy directory contains everything you need in order to be able to work with subversion, including an .svn administrative directory.
in java, what is the difference between an abstract class and an interface?
where the plain text is a movie, it can be encoded as a wmv file.
those are the cables that you don’t want to disturb.
that’s part of the reason why we — as a profession and as an industry — continue to do such a poor job of requirements gathering, and continue to have so many system failures.
and that seems to me to be a perfectly reasonable way to do business, not just for pyflakes but for anything short of the super deluxe hyperdrive model static code analyzer.
third, the usual definition ofoption is not very useful.
what do you tell him/her?
at this point i can hear a few stomachs churning.
i can live with the risk that i’m re-inventing the wheel.
— steve ferg for comparison, let’s start with a slightly different question.
step 2 can be omitted, but only if the application itself will do the semantic checking rather than expecting the parsing module to do it.
when you finish, you have a complete (you hope) set of characters.
-file_c.txt myprog is going to see “-file_a.txt” and (since it starts with a dash, the sigil) myprog will try to handle it like a keyword argument.
so (to put it in the most obtuse way possible) a paragraph is a chunk of lines that is separated from other chunks of lines by two newlines.
my hypothesis is that rest interpreted line a and line b as a definition list —
then it can accept either this
if you are feeling uncharitable, you could say that rest is fragile or flaky; if charitable, you might say that it is very sensitive.
the paragraph is the basic building block of rest.
why do we need lambda?
i don’t think anyone has yet given this pattern a name, so i will propose the nameglobals class pattern.
he was having problems capturing the requirements because his users did not use the word “train” consistently.
and in the spirit of beginners introduction for dummies made simple, let’s begin at the beginning: by distinguishing big and little from left and right.
when i “commit” my changes, i send the files from my workingcopy to the main repository.
the whole purpose of systems analysis methodologies, in fact, is to provide guidance for situations in which the process is not so simple and mechanical.
a: because java doesn’t support multiple inheritance.
the default for wraplines is true, which causes long lines to be wrapped.
one reason, of course, is that we want to keep a secret.
still, i think the problem and its solution are worth a quick note.
note that in the following slideshow (showing the repair of an evolution keyboard) you can mouse-over the image.
notice that there is no category for “lazy and stupid people”.
but now suppose you want to put this string — “hello, world!”
* enclosed text * some text.
second, even if you decided to usefour bytes (32 bits) for each character, your list might still keep growing and someday even 32-bits might not be enough.
it is just a string and you can (if you wish) do standard string-type operations on it, such as taking a substring (a slice).
then it emerged that the customer had in mind 140 reports of radically varying content, and the real requirement for the system — what the customerreally needed — was a system that could store a history of all of the kinds of events that could affect securities.
character set |------------------------|
for some applications, there clearly is domain information that must be specified in the system requirements, but which has no natural home in any particular use case.
i was looking for something that would get me up and running quickly.
back in the 1970′s, most business application programs did their work by reading and writing sequential files of records stored on tape.
jsd views a software machine as a simulation in which model processes (coroutines running inside the system) simulate real-world processes.
that means that as a general rule, you should always run an svn update : now, having mastered the concept of an .svn directory, we can understand many things, even arcana such as whyserving websites from svn checkout considered harmful.
(bob noted that he removes the chip from any keyboards that he sells.)
the northgates are programmable keyboards — they contain a programmable chip.
inline markup by itself (surrounded by whitespace) or in the middle of a word won’t be recognized.
this is the real problem with the use case approach.
skip the section on the “global” keyword in your copy ofbeginners guide to learning python for dummies.
showing file changes the reason that subversion can allow “a user to see what changes they’ve made without even contacting the server” is that the subversion diff works only on the workingcopy directoryon your own pc.
i had a lot of variables that i needed to pass around.
and that’s the basics.
but a file in utf-8 encoding is an ordered sequence of 1-byte chunks.
i haven’t read them all, but i think that they are all probably worth reading.
basically, pyflakes ignores it.
line c so rest has rejected a paragraph with irregular indentation.
so… there are four reasons that i can think of.
i have been able to find an online rest editor.
i don’t know whether the problem lies in rest or in me.
in order to write a string to a file, you must encode it using some encoding system (such as utf-8).
the need to encode/decode strings when writing/reading them from/to files isn’t something new — it is not an additional burden imposed by python 3′s new support for unicode.
svn update updates the workingcopy, not the repository.
in our example, we could move the initialization ofmem.counter out of the dosomething() function and put it in the definition of themem class.
so you think: we’ll use two bytes for each character!
comments (8) this goes under the tips and tricks category.
i’ve posted it here so that it can be available to other folks who might find it useful.
in this context, the term “book” is ambiguous betweenbook as a work of art, which has no physical location, andbook as a physical object (a “copy of a book”) that does.
"-file_a.txt" -n "-file_b.txt" in the first version of this post, i wrote that: it is a universally observed convention that - keyword arguments (named arguments and flags) are grouped together - positional arguments are grouped together - keyword arguments must be specified first, before specifying positional arguments
but in the default pycharm configuration, ctl+y is not redo but delete line.
communication happens when i encode my thought into language and say something — speak to you.
to do everything that he needs to do, a software developer needs a toolbox that contains a variety of tools.
comments (5) i’ve gradually been evolving a technique of coding in which i put module globals in a class.
after banging my head against the wall for a while, i googled around and quickly found avery helpful answer on stackoverflow.
and suppose that filenames can contain — and begin with — dashes.
a good example is the frequently-used “-v” or "--verbose" argument.
each will be identified by its own unique number.
only after that happens does the new file truly become part of the project by becoming one of the files in the central repository.
but i’m working on windows, and on windows pycharm’s out-of-the-box configuration of keyboard shortcuts is definitely a big gotcha.
the standard library alone contains three different modules: getopt (from the stone age),optparse (from python 2.3) and argparse (from python 2.7).
you can recover deleted email messages … but not after the email  file has been compacted.
in the case of the university library, once we have described the objects in the model, we can specify any system functions that can be described using a vocabulary of “books”, “copies of books”, and “university members”.
still — the lack of an explicit return statement is, i think, part of what makes it hard to grok lambda, or at least, hard to grok it quickly.
right now, we’re not interested in keeping secrets; we’re python programmers and we’re interested in unicode.
note that the model of reality isn’t just something that is nice to have in order to support the descriptions of the use cases.
and finally, the term option implies optionality.
updated 2011-11-09 to make it easier to copy-and-paste the [sourcecode] template.
the big end of 1776 is on the left.
when you invoke an application from a command line, it is often useful to be able to send one or more pieces of information from the command line to the application.
it might look like this: projectx
jsd uses action structure diagramsto represent model processes.
in the real world, of course, the selection of characters for the plain-text alphabet is influenced by technological limitations on the encoded text.
so the logical thing to do, of course, is to write the introduction that i would like to have read.
first, i got a copy of the free online subversion documentation version control with subversion.
just rename mem.py to config.py, stuff it with a bunch of constants or configuration variables, and you have a typical python file for defining constants or setting configuration values.
how do you know what you’re reading?
that is why in this post i avoid the expression “working copy” and instead use workingcopy.
see understanding big and little endian byte order.)
but suppose i want to add a new module to the project, called projectx_utils.py.
use cases can be written at a very high level of detail, or at a very low level, or anywhere in between.
but the nightmare stopped when i started putting all of my formerly global variables into a global class likemem.
for a quick overview of how this works at the bit level, take a look at the answer bydsimard to the question how does utf-8 “variable-width encoding” work?
second, i got a copy of mike mason’s excellent pragmatic version control using subversion (2nd ed.).
so i had to dig deeper.
and because of that mental model, many of the subversion tutorials were quite confusing.
only after we have disambiguated the word “book”, can we explain, for instance, why thebook involved in themember checks out book use case is not the same as the book in the member reserves book use case.
the return statement is, in a sense, implicit in a lambda.
somepythonvariable = 1 # this is a long, single-line, comment.
a pattern needs a short, catchy name.
i talked with bob tibbetts of northgate keyboard repair ( http://www.northgate-keyboard-repair.com/) and he explained the situation.
a requirements-gathering methodology that consists of writing use cases is no methodology at all, because it provides no help in systematically addressing the problem.
the bom is a two-byte marker at the beginning of a file that tells what encoding the file is using.
in my post i wrote “sometimes globals are the best practical solution to a particular programming problem.”
which means that we have two different patterns.
lambda *x: sys.stdout.write(" ".join(map(str,x)))
i’m going to call that representation “plain text”.
for those familiar with jsp, the input structure diagram looks like this.
self.sillyerrorscount = 0
in roman numerals, 1776 is represented as mdcclvi.
the consequences of excessive chocolate consumption are very real and easy to see (on the bathroom scale, for instance).
the pop-up tools allow a reader to view or print the entire source code snippet if he wants to.
there are short cables that go from the glidepoint touchpad in the upper part of the keyboard to the “motherboard” in the bottom part of the keyboard.
… to run the model, we need to create some test data – a stream of sensor events – that we can feed to the controller.
in contrast, the variable-width encodings are designed to be short, but expandable.
and in a way it is no big deal.
comments (2)comments (2)""" for documentation of the webbrowser module, see http://docs.python.org/library/webbrowser.html """ import webbrowser new = 2 # open in a new tab, if possible # open a public url, in this case, the webbrowser docs url =
the .svn admin directory contains pristine (unchanged) copies of files that were downloaded from the repository.
as jackson points out in a recent paper, it is almost impossible for software developers to build correct software if they don’t understand the problem domain, and how what they are doing relates to what happens there.
“checking out” a file from the repository means that you get a local working copy of the file, and you lock the file in the repository.
ideally, we’d like for the data in the file itself to be able to tell the recipient the byte order (big endian or small endian) that was used when the data was encoded and stored in the file.
directories that contain temporary files created during checkouts, commits, update and other operations.
so what i’m going to describe may be standard behavior for editors on *nix, and nothing surprising to say, ubuntu programmers.
“big” in this context means “more significant”.
learning that led me to investigate ways to backup my email files, and i  found this:five ways to keep your emails backed up for backing up thunderbird files, it recommends mozbackup as being fast,  free and easy to use.
at that point, the organization has got all the methodology help that it is going to get out of the use case approach.
david goodger notes (in the first comment on the first version of this post) that i am not using the traditional unix command-line lexicon.
this is another one.
with it, all of the other pieces of the puzzle fall into place.
here is what i learned.
the beauty of using a globals class is that you don’t need to haveany “global” statements in you code.
press the escape (esc) key down and hold it down while you power up your pc.
assyrian (cuneiform characters).
consider the term “book”.
you can build a function in the normal way, using def, like this: def square_root(x): return math.sqrt(x) or you can use lambda: square_root =
so this is another reason why we might need to be able to quote argument values: to “hide” a sigil character inside a value.
when you write out the unicode strings, you specify the encoding to be used when writing the bits and bytes to the file.
in software requirements and specifications (entry “requirements”) michael jackson describes an incident in which an airplane overshot the runway when attempting to land.
button(frame, text="22", command=self.buttoncmd22) btn22.pack(side=tk.
i’m sorry that we got to this point at the end of the tutorial, rather than at the beginning.
so i did it anyway, and everything seemed to work out ok.
in more than one case, i’ve seen a project start with scenarios, only to end up with a functional architecture, because they treated each scenario independently, creating code for each thread of control represented by each scenario.
if you click on a tab to close a file (a file with unsaved changes), pycharm saves the file and closes it.
“checking in” a file means that you copy your local working copy of the file back into the repository and you unlock the file in the repository.
so, what does the globals class pattern buy you?
and if you aren’t familiar with those conventions,the documentation summarizes them.
[directory] projectx.py projectx_constants.py .svn
as the code evolved,the argument lists got longer and harder to manage.
now imagine that that we have two partially abstract classes a and b. both have some abstract methods, and both contain a non-abstract method called foo().
this post contains information written by a subversion newbie in the hopes that it will be useful to other subversion newbies.
but this creates a bullet item.
so you think: we’ll use one byte for each numeric identifier (code point)!
we might need to write a command like this, which would cause problems.
and i can understand that someone else, simply as a matter of personal taste, might prefer to specifywraplines=”true” all of the time.
i like the fact that you can easily tell when a variable is global simply by noticing themem. modifier.
make x, y, and z globals
first of all, on windows ctl+z is the standard shortcut key for undo, and ctl+y is the standard shortcut key for redo (or in some contexts, do again).
comments (8) this post is for folks who blog about python (or any programming language for that matter) on wordpress.
in describing a university library application, for example, in the real-world model we would describe books and copies of books, describe what counts as being auniversity member for the purposes of using the library, and so on.
this is the myth that unicode is what is known as a multibyte character set (mbcs) or double-byte character set (dbcs).
traditionally, computer system specifications focus on the states and the transitions between the states: they view the system as a state machine and use state transition diagrams (stds) to specify the behavior of the machine.
data: f = open(filename, "wb") f.write(newdata) f.close()
but subversion doesn’t work like this, at least not by default.
on unix, this is traditionally an equal sign “=”, like this.
[3] python developers who are familiar with lisp have argued for increasing the power of python’s lambda, moving it closer to the power of lambda in lisp.
= bx.vector works for me.
it is documentedhere.
i had no rigorous or well-defined selection criteria, and some books on the list are quite different than others.
there aren’t many essential nutrients in chocolate, of course, but in and of itself that is not a problem.
it used to be said that no one ever lost their job by buying ibm; today, no one ever loses their job by adopting use cases and uml.
filed under: miscellaneous —  steve ferg @ 10:17 pm just in case someone might find this useful … i recently had something bad happen to me.
and because your list is meant to include every character in the known universe, you call it the universal character set, or ucs.
what you need is a standard marker at the beginning of files to indicate what encoding the file is in.
so if you know of some other discussion of this topic, please leave a comment and tell me about it.
note that this code is wrong.
first of all, the termoption tends to be unix-specific; on windows the term parameter is more frequently used.
how do i check it back in?
naturally, we can make our plain-text alphabet much larger if we know that we can use a technology that supports a larger encoded-text alphabet.
some time i might blog about what i like about pycharm.
http://master.dl.sourceforge.net/project/pyjsd/missgrantscontrollerinjsd.pdf a synopsis… miss grant’s controller: a jsd specification
you need to encode your strings as 1s and 0s so you can put those 1s and 0s into a file and send the file to someone else.
(this example is from mike’s tutorial.)
as part of this process, it basically ignores star imports.
but the designers of java made a different choice.
that is, java supports a limited form of multiple inheritance.
they are all, as thomas hobbes put it, “marks by which we may remember our thoughts”.
what i found was that there was one particular piece of information missing from most of the tutorials and introductions that i found.
the command svn add projectx_utils.py will add the file to the project by copying projectx/project_utils.py to projectx/.svn/project_utils.py.
that is sort of a language wart.
if we eat an unbalance diet, we suffer.
you might say that rest by its very nature has a very highinterpretation-to-signal ratio.
naturally, we would expect the problem-solving method to look something like this: a use case — as a description of an actor’s interaction with the system-to-be — is both a description of the system’s user interface and an indirect description of some function that the system will provide.
"--") to be expanded… optional arguments vs. required argments relationships between different arguments
whatever object-oriented-ness use cases have, they have acquired solely by rubbing up against true object-oriented methodologies into whose company they have fortuitously fallen.
they tell you what commands to issue, and when, but they don’t tell youwhy you are issuing the command at this particular time, or what the command is doing under the covers.
a recent case in point was a project to develop a securities information system.
utf-8, for example, can use as few as 8 bits (one byte) to store latin and asciicharacters code points.
python for example has a “method resolution order” algorithm that determines the order in which superclasses are searched, looking for an implementation of foo().
in many cases when people ask this question, what they really want to know is:what kind of things can i, and can i not, put into a lambda?
the key point from that documentation is this: newline controls how universal newlines works (it only applies to text mode).
so i want to have an understanding of what is going on here.
my old code worked just fine running under python2 (on windows).
the previous section describes what i think most unix programmers would say is the difference between single-dash and double-dash keys.
first of all, you don’t have to go putting “global” statements all over your code.
it may even be a good thing.
a question that i’ve had for a long time is: what is lambda good for?
finally i just bundled all of the variables into a single container object and passed the container around.
think of egyptian hieroglyphics, mayan hieroglyphics, the latin alphabet, the greek alphabet, arabic, chinese ideograms, wonderfully flowingdevanagari देवनागरी, sharp pointy cuneiform wedges, even shorthand.
here are some random (but curiously interesting) bits of information, courtesy of the microsoft support web-site articleexplanation of big endian and little endian architecture.
no handyman could be successful if he relied on a single tool (a hammer, say) for everything that he did.
so the second step — the checkout command — is absolutely necessary in order to get started.
he says “i like apples”.
frame(parent) frame.pack() btn22 =
so that is why subversion has a “svn add” command.
my original post assumed that in at least some situations you might answer question a with “use global variables” and then went on to propose that in those situations the best answer to b is “put them in a container”.
the distinction between plain text and encoded text is relative and context-dependent.
that means that python hastwo tools for building functions:def and lambda.
rotate the top using the location of the touchpad as the pivot point — that way you will disturb the touchpad cables at little as possible.
and the way to create a workingcopy directory is to run a svn checkout command against the repository on the server.
in the context of subversion, “working copy” is a very specific term of art — a subversion-specific technical term.
why isn’t it as powerful as lisp’s lambda?
this is not, actually, correct.
back in the high old times, we recognized two different kinds of subroutines: procedures and functions.
that means that you don’t need to worry about the glidepoint cables, so you can lift the keyboard top completely off in order to access the programmable chip.
when i was learning python, i of course read the usual warnings.
and that placed certain limitations on the kinds of things that could be done in lambdas.
so i followed my mom’s tongue in cheek advice (“get ‘em before the hoarders do.”) and got more.
it is important to recognize that utf-8 is able to represent any character in the unicode standard.
when i googled for answers to it, i didn’t very much like any of the answers that i found, so i wrote my own.
from this perspective, writing is encoded speech.
so i thought that i would post an example of the technique that i use, in case others might find it useful.
lambda was a relatively late addition to python.
the list is held together by nothing more than a personal gut feel that these books have asomething — a je ne sais quoi — in common.
[jackson, 1983, p. 64]
the subordinate module is minion.py.
suppose we have an application “myprog” that accepts one or more keyword arguments that start with a dash sigil, followed by one or more positional arguments that supply filenames.
many of the online tutorials and introductions try to explain how touse subversion without explaining how subversionworks.
python will not become lisp.[3] third lambda is confusing because: lambda is usually described as a tool for creating functions, but a lambda specification does not contain areturn statement.
comments (6) i sort of like this.
i’ve lost my .svn directory
as our story begins — on a dark and stormy night, of course — we find our protagonist deep in thought.
the use case approach provides no natural mechanism for capturing such mathematical algorithms, business rules, and government regulations.
comments (6) the videos of pycon 2011 at blip.tv are fantastic.
you can just reboot the keyboard without removing the chip, of course, and that will fix the immediate problem.
to others, a “train” was just the locomotive.
on the top right-hand side, locate the programmable chip.
then we can write our code this way: items = readahead(listofitems) item = items.next() # get first while item: processitem(item) item = items.next() # get next here is a simple example.
in summary, the byte order — the order of the bytes in multi-byte chunks of data — is different on big-endian and little-endian computers.
the runway was wet, and the plane’s wheels were aquaplaning instead of turning.
use svn update to bring your working copy into sync with the latest revision in the repository: basically, what the update command does is to copy the project files from the central repository down to the .svn directory in your workingcopy.
at this point, projectx/projectx_constants.py.bak is what is called an “unversioned” file.
you don’t have to call it “str”, of course.
once the events in the lives of the objects have been described, the requirements analyst can approach the task of writing use cases in a systematic fashion, by writing a use case for each of the events.
button(frame, text="44", command=self.buttoncmd44) btn44.pack(side=tk.
but that proposition is debatable.
that’s the purpose of this article.
knowing about aquaplaning, we are tempted to say, is our client’s problem.
unfortunately, python doesn’t have a built-in function, nor do string objects have a built-in method, to do what they will want.
class mema: pass class
what is much more interesting is that we both agree on the answer to question b: use a container object.
that is because we have specified wraplines=”false”.
that would be a nice enhancement for wordpress — to allow a reader to collapse and expand a code snippet.
comments (8)comments (8) just use utf-8 and forget about the bom.
so i’m happy to announce — not the discovery, certainly — the christening of thearguments container pattern, which says, basically: sometimes when you have a lot of individual variables that you need to pass around to a lot of different functions or methods, the best solution is to put them into a container object and just pass the container object around.
you can read the answer here.
the left shift key didn’t work and several pairs of keys seemed to have exchanged places.
(question mark) 55 , (comma) ...
what if i am done with a particular file and i don’t want to have it checked out?
(in unicode-speak, the encoded-text characters are called “code values”.)
in utf-8, a byte and a chunk are essentially the same thing.
you understand me when — as a result of my speech — you have thesame idea in your mind as i have in mine.
it doesn’t depend on the flag keys being one character long — it would work just as well if the length for flag keys was fixed at two or even three characters.
i know of one easy way to solve this is to change the operation argument from ‘w’ to ‘wb’ but i am using a string not bytes!
so now when i want to convert a file from windows-style newlines to linux-style newlines, i do this: filename =
the command-line syntax for microsoft dos’sdir command (roughly equivalent to unix’s ls command) is basically dir
and finally, i’ve found stephen pincock’s codebreaker: the history of secret communications a delightful read.
perhaps you plan to send the file to a friend.
we can split and slice them, concatenate and search inside them.
symbol: c = chars.next() # read past the symbol while c: # process suffix characters suffixchars.append(c) c =
that gives us a plain-text alphabet of 75 characters.
well, i nearly fell off my chair when bob told me that such a thing actually existed.
it is “application global” — it is global across the multiple modules that make up an application.
they may not see much point in making a big deal about it, or in giving it a name and decking it out with the fancy title of “design pattern”.
the globals class pattern relieves us of of the burden of having to worry about it.
there areseveral encoding methods, and if you want to exchange text with someone, you need explicitly to specify which encoding method you are using.
think of it this way: a string is an abstract representation of text.
e.g. “/?” or “-h”) for the command-line documentation.
so the purpose of this post is to tell you — the subversion newbie — about that piece.
one thing that i learned was that the disk backup utility that i was using at the time did not backup my email files.
so the messages were not recoverable.
— into a file and save the file on your hard drive.
left) def buttoncmd22(self): self.printnum(22) def buttoncmd44(self): self.printnum(44)
i immediately ordered one, tried it out, and loved it.
in a more elaborate version of this technique, you can define a mem class, complete with methods, and make mem an instance of the class.
and he finds tutorials that start with examples that are entirely inappropriate for his purposes.
this was very confusing to an ex-pvcs user.
at this point i’m interested in syntactical issues, so i want to use a semantically neutral vocabulary.
the time has come to issue such a warning because the use case approach is quickly gaining in popularity in software development shops.
some languages allow multiple inheritance, and have a way to answer that question.
the globals class pattern makes it possible to create multiple, distinct groups of globals.
we saw this in our earlier example rename -o file_a.txt
some of the names start with “utf”, others start with “ucs”: utf-8, utf-16, utf-32, ucs-2, ucs-4, and so on.
import is the opposite of export.
what is a “clean copy”?
which means that you should always open a pickle file in binary mode: “wb” to write it, and “rb” to read it.
and for that question, i think a few simple rules of thumb will be sufficient.
where moderate consumption might be useful, chocolate tempts us to immoderate consumption.
leave a comment i originally wrote this in 2002, when use cases seemed to be all the rage.
you figure that you’ll need at least 3 bytes to hold the biggest number on your list.
where the plain text is an image, it can be encoded as a gif, or png, or jpg file.
y = a, in which the assignment statement y =
this: try: print(1) s =
suppose that we have a list of items (called listofitems) and we wish to process it using the read-ahead technique.
i (and others, of course) believe that jsd-style specifications are a more useful tool than stds and state machines for specifying many systems.
there are a variety of alternatives.
next let’s look at two modules that import and use mem.py.
the first activity in the requirements-gathering process must be the study and description of the problem-environment, the application domain.
but tools get worn and dirty and a few years ago my ultras were terminally filthy and starting to fail.
suppose you’re an english orientalist in, say, 1750.
the anatomy of an evolution keyboard working with evolution keyboards is tricky because the evolutions have the little glidepoint touchpad in the middle of the top of the keyboard.
the files in each administrative directory help subversion recognize which files contain unpublished changes, and which files are out of date with respect to others’ work.
we want to parse the line into 3 groups: indent characters, text characters, and suffix characters.
encoding |-------------------------------------|
if you’re a subversion expert (and it doesn’t take much to be more expert than i am) and you see something wrong, confused, or misleading here, please leave a comment.
they do not extend indefinitely, and a horizontal scrollbar is not available so that you can scroll as far to the right as you need to.
once we’ve specified exactly what a plain-text representation of a message looks like — a finite sequence of characters from our 30-character alphabet, or perhaps our 75-character alphabet — then we can devise a system (a code) that can reliably encode and decode plain-text messages written in that alphabet.
we can then use those words when we write our descriptions of the functions and use cases that we wish the system to support.