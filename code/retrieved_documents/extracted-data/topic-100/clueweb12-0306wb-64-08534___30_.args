preliminary work in embedding and calling swift from the r data analysis language indicates that this approach may yield new and highly-productive methods for easily writing parallel and distributed scripts.this will be a good project for students with a strong interest in distributed computing, performance analysis and modeling, and graphical display of information.this project will deal with many file naming conventions and data access services, and will provide mechanisms to maintain and access large-scale collaboration-wide data catalogs.swift description: in this project we propose to enhance both the display and control of running parallel workflows, adding capabilities to probe down to individual remote worker nodes to gain detailed insight on application performance, and generate an informative set of dynamic plots by which users can fully understand all aspects of their script's and application's behavior and performance this will be a good project for students with a strong interest in distributed computing, performance analysis and modeling, and graphical display of information.the swift parallel scripting system can be an ideal tool to enable new users of teragrid and opensciencegrid to rapidly achieve the ability to transition and scale up from a local sever or cluster environment to a more powerful grid environment with far greater computing resources.this project proposes to tackle this issue by intelligently extracting information from the shared computing environment, leveraging the power of social network analysis and complex network theories.we need more flexible management to limit the length of time a user can hold a connection, address prioritization and responses to overburdened services, and prevent starvation.this project will involved refining the mapping model, and designing a new set of mappers and mapping conventions, based on user experience with the current mapping model, to make this style of script-writing even easier, more natural, and more robust and reusable.the portal provides the means to integrate distributed data management, workflow launch and status monitoring, result tracking, analysis and visualization.this project will entail selecting one language to experiment with (python is preferred), implementing an experimental library interface to swift, and evaluating its usability, expressiveness, and performance on simple test cases and on a set of scientific applications.the task is to provide a clean api and implementation which takes requests and makes necessary calls in the service, then provide polished and well-documented command line tools which communicate with these apis.once the execution graph is partitioned, mechanisms need to be in place to coordinate the execution graph, and to ensure that performance (e.g. throughput of tasks/sec) is not impacted significantly.we want to make its many parameters as self-tuning as possible, we want to determine what necessary controls to provide to the swift end-user and make these as simple and usable as possible.this is an ideal project for junior programmers who seek an introduction to parallel computing and to scientific applications.at the same time, the ability to do this make such an approach an attractive vehicle by which new and prospective swift users can evaluate and learn the system.