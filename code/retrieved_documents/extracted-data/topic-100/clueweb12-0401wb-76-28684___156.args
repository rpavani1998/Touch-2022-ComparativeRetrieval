to do that, you'll need to check out a second copy of your repository.
this was the first book i ever read that said that the leading cause of software project failure was people, rather than technology.
.. - use the editor of your choice to create a file called earth.txt with the following contents: - easiest way to create a similar file venus.txt is to copy the one we have - cp earth.txt venus.txt - ls -t venus.txt earth.txt - note: the -t option tells ls to list newest first - check the contents of the file using cat (short for “concatenate”)
the most important idea in this course - improving quality improves productivity - i.e., the tools and techniques you must adopt to produce better code also
so learn how to do it well talk about tools first (because they'll make everything else less painful)
frog-11&program=bayes-hart - comment on this slide handling forms - we could handle form data directly - read and parse environment variables - read extra data from standard input - the mechanics are the same each time, so use python's cgi module instead - defines a dictionary-like object called fieldstorage - keys are parameter names - values are either strings (if there's a single value assocatied with the parameter) or lists (if there are many) - when one is created, it reads and stores information contained in the url and environment - program can then read extra data from sys.stdin - example: show the parameters send to a script - #!
in fact, because of cognitive dissonance, the person watching is much more likely to spot errors than the one typing - fewer errors translates into less time spent debugging - the earlier something is fixed, the cheaper the fix is - and pair programming helps ensure wider understanding of the system - more people able to work on more things - feels strange the first time you do it -
but there is no proof that you cannot crack rsa in another way.
this is not only the best introduction to python on the market, it is one of the best introductions to any programming language that i have ever read.
a combination of an instruction manual, a summary of the authors' empirical studies of pair programming's effectiveness, and advocacy, this book is the reference guide for anyone who wants to introduce pair programming into their development team.
- really don't want to write each method twice - anything repeated in two or more places will eventually be wrong in at least one.
while the book moves a little slowly in some places, the examples are exceptionally clear.
note: the purpose of this exercise is to teach you how to go back in time to get old versions of files—while it would be simpler in this case just to edit bio.txt, you can't (reliably) do that when you've made larger changes, to multiple files, over a longer period of time.
⌈[^abc]⌋ means “anything except the characters in this set” - ⌈.⌋ means “any character except the end of line” - ⌈\b⌋ anchors the match to a break between word and non-word characters - comment on this slide extracting matches - problem: to check for duplicate line numbers in an assembly language file - line numbers are the first thing on the line, terminated by a colon - first try: search each line with a regular expression - if it succeeds, extract the line number - import sys, re # start of line, optional spaces, digits, more optional spaces, colon numbered = '^\\s*\\d+\\s*:' seen = {} for line in sys.stdin: if re.search(numbered, line): num = line.split()[0] if num in seen: print num else: seen[num] =
- permissions displayed as three rwx triples - “missing” permissions shown by "-" - example: rw-rw-r-- means “user and group can read and write; everyone else can read; no one can execute” - change permissions using chmod - example: chmod u+x something.exe gives the user execute permission to something.exe - example: chmod o-r notes.txt takes away the world's
the struct module - use python's struct module to pack and unpack - pack(fmt, v1, v2, …) packs the values v1, v2, etc.
but there's one big difference: it's possible to build tools to do refactoring for you - the eclipse ide for java is the best known example - highlight a method, say “rename”, and the ide changes all the calls too - able to do this because it continuously re-parses source code as you type - move methods up into parent class, split classes in two, and much, much more - if this doesn't convince you to upgrade from a dumb editor, i don't know what will… - very important to have unit tests in place before starting to refactor - without this, you have no way of knowing what else your refactoring might have broken - [feathers 2005] is an excellent guide to how to fit useful tests back onto inherited applications - comment on this slide and a little light reading - [brand 1995] looks at how buildings can be designed to change and grow gracefully over time - everything he says is directly applicable to large programs -
birthday.keys() ['turing', 'newton', 'darwin'] items return a list of (key, value) pairs.
if you've added a few new features, changed part of the gui, etc., you increment the minor version number and throw it to customers.
describes an experimental comparison of pseudocode with equivalently-structured flowcharts, in which flowcharts did much better than in earlier studies.
build numbers are what developers care about: they're often only matched up with version numbers after the fact (i.e. you create build #1017, qa says, “yeah, it looks good,” so you say, “all right, this'll be 6.1.0,” and voila, you have 6.1.0.1017.)
if someone checks in a large change set, and code coverage immediately drops from 80% to 70%, you probably want to have a close look at those changes - comment on this slide profiling - rather than just flagging lines as they are executed, we could count how often each line executes - the more often something runs, the more important it is to figure out how to make it fast
and if there's a method called teardown, it will be run after each test - example: test whether a function can trace make-like dependencies correctly - several kinds of tests to run, and several fixtures to run them on - so create all the fixtures in setup, and use them in the test methods - alternatively, create a separate test class for each fixture - worth doing if creating a fixture takes so long that you don't want any redundant setup - class testdepends(unittest.
it finds lines in files that match a pattern and prints them out.
yes, it can be confusing, but remember: we're trying to run one operating system's tools on top of another - comment on this slide basic tools ownership and permission: unix - on unix, every user belongs to one or more groups - the groups command will show you which ones you are in - every file is owned by a particular user and a particular group - owner can assign different read, write, and execute permissions to user, group, and others - read: can look at contents, but not modify them - write: can modify contents - execute: can run the file (e.g., it's a program) - ls -l will show all of this information - (along with the file's size and a few other things)
- based on studies from the 1980s, it's what everyone looks at anyway - just count the number of warnings in c/java books about misleading indentation - doesn't matter how much you use, but: - everything in the block must be indented the same amount - tabs are expanded so that they're equivalent to (up to) eight characters - so don't ever indent with tabs, since your editor may interpret them differently - many editors understand python indentation, and will help you get it right
and it's more efficient than posting them to the mailing list - whole team has to agree on what importance values mean - low: cosmetic ui problem, minor workflow annoyance with obvious workaround, etc. - high: program crashes, returns wrong result, inadvertently launches nuclear assault on iceland, etc.
exercise 3.2: create a file course/ex01/bio.txt (where course is the root of your working copy of your subversion repository), and write a short biography of yourself (100 words or so) of the kind used in academic journals, conference proceedings, etc.
- so learn how to do it well - talk about tools first (because they'll make everything else less painful)
each threat is described and analyzed in detail, and the author gives plenty of examples to show exactly how the attack works, and how to block (or at least detect) it.
like architects, most programmers spend most of their time renovating, rather than creating something completely new on a blank sheet of paper.
or what side effects (if any) this function has - read the function body - for each citation element in body… - …get the value of the element's ref attribute… - …make sure it's in bibinfo (presumably a dictionary)… - …set the citation's display and href attributes - hm…that means biboutput must be the name of the output file - notice how the explanation creates larger chunks from raws lines of code - consult external documentation - in this case, there doesn't appear to be any - examine call(s) to the function
x = 1.0 / values[i] indexerror: list index out of range you can associate any number of except blocks with a single try they're tested in order—whichever matches first, wins if a “naked” except appears, it must be the last one (since it catches everything) better to use except exception, e so that you have the exception object exceptions are organized in a hierarchy e.g., zerodivisionerror, overflowerror, and floatingpointerror are all specialized versions of arithmeticerror
if there is extra data, the web server will send content_length bytes to the cgi program on standard input - the cgi program sends data back to the web server via standard output - in most cases, the web server forwards this directly to the client - which means that the cgi program is responsible for creating headers - comment on this slide mime types hello, cgi - simplest possible cgi pays no attention to query parameters or extra data -
this work proves that by being conscious of the many things that turn women off computing, and by viewing computer science from different angles, we can attract a broader cross-section of society, which can only make our discipline a better place to be.
concurrently, he uses those insights to argue that since buildings are always going to be modified, they should be designed to accommodate unanticipated change.
debugging with print statements is: error-prone: adding print statements is a good way to add typos particularly when you have to modify the block structure of your program to fit it in time-consuming
fail += 1 except exception, e: error += 1 for (label, count) in (('pass', pass), ('fail', fail), ('error', error)): print '%s: %4d' % (label, count) runalltests(overlap, tests) - advantage: reusability - can use this to test any function - disadvantage: obscurity - the extra level of abstraction makes it harder to understand what's going on -
turing&forename=alan - comment on this slide web services - suppose you want to write a script that actually does search google - construct a url: easy - send it and read the response: no problem - parse the response: hmm, there's a lot of junk on the page… - many first-generation web applications relied on screen scraping - problem is that whenever the site changes its layout, your application breaks - modern web services are designed more intelligently - most web services use the simple object access protocol (soap)
testcase - the former ensures that it inherits all the common test cases - the latter ensures that the framework will find it, and know how to run it - this class creates a fixture, and adds a few fixture-specific tests - class testempty(unittest.
constructor sets the point's initial coordinates - the getter methods replace raw read access - the setter methods check the constraints on the state of the class - keep the memory model in mind when thinking about objects - comment on this slide defining a queue - a queue can do three things: - enqueue an item - dequeue the front item - which raises an exception if the queue is empty - remember, error behavior is part of a class's interface too - report whether it is empty or not - which is less powerful than reporting its size - a queue may store items in many different ways - the simplest in python is probably to use a list… - …but it isn't the only one… - …and whoever is using the class shouldn't care -
once you have committed your changes, type svn log in your course directory.
in chemical engineering last year, now doing an m.sc.
each one is just a few sentences long - each one should fit on a 3×5 index card - describes functionality, not features - i.e., what the system can do, not how it does it - it's the developers' job to figure out what features to add to implement the desired functionality - set of user stories define the project requirements - as project evolves, throw away or update old ones as well as adding new ones - developers then estimate how long each user story will take to implement in ideal weeks - i.e., five perfect interruption-free days - customers and developers then decide which stories to include in this iteration, and which to leave for the next - if something is too big to fit into an iteration, break it down into smaller pieces - you're going to do this anyway when developing it… - comment on this slide pair programming - pair programming is the practice of having two people work together at one computer - one types while the other watches and comments - predates xp, but was popularized by it - seems like a waste of resources, but: - two pairs of eyes are more likely to spot errors as they're being made than one -
- a single trac installation can manage any number of projects - relies on host to handle authentication - every user must have an account on the underlying linux system - one less password for them to remember - home page looks like pretty much every other web portal's home page - examine each of the components in turn below - comment on this slide repository browser and timeline - the repository browser is a web-based interface to subversion - read-only: cannot update local files, or commit changes - implementing this would require giving web pages the ability to mess with your hard drive - if you don't know why this is a bad thing, please re-read the lecture on security - read-only is more useful than you'd think - browse directories and files to see what they contain - figure 25.3: browsing directories and files - view old versions of files - figure 25.4:
if that code is exercised by unit tests, then changes can be made quickly and safely; if it isn't, they can't, so your first job when you inherit legacy code should be to write some.
- tools are amplifiers: they allow good programmers to be better, and bad ones to be worse.
1: checktabs('', sys.stdin) else: for filename in sys.argv[1:]: infile = open(filename, 'r') checktabs(filename, infile) infile.close() except ioerror, e: print >> sys.stderr, e - note: could equally well put the exception handler: - inside the else (since we don't think i/o errors can happen while reading standard input) - inside the for (so that if an error occurs while reading one file, the program continues on to the next) - comment on this slide running tools - now, how to run the validation tool?
in interpreted languages like python, you can also switch into debugging mode in the middle of an interactive session sometimes also do post mortem debugging when a program fails badly (e.g., illegal memory access in c++), it creates acore dump copies all of its internal state to a file on disk can then load that dump into the debugger, and see where the program was when it died not as good as watching it run… …but sometimes the best you can do modern graphical debuggers typically show: the source code the values of variables that are currently in scope i.e., global variables, parameters to the current function call, and local variables in that function a panel displaying what your program has printed to standard output and/or standard error figure 11.1: a debugger in action
working together what versions actually mean - the discussion above referred to “version 16 of spin.c ”, but in fact there is no such thing - instead, there's version 16 (or 17, or 18…) of the repository - users are supposed to try to keep the files in the repository in a consistent state - i.e., don't submit things that are half-done - since the next person to do an update would then be in the same half-done state you are - subversion therefore updates the version number on the whole repository every time a set of changes is submitted - each change set can affect any number of files (including adding or deleting files)
the book isn't just about psychology; you'll also learn a lot about how science gets done, and about the scientists who do it.
but doesn't address broader issues, such as programming practices - see the bibliography for others - check out some of the online resources as well - comment on this slide typographic conventions - code fragments - commands - definitions - - mathematics - ⌈regular expressions⌋ - "strings" - tags - attributes - urls source code.
- despite its name, it's anything but simple - luckily, there are libraries to hide the details for most widely-used web services - example: fetch information about a book from amazon - amazon has defined an api for web services - you need to get a license key in order to use it - they're free - allows amazon to throttle requests to one per second per client - use functions in amazon.py to search by various criteria - result is a list of objects with information about items that matched the search criteria - import sys, amazon # format multiple authors' names nicely.
it doesn't just show readers how to use unix---it explainswhy the operating system is built that way, and how its "lots of little tools" philosophy keeps simple tasks simple, while making hard ones doable.
on a virtual machine (java) - some combination of the two (c#) - nimble languages typically combine the compiler and the virtual machine - this means that most nimble languages can run interactively, like a shell - comment on this slide running saved programs - obviously don't have to retype program every time you want to run it - option 1: save program in a file with a .py extension, and type python filename.py - python reads and executes the commands in the file exactly as if they'd been typed in interactively - option 2 (unix only): make the following the first line of the .py file - #!
doing a commit - ensures that what goes into the repository has at least some chance of being sensible - ensures that what other people add to the course will conform to style and usage rules - course materials include several other tools - re-run sample programs and check that the output stored in the lectures is still correct - translate lecture notes, glossary, and bibliography into html - extract summary values from each element to create html version of course syllabus - etc.
- packing is easy: - unpacking is a little harder - use calcsize('i') instead of hard-coding the number 4 - 64-bit machines are on their way… - each pass through the unpacking loop, have to step up to the right location in the packed string - def unpackvec(buf): # get the count of the number of elements in the vector.
but it has the same problem as using the shell - exercise for the reader: construct an http query string that will do something evil - sql injection is a variation on the theme - cross-site scripting is the same problem in another guise - if a bulletin board or discussion forum lets you post html, you can include javascript in it
- inside the form, can have: - elements to let users choose values from a list - list items specified using elements - elements for other kind of data - if type is "text", get a one-line text entry box - if type is "checkbox", get an on/off checkbox - "submit" and "reset" create buttons to submit the form, or re-set the data to initial values -  sequence: search type: exact match similarity match
the rules - a week of hard work can sometimes save you an hour of thought.
but it's relatively easy to call c/c++ and fortran libraries from python - doesn't have all of matlab's numerical tools -
working effectively with legacy code.
more shell prev draft version 584 next redirecting input and output - a running program is called a process - by default, every process has three connections to the outside world: - you can tell the shell to connect standard input and standard output to files instead - example: save number of lines in all text files to words.len - $ wc -w *.txt >
it may not be glamorous, but knowing how to do it efficiently is essential to being a good programmer.
help you write more code, faster - comment on this slide who you are - user stories - important part of designing user interfaces for mass-distribution software - helps make discussion of features and usability more concrete - harry - 27; b.sc.
f) update the blue repository, and check that planets.txt now has the same content as it has in the green repository.
freq = {} for name in names: # already seen, so increment count by one.
the impact is that they can only inspect/update single records at a time via a browser.
the problem of not being able to access the bind molecular database remotely - bits in italics are typical answers: have your team members replace them with their answers (target market) affects scientists studying protein interactions.
for now, we will ignore both problems - write small programs that use the web, but aren't used by others - assume that everything else is reliable - comment on this slide under the hood - these days, the internet runs on a family of communication standards called internet protocol (ip) - defines everything from electrical signal strengths on up - using ip, process communicate through sockets - each socket is one end of a point-to-point communication channel - provides the same kind of read and write operations as files - every socket is uniquely identified by host address and a port number - a host address is four 8-bit numbers, like 24.153.22.195 - most addresses have symbolic names, like www.third-bit.com - a port is just a number in the range 0-65535 - 0-1023 are reserved for the operating system - most commonly used member of the ip family is transmission control protocol (tcp) - guarantees that any data sent is received, in order - lots of applications use tcp directly - email, instant messaging, ftp, games… - but don't worry: we'll be programming at a much higher level - comment on this slide
the operating system can only hold on to a limited amount of input or output data at a time, so increasing the buffer size only delays the problem figure 10.6:
- took less than a minute to write the four tests - uncovered one gap in the requirements, and one error in the first implementation - able to verify the fix almost instantly - sounds pretty good to me… - comment on this slide eliminating redundancy - setting up a fixture can often be more work than writing the test - complex data structures, external files, etc. - if the test class defines a method called setup, the framework will call it before running each test -
- python check_tabs.py file1 fil2 file… will work… - …but typing in a bunch of filenames every time would be annoying - which means that we wouldn't do it as often as we should -
it works best if both files are plain text (i.e., not images or excel spreadsheets).
the original paper comparing the performance of novice and master chess players when confronted with actual and random positions.
python's pydoc module does similar things - embedded documentation is more likely to be up to date than external documentation - it's right in front of programmers as they make changes -
inside values - strictly speaking, attributes are redundant - you should use attributes when: - each value can occur at most once for any element.
tim berners-lee creates hypertext markup language (html) for the world wide web - much (much) simpler than sgml - anyone could write it, so everyone did - problem: html had a small, fixed set of tags - everyone wanted to add new ones - solution: create a standard way to define a set of tags, and the relationships between them - 1998: first version of xml is standardized - a set of rules for defining markup languages - much more complex than html… - …but still much simpler than sgml - new version of html called xhtml was also defined - like html, but obeys all xml rules - still a lot of non-xml compliant html out there, though - comment on this slide
mercury.txt -rw-r--r-- 1 someone 1714 may 6 08:40 saturn.txt -rw-r--r-- 1 someone 881 may 6 08:40 venus.txt note: the command will display your user id, rather than someone .
compiling - the regular expression library compiles patterns into a more concise form for matching - you can improve a program's performance by compiling the re once, and re-using the compiled form - use re.compile(pattern) to get the compiled re - its methods have the same names and behavior as the functions in the re module - e.g., matcher.search(text) searches text for matches to the re that was compiled to create
and while the author's use of c may seem old-fashioned in an age of java and c#, it does ensure that nothing magical is hidden inside an overloaded operator or virtual method call.
accessibility - the web is not a particularly friendly place if you're visually disabled - screenreaders have a hard time dealing with web pages that use graphics instead of text for buttons… - top 10 accessible web authoring practices describes what you should do to make your pages more accessible - all of these things help search engines and other automatic tools as well - comment on this slide the document object model - the document object model (dom) is a cross-language standard for representing xml documents as trees - elements, attributes, and text all represented as objects - strengths: - much easier to manipulate trees than strings - same basic model in many different languages (which lowers the learning cost) - weaknesses: - needs a lot of memory for large documents - its generic model doesn't take advantage of the more advanced features of some languages - most popular alternative is sax (the simple api for xml) - turns an xml document into a stream of events - “element, element, text, element, text… - easy to do very simple things… - …but anything complex requires the programmer to reimplement a subset of dom - python comes with a simple implementation of dom called minidom - fast, sturdy, and well documented… - …if you understand all the terminology, and know more or less what you're looking for) - comment on this slide the basics - every dom tree has a single root representing the document as a whole - doesn't correspond to anything that's actually in the document - this element has a single child, which is the root node of the document - this node, and other element nodes, may have three types of children: - other elements - text nodes - attribute nodes - every node keeps track of what its parent is - allows programs to search up the tree, as well as down - example: - note: it's common to forget that text and attributes are stored in nodes of their own - some other python implementations of dom don't bother - make simple things simpler… - …but only a little bit - comment on this slide
etc. - domain model is for talking to users; class diagram is for talking to developers - an easy way to spot flaws in a design - tangled lines are usually a sign of tangled flow of control - one big class in the middle that talks to all the others are usually a sign of poor decomposition - twenty-seven layers of derivation are usually a sign that you should switch to decaf - comment on this slide sequence diagrams - last piece of the puzzle is to connect the system's static and dynamic aspects - a sequence diagram shows what methods objects call to communicate with each other during a particular use case - note: creating class diagram and sequence diagrams is also iterative - “discover” methods as you realize there's no way for x to ask y to do something - sometimes realize that one entity ought to be split into several, or vice versa - again, the discussion around the diagrams is as important as the diagrams themselves - comment on this slide actual order - now that you know what the pieces are, let's put them together - phase 1: - identify real-world domain objects and their relationships - start drawing domain model diagram - draw use case diagrams - don't write the use cases themselves yet - phase 2: - start writing use cases - create robustness diagram - iterate, iterate, iterate - update domain model diagram to reflect your discoveries - phase 3: - draw sequence diagram for each use case - create class diagram by combining information from domain model and sequence diagrams - phase 4: - write code that implements class diagram - most important rule: if you change something, update everything upstream from it that refers to it - e.g., if you add a method while writing code, put it in the class diagram and sequence diagram - comment on this slide a note on tools - drawing uml diagrams by hand is tedious, error-prone, and counter-productive - “counter-productive” because there's no way to automatically check a hand-drawn diagram against your actual code - specialized tools to aid in constructing diagrams have been around a long time - span the spectrum from: - pure modeling tools: help users create diagrams, but don't integrate with code - round-trip engineering tools: can translate models into skeletal code, and modified code back into models - some integrate with ides, support multiple languages, can talk to databases, etc.
his war stories are entertaining (although i think one or two are urban myths), and his advice is eminently practical.
- not nearly as sophisticated as desktop interfaces - although programmers are doing more every day (particularly using javascript) - create a form using a element - action is the url to send data to - method specifies the type of http request to send (e.g., "post")
- find out whether it's fast enough, and if not, what's slowing it down - optimize only those parts that you need to - the most effective way to optimize programs written in high-level languages like python and matlab is often to rewrite core modules in c (or some other low-level language) - also a good way to handle inherited code: wrapping tried-and-trusted c or fortran in python is safer and easier than rewriting - and faster - if you don't speak c, [kernighan & ritchie 1998] is the standard introduction - [ullman & liyanage 2004] is somewhat gentler - python represents things using a c structure of type pyobject that contains: - every c function that the interpreter calls must take two arguments: - self is null for pure functions, and an object for methods - args is a variable-length list of arguments - use the function pyarg_parsetuple to extract arguments' values - i.e., get the raw integer out of the first, a string pointer out of the second, etc. - example: take an integer and return three times its value - not particularly exciting, but it illustrates the main points - /
in short, it is everything i wished someone had told mebefore i started my first full-time programming job.
again - runs svn commit a second time - several hours later, hermione runs svn update on her working copy - subversion copies ron's changes into her directory
= 11102, instead of 01102 - depends on the hardware being used - java provides a separate operator for this - comment on this slide floating point - floating point numbers are more complicated - this means that you can only represent a fixed set of values -
exercise 4.15: the instructor wants you to use a hitherto unknown command for manipulating files.
if the programs change, there's a good chance the data file format has changed - or a bug has been found and fixed - updated makefile, and its output when no csv files exist, are: - all : hydroxyl_all.csv methyl_all.csv %_all.csv :
eating your own cooking - been talking since the first lecture about the importance of tools, and about building your own to automate repetitive tasks - this lecture takes a look at some of the tools used to manage the raw material for this course - show technologies like xml and regular expressions in action - show how to design something simple, and grow it over time - starting point: lecture slides are written in a simple xml format - root of each lecture is a element with title and id attributes - may contain one or more elements - must have title attribute - may optionally have a summary attribute (used to construct the syllabus) - topics contain one or more elements - these contain (for “bullet level 1”), which contain , and so on - may also contain tables, images, and code fragments - our task is to validate these files to make sure that: - they contain only printable characters - tabs haven't been used for indentation - the id in the root element matches the filename - all the external files the lecture references (such as images and sample code) exist - solution: write a command-line utility that: - takes a list of filenames, along with - some command-line flags specifying which checks to run (or omit), and - reports any problems - you probably won't ever need to do this for lecture slides… - …but at some point, you probably will want to check the integrity of data files, experimental results, etc.
grep takes many options as well; for example, grep -c /bin/bash /etc/passwd reports how many lines in /etc/passwd (the unix password file) that contain the string /bin/bash , which in turn tells me how many users are using bash as their shell.
- yeslogic: - makers of prince, the document formatter and generator used to produce the pdf version of these notes.
but the more time you invest up front, the longer it is until you discover that you need to make changes - write the code - also overlaps analysis and design - build throwaway prototypes while doing analysis - expect to refine design during early stages of construction - if you're still refining the design a week before you're due to ship, something has gone wrong - remember that coding includes writing unit tests - these are the developer's responsibility - include coverage analysis in the daily build & test to ensure that new code is being tested - in theory, qa should refuse to test features that aren't exercised by unit tests - often refactor old code while adding new stuff - your skills (and coding style) improve over time - or the person working on the feature in version 3.3 knows something the version 3.2 author didn't -
the writing is straightforward, and the case studies in chapter 10 are funny without being too cute.
if the debugger is part of a larger integrated development environment (ide), it may show other things as well a source browser that presents an outline of the project's modules, classes, functions, variables, etc.
the toxml method can be called on the document, or on any element node - note that we specify "utf-8" as the character encoding - dom trees always store text as unicode, so when you're converting the tree to text, you must tell the library how to represent characters - can also create a tree by parsing a string - works just like parsing a file - import xml.dom.minidom src = '''
the analysis isn't as deep as that in knuth's monumentalthe art of programming, but that makes the book far more accessible.
t.brahe@copenhagen.dk) room room 241 johannes kepler (j.kepler@uraniborg.org) program b.a. - polymorphism means “having more than one form” - in object-oriented programming, it means being able to treat different types of things as interchangeable - e.g., if every class derived from shape defines a method area, then obj.area() will return the area of obj without the caller having to know if obj is actually a square or a circle - comment on this slide the substitution principle - python looks up each method when it's called - so any two classes that define the same set of methods can be used interchangeably - however, the usual way to implement polymorphism is via inheritance - only override things that need to change - the liskov substitution principle states that it should always be possible to replace an instance of a parent class with an instance of the child class - means that if parent.meth returns a string, child.meth must also return a string - if parent.meth returns a non-empty string with at least three vowels, child.meth must as well - often expressed in terms of pre-conditions and post-conditions - child.meth must satisfy all the post-conditions of parent.meth, and may impose more - in other words, child.meth's possible output is a subset of parent.meth's - so any code that works correctly using the output of parent.meth will continue to work if given an instance of child instead - child.meth may ignore some of parent.meth's pre-conditions, but maynot impose more - equivalently, child.meth accepts everything that parent.meth did, and possibly more - so any code that could call parent.meth correctly is guaranteed to call child.meth correctly too - comment on this slide class members - sometimes want to share data between all instances of a class - constants, a count of the number of class instances created, etc.
- comment on this slide rule 1: don't trust your input - anyone who knows the url of your web application can send it data - i.e., anyone who has a web browser, knows how to “view source”, and can read html forms - therefore no guarantee that the http request you receive was generated from your form - the input provided for a selection list may not be one of the values you offered - the input for a text field may be longer than the maximum you specified - some parameters may be missing from query_string, while unexpected ones may be present - query_string may not even be formatted according to the http specification - you must validate all of the input before using it - check that all the parameters you expect, and only those, are present - check that values meet constraints - you usually have to do this anyway - e.g., check that the string provided for “atomic number” actually represents an integer - or that a villain hasn't replaced "price=399.99" with "price=3.99" in the query string - make sure that special characters have been escaped - but watch out for double-escaping - and don't reinvent the wheel: every language's library has routines to do url escaping, html escaping, etc.
putz irving reid karen reid paul salvini diomidis spinellis bill spotz tom van vleck jim vickroy - frank willison—i'm sorry this one was finished too late for you to tune up - john scopes, and everyone else with the courage to fight for the idea that the truth is more important than doctrine - comment on this slide introduction prev draft version 556 next motivation - computers are as important to scientists as telescopes and test tubes - analyze problems that are too complex for traditional means - simulate things that can't be studied in laboratories - many scientists now spend much of their professional lives writing and maintaining software - a quarter of graduate students in science and engineering spend 25-50% of their time programming - but most scientists have never been taught how to do this efficiently - it's a long way from the loops and arrays of first year to simulating bone development in foetal marsupials… - like being shown how to differentiate polynomials, then expected to invent the rest of calculus - this course will teach you how to design, build, maintain, and share programs more efficiently - focus: tools and techniques appropriate for half a dozen people working together for a year - everything you do at that scale will also make you more productive when you're working on your own for a week - will not turn you into a computer scientist - far too many of them around anyway - instead, goal is to teach you the equivalent of good laboratory technique for computational science - the 20% of ideas that account for 80% of real world use - software carpentry, rather than software engineering - comment on this slide meeting standards - experimental results are only publishable if they are believed to be correct and reproducible - equipment calibrated, samples uncontaminated, relevant steps recorded - in practice, almost always rely on the professionalism of the people doing the work - how well do computational scientists meet these standards?
write a short program that demonstrates this behavior, that can be run on its own without the user passing in any command-line arguments.
- data are send as cleartext in "rlogin" and "telnet".
once you've made changes, you can preview the page, or commit the changes - pages are saved in the database, rather than in subversion - translated from wiki syntax into html when the page is viewed - note: no conflict resolution mechanism - if two people try to edit a wiki page at the same time, the second one to commit will be denied - so put large and/or frequently-updated documents under version control instead - wiki syntax offers shortcuts for referring to other things in trac - #22 links to ticket 22 - @41 links to email message 41 - [94] links to revision 94 in the version control repository - source:path/to/filename.txt links to a particular file in the subversion repository - source:path/to/filename.txt#94 links to a particular version of the file - you can use this same syntax in: - tickets (to refer to changesets, file versions, email messages, etc.)
sys.stderr, e except ioerror, e: print >> sys.stderr, e except exception, e: print >> sys.stderr, e import sys # look for the first matching line in a file.
subversion should tell you that there are conflicts in planets.txt.
lutz and ascher cover the entire core of the language, and enough of its advanced features and libraries to give readers a feeling for just how powerful python is.
- default output gives the stack trace, to help you find the problem - you can also provide messages to the testcase.assert family of methods - tests are run in an arbitrary order - classes store methods in a dictionary for fast lookup - means that there's no guarantee they'll be run in the order in which you defined them - yet another good reason to make each test independent - fix the method and re-run the tests - def runningsum(seq): result =
the file system is the set of files and directories the computer can access - “everything that stays put when you turn the computer off and restart it” - data is stored in files - by convention, files have two part names, like notes.txt or home.html - most operating systems allow you to associate a filename extension with an application - e.g., .txt is associated with an editor, and .html with a web browser -
- the easy stuff - construction creates an empty sparse vector - its length is the largest index ever seen - may or may not be sensible, but it's easy to implement - class sparsevector(object): '''implement a sparse vector.
each time you update something in your version control repository, cruisecontrol recompiles your code, re-runs your tests, and lets you (and your teammates) know if you've broken anything.
- each name may appear at most once - like keys in a dictionary - … is illegal - values must be quoted - old-style html often allowed things like … , but modern parsers will reject it - must use escape sequences for angle brackets, quotes, etc.
you will submit all of your exercises in this course by checking files into your repository.
author) print '%s: %s (%s)' % (authors, productname, ourprice) - note: much more code devoted to creating human-readable output than to getting the information - comment on this slide summary prev top next - most computers now spend more time communicating than they do calculating - every few years, we put another layer on top of the pile of protocols to make communication easier - getting information from the web is now (almost) as easy as getting it from a file - see in the next lecture how to provide information to others - comment on this slide cgi prev draft version 547 next the active web - the web is far more than just a fancy replacement for inter-library loan - most of its power comes from the fact that browsers can interact with programs - more accurately, browsers can ask web servers to interact with programs on their behalf - this lecture looks at what to do if you receive an http request - very important that you also attend the next lecture on security before putting programs of your own on the web - comment on this slide
the book's aim is to show scientists and engineers with little formal training in programming how python can make their lives better.
but it's more convenient than list.index, which throws an exception general rule: throw low, catch high i.e., throw lots of very specific exceptions, but only catch them in a few places, high in your code, where you can take corrective action reason #1: every application handles errors differently
- they're overkill for small projects - particularly research projects, which frequently change direction - comment on this slide dashboard - the dashboard is a graphical complement to the timeline view - comment on this slide blogging - weblogs (or blogs) started off as on-line journals - every trac project creates two blogs - the “compose blog entry” page allows project members to create entries for the announcements blog - note: only people logged in to that trac installation can comment on entries - occasionally annoying, but helps reduce comment spam - comment on this slide administration - trac is administered from the command line, rather than through the web - simpler to write and maintain - makes it simpler for administrators to create a dozen accounts in a single step, etc.
but when you want to do something complicated, you can use any feature of python you want - e.g., build up a list of filenames, fetch a build rule from a database, etc.
- need to know which shopping cart to display for a particular user - but http is a stateless protocol - if a client makes a second (or third, or fourth…) request, server has no reliable way of connecting it to the first one - can guess based on host, elapsed time, etc.
sometimes it's as simple as putting the computer in the boy's room, because "he's the one who uses it most".
if someone is using your library in a gui, you don't want to be printing to stderr reason #2: error handling code gets in the way of understanding the algorithm, so disentangle the two import sys # look for the first matching line in a file.
testcase - if we did, the framework would automatically try to run it… - …and it's not designed to be run on its own - this class does not create a fixture - that's the job of the derived class - add a test - each test records the state of the fixture… - …does something… - …and then checks that the fixture is in the right final state - remember, the fixture is recreated from scratch for each test - class commontests(object): '''tests that can be applied to all fixtures.''
clark doesn't confine himself to running make at 3:00 a.m.; he also covers ways of automatically re-running tests, building and testing installers, monitoring applications, and more.
if, for example, you need to change one html form, or one dll, you will often just mail that out to customers, along with instructions about where to put it, rather than creating a new installer.
the answer is to keep tests as independent as possible - the first tests you write use simple constructors, and simple inspector methods - once those pass, start writing more complex tests - they probably won't be executed in this order once they're all written… - …but they still give you somewhere to set a breakpoint when simple things start to go wrong - much more interesting to think about how to use object-oriented ideas in constructing tests - create one class that has a lot of tests - derive other test classes that: - create specific fixtures - run specific tests - by default, the framework will run all the generic tests for the specific classes as well - this only works if the tests in the base class are generalized - a little more setup work for a big payoff - example: billing application for a software consulting firm - each consultant may be assigned to zero or more projects - each project may have zero or more consultant currently assigned to it - the assignment class keep track of who is currently assigned to what - use strings for consultant and project ids for now - create a base class commontests to hold shared tests - do not derive this from unittest.
rule.mk clean will get rid of all the generated files - the -f flag stands for “force”
for example, he explains why security systems must not just work well, but fail well, and why secrecy often undermines security instead of enhancing it.
for line in instream.readlines(): total += len(line) instream.close() print 'output would have been %d bytes' % total output is 79 bytes output would have been 15000 bytes - you can use os.popen2 to connect to the other program's input and output simultaneously -
s = f.read(40) f.close() print repr(s) linux2 'import sys\nprint sys.platform\nfor mode i' 'import sys\nprint sys.platform\nfor mode i' - comment on this slide packing and unpacking - in c and fortran, an integer is a raw 32-bit value - fwrite(&array, sizeof(int), 3, file) will write 3 4-byte integers from address array to file - python, java, and other languages usually don't use raw values - there's no guarantee that things like lists are stored contiguously in memory… - …so programs need to pack data into contiguous bytes for writing… - …and unpack those bytes to recreate the structures when reading - packing looks a lot like formatting a string - unpacking reverses this process - comment on this slide
- developers don't know enough (don't have enough customer contact) to make this decision - usual way to do this is to build a 3×3 grid - product manager is not allowed to shave developers' time estimates - if she is, developers will start padding their estimates… - …or supplying random numbers, secure in the knowledge that they won't be able make the deadline anyway - letting managers make up “science fiction schedules” is one of the most common mistakes companies make - the other is not doing enough testing early on - yes, customers (and your marketing department) will complain if their feature doesn't make it onto the schedule - but putting it in the schedule when you know that schedule is fiction doesn't improve the chances of it getting implemented on time - it's better to live up to small promises than break big ones - end result of a&e process is a schedule that everyone believes is achievable -
- product manager turns that into, “we want the product to be able to do y.”
- use sticky notes and the like for menus, dialogs, etc. - test subjects are less likely to hold back criticism of something that looks thrown together - write some html pages by hand - fire up visual basic or another drag-and-drop gui builder - make it very clear that this is just a prototype!
another is to make a temporary directory, and check out a second copy of your repository there.
exercise 4.8: the command ls data > tmp.txt writes a listing of the data directory's contents into tmp.txt.
exercise 3.4: in this exercise, you'll simulate the actions of two people editing a single file.
- the individual use cases - comment on this slide domain model - at this point, have a rough idea of the major elements of the domain model - the set of abstractions the system will use to represent the real world - example: domain model for a traffic simulator may contain: - vehicles - vehicle types - e.g., bicycle, motorcycle, small car, family car, light truck, heavy truck… - each vehicle is an instance of exactly one vehicle type - drivers - driver behaviors - a set of statistical rules determining speed, likelihood of signalling, etc.
** * returns the least common ancestor of two species based on dna * comparison, with certainty no less than the specified threshold.
- typically add things like the user's id, the time of the visit, etc.
- human beings are creatures of habit - tend to make the same kinds of errors over and over again - so test for those first - has an interesting side effect: once you start testing for habitual errors, programmers become more conscious of them, and make them less often - the first tests you should write: - tests you expect to succeed - boundary cases (e.g., sort the empty list, or a list of one value) - simplest interesting case (e.g., sort a list of two values) - general case (e.g., sort a list of nine values)
- comment on this slide summary prev top next - there's a lot of hype in hypertext - haven't yet heard anyone claim that xml will cure the common cold, but i'm sure it's been said - strengths: - one set of rules for people to learn - one parser can handle all of their data - at least, the low-level syntactic bits—still need to figure out what all those tagsmean - weaknesses: - raw xml is hard to read -
by presenting examples ranging from the mit media lab to a one-room extension to a house, brand encourages us to see patterns in the way buildings change (or, to adopt brand's metaphor, the way buildings learn from their environment and from use).
- daily python url: - daily (more or less) news about python modules, new releases of the interpreter, meetings, etc.
false - have to make another change to checktabs - it and checkprintable need to process the same data - so neither can read that data in from the file - unless we want to open and read the file twice - solution: separate input, processing, and output - main body reads data and calls validation functions - try: if not filenames: lines = sys.stdin.readlines() checktabs('', lines)
print '' - you'll use this frequently when debugging… - comment on this slide creating forms - html forms allow users to enter text, choose items from lists, etc.
our solution is to let programmers search and update the database programmatically using multiple languages.
- comment on this slide more xhtml tags - well-written html pages have a head element as well as a body - well-written pages also use comments (just like code)
integrating the other way - it's simpler with swig - simple wrapper interface generator - interprets specially-formatted comments in c header files to generate python wrappers - similar tools exist to connect python to fortran - can also go the other way, and embed python in c/c++ - every large application eventually needs an interactive command interpreter - to embed: - initialize a python interpreter object - convert application values into python objects - pass the interpreter a string containing the code to be executed, and the values to execute it on - unwrap the result - multilanguage programming isn't simple - and multilanguage debugging is downright hard -
some things are better left to code - might seem redundant, given that we already have a domain model diagram - and given that they use the same notation - class diagram (almost) always contains more information than domain model diagram - extra objects added to manage relationships between main classes - what members each class has, what its methods will be called,
and (if you're using java, c++, or fortran) all that recompiling… misleading adding print statements moves things around in memory, changes execution timing, etc.
well, ok, it will match the first three characters of "456" -
for line in instream.readlines(): total += len(line) instream.close() print 'output would have been %d bytes' % total output is 79 bytes output would have been 15000 bytes you can use os.popen2 to connect to the other program's input and output simultaneously import os childin, childout = os.popen2('sort') for word in 'this is a test'.split(): print >> childin, word childin.close() for line in childout.readlines(): print line.rstrip() childout.close() a is test this
and many studies have shown that writing it down and checking it before you start coding leads to a working program faster - also allows qa and technical writing to overlap their work with development - note: make sure they're involved in writing test cases - if qa can't think of a way to test something, fix it - ditto if technical writer can't think of a way to explain it - a use case diagram shows the relationships between - the actors in the system (i.e., the users and major system components)
- xml documents can only contain text, so you can't store an image or audio clip directly in a page - unless you encode it as text - usual solution is to store a reference to the external file using the img tag - the src argument specifies where to find the image file -  images  our logo  figure 18.4: images in pages - important to always use the alt attribute to specify alternative text - screen readers for people with visual handicaps use this instead of the image -
having written the standard book on cryptography, schneier now argues that technology alone can't solve most real security problems.
but your brain automatically notices visual differences, and assumes they're important - it actually does take longer to read code written in a mix of styles… - …and the error rate is higher - conform to pep-008: python style guide unless you have a really good reason not to - comment on this slide idioms - every language (human or computer) has idioms - sayings or phrases whose meaning does not follow from the meaning of the words it is made up of - e.g., “face the music” does not mean “look at the orchestra” - a way to aggregate raw data into chunks - as you read programs, look for uses of common idioms - example: c/c++ and java allow assignment in the middle of an expression - z
while handling requests, a cgi creates a temporary file /tmp/1728397.cgidata
- most machines these have only ssh, anyway.
- often the starting point from which qa develops test cases, and the technical writer develops documentation - often find there's an easy way to give customers half of what they want, and a harder way to do it all - estimate both, and discuss pros and cons… - …because the product manager may decide to go with the cheap 50% solution when putting the schedule together - “not everything worth doing is worth doing well.”
simple page rendered by firefox figure 18.2: simple page rendered by internet explorer - comment on this slide attributes - elements may also have attributes - each attribute is a name/value pair that provides extra information about the element - enclosed in the opening tag - a centered heading -
in interpreted languages like python, you can also switch into debugging mode in the middle of an interactive session - sometimes also do post mortem debugging -
in keeping with the spirit of the language itself, their writing is clear, their explanations lucid, and their examples well chosen.
keys return the dictionary's keys as a list.
this lecture has only scratched the surface - have discussed only a tiny fraction of the issues that programmers face - haven't talked about user-level issues at all - if you are going to do anything that's even a little bit complicated, please talk to a professional - the guy down the hall who once read an o'reilly book on perl doesn't count - comment on this slide teamware prev draft version 398 next introduction - no programmer is an island - you may be the only person writing code today, but you: - probably depend on tools and libraries written by other people - may have inherited the project from someone else - ought to be thinking about who's going to take over once you're gone - as open source spreads, being able to work in teams becomes even more important - this lecture looks at some of the things teams have to do to stay productive - all of which will make you more productive as an individual, too - introduce the ideas by showing you how to use a web-based project coordination tool called trac - open source - reliable - easy to set up and install - modular, so that you can add new features (relatively) easily) - comment on this slide
img for images - images for lec/xyz.swc go in the img/xyz directory - src for source code - src/xyz holds sample files for the xyz lecture - makefile runs tab checker on all .swc files - comment on this slide checking for printable characters - next on the list: make sure that files only contain printable characters - i.e., whitespace, alphanumeric, and punctuation - some editors insert “smart” (curly) quotes, automatically convert "---" into "—", etc.
- want to be able to move tests from machine to machine - have to b able to maintain tests as code evolves - test code should be at least as well written as production code - comment on this slide a simple testing framework - step back a moment and think about how we're writing our tests - each has two rectangles as input, and expects either a rectangle or none - each reports passes, fails, or errors - design principle: every time you see a pattern, try to capture it in code - write the shared code once - encourage people to do things the right way by making that way easiest - step 1: write a function that runs a test and reports its result - def runtest(left, right, expected): try: assert left is not none assert right is not none actual =
species */ public species getconcestor(species left, species right, float threshold) { ...implementation... } getconcestor public species getconcestor(species left, species right, float threshold) returns the least common ancestor of two species based on dna comparison, with certainty no less than the specified threshold.
- typically shared by many drivers - road segments - intersections - each road segments connects to exactly two intersections - each intersection connects to one or more road segments - “one” in order to model dead end streets - graphical display and other gui elements - configuration files - etc.
it's more than most developers will ever want to know, but when you need it, you really need it.
val is 1.0 ...in the else block comment on this slide when an error occurs, python actually creates an object to store information about it typically an error message can choose to handle specific errors by specifying an exception type in the except statement e.g., handle division by zero, but
so the blank line that signals …end of headers” is right after the request line - create a socket - socket.
assigning to a dictionary key: creates a new entry if the key is not already in dictionary overwrites the previous value if the key is already present birthday = {} birthday['darwin'] = 1809 birthday['newton'] = 1942 # oops birthday['newton'] = 1642 print birthday {'darwin': 1809, 'newton': 1642} can only access keys that are present just as you can't index elements of a list that aren't there birthday = { 'newton' : 1642, 'darwin' : 1809 } print birthday['turing']
if duplicate values are allowed, make sure you test with them - tests you expect to fail - invalid input (e.g., passed a dictionary instead of a list) - remember, error handling is part of the interface too - sanity tests - make sure data structures remain consistent - if there is redundant information, check it against itself - a catalog of errors - numbers: zero, largest, smallest magnitude, most negative - structures: empty, exactly one element, maximum number of elements - duplicate elements (e.g., the letter "j" appears three times in a string) - aliased elements (e.g., a list contains two references to another list) - circular structures (e.g., a list that contains a reference to itself) - searching: no match found, one match found, multiple matches found, everything matches - code like x = findall(structure)[0] is almost always wrong - should also check aliased matches (same thing found multiple times) - comment on this slide dictionaries and error handling prev draft version 590 next motivation - problem: you want to count how often different people send messages to a mailing list - input: a file with one email address per line - each address may appear many times - output: a table of addresses, sorted by frequency of appearance - solution: keep track of counts in a list of pairs - each entry in the list is [address, countsofar] - each time an address is read in, search the list, and either: - increment the count of an existing entry, or - create a new entry with a count of 1 -
like other books in peachpit's visual quickstart series, this one is beautifully designed, and easy to read without ever being condescending.
it's also possible to make res match reluctantly, i.e., to have the parts match as little as possible, rather than as much.
one way to do this is to use a separate computer (e.g., your laptop, your home computer, or a machine in the lab).
- the best answer is to use fake i/o using strings - python's stringio and cstringio modules can read and write strings instead of files - similar packages exist for c++, java, and other languages - this only works if the function being tested takes streams as arguments, rather than filenames -
== '__main__': for filename in sys.argv[1:]: checktabs(filename) - great—except it only works on files - can't pipe things to it, because it doesn't know how to read standard input - implement the standard unix convention: if no filenames provided, read from standard input - hm… sys.stdin is an already-open file, not a filename - change signature of checktabs to take both the filename, and an open file - move the open and close to the main body - #!
* data.txt - grep produces no output (since /dev/null is always empty) - then the web server deletes everything it can, recursively - oops - adding quotes around terms and escaping special characters hide the problem rather than eliminating it - right solution: don't rely on external programs - more specifically, if there's a layer of interpretation between you and what you're running, then there's one more weak spot for a villain to attack - note that the same thing can happen even if you don't rely on outside programs -
the lifework of the man who invented many of the basic concepts of algorithm analysis, these massive tomes are like everest: awe-inspiring, but not for the weak of heart.
if a node is a text node, the text is in the member data - the single-character text nodes are the carriage returns separating elements - traversing a tree like this is just one of many recurring patterns in object-oriented programming - we'll discuss them briefly in backward, forward, and sideways - the visitor pattern is used to separate traversal of a data structure from operations on its elements - one class traverses a particular kind of structure the same way each time - user then defines the operation - derive a class, pass a function as an argument, etc.
original image - figure 29.2: processed image - note: if you're looking for a professional-quality image editing tool, try gimp - it's complex, but also powerful - comment on this slide a better way to build - said back in automated builds that make has turned into a small programming language - a very clumsy one at that: confusing syntax, no debugger, … - the same thing happens eventually to every other build management tool -
exercise 4.16: you have changed a text file on your home pc, and mailed it to the university terminal.
please make sure that the second copy isn't inside the first, or vice versa—subversion will become very confused.
if execution time is what we really care about, better to measure it directly - a statement that takes 10 milliseconds to execute is ten thousand times more expensive than one than takes a microsecond - profiling is the act of measuring aspects of a program's performance - typically measure execution time - can also measure disk usage, memory footprint, etc.
- gives everyone a common language with which to discuss it - collective code ownership: everyone is allowed to change any part of the system - no one is a bottleneck (i.e., you're never waiting on “the gui guy”)
if you make your programs work like filters, you can easily combine them with others - a combinatorial explosion of goodness - comment on this slide environment variables - like any other program, the shell has variables - since they define a user's environment, they are usually called environment variables - type set at the command prompt to get a listing: - get a particular variable's value by putting a "$" in front of its name - e.g., the shell replaces "$home" with the current user's home directory - often use the echo command to print this out - $ echo $home /home/gvwilson - question: why must you type echo $home, and not just $home?
this book describes the most useful data crunching techniques, explains when you should use them, and shows how they will make your life easier.
outfile.close() - looking higher up, see that biboutput is initialized to bib.html, so our guess was pretty good - you use these techniques (consciously or otherwise) whenever you are reading code - the purpose of good style is to improve the odds of them working - a good way to think about size and scope is the notion of a program slice - the subset of names in scope at a particular statement that are needed to understand what that statement does -
if the function opens and closes the file, no way for you to substitute a fake file - an example of designing code to make it testable - example: find lines where two files differ - nothing as fancy as diff, just a line-by-line comparison - input: two streams (which might be open files or stringio wrappers around strings) - output: another stream (i.e., a file, or a stringio) - as a side effect, we've made the function itself more useful - people can now use it to compare strings, or strings and files - class testdiff(unittest.
the results are impressive: female undergraduate enrolment at cmu rose by more than a factor of four during their work, while the proportion of women dropping out decreased significantly.
- everyone has to (potentially) eat their own cooking - coding standard: essential to making collective ownership possible - programmer welfare - sustainable pace: no one works overtime - because in almost all cases, overtime actually puts the project behind - tired people make more mistakes, which then have to be fixed - and fixing things downstream is more time-consuming than slowing down and getting them right in the first place - programmer turnover delays projects as well - lose all the implicit knowledge in the departing programmer's head - remaining team members have to spend time bringing newcomers up to speed - comment on this slide the planning game - at the start of each iteration, customers write user stories to define the functionality they want added or changed -
- argouml is probably the most advanced open source uml tool available - most programmers haven't adopted uml modeling tools because: - the tools are expensive and/or difficult to learn - if people can't do something useful with a tool in the first hour, they usually stop trying -
like eclipse, pydev needs a lot of memory to run well.
if nothing else, it would have been a better way to start thinking about the profession i had stumbled into than the “everybody knows” factoids that i soaked up at coffee time.
the principal author's home department, which helped make this course happen.
but frequent contact between developers and customers still essential - pair programming: also described below - continuous process - small releases, so that customers can quickly check out all of the changes and additions - continuous integration: everyone builds and run tests on a very tight cycle - preferably several times an hour while coding - continuous refactoring: everyone cleans up what they're about to work on before they start work on it - and follows through into other modules if there are ripple effects - ensures that code is always clean enough for the next person to start work - shared understanding - simple design: speaks for itself - in practice, design of a rapidly-evolving system may seem simple to those who've watched it evolve, but not to newcomers - system metaphor: use simple analogies to provide a high-level overview of the system - e.g., it's an assembly line, a blackboard, etc.
- email messages (as long as your mailer sends messages as plain text, rather than html) - subversion commit comments - just about everywhere else - remember, information is more useful when it's connected - comment on this slide roadmap and milestones - a milestone is a time by which something is supposed to be done - a roadmap is just a collection of milestones - usually give milestone symbolic names, like “version 2 beta release” - that way, when the date changes, you don't have a milestone called “april 1” whose due date is may 15 - trac requires you to associate every issue with a milestone - default is the empty milestone, which means “sometime” - can sort and view tickets by milestone - moving low-priority tickets from upcoming milestone to later ones is part of pre-release triage process - much (much) simpler than most project management tools - no gantt charts, no dependency graphs, etc.
what good fortran programmers were already doing - objects formalized the way good c, pascal, and lisp programmers managed their data structures and functions - java deserves credit for bringing two previously-esoteric practices into the mainstream - garbage collection: the computer recycles memory as it needs to - reflection: programs can inspect themselves at runtime - reflection simplifies the construction of large software systems - most big applications are now frameworks that load plug-in components dynamically - a little extra effort… - …but it forces programmers to really, truly modularize their code… - …which also reduces maintenance and customization costs - watching programs run is an essential part of the software development process - which parts of my code can be thrown away?
this entry in the pragmatic bookshelf series focuses on getting your project to build itself, and (more importantly) tell you how the build went, automatically.
it's not for the faint of heart (and it definitely won't be happy on a four-year-old hand-me-down machine), but it's one of the real power tools of modern programming.
but the whole point of cgi is to generate content dynamically - show a list of environment variables - #!/python/python.exe import os, cgi # headers and an extra blank line print 'content-type: text/html\n' # body print '' keys = os.environ.keys() keys.sort() for k in keys: print '%s: %s' % (cgi.escape(k), cgi.escape(os.environ[k]))
the main site for an advanced open source relational database.
resolve the conflicts so that the file contains: 1.
or your boss will want to ship it to the customer - what we want: working code - comment on this slide use cases - first step is to translate our fuzzy ideas about how the interface should be used into something more exact - a use case is a short point-form story that describes how a user accomplishes a particular task - usually written point-form - example: sally wants to run a mitosis simulator for each temperature in a range - sally selects “file… set simulation parameters” - system displays “simulation parameters” dialog with default values - sally changes “temperature” from “single” to “range” - system disables temperature entry control for single temperature - system enables temperature entry controls for “start”, “increment”, and “end” - sally enters values and clicks “ok” - if any values illegal or inconsistent, dialog beeps and displays error message explaining the problem - otherwise, simulator updates its values, and dialog disappears - sally selects “file… run” - system enables “pause” and “stop” buttons and begins running simulations -
no input file specified, so cat reads from the keyboard - output sent to a file - voila: the world's dumbest text editor - when you're done, use rm junk.txt to get rid of the file - don't type rm * unless you're really, really sure that's what you want to do… - comment on this slide pipes - suppose you want to use the output of one program as the input of another - e.g., use wc -w *.
on some machines, the command will also display a group id.
attribute 'v' defined outside __init__ - pychecker - similar tools exist for [name of your language goes here] - most check for much more than just indentation and naming conventions - can also find: - dead code (i.e., variables and methods that are never used) - unhandled exceptions - duplicate code - and much more - use them during development - don't check anything into version control unless it passes a style check - take their warnings very seriously when debugging - if someone was sloppy enough to make style mistakes, they probably made more serious mistakes as well - use them when reading code - many tools can reformat code so that it obeys style guidelines - sometimes called pretty-printers - do not reformat code just because you can - makes it difficult to track and merge changes in version control -
for example, if the directory contains three files a.txt, abc.txt, and abcd.txt, the command should remove abc.txt , but not the other two files.
anything that was in the file before the command was run is overwritten.
goerzen also doesn't delve as deeply into their internals, but instead on how to build clients that use them.
unlike screen-scraping our product can be used directly and reliably in many languages.
- more efficient to use two's complement - “roll over” when going below zero, like a car's odometer - 11112 is -110, 11102 is -210, etc.
this is the only exclamation mark in a topic title in the whole course - most successful attacks use social engineering, rather than technology - call up your bank, and see if you can get your credit card balance without your pin - helps if you sound like a grandmother who is close to tears because her poodle has just been hit by a car - second most successful way to attack a system is to get a job with the company running it - burn an extra copy of credit card data while backing up the server - take notes of all the “to be fixed later” points that come up during the security audit of the web site - many companies choose not to press charges, rather than deal with bad publicity after a security failure - example: aol employee sold 92 million customer records to a spammer for $100,000 - combination of inside job, and stealing the credentials of more privileged user - exploiting carelessness is the third - many people don't bother to change the default password on their wireless router - many more choose easily-guessed passwords - “easy” if you have the right tools, that is - but remember: once one villain builds a tool, they can all use it - in fact, technology often makes systems less secure - example: facial recognition software that works correctly 99% of the time - so one person in a hundred is mistakenly identified as a potential terrorist - 300,000 passengers a day in a busy airport -
some readers may be intimidated by the book's weight, and the dense page layout, but what really made me blink was that i didn't find a single typo or error.
- no team ever works at 100% capacity, so don't schedule that way!
once the program is paused, the debugger can single-step it - execute one statement at a time - most can: - step into function calls - step over them, or - run to the end of the current function -
- within each row, column items are wrapped in td (for “table data”) - note: tables are often used to force multi-column layout, as well as for tabular data -  lists and tables   unordered list ordered list   hydrogen lithium sodium potassium rubidium cesium francium   helium neon argon krypton xenon radon    figure 18.3: lists and tables - note how subversion keywords have been put in meta elements in document head - automatically updated each time the document is committed to version control - comment on this slide connecting to other data - how to put an image in a page?
- when someone views what you wrote, their browser runs that javascript - it can harvest information from your machine, and post it to the attacker - comment on this slide cryptography 101 - encryption is the process of obscuring information so that it can't be read without special knowledge -
1: checktabs('', sys.stdin) else: for filename in sys.argv[1:]: infile = open(filename, 'r') checktabs(filename, infile) infile.close() - great—except it doesn't report errors like missing or unreadable files - printing a stack trace doesn't count - fix by wrapping the code in an exception handler - only catch the kinds of exceptions we think are reasonable to expect - don't want the error handling to mask errors that we didn't anticipate - #!
- cygwin: - a linux-like environment for windows, which brings with it a lot of other tools (like ssh and gnu make).
not out-of-bounds list index syntax is except exceptiontype, variable exceptiontype is what you want to catch if something of that type is raised, the exception object is assigned to variable values =
each stage has clearly defined steps, and concrete milestones which specify what ought to be produced (i.e., how to tell when you're finished).
- go into the containing directory: cd /rotor - svnadmin create repo - can then interact with repository in two ways - directly through the file system: file:///rotor/repo - use this if you're working on the same machine the repository is on - through a web server: https://your.host.name/rotor/repo - use this if the repository is on a remote machine - note: requires your system administrator to configure the web server properly - https (instead of http) means “use a secure connection” - to get a working copy (assuming you're using a web server): - svn checkout
- a lot of scientific data is stored in binary formats - important to know how to work with it -
finally, the build number is incremented every time you create a new version of the product for qa to test.
the book's preface says it best: “the reading of code is likely to be one of the most common activities of a computing professional, yet it is seldom taught as a subject or formally used as a method for learning how to design and program.”
but it also means you can never be quite sure what program a command will invoke - though you can use the command which program_name, which will tell you - common entries in path include: - /bin, /usr/bin: core tools like ls - note: the word “bin” comes from “binary”, which is geekspeak for “a compiled program”
- how long it takes that program to run (machine time) - different languages make different tradeoffs between programming speed and execution speed - python is: - like the shell, only better - freely available for many platforms - widely used - well documented - (much) easier to read than perl - material that took three days to teach in perl took only two to teach in python - follow-up surveys showed significantly higher retention rates - (much) slower than c/c++ or fortran - 10-100 times slower than compiled, optimized code -
- firefox: - the best web browser around, where “best” means “nicest interface”, “most extensible”, and “least insecure”.
by default, it shows the differences in groups, like this: 3c3,4 inclination: 0.00 degrees > satellites: 1 (the rather cryptic header "3c3,4" means that line 3 of the first file must be changed to get lines 3-4 of the second.)
its first six chapters describe the many small ways in which we are all, male and female, are conditioned to believe that computers are "boy's things".
original 6.5 original 6.5 - comment on this slide creating modules - every python file is automatically also a module (or library) - if the file is called xyz.py, load it using import xyz - the statements in the module are executed as it is loaded - assignment and def are statements - you can use conditionals, loops, and anything else, too - refer to things in a module using module.thing - put this in mylib.py - # a constant.
- don't consider "x \n" or " x\n" blank - constrain what the re can match using anchors - examples - can now count blank lines in a file - import sys, re # nothing but space, tab, carriage return, newline from start to end pattern = '^[ \t\r\n]*$' # count matches in one file/stream.
others, such as replacing temporary objects with queries, or replacing constructors with factory methods, are subtler, but no less important.
- so that developers stop making that kind of mistake - documentation also starts before product is available - describe new gui screens based on mock-ups drawn for a&e - write new on-line help
patches are things that don't have their own installers.
for programmers who want to incorporate bind into a larger application (technical details) our product is a web services api based on soap that supports remote calls into the core bind api.
a lot of software engineering books try to convey the same message about allowing for change, but few do it so successfully.
unless you tell it otherwise, that's all make will update - run make -f double.mk methyl_422.csv to build methyl_422.csv - comment on this slide phony targets - obviously don't want to have to run make separately for each possible target - that would hardly count as “automation” - solution: create a phony target that: - typical phony targets in a software project: - "all": recompile everything - "clean": delete all temporary files, and everything produced by compilation - "install": copy files to system directories - many open source projects are installed by typing make, and then make install - comment on this slide automatic variables pattern rules - most files of similar type (java, c++, etc.) are compiled the same way - rule #2 again: write a pattern rule specifying what to do in the general case - use the wildcard "%" to represent the stem of the file's name in the target and prerequisites - notice that there's another phony target in this makefile - make -f
doc = xml.dom.minidom.parsestring(src) print doc.toxml('utf-8')  224.7 - finally, can build a tree by hand - import xml.dom.minidom impl =
['2:'] - don't want to search the string to find the longest leading sequence of digits - need a better way to extract the text that matched sub-patterns - result of re.search is actually a match object that records what what matched, and where - mo.group() returns the whole string that matched the re - mo.start() and mo.end() are the indices of the match's location -
his observations on hiring programmers, measuring how well a development team is doing its job, the api wars, and other topics are always entertaining and informative.
and of course, there's always bug fixes to the previous version to test… - qa's usual role is to find bugs in the finished product - yes, developers should do this as they're coding… - …but in practice, they are usually too focused on particular features to find wider issues - developers also tend not to be good at testing - subconsciously don't want to find problems - focus on the parts they're most familiar with, rather than the product as a whole - qa's real job is to figure out why bugs are happening - “trying to improve the quality of software by doing more testing is like trying to lose weight by weighing yourself more often.”
each time python enters a try/except block, it pushes theexcept handlers on a stack just like the function call stack
- first job is to find it (or them) - grep bibref expandrefcite.py finds exactly one call - # substitute information.
- everybody on the same sub-net can easily track them.
instead, it's about how to structure web sites so that they will foster on-line communities.
best of all, glass backs up every statement he makes with copious references to the primary literature; if you still disagree with him, you'd better be sure you have as much evidence for your point of view as he has for his.
the problem changes over time - a good solution to last year's requirements may not be a good solution to this year's - as features are completed, update the design to reflect what was actually built - if you don't, then: - the next person who has to work with the code will have a harder time - you'll have to start from further behind the next time you need to modify this section - making sure this happens is the project manager's job - maintenance usually starts before the product goes out the door - fix bugs left over from the previous cycle while adding features in this one - start fixing bugs in new features as qa discovers them - last quarter of a project cycle is usually nothing but bug fixing - comment on this slide other activities - quality assurance starts at the same time as development - as soon as feature specifications are firm, qa can: - start making up lists of tests to run - start writing utility programs -
- suppose the code in overlap.c uses code in rectangle.c - if you change both, but only recompile overlap.c, you'll be using out-of-date rectangles - comment on this slide automate, automate, automate - remember rule #2: anything worth repeating is worth automating - computers are good at details, and don't get bored, so have them do repetitive tasks - we need: - a way to describe the tasks (what things to do) - a way to specify the dependencies between them (when to do things) - most widely used tool for this is called make - invented in 1975 by stuart feldman at bell labs
once they've all been handled, get rid of the original text node - def emphasizetext(doc, para, textnode): # look for optional spaces, a word, and the rest of the paragraph.
read permission for notes.txt - permissions mean something a little different for directories - execute permission means you can “go into” a directory, but doesnot mean you can read its contents -
importantly, so are newer topics, like building plugins for your ide, code generation, and things you can do to protect your intellectual property.
when the target is paused, the debugger can display the contents of its memory - most debuggers can also evaluate expressions using the current values of variables - e.g., type in 2*x= 0 self.x =
- subversion: - the main site for subversion is aimed more at subversion's developers than at its users; if you're looking for a how-to, [mason 2005] is a good place to start.
prev top next coding style and reading code prev draft version 574 next introduction - good programming style is very hard to teach - all the “rules” are either banal or overly restrictive - saying, “make methods short, but not too short” doesn't really help - neither does saying, “no method shall be longer than sixty lines” - matters aren't helped by the fact that the strength of programmers' opinions is inversely proportional to the amount of data they have -
but this is all just convention: you can call files (almost) anything you want - files are stored in directories (often called folders)
but only as useful as the information in it - trac's issue tracker is simpler than most, in order to make entering data very easy - most large projects use more complicated tools, such as bugzilla - to create a ticket: - to see what tickets are already in the system: - follow either the “view my tickets” or “view project tickets” link - the first shows your tickets across all projects - the second shows all tickets for the current project - tickets can be sorted and filtered in various ways - click on a ticket to view or update it - all the information entered by the original author - a flag showing whether it is open (i.e., still needs work) or closed (completed)
exercise 4.19: diff finds and displays the differences between two files.
fetching pages - opening sockets, constructing http requests, and parsing responses is tedious - so most languages provide libraries to do the work for you - in python, that library is called urllib - urllib.urlopen(url) does what your browser would do if you gave it the url - parse it to figure out what server to connect to - connect to that server - send an http request - give the calling program an object that looks like a file, from which to read response data - example: read the test page the easy way - note:
the debugger can set breakpoints in the target program tells the target to pause when it reaches particular lines of code
student - when python looks for a method, it checks the object's class, then its parent class, and so on - figure 12.2: method lookup - result is that python calls the most appropriate method for an object - class person(object): def __init__(self, name, email): self.name =
its first sentence says, “this book tells you how to find out what's wrong with stuff, quick,” and that's exactly what it does.
some good, some bad, most average - knowing how to read code is as useful as knowing how to read a proof - learn by example how to accomplish specific things - figure out how to make changes in a particular program - figure out how to use the program - code inspections are essential for achieving and maintaining quality - comment on this slide seven plus or minus - known since the 1950s that human short term memory can hold 7±2 items [hock 2004] - seven random digits (as in phone numbers) - seven tasks that still have to be done - note: this is just an average - some prodigies can remember thousands of pieces of information for short periods of time -
it searches files for sections of text that look like interactive python sessions, then re-executes those sections and checks the results.
and (if you're using java, c++, or fortran) all that recompiling… - misleading - adding print statements moves things around in memory, changes execution timing, etc.
- the fact that this can be done in several different ways is what makes it a pattern - step 1: define generic behavior - class visitor(object): def __init__(self): pass def visit(self, node): # when given the document, skip to the root.
most programmers spend most of their time fixing bugs, porting to new platforms, adding new features---in short, changing existing code.
if villains can snoop on network traffic, they can hijack sessions - insert a copy of your cookie into their message - also vulnerable to replay attacks - copy the cookie (or an entire message) and re-send it later - useful if the message means “open the vault door” - note: none of this helps if there is spyware on the client machine - these days, this is much more likely than someone sniffing network traffic - keep your anti-virus protection and spyware monitors up to date, and run them regularly - what else is there for your machine to do at 3:00 a.m.?
if software engineering is about building an electronic version of the channel tunnel, this stuff is the equivalent of putting an extension on the house - comment on this slide topics - shell programming - version control - automating builds - python (4 lectures) - systematic debugging - higher-level programming (2 lectures) - testing (2 lectures) - coding style and reading code - data crunching (4 lectures) - web programming and security (3 lectures) - software development project tools and processes (4 lectures) - comment on this slide setting up - some previous programming experience - for loops, if/ then/ else - function calls - arrays - file i/o - compilation - individual setup - python (version 2.4 or higher) - cygwin (on windows) - an editor - we'll look at smart ones later in the course - subversion - we'll spend a lecture on this next week - time - expect to spend 2-3 hours outside class for each lecture - comment on this slide recommended reading - “if you only have time to read one book, make time to read two” - [glass 2002] summarizes what we actually know about programmers' productivity - [hunt & thomas 1999] and [gunderloy 2004] are about the things that distinguish good programmers from bad ones -
- because they require the database to serialize some operations - which slows the system down - comment on this slide client-side web programming prev draft version 534 next small pieces, loosely joined - the unix command line was the world's first component object model - allowed programmers to build small pieces, then connect them in arbitrary ways - key features: - low barriers to entry: it's easy to add one more tool to the toolbox - common data format: stream of strings - common communication protocol: stdin, stdout, and zero/nonzero exit codes - the web succeeded (in part) because it followed the same model - data format: html (now xml) - communication protocol: http - this lecture looks at how to build programs that get data from the web - next lecture will discuss simple ways to build programs that supply data -
then there must be a blank line to signal the end of headers - common error to forget this - body is whatever data the server wants to send back - a web page, an image, etc.
- often the most important documentation of all, since it's what gives other programmers a mental map of how everything fits together - requirements - description of what needs the software is supposed to meet - “if more than 100 events arrive in a second, the seismograph interface must store them in a queue“ tells you to look for a seismograph interface, and a queue that feeds it data - user guide - as above, knowing what the software is supposed to do often helps figure out how it works - it's increasingly fashionable to embed some documentation in code, then extract and format it - javadoc (for java) translates specially-formatted comments into html - java html /
when a program fails badly (e.g., illegal memory access in c++), it creates acore dump - copies all of its internal state to a file on disk - can then load that dump into the debugger, and see where the program was when it died - not as good as watching it run… - …but sometimes the best you can do - modern graphical debuggers typically show: - if the debugger is part of a larger integrated development environment (ide), it may show other things as well - note: tools like this are available for every modern language - comment on this slide basic operations - the debugger can set breakpoints in the target program - tells the target to pause when it reaches particular lines of code -
either the number of milliseconds - or the time it should expire (in utc) - use time.asctime(time.gmtime()) - warning: do not put sensitive information in cookies - browsers store them in files on disk - villains can watch network traffic, and steal data - cookies should instead be random values that act as keys into server-side information - talk about this more in the next lecture - comment on this slide summmary prev top next - cgi is example of event-driven programming - the framework invokes your code at specific times, and passes it specific information - what happens the rest of the time isn't your concern - at least, until something goes wrong, and you have to debug it - simple cgi programs can accomplish a lot - the entire first generation of web applications were built this way -
readlines wouldn't do the right thing if the thing being read was an image - use read to grab the bytes in that case - up to the client application to do the right thing - example: make a list of the links in a web page - the first step in build a web spider that can explore the web on its own - that, plus a search engine, and you're google… - fetch the page - parse it to extract all the links - should use xml, but regular expressions are good enough to give you the idea - import urllib, re from sets import
- a race condition - solution is to lock the file - as the name implies, gives one process exclusive rights to the file - after the first process acquires the lock, any other process that tries to read or write the file issuspended until the first releases it - mechanics are different on different operating systems -
the writing is personal without being sappy or overbearing, and the author draws upon a wealth of personal experience to explain why you sometimes don't want to make it easy for people to post comments, or how best to deal with abusive posters.
the classic description of the one programming language every serious programmer absolutely, positively has to learn.
the most advanced open source uml tool available.
in fact, it doesn't even care if you're using it to recompile things - often used to run tests, keep web sites up to date, etc.
- comment on this slide checking for tabs - start with the simplest task: checking for tabs in files - open each file in turn - check each line for tabs - note: could also read entire contents of file into a string, and search for tabs in that -
* from person where (login = "kovalev") or (login = "skol"); select * from involved where (login = "kovalev") or (login = "skol"); kovalev|kovalevskaya|sofia 1709|1|2|kovalev 1737|1|1|kovalev 1737|2|1|kovalev - wrap the changes in a transaction so that: - no query can run after person changes, but before involved changes - if database goes down in the middle of the operation, database doesn't become inconsistent -
shell basics prev draft version 588 next introduction - most modern tools have a graphical user interface (gui) - because they're easier to use - but command-line user interfaces (cluis) still have their place - easier (faster) to build new clui tools - building a gui takes time - building a good gui takes a lot of time - higher action-to-keystroke ratio -
- use docstrings instead of comments to document classes and methods (and functions) - unlike comments, they are kept at runtime to provide interactive help - print queue.__doc__ print queue.enq.__doc__
exercise 4.20: suppose you wanted prev top next ls to sort its output by filename extension, i.e., to list all .cmd files before all .exe files, and all .exe's before all .txt files.
a useful reference for every serious python programmer, this book is a collection of tips and tricks, some very simple, others so complex that they require careful line-by-line reading.
svn/1.1.4 mod_python/3.1.3 python/2.3.5 php/4.3.10-9 mod_ssl/2.0.54 openssl/0.9.7e content-length: 394 connection: close content-type: text/html; charset=iso-8859-1  404 not found not found the requested url /greeting.html was not found on this server.
if the child is trying to write to the parent while the parent is trying to write to the child, both are blocked - the operating system can only hold on to a limited amount of input or output data at a time, so increasing the buffer size only delays the problem - figure 10.6:
[] while pos 1901-05-01 selects all experiments that weren't conducted on may 1, 1901,and all experiments whose date is null (since null isn't equal to anything except itself) - have to use (experiment.
but more importantly, they don't find modeling useful - there's a lot of chicken-and-egg in this - until enough programmers create models, and can read them, there's little incentive for any particular programmer to do so - comment on this slide
counting frequency note: dictionaries do not store keys in order no way to predict where a dictionary will insert a new value paradoxically, this is part of what makes dictionaries so fast
if you can do this you get immediately an a in this course.
but it isn't a particularly informative name - read embedded documentation (such as comments) - “fill in citations.”
document_node: self.visit(node.documentelement) return # handle other types of nodes.
many programmers swear by it; others massage their aching wrists and swearat it instead, but there's no denying that it's a very powerful tool.
but it doesn't help to do a detailed design that customers can't understand - up-front design is a tool for managing risk -
getting it built - developers then finish designs - purpose is to convince people (including themselves) that they can actually build things the way they intend to - very easy to believe incompatible things when it's all in your head - the act of writing it down (explaining it) forces brings these issues out into the open… - …and ensures that other people know what you think they think you think - also helps you remember later why you're doing something a particular way - note that design overlaps analysis - after all, it's impossible to estimate how long it will take to build something if you don't know how you're going to build it - level of detail varies widely -
if the technical writer can't figure out how to explain a feature, the developer should redesign it - developer support starts work on installers the same day developers start on new features - makes sure the daily build & test keeps running - and chastises developers who've broken things - everyone has a status report in their mailbox when they arrive each morning - schedule is always up to date - developers provide progress reports every week (at least)
the better developers understand the product and the technologies it uses, the less risk there is of a lightweight design leading to nasty surprises - the greater the cost of delivering the wrong thing, the more detailed the design should be -
once again, version is typically http/1.0 - status code is a number indicating what happened - 200: everything worked - 404: page not found - status phrase repeats that information in a human-readable phrase (like “ok” or “not found”) - headers are once again name/value pairs -
https://your.host.name/rotor/repo - creates a new directory repo - common to give it a more informative name using svn checkout https://your.host.name/rotor/repo rotorproject - important: only use svn checkout once, to initialize your working copy - comment on this slide subversion command reference how to read subversion output - svn status compares your working copy with the repository, printing one line for each file that's worth talking about - $ svn status m spin.c mc readme.txt - spin.c has been modified - readme.txt has been modified, and has conflicts - svn update prints one line for each file or directory it does something to - comment on this slide branching and merging - sometimes want to work on several different versions of software at once - example: need to do bug fixes on version 3 while making incompatible changes toward version 4 - or want two sets of developers to be able to write and test large changes independently, then put things back together - all modern version control systems allow you to branch a repository - can later merge changes from one branch to another - example: fix a bug on one branch, merge the changes into other branches that have the same bug - again, much better than copying by hand, since the version control system can keep track of where things came from, and where they went - warning: many people become over-excited about branching when they first start to use it - keeping track of what's going on where can be a considerable management overhead - on a small project, very rare to need more than two active branches - comment on this slide exercises exercise 3.1: follow the instructions given to you by your instructor to check out a copy of the subversion repository you'll be using in this course.
there's a lot of no-nonsense analysis of the cost of interactivity, and interviews with the creators of some of the web's most successful community sites.
if the slice is much smaller than the method itself, the method is probably bloated - comment on this slide naming - names of files, classes, methods, variables, and other things are the most visible clue to purpose - a variable called temperature probably doesn't store a user name or the number of pottery shards found at a dig site - should therefore choose names that are both meaningful and readable - current_surface_temperature_of_probe is meaningful, but not readable - cstp is easier to read, but hard to understand - the smaller the scope of a name, the more compact it can be -
in that directory, i get: earth.txt:period: 365.26 days venus.txt:period: 224.70 days search strings can use regular expressions, which will be discussed in a later lecture.
- any comments other people have added to the ticket - every time you change a ticket, you should explain why - like commenting on changes you submit to version control - note: after updating a ticket, go back to the timeline view - time of change, ticket id, and comment are displayed - the display is a link back to the ticket - information is more useful when it's connected - comment on this slide how to write tickets - a badly-written ticket is better than no ticket at all, but not by much - the summary should be short and informative - aim is to help people who are looking at 100 summaries find the one(s) they care about - “bug in seq comp” is bad
once the program is paused, the debugger can single-step it execute one statement at a time most can:
exercise 4.18: grep is one of the more useful tools in the toolbox.
exercise 4.6: suppose you want to list the names of all the text files in the data directory that contain the word "carpentry".
the net effect is to teach all of the same principles that other books try to, but in a grounded, understandable way.
- of course, it's not quite that simple - 2 + x and x + 2 don't always do the same thing - string concatenation - matrix multiplication - classes can define right-hand versions of operators, e.g., __radd__ instead of __add__
- medium: anything in between - in the weeks and days leading up to a release, perform regular triage - go through the open issues, and re-set their priorities so that everyone knows what they ought to be working on - description: provide all the information someone needs to know to address the issue - for a bug, need: - software configuration, including package versions, operating system, etc. - sequence of steps or unit test case that triggers the fault - configuration files, input data, screenshots of the fault, etc. - similar level of detail for feature requests and questions - remember, it may be weeks or months before the issue is addressed - comment on this slide mailing lists - trac assumes that everyone has a mail reader that they're happy with - doesn't try to compete - no way to compose or send mail in trac - users don't have mailboxes on the system - instead, trac creates one mailing list for each project - everyone who's a member of a project is automatically on that list - only project members can send mail to it - every user must whitelist one or more email addresses with trac - timeline shows old mail messages as well as other events - not threaded by topic: unnecessary complexity for small projects - comment on this slide wiki - a wiki is a simple web-based system for creating web pages - term comes from the hawaiian “wiki wiki”, meaning “faster faster” - if you have logged in, and have permissions to edit the wiki, then every page has an “edit” button - syntax is much simpler than standard html - blank lines separate paragraphs - any word in camelcase is automatically interpreted as a link to a page with that name - =
if there's no cookie, create one with a count of 1 - otherwise, increment the count - create a new cookie to send back to the user - display the count - #!
once you're over the (steeper) learning curve - easier to see and understand what the computer is doing on your behalf - which is part of what this course is about - most important: it's easier to combine clui tools than gui tools - small tools, combined in many ways, can be very powerful - [ray & ray 2003] is a good introduction for newcomers -
again, this label is usually attached to a particular build after the fact—you wait until qa (or whoever) says that build #1017 is good enough to send out to customers, then tag it in version control.
there's also a section on additional documentation sources, and a chapter on tools that can help you make sense of whatever you've just inherited.
this very readable book describes the 5% of sql that covers 95% of real-world needs.
first, i type pwd (short for "print working directory”) to find out where i am - unfortunately, most unix commands have equally cryptic names - pwd /home/gvwilson/swc - i then type ls (for “listing”) to see what's in the current directory - what actually happens when i type ls is: - i can tell ls to produce more informative output by giving it someflags - by convention, flags start with "-", as in "-c" or "-l" - show directories with trailing slash - show all files and directories, including those whose names begin with .
this beautiful, thought-provoking book starts with the observation that most architects spend their time re-working or extending existing buildings, rather than creating new ones from scratch.
creates a level-2 heading, etc. - series of indented lines beginning with * is displayed as a list - anything ending in .png, .jpg, or .gif is automatically displayed as an image - doesn't let you do everything… - …e.g., you can't specify alignment of table items… - …but it makes it very easy to create meeting minutes, notes for first-time users, etc.
the simulator's input widgets and graphical display - entity objects, which are from the core of the domain - vehicle types, road segments, etc. - control objects, which connect boundary objects to entity objects - represent the “intelligence” in the application - e.g., driver behaviors - a robustness diagram shows actors' relationships with these objects - the bridge between “what” and “how” - what's being implemented: use cases and domain model - how it's being implemented: we'll see in a moment - rules make intuitive sense from definitions: - actors communicate only with boundary objects - boundary objects communicate only with actors and controllers - controllers communicate with anything except actors - entity objects can only talk to controllers - these rules are what the graphical notation is for - forces us to classify things - limits how those things can use each other -
so, to print frequency in alphabetic order by address: get the list of keys sort that list loop over it # build the frequency dictionary as before.
if there's only one value, get a single-item list - comment on this slide maintaining state - often want to change the data a server is managing, as well as read it - update a description of an experiment - change your preferred email address - add items to a shopping cart - your cgi programs can do this any way they want - you want it to be simple, fast, and secure… - …but these are not always compatible - the industrial-strength solution is to use a relational database - simple programs can often get away with using files - the cgi program re-reads the file each time it processes a request - and re-writes it if there have been any updates - example: append messages to a web page - old messages are saved in a file, one per line - script checks the incoming parameters to decide what to do - if newmessage is there, append it, and display results - if newmessage isn't there, someone's visiting the page, rather than submitting the form - #!
if no filenames specified, set the list of filenames to [''] - write a function readfile to open and read a file - if the function name is "", it reads from sys.stdin - have function function return both a list of lines, and the xml dom tree - we need the first to check for tabs and printable characters, and the second to look for glossary items - modified processing code includes checks for what to do with the glossary - try: if glossary:
i really wish someone had given me something like this book when i took my first programming job.
- sends the user name and password as cleartext - actually, encoded using base-64… - …but that's not a cipher - never use http basic authentication - note: having users submit id and password via a form is also insecure - form data isn't encrypted - alternative: - have user provide id and password over secure connection - use a random number as a cookie - do not just use a sequence of integer session ids: too easy for attackers to fabricate - give that to the client to track the session - when it comes back, use it as a key into a dictionary of active sessions - still not perfect -
but if there's a useful program called tools/findanswers, other users can still run it - comment on this slide ownership and permission: windows - of course, it all works differently on windows - not better or worse, just differently - windows xp uses access control lists (acls) - instead of describing users as “file owner, group member, or something else”, acls let you specify exactly what any particular user, or set of users, can do to a file, directory, device, etc.
once you know one, you can easily learn and use the others - widely extended - add-ons for measuring test execution times, recording tests, testing web applications, etc.
- comment on this slide analysis & estimation - “plans are useless, but planning is invaluable.”
- usually best to bring in a neutral outsider to facilitate - feedback is only as useful as it is honest -
- tells rm not to report an error when trying to delete files that don't exist - comment on this slide dependencies - next step: create an overall summary for each treatment - e.g., combine hydroxyl_422.csv and hydroxyl_480.csv to create hydroxyl_all.csv, and similarly for the methyl files, using summarize.py - hydroxyl_all must be rewritten if it is older than either hydroxyl_422.csv or hydroxyl_480.csv - which must in turn be rewritten if they're newer than their corresponding .dat files - in this case, also make the results depend on summarize.py and
- in other words, some text encrypted with e and than encrypted again with d returns to the original.
project planning, source code control, unit testing, logging, and build management are all there.
(dwight d. eisenhower) - product manager gathers requirements from customers - customers often say, “we want feature x.” - often means, “i heard someone mention this while i was waiting for a flight.”
- alternatives - ant - primarily for java - less platform-dependent… - …but just as hard to read and debug - integrated development environments - most are proprietary and platform-specific - scons - give users a library to manage dependencies and actions - “makefile” is actually a small program - more powerful, and debuggable, but steeper learning curve - once builds are automated, the next step is to run them continuously - every time someone checks something into version control, rebuild the software (or site), and re-run tests - cruisecontrol and bitten will both handle the details - comment on this slide exercises exercise 14.1: how can you stop make from removing intermediate files automatically when it finishes processing?
it's a great achievement, and a great resource for anyone doing scientific programming.
far too many programmers still think and code as if resizeable vectors and string-to-pointer hash tables were the only data structures ever invented.
build numbers are never reset, i.e. you don't go from 5.2.2.1001 to 6.0.0.0, but from 5.2.2.1001 to 6.0.0.1002, and so on.
print 'content-type: text/html' print cookie print print '' print 'visits: %d' % count print '' - can control how long a cookie is valid by setting an expiry value -
- tools are signposts, not destinations.
- older versions of windows (such as windows 95 and windows 2000) are fundamentally insecure, and shouldn't be used - cygwin does its best to make the windows model look like unix's - if you trip over the differences, please consult a system administrator - comment on this slide more advanced tools exercises exercise 5.1: you're worried your data files can be read by your nemesis, dr. evil.
while the target program (or debuggee) is running, the debugger can: pause, resume, or restart the target inspect and display the values of variables change those values do not need to modify the source of the target program!
9 - could use sign-and-value for negative numbers - 00112 would be 310, 10112 would be -310 -
the major version number is only incremented when significant changes are made, where “significant” means “changes that make this version's data/configuration/whatever impossible for older versions to read”.
- numeric: - the standard numerical programming module for python, with good support for multi-dimensional arrays.
a thought-provoking look at how we are encouraged to think about security, and how much security is actually desirable.
and it's good documentation for search engines - often, the “other data” you want to connect to is other html
according to fmt, returning a string - unpack(fmt, str) unpacks the values in str according to fmt, returning a tuple - calcsize(fmt) calculates how large (in bytes) the data produced using fmt will be - packing and unpacking are always fixed-size operations - format specifiers - example: pack two integers, using only 16 bits for each - import struct fmt = 'hh' # two 16-bit integers x = 31
figure 11.2: source browser a code assistant that presents context-sensitive help and documentation figure 11.3: code assistant note: tools like this are available for every modern language figure 11.4:
[0, 1, 2, 3] each(invert, allvalues, allindices) calling func for index 0 calling func for index 1 inner exception handler: integer division or modulo by zero calling func for index 2 calling func for index 3 outer exception handler: list index out of range figure 10.4: stacking exception handlers comment on this slide use raise to trigger exception processing obviously, have to specify the type of exception you're raising e.g., raise exception('this is an error message')
- programming is a sad exception - most students only ever read one- or two-page fragments in textbooks - like reading sonnets, then being asked to write a novel - open source has made millions of lines of code available for inspection -
words.len - nothing appears, because output is being sent to the file words.len - $ ls -t words.len venus.txt earth.txt - $ cat words.len 4 9 69 earth.txt 4 9 69 venus.txt 3 12 62 words.len 11 30 200 total - try typing cat > junk.txt -
the 32-bit integer it represents is 4 bytes - "false" is 5 bytes, 0 is one bit (40:1) - speed - takes dozens of operations to add the integer represented by "34" to the one represented by "57" - hardware interfaces - somewhere, something has to convert the electrical signal from the gas chromatograph to a readable number - lack of anything better - it's possible to represent images as text (ascii art, postscript) -
the biggest challenge in database programming isn't formulated queries—it's handlingconcurrency - two or more things happening at once - in the database world, one user changing the database while another is making a query - a related problem is the need to ensure atomic (or indivisible) operations - sequence of operations is “remove $100.00 from grant #19823”, then “add $100.00 to grant #17928” - don't want money to disappear if computer goes down in between - solution to both problems is to use a transaction - a set of operations which all work as if nothing else was going on, or have no effect on the database - acid: - atomic: either all are performed, or none - consistent: database is in a legal state when the transaction ends - isolated: no operation outside the transaction sees the database in any intermediate state - durable: once the user is notified that the operation has completed, its effects are permanent - transactions sometimes used for queries, but should always be used for updates - example: change kovalevskaya's login id from "skol" to "kovalev" - begin transaction; update person set login =
associate .py files with python - double-clicking on anything ending in .py will then run it - happens automatically when you run the python windows installer - example - using an editor, put the following in powers.py - print 2, 2**2, 2**3, 2**4 print 3, 3**2, 3**3, 3**4 print 4, 4**2, 4**3, 4**5 - run using python powers.py - should see the following - 2 4 8 16 3 9 27 81 4 16 64 1024 - comment on this slide variables - variables are names for values - no types: a variable is just a name, and can refer to different types of values at different times - although your code will be easier to understand if you don't abuse this - must give a variable a value before using it - while variables don't have types, values do - if you try to operate on incompatible values, python will complain - x = 'two' # 'two' is a string y = 2 # 2 is an integer print x
a clean, clear, comprehensive guide to creating html for the web, with good coverage of cascading style sheets (css).
tracing execution of dictionary inversion comment on this slide complex string formatting can be hard to understand especially if one value needs to be used several times e.g., producing an email form letter, and need to put the person's name in three places instead of a tuple, "%" can take a dictionary as its right argument use "%(varname)s" or "%(varname)4d" inside format string to identify what's to be substituted '%(word)s, t%(word)s, and everyw%(word)s' % {'word' : 'here'} creates"here, there, and everywhere" comment on this slide like other modern languages, python uses exceptions to handle errors separating normal (expected) operation from exceptional cases makes code easier to read structured like if/else introduce a block of statements with try then introduce error handling code with except when something goes wrong in the try block, python raises an exception python finds the matching except block, and executes whatever instructions it contains print 'before try/except' try: print '..first line of try block' print 1/0 print '..last line of try block' except: print '..handling error!'
but that also means that it doesn't work on linux or mac - figure 3.3: tortoisesvn -
simplecookie - do not use smartcookie: it is potentially insecure - add values to the cookie (it acts like a dictionary)
- comment on this slide securing http - http sends data as cleartext - as is too often the case, security was ignored in http's original design - netscape later developed https (secure http) to protect confidential information - uses a different port (443 instead of 80) protocol ( https in url instead of http) - encrypts data between the browser and the web server - does not guarantee secure storage on the server - far too many web sites store sensitive information in databases as cleartext - gives villains another point of attack - another flaw in http is its built-in password handling (called basic authentication)
of course, if brand had written “program” instead of “building”, and “programmer” where he'd written “architect”, everything he said would have been true of computing as well.
finally, groups will sometimes identify pre-releases as “beta 1”, “beta 2”, and so on, as in "6.2 beta 2".
exercise 4.2: according to the listing of the data directory above, who can read the file mercury.txt?
donot do svn update before editing this file, as that will spoil the exercise.
- h1 (level-1 heading) is semantic, i (italics) is display - now generally considered a bad thing - documents should only contain semantics - display of that semantics should be specified separately… - …so that different browsers (or devices) can do it differently - sample document: -  software carpentry this course will introduce essential software development skills, and show where and how they should be applied.
after creating second object', counter.num initial count 0 after creating first object 1 after creating second object 2 - can also define methods that belong to the class, rather than to particular objects - out of scope for this course, but often useful - comment on this slide overloading operators prev top next - (almost) every feature of python objects can be overridden by defining the right special method - if done carefully, makes code much easier to read - if done haphazardly, makes it almost impossible to understand - one common use is operator overloading - the symbol "+" is just a shorthand for a function that takes two arguments -
assignment() def testnoconsultants(self): '''make sure that nonexistent consultants aren't present.''
testing i/o - input and output often seem hard to test - put a bunch of fixture files and expected results in a testing directory?
using anecdotes, humor, and common sense, demarco and lister explain how important good physical space, aligning authority with responsibility, and clear direction are.
newvalue) - remember, all attribute values are strings - if you want to store an integer or a boolean, you have to convert it yourself - add new nodes to existing ones by: - asking the document to create the node - appending it to a node that's already part of the tree - notice that the output of the preceding example wasn't nicely indented - we didn't tell dom to create text nodes containing carriage returns and blanks - most machine-generated xml doesn't - comment on this slide walking a tree - often want to visit each node in the tree - e.g., print an outline of the document showing element nesting - simplest way is to write a recursive function - import xml.dom.minidom src = ''' 87.97 224.7 365.26 '''
- every complex file format eventually turns into a badly-designed programming language.
yes, dictionaries are objects too… method purpose example result clear empty the dictionary.
- this course's approach: - introduce some basic tools - students immediately see benefit of taking the course - tools can be used to manage the course itself - show students how to build tools like these - where “how” includes both what goes into the software, and how to create it - solidifies understanding of tools' capabilities and limitations - makes discussion of technique more concrete - show students what else they can do with their new skills - the right way to tackle issues that come up over and over again - key point: avoid overload - people who already know these things tend to underestimate how hard they are to learn - no point preaching to the converted - try instead to move the middle of the bell curve to the right - why is the course called software “carpentry”?
but first, strings - a string is an immutable sequence of characters - immutable means that it cannot be modified once it has been created - i.e., you cannot change individual characters in place - str = 'abc' print 'str is', str str[0] = 'x' print 'str is now', str str is abc traceback (most recent call last): file "immutable_err.py", line 3, in ? str[0] = 'x' typeerror: object does not support item assignment - though you can of course assign a new string value to a variable - str = 'abc' print 'str is', str str =
for example, most of us know that maintenance consumes 40-80% of software costs, but did you know that roughly 60% of that is enhancements, rather than bug fixes?
686.98 - xml.dom.minidom is really just a wrapper around other platform-specific xml libraries - have to reach inside it and get the underlying implementation object to create the document node - that node then knows how to create other elements in the document - library explains what the first and third arguments to createdocument are - middle one tells createdocument what type of element the document's root node should be - set attributes of element nodes using setattribute(attributename,
profile with the name of a log file as an argument - profile data accumulates in that file - use the profile object's runcall method to profile a single run of a function - which may of course call other functions - to process the data, use hotshot.stats - can load data from log files, sort it in various ways, print it, etc. - example: compare speed of 1000 handwritten substring function calls with built-in - import sys def builtin(str, substr): return str.find(substr) def handwritten(str, substr): for i in range(0, len(str)-len(substr)): match =
- the phrase “version 229” therefore uniquely identifies an entire set of files - unlike cvs and other systems, where version 319 of one file might correspond to version 107 of another, and version 794 of a third - comment on this slide warning: binary files - subversion can only mark conflicts this way in text files - i.e., files that store lines of human-readable characters - source code, html—basically, anything you can edit with notepad, vi, or emacs - images, video clips, microsoft word, and many other formats aren't -
if it's worth doing again, it's worth automating - directory structure of the course: - a root directory - lec for lecture notes (in .swc files)
- every original data file should go under version control, and have revision information stored in it - can record author and date of last change as well as version number - carry this information through when processing files - comment on this slide executable documentation - also increasingly fashionable to talk about executable documentation - things that describe the program in ways that the computer can check - assertions - assertions at the top of a method are usually checking pre-conditions that must be true for the method to run properly - those at the bottom are guarantees of what will be true after the method has run - unless there are return statements embedded in the middle of the method… - …which is another reason they're a bad idea - assertions in the middle of methods are usually checking: - invariants (i.e., number of items in the searched list, plus the number in the tosearch list, stays constant) - old bugs: common to introduce assertions while debugging, then leave them in to detect the bug's reappearance - when reading code, assertions let you compare your current understanding of the code with what it actually does - if you see assert x import sys > def foo(x, y): > for i in x: > y += 1 > print 'result:', y > def bar(z): > if z elif z == 0: !
, you write your tests, then write the code - a key element of agile development methodologies like extreme programming… - …but it was around long before they were… - …and pays off in almost every context - seems backward, but has very real advantages: - gives programmers a definite goal - coding is finished when all tests run - particularly useful when trying to fix bugs in old code, as it forces you to figure out how to recreate the bug - helps prevent the “one more feature” syndrome - ensures that tests actually get written - people are often too tired, or too rushed, to test after coding - helps clarify the api before it is set in stone -
- they call it computer science because it's experimental.
there's a much better way comment on this slide symbolic debuggers a symbolic debugger is a program that runs another program on your behalf called “symbolic” because it can show you the source code you wrote, rather than the raw machine code that's executing
for example, assume i have files earth.txt and venus.txt containing lines like this: name: earth period: 365.26 days inclination: 0.00 eccentricity: 0.02 if i type grep period *.txt
some of what he says is well-known: good programmers are up to n times better than bad ones (his value for n is 28), reusable components are three times harder to build than non-reusable ones, and so on.
after try/except figure 10.3: flow of control in try/except you can include code to execute when there isn't an error using else for val in (0.0, 1.0): print "val is", val try: x = 1.0/val except: print '..handling error!'
unlike most “how to do it better” books, it isn't try to sell any particular practice or style, which adds even more weight to mcconnell's carefully balanced opinions.
if you allow percentages, then many tasks will be 90% done for 90% of the lifetime of the project - instead, break tasks down into subtasks that are at most a few days long, and either completed or not completed - describe milestones in terms of verifiable deliverables (i.e., things that someone else can check)
false - note: if no glossary file specified, don't check glossary items at all - now have enough logic that it's worth reorganizing the main processing loop -
but useful in c++, java, and other languages - use an agreed list of abbrevations - curravetemp instead of currentaveragetemperature - “agreed” is important: mixing curravtemp and curravetemp produces hard-to-spot bugs - most important thing is to be consistent - anything consistent is readable after a while - just watch kids learning to read french, punjabi, and
return lines, doc - three functions left to write - readglossaryfile builds a dictionary whose keys are the terms defined in the glossary - checkglossary processes uses of glossary terms in a single lecture file - records the name of the file in which the term appears in the glossary dictionary - if some other filename is already there, reports duplicate definition - def checkglossary(filename, doc, glossary): defns = doc.getelementsbytagname('d') for defn in defns:
- even account names and passwords are sent in clear text.
