how do people represent multi-dimensional tables in c?
by presenting examples ranging from the mit media lab to a one-room extension to a house, brand encourages us to see patterns in the way buildings change (or, to adopt brand's metaphor, the way buildings learn from their environment and from use).
what changes would you have to make to prev top next comparebyfrequency?
1: count('', sys.stdin) else: for filename in sys.argv[1:]: instream =
len returns the length of a string… - …so the index of the last character of text is len(text)-1 - note: there is no separate data type for characters - a character is simply a string of length 1 element = "boron" i
what does the command cd ~ do?
how long threads spend blocked on i/o?
some things are better left to code - might seem redundant, given that we already have a domain model diagram - and given that they use the same notation - class diagram (almost) always contains more information than domain model diagram - extra objects added to manage relationships between main classes - what members each class has, what its methods will be called,
' def setup(self): '''create the empty assignment table.''
- comment on this slide wildcards - some characters (called wildcards) mean special things to the shell - note: the shell expands wildcards before running commands - there's no way for ls to know whether it was invoked as ls *.txt or rm earth.txt venus.txt - comment on this slide exercises exercise 4.1: suppose you are in your home directory, and ls shows you this: makefile biography.txt data enrolment.txt programs thesis what argument(s) do you have to give to ls to get it to put a trailing slash after the names of subdirectories, like this: makefile biography.txt data/ enrolment.txt programs/ thesis/ if you run ls data, it shows: earth.txt jupiter.txt mars.txt mercury.txt saturn.txt venus.txt what command should you run to get the following output: data/earth.txt data/jupiter.txt data/mars.txt data/
if you have a tuple of values called vals, then f(*vals) matches the values with f's arguments - e.g., if vals is (11, 12, 13), then f(*vals) is the same as f(11, 12, 13) - gives you a way to call an arbitrary function with an arbitrary set of arguments in a uniform way - use this to write a function runalltests that takes two arguments: - the function you actually want to test - a list of lists, each of which consists of zero or more arguments, and the expected result - def runalltests(func, tests): pass = fail = error = 0
no input file specified, so cat reads from the keyboard - output sent to a file - voila: the world's dumbest text editor - when you're done, use rm junk.txt to get rid of the file - don't type rm * unless you're really, really sure that's what you want to do… - comment on this slide pipes - suppose you want to use the output of one program as the input of another - e.g., use wc -w *.
this was the first book i ever read that said that the leading cause of software project failure was people, rather than technology.
- typically add things like the user's id, the time of the visit, etc.
1 if p is a prime number.
== 0: raise valueerror, "can't dequeue from empty queue" val = self.data[0] self.data = self.data[1:] return val def empty(self): '''report whether the queue is empty or not.'''
processed image - figure 29.3: how python represents values list of tables prev draft version 327 next prev top next - table 3.1: common subversion commands - table 5.1: important environment variables - table 5.2: basic command-line tools - table 5.3: advanced command-line tools - table 6.1: numeric operators in python - table 6.2: boolean operators in python - table 6.3: comparison operators in python - table 6.4: python string comparisons - table 7.1: string methods - table 7.2: list methods - table 8.1:
- the fact that this can be done in several different ways is what makes it a pattern - step 1: define generic behavior - class visitor(object): def __init__(self): pass def visit(self, node): # when given the document, skip to the root.
but not ok if the loop bodies are several pages long - of course, they shouldn't be anyway… - the wider the scope of a name, the more descriptive it has to be - call a class experimentalrecord, rather than er or exprec - compare: - before after import reader,splitter,transpose import sys,os a=[] b=[] c=[]
extension - it's easy enough to create overlap.o from overlap.c : just run cc overlap.c -
- first test passes: - r1 =
assert 0  hiy instead of loy >=
this 647-page tome is a survey of harmful software, from viruses and worms through trojan horses, root kits, and even malicious microcode.
but are completely independent of one another - for example, define a person as: - class person(object): '''represent generic traits of any person.''
- those values have no internal structure.
- the easy stuff - construction creates an empty sparse vector - its length is the largest index ever seen - may or may not be sensible, but it's easy to implement - class sparsevector(object): '''implement a sparse vector.
- what can we cut (or scale back) to get on track?
== '__main__': print 'initial count',
what steps can you take to see what changes you may have made, compared with a master copy in your home directory?
- dive into python: - the complete text of [ pilgrim 2004] available on-line.
instead, it's about how to structure web sites so that they will foster on-line communities.
- who's responsible for what?
if the function opens and closes the file, no way for you to substitute a fake file - an example of designing code to make it testable - example: find lines where two files differ - nothing as fancy as diff, just a line-by-line comparison - input: two streams (which might be open files or stringio wrappers around strings) - output: another stream (i.e., a file, or a stringio) - as a side effect, we've made the function itself more useful - people can now use it to compare strings, or strings and files - class testdiff(unittest.
new riders, 2001, 0735710759.
exercise 4.13: how would you send the file earth.txt to the default printer?
- which parts am i actually testing?
but it's more convenient than list.index, which throws an  exception general rule: throw low, catch high i.e., throw lots of very specific exceptions, but only catch them in a few  places, high in your code, where you can take corrective action reason #1: every application handles errors differently
exercise 4.2: according to the listing of the data directory above, who can read the file mercury.txt?
while handling requests, a cgi creates a temporary file /tmp/1728397.cgidata
last time i checked, stu feldman was a vice president at ibm, which shows you just how far a good tool can take you… [feathers 2005] michael c. feathers:
a thought-provoking look at how we are encouraged to think about security, and how much security is actually desirable.
original # call them directly.
[johnson 2000] jeff johnson: gui bloopers.
['turing', 'newton', 'darwin'] values: [1912, 1642, 1809] items:  [('turing', 1912), ('newton', 1642), ('darwin', 1809)] get: 1867 after update:  {'curie': 1867, 'darwin': 1809, 'franklin': 1920, 'turing': 1912, 'newton':  1642, 'hopper': 1906} after clear: {} comment on this slide revisit the problem of counting how often things appear in a file use the things (email addresses) as keys in a dictionary the value associated with each key is the number of times it has been seen  so far # data to count.
- subversion: - the main site for subversion is aimed more at subversion's developers than at its users; if you're looking for a how-to, [mason 2005] is a good place to start.
if (!pyarg_parsetuple(args, "i", &val)) { return null; } val = val
attribute 'v' defined outside __init__ - pychecker - similar tools exist for [name of your language goes here] - most check for much more than just indentation and naming conventions - can also find: - dead code (i.e., variables and methods that are never used) - unhandled exceptions - duplicate code - and much more - use them during development - don't check anything into version control unless it passes a style check - take their warnings very seriously when debugging - if someone was sloppy enough to make style mistakes, they probably made more serious mistakes as well - use them when reading code - many tools can reformat code so that it obeys style guidelines - sometimes called pretty-printers - do not reformat code just because you can - makes it difficult to track and merge changes in version control -
right = max(values) assert left  temp.txt.gz', 'w') for i in range(1000): for word in  'this is a test'.split(): print >> outstream, word outstream.close()  print 'output is %d bytes' % os.stat('temp.txt.gz').st_size # see how big it  would have been.
putz irving reid karen reid paul salvini diomidis spinellis bill spotz tom van vleck jim vickroy - frank willison—i'm sorry this one was finished too late for you to tune up - john scopes, and everyone else with the courage to fight for the idea that the truth is more important than doctrine - comment on this slide introduction prev draft version 556 next motivation - computers are as important to scientists as telescopes and test tubes - analyze problems that are too complex for traditional means - simulate things that can't be studied in laboratories - many scientists now spend much of their professional lives writing and maintaining software - a quarter of graduate students in science and engineering spend 25-50% of their time programming - but most scientists have never been taught how to do this efficiently - it's a long way from the loops and arrays of first year to simulating bone development in foetal marsupials… - like being shown how to differentiate polynomials, then expected to invent the rest of calculus - this course will teach you how to design, build, maintain, and share programs more efficiently - focus: tools and techniques appropriate for half a dozen people working together for a year - everything you do at that scale will also make you more productive when you're working on your own for a week - will not turn you into a computer scientist - far too many of them around anyway - instead, goal is to teach you the equivalent of good laboratory technique for computational science - the 20% of ideas that account for 80% of real world use - software carpentry, rather than software engineering - comment on this slide meeting standards - experimental results are only publishable if they are believed to be correct and reproducible - equipment calibrated, samples uncontaminated, relevant steps recorded - in practice, almost always rely on the professionalism of the people doing the work - how well do computational scientists meet these standards?
if you're working with others, or developing software that other people may use: - do you test your interfaces using paper prototypes before implementing them?
my current favorite guide to computer security for programmers, this books walks through each major family of security holes in turn: faulty permission models, bad passwords, macros, dynamic linking and loading, buffer overflow, format strings and various injection attacks, temporary files, spoofing, and more.
- access control: how are authorization rules enforced?
the python standard math library - table 8.2: the python system library - table 8.3: the python time library - table 8.4: the python file system library - table 8.5: python's pathname library - table 10.1:
creates a level-2 heading, etc. - series of indented lines beginning with * is displayed as a list - anything ending in .png, .jpg, or .gif is automatically displayed as an image - doesn't let you do everything… - …e.g., you can't specify alignment of table items… - …but it makes it very easy to create meeting minutes, notes for first-time users, etc.
it may not be as popular as its main competitor, mysql, but most people who have used both have found postgresql easier to work with.
- often the starting point from which qa develops test cases, and the technical writer develops documentation - often find there's an easy way to give customers half of what they want, and a harder way to do it all - estimate both, and discuss pros and cons… - …because the product manager may decide to go with the cheap 50% solution when putting the schedule together - “not everything worth doing is worth doing well.”
* z', x * z print 'z + x', z + x - comment on this slide structured unit testing prev draft version 525 next
and a list of rectangles (each also an instance of rect) as its second argument - and returns true if the rectangles in the list completely cover the first rectangle, or false if they don't - best way for me to specify everything i want is to write some test cases - class testoverlay(unittest.
- regular expressions - basic xml and xhtml - a mini-project - binary data - relational databases - client-side web programming - cgi - security - teamware - extreme programming - the iconix process - the nevex process - backward, forward, and sideways - bibliography - glossary - online resources - list of figures - list of tables - syllabus - comment on this slide acknowledgments top next - the python software foundation, for the grant that made this work possible - the university of toronto, for letting me test this version of this course on its students -
regular expressions as finite state machines - figure 18.1: simple page rendered by firefox - figure 18.2: simple page rendered by internet explorer - figure 18.3: lists and tables - figure 18.4: images in pages - figure 18.5: links in pages - figure 18.6: a dom tree - figure 18.7: modifying the dom tree - figure 20.1: using bits to record sets of flags - figure 20.2:
but authors often change several files in tandem - since cvs has no notion of a “batch submit”, there's no reliable way to say, “what other changes were made in conjunction with this one?”
- a string that is sent to the client in an http response header - client saves it (either in memory or on disk) - the next time the client sends a request to the site, it sends the cookie back to the server - like giving someone a claim check for their luggage - to create a cookie: - create an instance of cookie.
- comment on this slide rule 1: don't trust your input - anyone who knows the url of your web application can send it data - i.e., anyone who has a web browser, knows how to “view source”, and can read html forms - therefore no guarantee that the http request you receive was generated from your form - the input provided for a selection list may not be one of the values you offered - the input for a text field may be longer than the maximum you specified - some parameters may be missing from query_string, while unexpected ones may be present - query_string may not even be formatted according to the http specification - you must validate all of the input before using it - check that all the parameters you expect, and only those, are present - check that values meet constraints - you usually have to do this anyway - e.g., check that the string provided for “atomic number” actually represents an integer - or that a villain hasn't replaced "price=399.99" with "price=3.99" in the query string - make sure that special characters have been escaped - but watch out for double-escaping - and don't reinvent the wheel: every language's library has routines to do url escaping, html escaping, etc.
self.assert_(dependson(self.f4, 'a', 'b'))
- always include tests - comment on this slide special methods - __init__ is just one example of a special method - all have names beginning and ending with double underscore - give programmers a way to make their data types look like those built into python - most widely used is probably __str__
[powazek 2001] derek m. powazek: design for community.
def  findfirstmatchingline(filename, word): infile =
to do that, you'll need to check out a second copy of your repository.
[-3, -3, 0, -2, 3]) if __name__ == '__main__': unittest.main() f.e. =
donot do svn update before editing this file, as that will spoil the exercise.
note: this is different from lists, where for loops over the  values, rather than the “keys” (indices) birthday = { 'newton' : 1642, 'darwin' : 1809, 'turing' : 1912 } for name  in birthday: print name, birthday[name] turing 1912
in interpreted languages like python, you can also switch into debugging mode in the middle of an interactive session - sometimes also do post mortem debugging -
is more helpful than bibref - still doesn't tell us what root, biboutput, and bibinfo are -
[glass 2002] : any new way of doing things initially slows you down - you only have to be as good as the competition - american auto makers in the 1970s
def norm(self): return math.sqrt(self.x
- comment on this slide mechanics - python's standard unit testing framework is the unittest module - what you do: - import unittest - derive a class (or several classes) from unittest.
please make sure that the second copy isn't inside the first, or vice versa—subversion will become very confused.
addison-wesley professional, 2002, 0321117425.
simplecookie - do not use smartcookie: it is potentially insecure - add values to the cookie (it acts like a dictionary)
getting it built - developers then finish designs - purpose is to convince people (including themselves) that they can actually build things the way they intend to - very easy to believe incompatible things when it's all in your head - the act of writing it down (explaining it) forces brings these issues out into the open… - …and ensures that other people know what you think they think you think - also helps you remember later why you're doing something a particular way - note that design overlaps analysis - after all, it's impossible to estimate how long it will take to build something if you don't know how you're going to build it - level of detail varies widely -
- where did your data come from, and what did you do to it?
figure 3.1: basic use - comment on this slide how to do it - one way to use subversion is to type commands in a shell - guaranteed to work everywhere without anything else being installed -
- wingide: - a commercial ide targeted solely at python developers.
[spinellis 2003] diomidis spinellis: code reading.
analysis - pro - simple things are simple to do… - …and not too difficult to read… - …especially compared to the alternatives - con -
newvalue) - remember, all attribute values are strings - if you want to store an integer or a boolean, you have to convert it yourself - add new nodes to existing ones by: - asking the document to create the node - appending it to a node that's already part of the tree - notice that the output of the preceding example wasn't nicely indented - we didn't tell dom to create text nodes containing carriage returns and blanks - most machine-generated xml doesn't - comment on this slide walking a tree - often want to visit each node in the tree - e.g., print an outline of the document showing element nesting - simplest way is to write a recursive function - import xml.dom.minidom src = ''' 87.97 224.7 365.26  '''
xml.dom.minidom.getdomimplementation() doc = impl.createdocument(none, 'planet', none) root =
- we can make this even more flexible by writing a function that tests an arbitrary function - remember that def f(*args) creates a function that takes any number of arguments -
and if you're on a macintosh, there's smartsvn - comment on this slide
exercise 4.19: diff finds and displays the differences between two files.
source[green].paste(out, none, mask) # build a new multiband image.
*/ static pymethoddef contents[] = { {"triple", triple, meth_varargs}, {null, null} }; /* initialization function.
if this is the file: -   87.97  - parse and print like this: - import xml.dom.minidom doc =
- note how we've left room for other things to be excluded?
tell if your code meets the team's standards?
or your boss will want to ship it to the customer - what we want: working code - comment on this slide use cases - first step is to translate our fuzzy ideas about how the interface should be used into something more exact - a use case is a short point-form story that describes how a user accomplishes a particular task - usually written point-form - example: sally wants to run a mitosis simulator for each temperature in a range - sally selects “file… set simulation parameters” - system displays “simulation parameters” dialog with default values - sally changes “temperature” from “single” to “range” - system disables temperature entry control for single temperature - system enables temperature entry controls for “start”, “increment”, and “end” - sally enters values and clicks “ok” - if any values illegal or inconsistent, dialog beeps and displays error message explaining the problem - otherwise, simulator updates its values, and dialog disappears - sally selects “file… run” - system enables “pause” and “stop” buttons and begins running simulations -
exercise 4.6: suppose you want to list the names of all the text files in the data directory that contain the word "carpentry".
and then we move on to the second function… - faster computers won't get us out of this hole - how many possible inputs are there to a function that sorts a list of strings?
it's not for the faint of heart (and it definitely won't be happy on a four-year-old hand-me-down machine), but it's one of the real power tools of modern programming.
if there's no cookie, create one with a count of 1 - otherwise, increment the count - create a new cookie to send back to the user - display the count - #!
values[i] except zerodivisionerror, e: print  'divide by zero:', e divide by zero:
- if x has an __add__ method, call that - otherwise, if y has an __radd__ method, call that - otherwise, try python's built-ins - example: a vector is sparse if most of its entries are zero - no point padding eleven actual values with nine million zeroes - so use a dictionary to record non-zero values and their indices - addition: create a new vector with a non-zero value wherever either operand had a non-zero value - dot product: add up products of matching non-zero values - length: return one more than the index of the largest non-zero value - this isn't a programming question; it's a data modeling question - what does the data in the program have to do to model the real world accurately?
the toxml method can be called on the document, or on any element node - note that we specify "utf-8" as the character encoding - dom trees always store text as unicode, so when you're converting the tree to text, you must tell the library how to represent characters - can also create a tree by parsing a string - works just like parsing a file - import xml.dom.minidom src = '''
viewing an old version of a file - figure 25.5:
- choose an integer e !
exercise 4.12: what do the commands pushd, popd, and dirs do?
- daily python url: - daily (more or less) news about python modules, new releases of the interpreter, meetings, etc.
- scons: - a powerful python-based build management tool.
- take off overhead, and the difference is closer to 4x - still seems low, but at least now we have a way to investigate quantitatively - comment on this slide summary - major advances in programming come when languages start offering support for things the best programmers are doing anyway - for loops and if/then/else formalized
so if a function raises an exception, who gets to handle it?
val - pylint badcode.py ************* module badcode w: 8:
count = struct.unpack('i', buf[0:intsize])[0] # get 'count' values, one by one.
true - so is reversing two columns of numbers: - # optional spaces, number, required spaces, number, optional spaces def reverse(instream, outstream): cols = '^\\s*(\\d+)\\s+(\\d+)\s*$' for line in instream: mo = re.match(cols, line) # if match, reverse numbers if mo: a, b = mo.group(1), mo.group(2) print >> outstream, '%s\t%s' % (b, a) #
- ignorance, laziness, and lack of competitive pressure - american car makers in the 1970s sold lots of gas-guzzling rust buckets - then volkswagen and toyota arrived - it's inappropriate - not good at handling rapidly-changing requirements - learning curve -
the most important command-line tool is the command shell (often just called “the shell”) - manages a user's interactions with the operating system by: - reading commands from the keyboard - figuring out what programs the user wants to run - running those programs - displaying their output on the screen - looks (and works) like an interactive terminal circa 1980 - the shell is just one program among many - many different ones have been written - sh was the first for unix - most others extend its capabilities in various ways - which means that it's the lowest common denominator you can always rely on - we'll use bash (the bourne again shell) in this course - available just about everywhere - even on windows (thanks to cygwin) -
but how can we keep tests independent?
some readers may be intimidated by the book's weight, and the dense page layout, but what really made me blink was that i didn't find a single typo or error.
[feldman 1979] stuart i. feldman: "make---a program for maintaining computer programs", software: practice and experience, vol.
three kinds of assertions: a pre-condition is something that must be true in order for  something else to work e.g., “argument is non-negative” is a pre-condition for math.sqrt a post-condition is something that is guaranteed to be true after  something else happens e.g., “result is either -1 or a legal index to the string” is  a post-condition ofstring.find anything else is simply called a state assertion e.g., “this loop always executes at least once” embed assertions in programs using the assert statement first argument is a boolean condition second (optional) is an error message
- the times they are a-changing - standards for computational work can only go up - change can happen almost overnight - like the american car market when german and japanese imports appeared in the 1970s - comment on this slide
but please, attend the next lecture on security before making anything publicly available - comment on this slide security prev draft version 604 next evil exists - this may be the most important lecture in the course -
temp.txt.gz', 'r') total = 0
the writing is straightforward, and the case studies in chapter 10 are funny without being too cute.
if 'debug' in command_line_targets: program('hello_dbg', dependencies) else: program('hello', dependencies) - pro - don't have to learn a new language -
def count(filename, instream): count = 0
"bb" (1, 3) bc* / abbcb =>
assigning to a dictionary key: creates a new entry if the key is not already in dictionary overwrites the previous value if the key is already present birthday = {} birthday['darwin'] = 1809 birthday['newton'] = 1942 # oops  birthday['newton'] = 1642 print birthday {'darwin': 1809, 'newton': 1642} can only access keys that are present just as you can't index elements of a list that aren't there birthday = { 'newton' : 1642, 'darwin' : 1809 } print birthday['turing']
- bitten: - a tool for running builds continuously in the background across multiple machines.
[-3, -3, 0, -2, 3]) file "running_sum_wrong.py", line 6, in runningsum result.append(result[i-1] + seq[i]) indexerror: list index out of range =
but probably is if you're writing software that's going into a space probe - comment on this slide the unified modeling language - many disciplines rely on graphical notations with precisely-defined semantics for design and communication - architectural blueprints - circuit diagrams - feynman diagrams - thousands have been invented for programming, but only a handful have ever gained widespread acceptance - flowcharts - figure 27.1:
but frequent contact between developers and customers still essential - pair programming: also described below - continuous process - small releases, so that customers can quickly check out all of the changes and additions - continuous integration: everyone builds and run tests on a very tight cycle - preferably several times an hour while coding - continuous refactoring: everyone cleans up what they're about to work on before they start work on it - and follows through into other modules if there are ripple effects - ensures that code is always clean enough for the next person to start work - shared understanding - simple design: speaks for itself - in practice, design of a rapidly-evolving system may seem simple to those who've watched it evolve, but not to newcomers - system metaphor: use simple analogies to provide a high-level overview of the system - e.g., it's an assembly line, a blackboard, etc.
[lutz & ascher 2003] is the standard introduction to python -
686.98 - xml.dom.minidom is really just a wrapper around other platform-specific xml libraries - have to reach inside it and get the underlying implementation object to create the document node - that node then knows how to create other elements in the document - library explains what the first and third arguments to createdocument are - middle one tells createdocument what type of element the document's root node should be - set attributes of element nodes using setattribute(attributename,
his observations on hiring programmers, measuring how well a development team is doing its job, the api wars, and other topics are always entertaining and informative.
prev top next glossary prev draft version 611 next a - absolute path: - yuan gan - abstract data types: - access control: - access control lists: - acquire a lock: - action: - actors: - aggregate: - alias: - anchor (in regular expression): - annotated syntax tree: - assertion: - asymmetric cipher: - atomic: - abhishek ranjan - attribute (in xml): - authentication: - authorization: - automatic variables (in make): b - basic authentication: - binary data: - binary milestone: - binary mode: - blacklist: - jeremy hussell - boilerplate: - boundary object: - branch: - breakpoint: - abhishek ranjan - breakpoint, conditional: - bug tracker: - bugzilla: c - call stack: - callback: - camel case: - chain: - child class: - chunk: - cipher: - ciphertext: - class: - class diagram: - simona mindy - client: - code browser: - code inspection: - code review: - cognitive dissonance: - collision: - comment spam: - alireza moayerzadeh - commit: - common gateway interface: - component object model: - component testing: - concurrency: - connection: - constructor: - control object: - cookie: - coordinated universal time: - core dump: - nilesh bansal - cross product: - amit chandel - cross-site scripting: - csv: - cursor: - cvs: d - dashboard: - data member: - data modeling: - lei jiang - database column: - database key: - amit chandel - database row: - database table: - amit chandel - daylight savings time: - dead code: - deadlock: - yuan gan - debuggee: - decryption: - default target: - defense in depth: - defensive programming: - derive: - design pattern: - lei jiang - development process: - yuan gan - dictionary: - dictionary key: - directed graph: - directory tree: - docstrings: - document: - document object model: - domain model: - lei jiang - domain model diagram: - drive: - driver: e - element (in xml): - embed: - encryption: - entity object: - environment variable: - nilton bila - epoch: - nilton bila - error: - escape sequence: - event-driven programming: - exception: - executable documentation: - exponent: - extend: - extreme programming: - tingting zou f - fail: - filename extension: - filter: - finite state machine: - fixture: - flag: - foreign key: - form: g - garbage collect: - nilesh bansal - getter: - group: - greedy matching: h - heap: - abhishek ranjan - heisenbug: - hexadecimal: - hijack: - host address: - http header: - nilesh bansal i - iconix process: - idiom: - immutable: - in-place operator: - inheritance: - instance: - instruction pointer: - instrument: - integrated development environment: - integration testing: - integrity constraint: - internet protocol: - nilesh bansal - invert: - issue tracker: j - join: - amit chandel k l - leap second: - leap year: - liskov substitution principle: - little-endian: - alireza moayerzadeh - local time: - lock: - logging: m - macro: - mailing list: - make: - mantissa: - match object: - memory model: - merge: - method: - nilton bila - milestone: - module: - multi-valued assignment: - multiplicity: - multipurpose internet mail extensions: - mutable: n - nested query: o - object: - lei jiang - object-oriented analysis and design (ooad): - tingting zou - operating system: - nikos sarkas - operator overloading: - nilton bila - optimistic concurrency: - tingting zou - outcome, actual: - outcome, expected: - override: p - pack: - pair programming: - parent class: - parent directory: - pass: - path: - pattern rule: - pessimistic concurrency: - tingting zou - phony target: - pipe: - abhishek ranjan - plaintext: - polymorphism: - port: - post mortem: - post mortem debugging: - post-condition: - pre-condition: - prerequisite: - pretty-printer: - private key: - process: - profiling: - program slice: - project velocity: - protocol: - public key: - public key cryptography: - publish-subscribe: q r - race condition: - raise exception: - record: - amit chandel - refactor: - reference count: - reflection: - register: - regression: - regression testing: - regular expression: - abhishek ranjan - relational database: - yuan gan - relative path: - yuan gan - release a lock: - release log: - a file (often a spreadsheet) that records exactly what was shipped to whom, when.
[langtangen 2004] hans p. langtangen:python scripting for computational science.
[castro 2000] elizabeth castro: xml for the world wide web.
but what if there is no space between the line number and the colon?
so the blank line that signals …end of headers” is right after the request line - create a socket - socket.
shell basics prev draft version 588 next introduction - most modern tools have a graphical user interface (gui) - because they're easier to use - but command-line user interfaces (cluis) still have their place - easier (faster) to build new clui tools - building a gui takes time - building a good gui takes a lot of time - higher action-to-keystroke ratio -
what command or commands could you use to display the first ten lines of its output?
showdiff(filename, dir, 'not found', referenced - actual) showdiff(filename, dir, 'unused', actual - referenced) - then write the helper function showdiff - def showdiff(filename, dir, title, values): if len(values): print '%s (for file %s and directory %s):' % (title, filename, dir) for v in values: print '
- the phrase “version 229” therefore uniquely identifies an entire set of files - unlike cvs and other systems, where version 319 of one file might correspond to version 107 of another, and version 794 of a third - comment on this slide warning: binary files - subversion can only mark conflicts this way in text files - i.e., files that store lines of human-readable characters - source code, html—basically, anything you can edit with notepad, vi, or emacs - images, video clips, microsoft word, and many other formats aren't -
if you've added a few new features, changed part of the gui, etc., you increment the minor version number and throw it to customers.
the original description of make.
but those 1's and 0's may represent: - characters that can be displayed as text - something else - that “something else” is (misleadingly) called binary data - usually means “anything you can't manipulate it with a standard text editor”
but ⌈^\d{2,3}⌋ won't - most important thing is to build up complex res one step at a time - write something that matches part of what you're looking for - test it - add to it -
[glass 2002] , [mcconnell 2004] , and [mcconnell 1996] for the evidence - and the next time someone tells you that xyz will improve your productivity, ask them for similar evidence… -
addison-wesley, 2005, 0321278275.
when a program fails badly (e.g., illegal memory access in c++), it creates acore dump - copies all of its internal state to a file on disk - can then load that dump into the debugger, and see where the program was when it died - not as good as watching it run… - …but sometimes the best you can do - modern graphical debuggers typically show: - if the debugger is part of a larger integrated development environment (ide), it may show other things as well - note: tools like this are available for every modern language - comment on this slide basic operations - the debugger can set breakpoints in the target program - tells the target to pause when it reaches particular lines of code -
there's also a section on additional documentation sources, and a chapter on tools that can help you make sense of whatever you've just inherited.
if the condition isn't satisfied, python raises an assertionerror exception - def findrange(values): assert (values !=
start and end points - figure 27.5: domain model diagram - figure 27.6:
- what does this loop's index refer to?
pragmatic bookshelf, 2005, 0974514071.
this very readable book describes the 5% of sql that covers 95% of real-world needs.
depending on your language, you may need to compile it with different flags
- then some simple rules - most taken from [agans 2002] - remember: never debug standing up - the faster you try to work, the slower you'll go - comment on this slide
suppose all you wanted was a list of the files that contained lines matching a pattern, rather than the matches themselves—what flag or flags would you give to grep?
[knuth 1998] donald e. knuth: the art of programming.
import sys def checktabs(filename, infile): '''look for tabs.''
in keeping with the spirit of the language itself, their writing is clear, their explanations lucid, and their examples well chosen.
- university of toronto: - canada's biggest university, and the host institution for much of this work.
that it might contain a race condition?
if your first security mechanism fails, is there another one behind it just in case?
if y starts inside x, y must end before x ends - so …… is legal… - …but …… is not - every document must have a single root element - i.e., a single element must enclose everything else - so the following is not a legal document - text is normal printable text - must use escape sequences to represent "" - in xml, written &name; - specific dialects of xml may or may not restrict which elements can appear inside which others, and where text can appear - xhtml is very liberal - mathml (mathematical markup language) is stricter - comment on this slide xhtml - most common use of xml is still xhtml (the xml version of hypertext) - basic tags: - note: xhtml includes both semantics (“what does this mean?”) and display (“how should this be drawn?”)
microsoft press, 1997, 1572316217.
but it's just a guess - solution is for the server to create a cookie
- took less than a minute to write the four tests - uncovered one gap in the requirements, and one error in the first implementation - able to verify the fix almost instantly - sounds pretty good to me… - comment on this slide eliminating redundancy - setting up a fixture can often be more work than writing the test - complex data structures, external files, etc. - if the test class defines a method called setup, the framework will call it before running each test -
for now, we will ignore both problems - write small programs that use the web, but aren't used by others - assume that everything else is reliable - comment on this slide under the hood - these days, the internet runs on a family of communication standards called internet protocol (ip) - defines everything from electrical signal strengths on up - using ip, process communicate through sockets - each socket is one end of a point-to-point communication channel - provides the same kind of read and write operations as files - every socket is uniquely identified by host address and a port number - a host address is four 8-bit numbers, like 24.153.22.195 - most addresses have symbolic names, like www.third-bit.com - a port is just a number in the range 0-65535 - 0-1023 are reserved for the operating system - most commonly used member of the ip family is transmission control protocol (tcp) - guarantees that any data sent is received, in order - lots of applications use tcp directly - email, instant messaging, ftp, games… - but don't worry: we'll be programming at a much higher level - comment on this slide
import sys def checktabs(filename): '''look for tabs.'''
*/ static pyobject * triple(pyobject * self, pyobject * args) { int val;
your message:        ''' print '' - note: there is no static html page - what the user sees is always generated by a program - note also: a lot of this program is devoted to copying values into an html template - there are lots of good systems out there, in many languages, for doing this - comment on this slide what about concurrency?
t - problem: what if you want to pack strings, but don't know their length in advance?
im.save(sys.argv[2]) - figure 29.1:
like eclipse, pydev needs a lot of memory to run well.
priorconsultants = self.fixture.getconsultants() priorprojects = self.fixture.getprojects() self.fixture.addassignment('alan', 'tables') self.fixture.delassignment('alan', 'tables') self.assertequal(self.fixture.getconsultants(), priorconsultants) self.assertequal(self.fixture.getprojects(), priorprojects) - and/or derive another test class: - class testmulti(unittest.
- based on studies from the 1980s, it's what everyone looks at anyway - just count the number of warnings in c/java books about misleading indentation - doesn't matter how much you use, but: - everything in the block must be indented the same amount - tabs are expanded so that they're equivalent to (up to) eight characters - so don't ever indent with tabs, since your editor may interpret them differently - many editors understand python indentation, and will help you get it right
but each has things the other doesn't (e.g., an office, or courses taught vs. courses taken)
for line in instream: if re.search(pattern, line): count += 1 print '%s %d' % (filename, count) # only standard instream?
if nothing else, it would have been a better way to start thinking about the profession i had stumbled into than the “everybody knows” factoids that i soaked up at coffee time.
- this lecture looks at a process called extreme programming (xp) - best suited to small teams that are trying to cope with constantly-changing requirements - which is a good description of many scientific research teams - look at two alternatives in the next couple of lectures - remember: every team is different - most important thing is not which process you use, but that you're paying attention to process - [demarco & lister 1999] is a good introduction to teams and productivity - comment on this slide waterfalls and spirals -
and despite its age, [kernighan & pike 1984] is still useful - how to tell if you can skip this lecture - do you know what a shell is?
identify the tests associated with a bug?
many programmers swear by it; others massage their aching wrists and swearat it instead, but there's no denying that it's a very powerful tool.
1: checktabs('', sys.stdin) else: for filename in sys.argv[1:]: infile = open(filename, 'r') checktabs(filename, infile) infile.close() - great—except it doesn't report errors like missing or unreadable files - printing a stack trace doesn't count - fix by wrapping the code in an exception handler - only catch the kinds of exceptions we think are reasonable to expect - don't want the error handling to mask errors that we didn't anticipate - #!
def ave(values): '''calculate an average value, or 0.0 if 'values' is empty.
[''] for filename in filenames: lines, doc = readfile(filename) checktabs(filename, lines) checkprintable(filename, lines) if glossary: checkglossary(filename, doc, glossary) if glossary and doglossarycomplete: checkglossarycomplete(glossary) except ioerror, e: print >> sys.stderr, e except xml.parsers.expat.
none doglossarycomplete =
exercise 4.10: what does rm *.ch?
- use "ssh" instead whenever possible.
self.assertequal(self.fixture.getconsultants(), set(['alan']) | priorconsultants) self.assertequal(self.fixture.getprojects(), set(['tables'])
for line in instream.readlines(): total += len(line) instream.close() print 'output would have been %d bytes' % total output is 79 bytes output would have been 15000 bytes - you can use os.popen2 to connect to the other program's input and output simultaneously -
most programmers spend most of their time fixing bugs, porting to new platforms, adding new features---in short, changing existing code.
but how to print in order of frequency?
figure 11.2: source browser a code assistant that presents context-sensitive help and documentation figure 11.3: code assistant note: tools like this are available for every modern language figure 11.4:
- cygwin: - a linux-like environment for windows, which brings with it a lot of other tools (like ssh and gnu make).
saturn commit the changes.
[-1, 0, 1] allindices =
build numbers are what developers care about: they're often only matched up with version numbers after the fact (i.e. you create build #1017, qa says, “yeah, it looks good,” so you say, “all right, this'll be 6.1.0,” and voila, you have 6.1.0.1017.)
- pylint: - a code checking tool for python that complements pychecker.
addison-wesley professional, 1999, 0201485672.
from cstringio import stringio instream =
but when you want to do something complicated, you can use any feature of python you want - e.g., build up a list of filenames, fetch a build rule from a database, etc.
accessibility - the web is not a particularly friendly place if you're visually disabled - screenreaders have a hard time dealing with web pages that use graphics instead of text for buttons… - top 10 accessible web authoring practices describes what you should do to make your pages more accessible - all of these things help search engines and other automatic tools as well - comment on this slide the document object model - the document object model (dom) is a cross-language standard for representing xml documents as trees - elements, attributes, and text all represented as objects - strengths: - much easier to manipulate trees than strings - same basic model in many different languages (which lowers the learning cost) - weaknesses: - needs a lot of memory for large documents - its generic model doesn't take advantage of the more advanced features of some languages - most popular alternative is sax (the simple api for xml) - turns an xml document into a stream of events - “element, element, text, element, text… - easy to do very simple things… - …but anything complex requires the programmer to reimplement a subset of dom - python comes with a simple implementation of dom called minidom - fast, sturdy, and well documented… - …if you understand all the terminology, and know more or less what you're looking for) - comment on this slide the basics - every dom tree has a single root representing the document as a whole - doesn't correspond to anything that's actually in the document - this element has a single child, which is the root node of the document - this node, and other element nodes, may have three types of children: - other elements - text nodes - attribute nodes - every node keeps track of what its parent is - allows programs to search up the tree, as well as down - example: - note: it's common to forget that text and attributes are stored in nodes of their own - some other python implementations of dom don't bother - make simple things simpler… - …but only a little bit - comment on this slide
- do not gloss over the hard bits -
- it's difficult to learn these things from academic computer scientists - cs research is more concerned with rapid prototyping than with reliability - people are naturally sceptical of innovation - particularly after they've seen a few bandwagons roll through - glass's law
steve mcconnell: rapid development.
these books are a guide to all the other conceptual tools that working programmers ought to have at their fingertips, from sorting and searching algorithms to different kinds of trees and graphs.
s = f.read(40) f.close() print repr(s) linux2 'import sys\nprint sys.platform\nfor mode i' 'import sys\nprint sys.platform\nfor mode i' - comment on this slide packing and unpacking - in c and fortran, an integer is a raw 32-bit value - fwrite(&array, sizeof(int), 3, file) will write 3 4-byte integers from address array to file - python, java, and other languages usually don't use raw values - there's no guarantee that things like lists are stored contiguously in memory… - …so programs need to pack data into contiguous bytes for writing… - …and unpack those bytes to recreate the structures when reading - packing looks a lot like formatting a string - unpacking reverses this process - comment on this slide
this course isn't really about python - it's about solving simple problems with the least effort -
port 80  - request has no headers -
again, this label is usually attached to a particular build after the fact—you wait until qa (or whoever) says that build #1017 is good enough to send out to customers, then tag it in version control.
if currentnode.nodetype == currentnode.
birthday.keys() ['turing', 'newton', 'darwin'] items return a list of  (key, value) pairs.
== '__main__': x = sparsevector() x[1] = 1.0 x[3] = 3.0 x[5] = 5.0 print 'len(x)', len(x) for i in range(len(x)): print '...', i, x[i] y = sparsevector() y[1] = 10.0 y[2] = 20.0 y[3] = 30.0 print 'x + y', x + y print 'y
each time you update something in your version control repository, cruisecontrol recompiles your code, re-runs your tests, and lets you (and your teammates) know if you've broken anything.
-rw-r--r-- 1 someone 2396 may 6 08:38 earth.txt -rw-r--r-- 1 someone 1263 may 6 08:38 jupiter.txt -rw-r--r-- 1 someone 1015 may 6 08:43 mars.txt -rw-r--r-- 1 someone 946 may 6 08:41
- may seem odd to file these as issues, but they are for the person who's asking -
the shell running a program - figure 5.2: redirecting standard input and output - figure 5.3: pipes - figure 6.1: nimble vs. sturdy languages - figure 6.2:
this classic is a handbook of do's and don'ts for working programmers.
- first job is to find it (or them) - grep bibref expandrefcite.py finds exactly one call - # substitute information.
peachpit press, 2003, 0321170105.
for i in range(len(sections)): outputfilename = '%s.%d.dat' % (filenamestem, i+1) if os.path.isfile(outputfilename): print '%s already exists and cannot be overwritten!'
then, use svn merge to restore the original contents of your biography ( course/ex01/bio.txt), and commit the result.
expected: return 'pass' else: return 'fail' except exception, e: return 'error' - just as easy to return strings as to define constants for pass, fail, and error - note: assertions on input arguments are inside the try/ except - passing none as the left or right rectangle is an error in the test - step 2: write some tests - whenever possible, create a table of inputs and results - easier for people to read, understand, and add to than code - especially if those people aren't programmers - def runtest(left, right, expected): try: assert left is not none assert right is not none actual =
but your brain automatically notices visual differences, and assumes they're important - it actually does take longer to read code written in a mix of styles… - …and the error rate is higher - conform to pep-008: python style guide unless you have a really good reason not to - comment on this slide idioms - every language (human or computer) has idioms - sayings or phrases whose meaning does not follow from the meaning of the words it is made up of - e.g., “face the music” does not mean “look at the orchestra” - a way to aggregate raw data into chunks - as you read programs, look for uses of common idioms - example: c/c++ and java allow assignment in the middle of an expression - z
- always starts with "/" - e.g., /home/gvwilson is my home directory, and /courses/swc/lec/shell.swc is this file - a relative path describes how to find something from some other location - equivalent to saying, “four blocks north, and seven east” - e.g., from /courses/swc, the relative path to this file is lec/shell.swc - every program (including the shell) has a current working directory - “where am i?”
return the front value of the queue, or raise valueerror if the queue is empty.''
exercise 4.18: grep is one of the more useful tools in the toolbox.
mastering regular expressions.
* note that getconcestor(x, x, t) returns x for any threshold.
- do team members write and share small tools for automating common tasks?
yes, it's constraining: that's the whole point - comment on this slide class diagrams - a class diagram shows: - what members and methods each class has - how classes are derived from each other - which classes talk directly to each other - either by holding references - or by being passed to one another as parameters - note: - show classes, not individual objects - don't show exact nature of relationship (for example, list vs. dictionary) -
it's a great achievement, and a great resource for anyone doing scientific programming.
in fifteen (very) short chapters, the author presents nine simple rules to help you track down and fix problems in software, hardware, or anything else.
- programming is a sad exception - most students only ever read one- or two-page fragments in textbooks - like reading sonnets, then being asked to write a novel - open source has made millions of lines of code available for inspection -
but you only have to understand one hard thing once, instead of many slightly less hard things over and over - take a look in the next lecture at a full-fledged unit testing framework - comment on this slide choosing test cases prev top next - you can't test everything - there are roughly 10 million 7-digit phone numbers - a function that puts two phone numbers in order has 1014 possible inputs - at a million tests a second, it will take 108 seconds (or roughly three years) to check them all -
the team's discussions?
when was mercury.txt last changed?
exercise 4.7: suppose you have written a program called analyze.
most books on gui design are long on well-meaning aesthetic principles, but short on examples of what it means to put those principles into practice.
'%s does not contain %s' % (filename, word) raise valueerror(errmsg) if __name__
the rules - a week of hard work can sometimes save you an hour of thought.
- so that developers stop making that kind of mistake - documentation also starts before product is available - describe new gui screens based on mock-ups drawn for a&e - write new on-line help
- medium: anything in between - in the weeks and days leading up to a release, perform regular triage - go through the open issues, and re-set their priorities so that everyone knows what they ought to be working on - description: provide all the information someone needs to know to address the issue - for a bug, need: - software configuration, including package versions, operating system, etc. - sequence of steps or unit test case that triggers the fault - configuration files, input data, screenshots of the fault, etc. - similar level of detail for feature requests and questions - remember, it may be weeks or months before the issue is addressed - comment on this slide mailing lists - trac assumes that everyone has a mail reader that they're happy with - doesn't try to compete - no way to compose or send mail in trac - users don't have mailboxes on the system - instead, trac creates one mailing list for each project - everyone who's a member of a project is automatically on that list - only project members can send mail to it - every user must whitelist one or more email addresses with trac - timeline shows old mail messages as well as other events - not threaded by topic: unnecessary complexity for small projects - comment on this slide wiki - a wiki is a simple web-based system for creating web pages - term comes from the hawaiian “wiki wiki”, meaning “faster faster” - if you have logged in, and have permissions to edit the wiki, then every page has an “edit” button - syntax is much simpler than standard html - blank lines separate paragraphs - any word in camelcase is automatically interpreted as a link to a page with that name - =
not out-of-bounds list index syntax is except exceptiontype, variable exceptiontype is what you want to catch if something of that type is raised, the exception object is assigned to variable values =
- which computers can factorize numbers in polynomial time?
if you're working on something that is so complex that you actually need to concentrate, there's too much chance that it's too hard.”
- make also looks at environment variables - you can refer to ${home} in a makefile without having defined it - example: - comment on this slide
but you must be very careful about deadlock
print "calling original:", original.__name__, original(3, 4) print "calling alias:", alias.__name__, alias(3, 4) # get a little fancy.
intsize = struct.calcsize('i')
project lifecycle - figure 28.2:
mercury.txt -rw-r--r-- 1 someone 1714 may 6 08:40 saturn.txt -rw-r--r-- 1 someone 881 may 6 08:40 venus.txt note: the command will display your user id, rather than someone .
print freq {'be': 3, 'mg': 3, 'ca': 1} figure 10.1:
charles river media, 2005, 1584503580.
simple page rendered by firefox figure 18.2: simple page rendered by internet explorer - comment on this slide attributes - elements may also have attributes - each attribute is a name/value pair that provides extra information about the element - enclosed in the opening tag - a centered heading -
none: print 'pass' else: print 'fail' pass -
- in this case, it's part of a program to fill in citations -  becomes  - ways to answer the question: - guess based on function name - assume bibref stands for “bibliographic reference” -
a gentle introduction to unix, with many examples.
an experimental comparison",ieee software, vol.
if you want to know more, [goerzen 2004] is a comprehensive guide - comment on this slide distributed is different - distributed systems are fundamentally different from unitary systems - small program can ignore these differences… - …but every industrial-strength application eventually has to deal with them - difference #1: concurrency - as in databases, means “several things happening at once” - can lead to: - deadlock: a is waiting for b while b is waiting for a - race conditions: final result depends on whether a or b goes last - difference #2: partial failure - one component fails while others are still healthy -
[williams & kessler 2003] - though comparisons are usually made against two programmers who are both testing their own work… - …rather than against one programmer developing, and another testing independently - comment on this slide project velocity -
['be','mg','mg','ca','be','mg', 'be'] freq = {} for name in names: if name in  freq: freq[name] = freq[name] + 1 else: freq[name] = 1 # print in alphabetical  order by key.
- compute an integer d such that d*e % ((p-1)(q-1))
seelicense for details.
but commands use different flags on different operating systems - do you use del or rm to delete files?
american management association, 2002, 0814471684.
testing i/o - input and output often seem hard to test - put a bunch of fixture files and expected results in a testing directory?
result = sparsevector() result.values.update(self.values) # if the other object is also a sparse vector, add non-zero values.
if you want the details, try [thompson & chase 2005] and [skoudis 2004] - comment on this slide what are we trying to do? - security systems try to achieve many (often contradictory) goals - let everyone who should be able to do something do it easily… - …while blocking people who shouldn't be able to… - …and gathering information about their attempts - all three parts are important - most people are trustworthy most of the time - preventing legitimate users from doing things annoys them - if people are sufficiently annoyed, they'll turn security off, or find ways around it - example: best way to ensure villains can't access data is to erase it… - …which encourages people to write it down on scraps of paper - have to design the system for the villainous minority - any system that relies on trust will eventually be abused - be honest: do you always put a quarter in the jar when you get a cup of coffee in the staff room?
a useful reference for every serious python programmer, this book is a collection of tips and tricks, some very simple, others so complex that they require careful line-by-line reading.
['be','mg','mg','ca','be','mg', 'be'] freq = {} for name in names: freq[name] =  freq.get(name, 0) + 1 # print.
so why not start with a real programming language, and embed a build management tool in that?
- gimp: - the gnu image manipulation program is a powerful tool for creating and manipulating images in a wide variety of formats.
ourprice authors = prettyname(item.
tracing execution of dictionary inversion comment on this slide complex string formatting can be hard to understand especially if one value needs to be used several times e.g., producing an email form letter, and need to put the person's name in  three places instead of a tuple, "%" can take a dictionary as  its right argument use "%(varname)s" or "%(varname)4d" inside format string to identify what's to be substituted '%(word)s, t%(word)s, and everyw%(word)s' % {'word' : 'here'} creates"here, there, and everywhere" comment on this slide like other modern languages, python uses exceptions to handle  errors separating normal (expected) operation from exceptional cases makes code  easier to read structured like if/else introduce a block of statements with try then introduce error handling code with except when something goes wrong in the try block, python raises an exception python finds the matching except block, and executes whatever  instructions it contains print 'before try/except' try: print '..first line of try block' print  1/0 print '..last line of try block' except: print '..handling error!'
patches are things that don't have their own installers.
%_422.csv %_480.csv summarize.py python summarize.py $^ > $@ %.csv
so, to print frequency in alphabetic order by address: get the list of keys sort that list loop over it # build the frequency dictionary as before.
he occasionally assumes more background knowledge than most readers of this book are likely to have, but only occasionally, and makes up for it by providing both clear code, and clear explanations of why this particular function has to do things in a particular order, or why that one really ought to be multithreaded.
testcase): def testempty(self): self.assertequal(runningsum([]), []) def testsingle(self): self.assertequal(runningsum([3]), [3]) def testdouble(self): self.assertequal(runningsum([2, 9]),
jane margolis and allan fisher: unlocking the clubhouse.
if isinstance(other, sparsevector): for k in other.values.keys(): result[k] =
- what does the product make them do that they don't want to have to?
similarity+match&program=
- packing is easy: - unpacking is a little harder - use calcsize('i') instead of hard-coding the number 4 - 64-bit machines are on their way… - each pass through the unpacking loop, have to step up to the right location in the packed string - def unpackvec(buf): # get the count of the number of elements in the vector.
rather than blind faith in prevention, schneier advocates swift detection and response to an attack, while maintaining firewalls and other gateways to keep out the amateurs.
if the condition is always true, the loop never ends - can break out of the middle of a loop using break - can skip to the next iteration using continue - a = 5 while a > 0: print 'top of loop', a a -= 1 if (a % 2)
there's a lot of no-nonsense analysis of the cost of interactivity, and interviews with the creators of some of the web's most successful community sites.
record.left+record.right' for title in results: print '', cgi.escape(title), '' print '' -
exercise 4.17: how would you change your password?
arithmeticerror illegal arithmetic operation indexerror bad index to sequence (out of bounds or illegal type) keyerror nonexistent index to dictionary typeerror illegal type (e.g., trying to add integer and string) valueerror illegal value (e.g., math.sqrt(-1)) ioerror unable to create or open file, read data, etc. table 10.2: common exception types comment on this slide
doc.createelement('period') root.appendchild(period) text =
the best (and wittiest) discussion ever published of how programming languages ought to evolve.
when you are reading and writing code, you have to keep a bunch of facts straight in your head for a short period of time - what is this function supposed to return?
so learn how to do it well talk about tools first (because they'll make everything else less painful)
- def builtin(str, substr): return 0
'%s does not contain %s' % (filename, word)  raise valueerror(errmsg) if __name__
for example, if the directory contains three files a.txt, abc.txt, and abcd.txt, the command should remove abc.txt , but not the other two files.
exercise 16.3: can you find out which functions use the most cpu time?
this is the only exclamation mark in a topic title in the whole course - most successful attacks use social engineering, rather than technology - call up your bank, and see if you can get your credit card balance without your pin - helps if you sound like a grandmother who is close to tears because her poodle has just been hit by a car - second most successful way to attack a system is to get a job with the company running it - burn an extra copy of credit card data while backing up the server - take notes of all the “to be fixed later” points that come up during the security audit of the web site - many companies choose not to press charges, rather than deal with bad publicity after a security failure - example: aol employee sold 92 million customer records to a spammer for $100,000 - combination of inside job, and stealing the credentials of more privileged user - exploiting carelessness is the third - many people don't bother to change the default password on their wireless router - many more choose easily-guessed passwords - “easy” if you have the right tools, that is - but remember: once one villain builds a tool, they can all use it - in fact, technology often makes systems less secure - example: facial recognition software that works correctly 99% of the time - so one person in a hundred is mistakenly identified as a potential terrorist - 300,000 passengers a day in a busy airport -
⌈[^abc]⌋ means “anything except the characters in this set” - ⌈.⌋ means “any character except the end of line” - ⌈\b⌋ anchors the match to a break between word and non-word characters - comment on this slide extracting matches - problem: to check for duplicate line numbers in an assembly language file - line numbers are the first thing on the line, terminated by a colon - first try: search each line with a regular expression - if it succeeds, extract the line number - import sys, re # start of line, optional spaces, digits, more optional spaces, colon numbered = '^\\s*\\d+\\s*:' seen = {} for line in sys.stdin: if re.search(numbered, line): num = line.split()[0] if num in seen: print num else: seen[num] =
microsoft visual studio in action comment on this slide
if key in self.values: return self.values[key] return 0.0 def __setitem__(self, key, value): '''assign a new value to a vector entry.''
if the condition isn't satisfied, python raises an assertionerror exception def findrange(values): assert (values !=
=> 0.291666666667 0.9375 =>
- do you know what a pipe is?
' self.assertequal(self.fixture.getbyproject('nothing'), set()) - run it - framework finds testempty - goes through the test cycle (test, setup, run, teardown) for each testxyz method in it, and in commontests - now add another shared test to commontests: - def testadddelnew(self): '''check that adding and then removing an assignment leaves things as they were.'''
one way to do this is to use a separate computer (e.g., your laptop, your home computer, or a machine in the lab).
true dotabs = true settings, filenames =
for line in lines: if line.find('\t') >= 0: print '%s contains tabs' % filename break - and checkprintable is simple as well - def checkprintable(filename, lines): '''look for non-printable characters.''' for line in lines: for c in line: if c not in string.printable: print '%s contains non-printable characters' % filename print line break - comment on this slide checking glossary entries - course has a glossary that defines new or unusual terms - entries in lectures are formatted as immutable -  for “definition” - ref attribute is the term that appears in the glossary - contained text is displayed in-line - glossary is structured like this: - goal: make sure every term is defined once, and only once - read in the glossary - record the item ids - read a set of files, marking items as they're seen - if an item has already been marked, report the duplication - at the end, look for items that haven't been marked off - hm…what happens if we're only checking one file?
- this course's approach: - introduce some basic tools - students immediately see benefit of taking the course - tools can be used to manage the course itself - show students how to build tools like these - where “how” includes both what goes into the software, and how to create it - solidifies understanding of tools' capabilities and limitations - makes discussion of technique more concrete - show students what else they can do with their new skills - the right way to tackle issues that come up over and over again - key point: avoid overload - people who already know these things tend to underestimate how hard they are to learn - no point preaching to the converted - try instead to move the middle of the bell curve to the right - why is the course called software “carpentry”?
testcase, commontests): '''test an empty assignment table.''
- # fill in citations.
- virtual machine: - visitor: w - watchpoint: - waterfall model: - simona mindy - web services: - web spider: - simona mindy - weblog: - jeremy hussell - whitelist: - jeremy hussell - wiki: - jeremy hussell - wildcard: - jeremy hussell - working copy: x y z prev top next online resources prev draft version 534 next prev top next - andrew kuchling's python regular expression howto: - a short tutorial on the basics of regular expressions aimed at python programmers.
peachpit press, 2000, 0201710986.
- comment on this slide how do you login remotely?
it's more than most developers will ever want to know, but when you need it, you really need it.
[] for line in lines: line = line.strip() existing = countfind(counts, line) if existing: existing[1] += 1 else: counts.append([line, 1]) return counts def comparebyfrequency(a, b): if a[1] = 0: return line.rstrip() errmsg =
- raise valueerror instead of using assert when someone tries to dequeue from an empty queue -
- for each alternative: - how long will it take to create?
- cc *.c is slow and inefficient if only one of your 117 source files has changed - worse, what if some files rely on others?
working effectively with legacy code.
if cookie.has_key('count'): count = int(cookie['count'].value) # create new count.
- tools are signposts, not destinations.
== '__main__': try: word = sys.argv[1] for filename in sys.argv[2:]: line = findfirstmatchingline(filename, word) print '%s / %s => %s' % (filename, word, line) except valueerror, e: print >>
but more importantly, they don't find modeling useful - there's a lot of chicken-and-egg in this - until enough programmers create models, and can read them, there's little incentive for any particular programmer to do so - comment on this slide
- permissions displayed as three rwx triples - “missing” permissions shown by "-" - example: rw-rw-r-- means “user and group can read and write; everyone else can read; no one can execute” - change permissions using chmod - example: chmod u+x something.exe gives the user execute permission to something.exe - example: chmod o-r notes.txt takes away the world's
apress, 2004, 1590593715.
- depending on your language, you may need to compile it with different flags -
return lines, doc - three functions left to write - readglossaryfile builds a dictionary whose keys are the terms defined in the glossary - checkglossary processes uses of glossary terms in a single lecture file - records the name of the file in which the term appears in the glossary dictionary - if some other filename is already there, reports duplicate definition - def checkglossary(filename, doc, glossary): defns = doc.getelementsbytagname('d') for defn in defns:
coding style and reading code - why read code - cognition - determining functionality - naming - idioms - style-checking tools - role of documentation - traceability - defensive programming and other pseudo-documentation - active reading watching programs run - python's object model - dynamic programming - coverage - profiling regular expressions - basic patterns - anchors - escape sequences - extracting matches - compiled res - other languages - other patterns basic xml and xhtml - formatting rules - xhtml - attributes - images and links - accessibility - dom - basic features of dom - creating a dom tree - walking a dom tree - modifying a dom tree a mini-project - checking for tabs - automation - checking for printable characters - checking glossary entries - checking cross-references binary data - motivation - representing numbers - bitwise operators - shifting - floating point numbers - binary i/o - packing data structures - variable-length data - metadata relational databases - create, insert, and drop - simple queries - joins - negation and nested queries - aggregation - application programming - handling null - concurrency client-side web programming - underlying protocols - http - http request - http response - urllib - parameterizing requests - encoding and decoding - web services cgi - overview - mime types - example - creating forms - handling form data - server-side state - concurrency - cookies security - goals - limitations of technical solution - terminology - input is untrustworthy - the evils of exec - basic cryptography - basic cryptography - https - ssh - guidelines teamware - overview of trac - repository browser and timeline - issue tracker - writing useful tickets - mailing lists - wiki - roadmap and milestones - dashboard - weblogs - administration extreme programming - extreme programming - xp core practices - planning game - pair programming - project velocity - counter-arguments the iconix process - use cases - domain model - robustness diagrams - class diagrams - sequence diagrams - order of operations - uml tools the nevex process - vision statement - analysis & estimation - a&e format - design, implementation, and maintenance - qa and documentation - post mortem backward, forward, and
testcase): def testnovalues(self): try: inrange([], 0.0, 1.0) except valueerror: pass else: self.fail() def testbadrange(self): try: inrange([0.0], 3.0, 3.0)
- use this to predict how long it's going to take to finish the agreed-upon work - if it has taken 70 programmer-days to implement the first ten stories, it's safe to bet that it'll take 140 pd to implement the remaining twenty - hoping for a miraculous improvement in productivity is always a mistake - what to do if the team isn't going to have everything done by the deadline?
- reluctant matching: - remote procedure call: - replay attack: - repository: - repository browser: - risk assessment: - roadmap: - robustness diagram: - role: - root directory: - nilton bila - rss: - alireza moayerzadeh - rule: s - sample: - scaffolding: - screen scraping: - search path: - seek: - sequence: - sequence diagram: - server: - nilesh bansal - setter: - shared library: - shell: - short-circuit evaluation: - simple api for xml: - alireza moayerzadeh - single-step: - slice: - social engineering: - socket: - sourceforge: - nikos sarkas - sparse: - spawn: - special method: - spiral model: - sql: - sql injection: - stack frame: - stack pointer: - standard error: - standard input: - standard output: - state assertion: - static space: - status code: - step into: - step over: - submodule: - subversion: - suspended process: - swig: - symbolic debugger: - symmetric cipher: - system testing: t - tag (in xml): - target: - target program: - template: - test: - test result: - test suite: - test-driven development (tdd): - alireza moayerzadeh - testing, bottom-up: - text: - three-tier architecture: - ticket: - ticket, closed: - ticket, open: - time structure: - time zone: - timeline: - traceability: - transaction: - nikos sarkas - transmission control protocol (tcp): - nikos sarkas - triage: - tuple: - two's complement: u - unicode: - nikos sarkas (see also ).
this book is about those things that make up the difference between typing in code that compiles, and writing software that reliably does what it's supposed to.
if there's only one value, get a single-item list - comment on this slide maintaining state - often want to change the data a server is managing, as well as read it - update a description of an experiment - change your preferred email address - add items to a shopping cart - your cgi programs can do this any way they want - you want it to be simple, fast, and secure… - …but these are not always compatible - the industrial-strength solution is to use a relational database - simple programs can often get away with using files - the cgi program re-reads the file each time it processes a request - and re-writes it if there have been any updates - example: append messages to a web page - old messages are saved in a file, one per line - script checks the incoming parameters to decide what to do - if newmessage is there, append it, and display results - if newmessage isn't there, someone's visiting the page, rather than submitting the form - #!
prev top next regular expressions prev draft version 560 next introduction - how to count the blank lines in a file?
what fixes are currently being tested?
traceback (most recent call last): file "key_error.py", line 5,  in ?
this is not only the best introduction to python on the market, it is one of the best introductions to any programming language that i have ever read.
robert l. glass: facts and fallacies of software engineering.
- your tests can only ever be as good as (your understanding of) the spec - we'll assume it's supposed to return a new list - first implementation of runningsum: - import sys, unittest def runningsum(seq):
[] while pos  1901-05-01 selects all experiments that weren't conducted on may 1, 1901,and all experiments whose date is null (since null isn't equal to anything except itself) - have to use (experiment.
- in an ideal world, all code would be accurately documented -
- sqlite: - a small, simple, and very fast relational database that can be run on its own, or integrated into other applications.
- do you estimate how long tasks will take before you start, and compare that with how long they actually took?
matcher - example: find all title case words in a document - def findall(instream, outstream): matcher = re.compile('\\b([a-z][a-z]*)\\b(.*)')
the most advanced open source uml tool available.
if leadingspace: leadingspace = doc.createtextnode(leadingspace) para.insertbefore(leadingspace, para.firstchild) # get rid of the original text.
if the debugger is part of a larger integrated development environment (ide), it may show other things as well a source browser that presents an outline of the project's modules,  classes, functions, variables, etc.
how do they create packages in java?
but there are several good graphical interfaces for subversion too - rapidsvn runs on windows, linux, and mac - well, maybe “walks” is a better description—as of version 0.9, it's not the fastest thing in the world - figure 3.2: rapidsvn - tortoisesvn is a windows shell extension - which means that it integrates with the windows file browser, rather than running separately -
like other books in peachpit's visual quickstart series, this one is beautifully designed, and easy to read without ever being condescending.
a typical use is shown below.
- developers analyze the feature requests provided by the product manager - how can the capability be implemented?
- or, “how many old versions of windows are we going to support?”
put the answer in a file called course/ex01/mv.txt and commit your changes.
it's also possible to make res match reluctantly, i.e., to have the parts match as little as possible, rather than as much.
how can you recognize that a data structure is a graph?
source = im.split() # create a bitmask of regions where there's red.
a condensed manager-level version of the same author'srapid development.
a clean, clear, comprehensive guide to creating html for the web, with good coverage of cascading style sheets (css).
joel on software collects some of the witty, insightful articles spolsky has blogged over the past few years.
if you allow percentages, then many tasks will be 90% done for 90% of the lifetime of the project - instead, break tasks down into subtasks that are at most a few days long, and either completed or not completed - describe milestones in terms of verifiable deliverables (i.e., things that someone else can check)
def applyeach(functions, value): result =
- yeslogic: - makers of prince, the document formatter and generator used to produce the pdf version of these notes.
- to set or reset a variable's value temporarily, use this: - $ export varname=value - only affects the current shell (and programs run from it) - to set a variable's value automatically when you log in, set it in ~/.bashrc - remember, "~" is a shortcut meaning “your home directory” - for me, right now, ~/.bashrc is /home/gvwilson/.bashrc - important environment variables - comment on this slide how the shell finds programs - the most important of these variables is path - the search path that tells the shell where to look for programs - when you type a command like tabulate, the shell: - splits $path on colons to get a list of directories - looks for the program in each directory, in left-to-right order - runs the first one that it finds - example - path is /home/gvwilson/bin:/usr/local/bin:/usr/bin:/bin:/python24 - both /usr/local/bin/tabulate and /home/gvwilson/bin/tabulate exist - /home/gvwilson/bin/tabulate will be run when you type tabulate at the command prompt - can run the other one by specifying the path, instead of just the command name - warning: it is common to include .
is the text that matched the third subexpression, m.start(3) is where it started - extracting line numbers is now easy: - import sys, re # start of line, optional spaces, digits, more optional spaces, colon numbered = '^\\s*(\\d+)\\s*:' seen = {} for line in sys.stdin: mo = re.search(numbered, line) if mo: num = mo.group(1) if num in seen: print num else: seen[num] =
print q.deq.__doc__ implement a queue.
- any data members defined inside the class block belong to the class as a whole - class counter(object): num
fieldstorage() if form.has_key('newmessage'): lines.append(form.getfirst('newmessage'))
but only as useful as the information in it - trac's issue tracker is simpler than most, in order to make entering data very easy - most large projects use more complicated tools, such as bugzilla - to create a ticket: - to see what tickets are already in the system: - follow either the “view my tickets” or “view project tickets” link - the first shows your tickets across all projects - the second shows all tickets for the current project - tickets can be sorted and filtered in various ways - click on a ticket to view or update it - all the information entered by the original author - a flag showing whether it is open (i.e., still needs work) or closed (completed)
stringio() findall(instream, outstream) assert outstream.getvalue() ==
= __mul__ makes __rmul__ point to the same code as __mul__ - there's no magic here: methods are functions, are objects, are things you can assign to names - addition - trickier than multiplication: result is non-zero wherever either argument is non-zero - don't want to loop over all the zeroes of either argument - solution: if the other object is a sparse vector, cheat - i.e., reach inside it, and rely on details of its implementation - def __add__(self, other): '''add something to a sparse vector.''
- most machines these have only ssh, anyway.
sturdy vs. nimble execution - figure 6.3: variables refer to values - figure 7.1: visualizing indices - figure 7.2: visualizing negative indices - figure 7.3: line segment - figure 7.4: aliasing in action - figure 7.5: slicing copies data - figure 8.1: call stack (a) - figure 8.2:
sequence=gattaca&search_type=
in zoology - did an introductory fortran course nine years ago, and attended a workshop on web-based bioinformatics tools when he started his job - now developing fuzzy pattern-matching algorithms for genes'r'us, a biotech firm with labs in four countries - ron - 24; b.eng in mechanical engineering, now doing an m.sc.
| priorprojects) - derive another class from both commontests and unittest.
fail: testdouble (__main__.sumtests) ---------------------------------------------------------------------- traceback (most recent call last): file "running_sum_wrong.py", line 18, in testdouble self.assertequal(runningsum([2, 9]),
- how do you tell when you're done?
print "shouldn't happen either" > else: > foo('abc', z) > if __name__
if there isn't a triple giving you a permission, you don't have it - some standard roles are pre-defined (and more can be added) - a role is a set of permissions - (jvn, funiac, role_developer) gives a user all the permissions associated with the developer role - comment on this slide
- despite its name, it's anything but simple - luckily, there are libraries to hide the details for most widely-used web services - example: fetch information about a book from amazon - amazon has defined an api for web services - you need to get a license key in order to use it - they're free - allows amazon to throttle requests to one per second per client - use functions in amazon.py to search by various criteria - result is a list of objects with information about items that matched the search criteria - import sys, amazon # format multiple authors' names nicely.
[hock 2004] roger r. hock: forty studies that changed psychology.
- pydev: - pydev is a plugin for eclipse, an open source ide backed by ibm that was originally targeted at java, but which now has plugins to support several other languages.
if you've waited five seconds for a web site to respond, should you assume that it's down, or keep waiting?
each threat is described and analyzed in detail, and the author gives plenty of examples to show exactly how the attack works, and how to block (or at least detect) it.
== '__main__': try: word = sys.argv[1] for  filename in sys.argv[2:]: line = findfirstmatchingline(filename, word) print  '%s / %s => %s' % (filename, word, line) except valueerror, e: print  >> sys.stderr, e except ioerror, e: print >> sys.stderr, e except  exception, e: print >> sys.stderr, e import sys # look for the first matching line in a file.
what does prev top next getopt do when it encounters an argument it doesn't recognize?
self.data = [] def enq(self, val): '''add a new value to the end of the queue.''
- scipy: - a set of extensions to the numeric module for scientific programming.
if someone other than the owner does ls tools, permission is denied -
- therefore (a ** e) *
minor version numbers are what most people think of as releases.
import re text = 'abbcb' for pattern in ['b+', 'bc*', 'b+c+']: mo = re.search(pattern, text) print '%s / %s =>
this book looks at how to handle several common protocols, including http, smtp, and ftp.
exercise 4.16: you have changed a text file on your home pc, and mailed it to the university terminal.
this work proves that by being conscious of the many things that turn women off computing, and by viewing computer science from different angles, we can attract a broader cross-section of society, which can only make our discipline a better place to be.
sideways prev top - intro - the numeric module - python imaging library - scons - integrating c into python - swig, fortran, and embedding python in c - design patterns - refactoring - non-technical reading - rules of programming copyright © 2005, python software foundation.
keys = inverse.keys()  keys.sort() for k in keys: print k, inverse[k] 1 ['ca'] 3 ['be', 'mg'] figure 10.2:
if someone checks in a large change set, and code coverage immediately drops from 80% to 70%, you probably want to have a close look at those changes - comment on this slide profiling - rather than just flagging lines as they are executed, we could count how often each line executes - the more often something runs, the more important it is to figure out how to make it fast
inspecting values - figure 11.6: creating a breakpoint - figure 12.1: memory model - figure 12.2: method lookup - figure 13.1: object-oriented testing - figure 14.1: structure of a make rule - figure 14.2:
sys.stderr, e except ioerror, e: print >> sys.stderr, e except exception, e: print >> sys.stderr, e - comment on this slide assertions - an assertion is a claim about the state of a program that must be true if the program is correct - e.g., “this list is not empty”, or “this value is greater than that one” - three kinds of assertions: - a pre-condition is something that must be true in order for something else to work - e.g., “argument is non-negative” is a pre-condition for math.sqrt - a post-condition is something that is guaranteed to be true after something else happens - e.g., “result is either -1 or a legal index to the string” is a post-condition of string.find - anything else is simply called a state assertion - e.g., “this loop always executes at least once” - embed assertions in programs using the assert statement - first argument is a boolean condition - second (optional) is an error message -
x = 1.0 / values[i] indexerror: list index out of range you can associate any number of except blocks with a single try they're tested in order—whichever matches first, wins if a “naked” except appears, it must be the last  one (since it catches everything) better to use except exception, e so that you have the  exception object exceptions are organized in a hierarchy e.g., zerodivisionerror, overflowerror, and floatingpointerror are all specialized versions of arithmeticerror
' # initialize result with all non-zero values from this vector.
[fowler 1999] martin fowler: refactoring.
if (not ref) or (ref not in bibinfo): print "cannot satisfy '%s'"
original 6.5 original 6.5 - comment on this slide creating modules - every python file is automatically also a module (or library) - if the file is called xyz.py, load it using import xyz - the statements in the module are executed as it is loaded - assignment and def are statements - you can use conditionals, loops, and anything else, too - refer to things in a module using module.thing - put this in mylib.py - # a constant.
open(filename, 'rb') (and similarly for output) - otherwise, the low-level routines python relies on convert windows line endings "\r\n" to unix-style "\n" … - …which is an unkind thing to do to an image - example: open a file using "r", then in "rb" - identical on unix, but different on windows - import sys print sys.platform for mode in ('r', 'rb'): f = open('open_binary.py', mode)
newton 1642 darwin 1809 test whether a key k is in a dictionary d using k in d once again, inconsistent with behavior of lists, but useful birthday =
for example, if you are on windows, what would you do to find out how many instances of svchost.exe are running?
that's where this book comes in.
newy # calculate norm.
saturn 14 commit the changes.
and then we test: - if __name__
- do you have an automated test suite?
for line in infile.readlines(): if line.find('\t')
- use sticky notes and the like for menus, dialogs, etc. - test subjects are less likely to hold back criticism of something that looks thrown together - write some html pages by hand - fire up visual basic or another drag-and-drop gui builder - make it very clear that this is just a prototype!
prev top next coding style and reading code prev draft version 574 next introduction - good programming style is very hard to teach - all the “rules” are either banal or overly restrictive - saying, “make methods short, but not too short” doesn't really help - neither does saying, “no method shall be longer than sixty lines” - matters aren't helped by the fact that the strength of programmers' opinions is inversely proportional to the amount of data they have -
d) edit green/ex01/planets.txt so that its contents are as shown below.
[thompson & chase 2005] herbert h. thompson and scott g. chase:
def findfirstmatchingline(filename, word): infile =
python's pydoc module does similar things - embedded documentation is more likely to be up to date than external documentation - it's right in front of programmers as they make changes -
stringio(fixture) outstream =
- the individual use cases - comment on this slide domain model - at this point, have a rough idea of the major elements of the domain model - the set of abstractions the system will use to represent the real world - example: domain model for a traffic simulator may contain: - vehicles - vehicle types - e.g., bicycle, motorcycle, small car, family car, light truck, heavy truck… - each vehicle is an instance of exactly one vehicle type - drivers - driver behaviors - a set of statistical rules determining speed, likelihood of signalling, etc.
- there's a whole industry devoted to dealing with this - both differences make distributed applications much harder to debug than unitary ones - often have heisenbugs (which only appear intermittently)
what command or commands could you use?
* from person where (login = "kovalev") or (login = "skol"); select * from involved where (login = "kovalev") or (login = "skol"); kovalev|kovalevskaya|sofia 1709|1|2|kovalev 1737|1|1|kovalev 1737|2|1|kovalev - wrap the changes in a transaction so that: - no query can run after person changes, but before involved changes - if database goes down in the middle of the operation, database doesn't become inconsistent -
- common to have bugs that hide when print statements are added, and reappear when they're removed - there's a much better way - comment on this slide symbolic debuggers - a symbolic debugger is a program that runs another program on your behalf - called “symbolic” because it can show you the source code you wrote, rather than the raw machine code that's executing - using a debugger is one of the two things that separates professionals from amateurs - using version control is the other - while the target program (or debuggee) is running, the debugger can: - pause, resume, or restart the target - inspect and display the values of variables - change those values - watch for certain events - do not need to modify the source of the target program!
yes, it can be confusing, but remember: we're trying to run one operating system's tools on top of another - comment on this slide basic tools ownership and permission: unix - on unix, every user belongs to one or more groups - the groups command will show you which ones you are in - every file is owned by a particular user and a particular group - owner can assign different read, write, and execute permissions to user, group, and others - read: can look at contents, but not modify them - write: can modify contents - execute: can run the file (e.g., it's a program) - ls -l will show all of this information - (along with the file's size and a few other things)
but useful in c++, java, and other languages - use an agreed list of abbrevations - curravetemp instead of currentaveragetemperature - “agreed” is important: mixing curravtemp and curravetemp produces hard-to-spot bugs - most important thing is to be consistent - anything consistent is readable after a while - just watch kids learning to read french, punjabi, and
once the iteration is under way, the team tracks the project velocity - how quickly are user stories actually being implemented?
i always add extra garlic to my chili… - …and just about everything else, come to think of it
['.svn'] # find out where we're supposed to look.
peachpit press, 2004, 0321287630.
keyword - python sources testing basics - motivation - terminology - rules for tests - testing frameworks - choosing tests dictionaries and error handling - motivation - string formatting - dictionaries - working with dictionaries - dictionary methods - counting and inverting - dictionary string formatting - try, except, and else - exceptions - exception handler stack - raising exceptions - assertions and defensive programming - executing subprocesses debugging - what's wrong with print statements - symbolic debuggers - running in a debugger - breakpoints, inspection, and single-stepping - how debuggers work - advanced operations - rule 0 object-oriented programming - motivation - defining classes - defining methods - defining classes - special methods - inheritance
but unlike many claims made in software engineering, there's empirical evidence that it actually works
- often involves researching new technologies, competitors' products, etc.
' self.values[key] = value - dot product - the other object (on the right side of "*") is usually called other - no reason to insist that it be a sparse vector - could equally well be a list of values - so loop over the indices of our own values, multiply by corresponding values in other object -
alone cannot solve the problem!
(dwight d. eisenhower) - product manager gathers requirements from customers - customers often say, “we want feature x.” - often means, “i heard someone mention this while i was waiting for a flight.”
comment on this slide
in extreme cases, “6.2.3.1407” means major version 6, minor version 2, patch 3, build 1407.
10001 function calls in 0.292 cpu seconds ordered by: internal time, call count ncalls tottime percall cumtime percall filename:lineno(function) 5000 0.165 0.000 0.165 0.000 substr.py:6(handwritten) 1 0.081 0.081 0.292 0.292 substr.py:17(tests) 5000 0.045 0.000 0.045 0.000 substr.py:3(builtin) 0 0.000 0.000 profile:0(profiler) - hm…built-in method is only two and a bit times faster?
addison-wesley professional, 2001, 0201756080.
o'reilly, 2003, 0596002815.
so we might as well choose something simple and useful - for more information: - [lutz & ascher 2003] is the standard introduction - [martelli 2005] is a collection of useful tips and tricks - see python cookbook for the on-line version - comment on this slide running python interactively - running a program in a sturdy language is a two-step process: - compiler translates source code into something that can run - that “something” then runs - directly on the hardware (c, c++, fortran)
a combination of an instruction manual, a summary of the authors' empirical studies of pair programming's effectiveness, and advocacy, this book is the reference guide for anyone who wants to introduce pair programming into their development team.
but there's one big difference: it's possible to build tools to do refactoring for you - the eclipse ide for java is the best known example - highlight a method, say “rename”, and the ide changes all the calls too - able to do this because it continuously re-parses source code as you type - move methods up into parent class, split classes in two, and much, much more - if this doesn't convince you to upgrade from a dumb editor, i don't know what will… - very important to have unit tests in place before starting to refactor - without this, you have no way of knowing what else your refactoring might have broken - [feathers 2005] is an excellent guide to how to fit useful tests back onto inherited applications - comment on this slide and a little light reading - [brand 1995] looks at how buildings can be designed to change and grow gracefully over time - everything he says is directly applicable to large programs -
- many other tags can be used (and abused) in html pages - use ul for an unordered (bulleted) list, and ol for an ordered (numbered) one - each list item is wrapped in li - use table for tables - each row is wrapped in tr (for “table row”)
a gentle introduction to c, with many examples.
- it takes less total time - see
- all data is stored as 1's and 0's -
each one is just a few sentences long - each one should fit on a 3×5 index card - describes functionality, not features - i.e., what the system can do, not how it does it - it's the developers' job to figure out what features to add to implement the desired functionality - set of user stories define the project requirements - as project evolves, throw away or update old ones as well as adding new ones - developers then estimate how long each user story will take to implement in ideal weeks - i.e., five perfect interruption-free days - customers and developers then decide which stories to include in this iteration, and which to leave for the next - if something is too big to fit into an iteration, break it down into smaller pieces - you're going to do this anyway when developing it… - comment on this slide pair programming - pair programming is the practice of having two people work together at one computer - one types while the other watches and comments - predates xp, but was popularized by it - seems like a waste of resources, but: - two pairs of eyes are more likely to spot errors as they're being made than one -
- this lecture describes: - lists, for storing collections of values - functions, which reduce redundancy, and make programs easier to read - reading and writing files - comment on this slide
the results are impressive: female undergraduate enrolment at cmu rose by more than a factor of four during their work, while the proportion of women dropping out decreased significantly.
working together what versions actually mean - the discussion above referred to “version 16 of spin.c ”, but in fact there is no such thing - instead, there's version 16 (or 17, or 18…) of the repository - users are supposed to try to keep the files in the repository in a consistent state - i.e., don't submit things that are half-done - since the next person to do an update would then be in the same half-done state you are - subversion therefore updates the version number on the whole repository every time a set of changes is submitted - each change set can affect any number of files (including adding or deleting files)
float division traceback (most recent call last): file "except_with_type.py",  line 4, in ?
- two approaches - instrument the code by inserting instructions to record the clock time - typically record time at start and end of each method call, and total up the differences - deterministic, but expensive - sample the code by interrupting it at regular intervals to see where it is - builds a statistical profile of where in the code we're most likely to be - non-deterministic, but impact can be reduced by reducing sampling frequency, and running the program for longer - both kinds of profiling distort the program's behavior - the heisenberg principle: measuring something changes it - python's hotshot module measures execution time - create an instance of hotshot.
def __str__(self): result =
if you didn't know what you'd just done, would you be able to figure it out from the log messages?
at least, not unless speed and/or memory requirements become an issue - implementation: - class queue(object): '''implement a queue.''
[fehily 2003] chris fehily: sql.
- do you know what $path is?
rule.mk clean will get rid of all the generated files - the -f flag stands for “force”
after the party's over - the last thing you do is write the release log and assign the release aversion number - leave this until the end because: - you may discover that what you thought was going to be one release actually needs to be several - marketing may change its mind based on what the competition is calling their releases - refer to the release by a codename (like “beryllium” or “munich”) while it's under development - always do a post mortem on the project after shipping - what went right (that we want to do again)?
- comment on this slide rule 2: never run user commands - suppose you want to build a search engine - can't be bothered to look for strings in files yourself, so you run grep in a sub-process - #!
- comment on this slide
fieldstorage() for key in form.keys(): value = form.getvalue(key) if isinstance(value, list): value = '
who can write it (i.e., change its contents or delete it)?
to send lines 50-100 to a file called tmp.txt?
- discipline matters more than genius.
fail += 1 except exception, e: error += 1 for (label, count) in (('pass', pass), ('fail', fail), ('error', error)): print '%s: %4d' % (label, count) runalltests(overlap, tests) - advantage: reusability - can use this to test any function - disadvantage: obscurity - the extra level of abstraction makes it harder to understand what's going on -
prev top next backward, forward, and sideways prev draft version 534 next
but it's relatively easy to call c/c++ and fortran libraries from python - doesn't have all of matlab's numerical tools -
a shell in action - figure 4.2: operating system and shell - figure 4.3: a directory tree - figure 4.4: parent directories - figure 4.5: running a program - figure 5.1:
fetching pages - opening sockets, constructing http requests, and parsing responses is tedious - so most languages provide libraries to do the work for you - in python, that library is called urllib - urllib.urlopen(url) does what your browser would do if you gave it the url - parse it to figure out what server to connect to - connect to that server - send an http request - give the calling program an object that looks like a file, from which to read response data - example: read the test page the easy way - note:
on a virtual machine (java) - some combination of the two (c#) - nimble languages typically combine the compiler and the virtual machine - this means that most nimble languages can run interactively, like a shell - comment on this slide running saved programs - obviously don't have to retype program every time you want to run it - option 1: save program in a file with a .py extension, and type python filename.py - python reads and executes the commands in the file exactly as if they'd been typed in interactively - option 2 (unix only): make the following the first line of the .py file - #!
== '__main__': if len(sys.argv) ==
this beautiful, thought-provoking book starts with the observation that most architects spend their time re-working or extending existing buildings, rather than creating new ones from scratch.
so why don't all large projects use this kind of process?
- we'll see what to do about actual "+"'s in a moment - comment on this slide special characters - question: what if you want to include "?" or "&" in a parameter?
for programmers who want to incorporate bind into a larger application (technical details) our product is a web services api based on soap that supports remote calls into the core bind api.
- python software foundation: - a non-profit organization devoted to advancing open source technology related to python, and the main financial sponsor of this course.
- “we parse the xml configuration file, and then a miracle happens” isnot a good a&e - references - these days, usually a list of urls - include pointers to prototypes stored in the version control repository - time estimates come from experience - you can usually estimate how much code you'll have to write to implement something - if you can't, you should go back and think it through in more detail - you should know how long it takes you to develop working code - just as runners keep track of their times for running 1000 meters, or how much they can bench press -
- comment on this slide testing for failure - testing that code fails in the right way is just as important as testing that it does the right thing - otherwise, someone will do something wrong some day, and the code won't report it - two ways to do it: - use testcase.assertraises to check that a specific function raises a specific exception - use try/ except yourself - have to do it this way in c++, java, and most other sturdy languages - example: testing a function that finds all values inside a double-ended range - raises valueerror if the range is empty, or if the set of values is empty - class testinrange(unittest.
hiy - fix and rerun tests - we ought to test that overlap works when rectangles do overlap - try: r1 =
[rect(0, 0, 1, 2)])) def testtwohalves(self): self.assert_(overlay(rect(0, 0, 2, 2),
[-1.0, 0.0, 1.0] for i in range(4): # note: top index will be  out of bounds try: x = 1.0 /
but the more time you invest up front, the longer it is until you discover that you need to make changes - write the code - also overlaps analysis and design - build throwaway prototypes while doing analysis - expect to refine design during early stages of construction - if you're still refining the design a week before you're due to ship, something has gone wrong - remember that coding includes writing unit tests - these are the developer's responsibility - include coverage analysis in the daily build & test to ensure that new code is being tested - in theory, qa should refuse to test features that aren't exercised by unit tests - often refactor old code while adding new stuff - your skills (and coding style) improve over time - or the person working on the feature in version 3.3 knows something the version 3.2 author didn't -
summary prev top next -
o - always check filenames supplied by user - just a special case of the preceding rule, but an important one - example: controlling access to documents - all your documents live below /web/docs -
now type make clean and make validate before
result[k] + other[k] # otherwise, use brute force.
o'reilly, 2002, 0596002890.
- you're just doing it in your head… - …where it's no use to anyone else
who would be affected if you slipped a week?
some of these are well-known, such as placing common code in a utility method.
unless otherwise noted, the exercises below assume that you have done this, and that your working copy is in a directory called course.
tim berners-lee creates hypertext markup language (html) for the world wide web - much (much) simpler than sgml - anyone could write it, so everyone did - problem: html had a small, fixed set of tags - everyone wanted to add new ones - solution: create a standard way to define a set of tags, and the relationships between them - 1998: first version of xml is standardized - a set of rules for defining markup languages - much more complex than html… - …but still much simpler than sgml - new version of html called xhtml was also defined - like html, but obeys all xml rules - still a lot of non-xml compliant html out there, though - comment on this slide
summary prev top next - seems like a lot of work, doesn't it?
exercise 4.14: a colleague asks for your data files.
- pattern is a regular expression that describes what you're looking for - text is the string you're searching in -
- xml documents can only contain text, so you can't store an image or audio clip directly in a page - unless you encode it as text - usual solution is to store a reference to the external file using the img tag - the src argument specifies where to find the image file -   images    our logo    figure 18.4: images in pages - important to always use the alt attribute to specify alternative text - screen readers for people with visual handicaps use this instead of the image -
greg wilson (gvwilson@third-bit.com)  figure 18.1:
- e.g., what if the paragraph starts with a link?
- what about maintaining state on the client side?
- dept. of computer science, university of toronto: -
addison-wesley, 1999, 020161622x.
- do you know what a process is?
viewing file changes - figure 25.6: the timeline - figure 25.7: filtering events - figure 25.8: creating a new ticket - figure 25.9: whitelisting an email address - figure 25.10: editing a wiki page - figure 25.11: dashboard display - figure 25.12: how blogs work - figure 25.13: a trac timeline blog - figure 26.1: the cost of change - figure 26.2:
== '__main__': fixture = '''\
- the best answer is to use fake i/o using strings - python's stringio and cstringio modules can read and write strings instead of files - similar packages exist for c++, java, and other languages - this only works if the function being tested takes streams as arguments, rather than filenames -
but boehm still envisaged cycles lasting from six months to two years - comment on this slide enter the extremists - xp arose in the 1990s to cope with: - ever-changing requirements - internet time - six-month iterations were longer than the lifespan of the average dot-com - assumption: change is cheaper than it used to be - note: less data to support this than some xp advocates would have you believe… - basic idea: each iteration lasts only one to four weeks - implies that each version is only a small step forward from the previous one - benefit is constant course corrections from the customers - equivalently, can re-direct project every couple of weeks to deal with changes - problem: how to ensure that developers stay on track when the track is constantly changing direction?
and then start the next round of a&e's - because while the development team has been wrapping up this release, the product manager has been preparing for the next one - comment on this slide exercises exercise 28.1: does your manager know when you expect to complete your current task?
in order to understand xp, you have to understand what it's a reaction against - also have to understand the cost of change - the waterfall model, described by royce in 1970, describes development flowing through several phases - the spiral model described by boehm in 1986 wraps this on itself - get a goal from the customer, design, implement, and test it, and repeat - note: royce actually advocated doing this too, but most people have forgotten that - key ideas: - the code teaches you about the problem - customers can only find out what they actually want by playing with a working system -
- pychecker: - a code checking tool for python that complements pylint .
assuming you care about your data, your bank account, your reputation… - …and those of others - computer security is a collective responsibility - a system is only as strong as its weakest component - if you are creating cgi scripts, or sending data over the web, you are putting others at risk as well as yourself - impossible to cover anything more than the basics in this lecture - please read [schneier 2003] and [schneier 2005] for broader, non-alarmist coverage -
it's ok to use i and j for indices in tightly-nested for loops -
in contrast, the operating system is not just another program - comment on this slide the file system -
' def __init__(self): '''construct an empty queue.'''
but not really mathematics - then, in the late 1960s, apl - started as a notation for linear algebra - turned out it could be implemented on a computer - “programming in mathematics” - if you read greek backwards - see http://www.users.cloud9.net/~bradmcc/apl.html for the scary details - matlab emerged in the early 1980s as a scripting tool for blas (the basic linear algebra subroutines) - high-level language for pushing fortran arrays around - graphics, oo, and many other capabilities added over the years - python's equivalent is the numeric module (sometimes referred to as numpy) - a high-performance c library wrapped in a high-level interface - core package provides efficient multidimensional arrays - much slower than compiled c or fortran… - …but much easier to write… - …and much faster than pure python - add-ons provide random number generation, ffts, and linear algebra - forms the basis of other packages - matplotlib for matlab-style plotting - pil (python imaging library) for image processing - numpy is being replaced with a new numarray module - extra hands always welcome - also worth looking at scipy - a collection of scientific utilities built on top of numpy - comment on this slide imaging - the python imaging library is a toolkit for working with images in just about every format you'll ever encounter - scale, crop, overlay, merge, etc. - open source, but commercial support is available - example: reduce the amount of green in an image, but only where there isn't a lot of red - import sys, image # color bands in image.
- asking them to work longer hours is counter-productive - so extend the deadline… - …or cut back the number of stories that are going to be implemented - this is why you have a customer representative on site - resources, features, and schedule are not independent variables - you can set two, but the third then sets itself - comment on this slide the down side - xp and related methodologies have been criticized almost as widely as they have been adopted - for every bandwagon there's an equal and opposite anti-bandwagon - some of this is just taking pot-shots at easy targets, like: - “i think maybe concentration is the enemy.
[sedgewick 2001] robert sedgewick: algorithms in c, parts 1-5.
- how risky is it (i.e., how certain are you of your estimate)?
seq[0:1] for i in range(2, len(seq)): result.append(result[i-1] + seq[i]) return result class sumtests(unittest.
- comment on this slide analysis & estimation - “plans are useless, but planning is invaluable.”
- multiplicative effect: (common tests × derived classes) + specific tests - comment on this slide test-driven development - with test-driven development (tdd)
apress, 2005, 159059441x. a great how-to for regular expressions, with examples in many different languages.
- want to be able to suppress the check for all items being marked off - so need two flags: - one to specify the name of the glossary file (so we don't try to read it as a lecture file) - one to turn off the check for all items being marked off - glossary =
- eclipse: - originally developed by ibm for java development, eclipse is the biggest open source development environment around these days.
.. - use the editor of your choice to create a file called earth.txt with the following contents: - easiest way to create a similar file venus.txt is to copy the one we have - cp earth.txt venus.txt - ls -t venus.txt earth.txt - note: the -t option tells ls to list newest first - check the contents of the file using cat (short for “concatenate”)
but very useful to know whether code coverage is going up or down -
see the example  below.
by default, it shows the differences in groups, like this: 3c3,4  inclination: 0.00 degrees > satellites: 1 (the rather cryptic header "3c3,4" means that line 3 of the first file must be changed to get lines 3-4 of the second.)
each example illustrates a point about how programs are actually built.
matching - re.search looks for a match anywhere in the text - doesn't have to match the entire target string - import re pattern = 'a[bc]*' for text in ['b', 'ab', 'accb', 'mad']: if re.search(pattern, text): print '"%s" matches "%s"' % (pattern, text) else: print '"%s" does not match "%s"' % (pattern, text) "a[bc]*" does not match "b" "a[bc]*" matches "ab" "a[bc]*" matches "accb" "a[bc]*" matches "mad" - ⌈a[bc]*⌋ matches an "a", followed by zero or more of either "b" or "c" - doesn't match "b" because there's no leading "a" - matches "ab" and "accb" - why does it match "mad"?
but reformatting a copy to make it easier to read can save you headaches - comment on this slide
penguin usa, 1995, 0140139966.
self.fixture.addassignment('harald', 'dishes')
this book describes a project at carnegie-mellon university that tried to figure out why so few women become programmers, and what can be done to correct the imbalance.
def testmultistep(self): self.assert_(dependson(self.f4, 'a', 'd'))
of course, if brand had written “program” instead of “building”, and “programmer” where he'd written “architect”, everything he said would have been true of computing as well.
- want to be able to move tests from machine to machine - have to b able to maintain tests as code evolves - test code should be at least as well written as production code - comment on this slide a simple testing framework - step back a moment and think about how we're writing our tests - each has two rectangles as input, and expects either a rectangle or none - each reports passes, fails, or errors - design principle: every time you see a pattern, try to capture it in code - write the shared code once - encourage people to do things the right way by making that way easiest - step 1: write a function that runs a test and reports its result - def runtest(left, right, expected): try: assert left is not none assert right is not none actual =
- within each row, column items are wrapped in td (for “table data”) - note: tables are often used to force multi-column layout, as well as for tabular data -   lists and tables      unordered list ordered list     hydrogen lithium sodium potassium rubidium cesium francium     helium neon argon krypton xenon radon       figure 18.3: lists and tables - note how subversion keywords have been put in meta elements in document head - automatically updated each time the document is committed to version control - comment on this slide connecting to other data - how to put an image in a page?
- keeping track of how villains are trying to break in is (almost) as important as preventing them - a good way to find holes in your system - often important to build an audit trail in order to take legal or disciplinary action - comment on this slide technology
each stage has clearly defined steps, and concrete milestones which specify what ought to be produced (i.e., how to tell when you're finished).
but you're going to have to work it all out at some point -
- is there a searchable archive of discussions about the project?
b) update the green repository.
keys = freq.keys() keys.sort() for k in keys: print k, freq[k] be 3 ca 1 mg 3 can simplify this code using dict.get get either the count associated with the key, or 0, then add one to it # use 'get' to simplify the counting loop.
[0, 1, 2, 3] each(invert, allvalues, allindices) calling func for index 0 calling func for index 1 inner exception  handler: integer division or modulo by zero calling func for index 2 calling  func for index 3 outer exception handler: list index out of range figure 10.4: stacking exception handlers comment on this slide use raise to trigger exception processing obviously, have to specify the type of exception you're raising e.g., raise exception('this is an error message')
(where 1728397 is a random number)
- what state is each task in?
- find out what's used in the document - using a set automatically handles multiple references to a single source file - rely on set subtraction to find differences - def checkfiles(filename, doc, rootdir, eltname, attrname): # what should we ignore?
the most elaborate version of this is watts humphrey's personal software process (psp) - in practice, enough to keep track of how many days you spend on each module you write… - …where “days spent” includes debugging time - your first estimates will be wildly wrong -
in fact, because of cognitive dissonance, the person watching is much more likely to spot errors than the one typing - fewer errors translates into less time spent debugging - the earlier something is fixed, the cheaper the fix is - and pair programming helps ensure wider understanding of the system - more people able to work on more things - feels strange the first time you do it -
i'm already using two new tools based on references from this book, and plan to make the chapter on “working with small teams” required reading for my students.
- so this is equivalent to ~/bin - cygwin does things a little differently - uses the notation /cygdrive/c/somewhere instead of windows' c:/somewhere - the colon in c:/somewhere would clash with the colons in the path variable - by default, cygwin treats c:/cygwin as the root of its file system - so /home/aturing is a synonym for c:/cygwin/home/aturing -
retention of actual chess position - figure 15.4: random chess position figure 15.5: retention of random chess position - what does this have to do with programming?
file "overlap.py", line 64, in overlap return rect(lox, loy, hix, hiy) file "overlap.py", line 9, in __init__
note that getconcestor(x, x, t) returns x for any threshold.
for e in excludes: actual.discard(e) # find what's used in the document.
as a result, if you apply the re ⌈x(.*)x(.*)⌋ to the string "xax and xbx", the first group will contain "ax and xb", and the second group will be empty.
if len(self.values): return max(self.values.keys()) return 0 - making it look like a vector - subscripting with [] is just a binary operator too - obj[index] is implemented as obj.__getitem__(index) - obj[index] = value is obj.__setitem(index, value) - note: all programming languages do this—the only question is whether they let you see it - def __getitem__(self, key): '''return an explicit value, or 0.0 if none has been set.''
the biggest challenge in database programming isn't formulated queries—it's handlingconcurrency - two or more things happening at once - in the database world, one user changing the database while another is making a query - a related problem is the need to ensure atomic (or indivisible) operations - sequence of operations is “remove $100.00 from grant #19823”, then “add $100.00 to grant #17928” - don't want money to disappear if computer goes down in between - solution to both problems is to use a transaction - a set of operations which all work as if nothing else was going on, or have no effect on the database - acid: - atomic: either all are performed, or none - consistent: database is in a legal state when the transaction ends - isolated: no operation outside the transaction sees the database in any intermediate state - durable: once the user is notified that the operation has completed, its effects are permanent - transactions sometimes used for queries, but should always be used for updates - example: change kovalevskaya's login id from "skol" to "kovalev" - begin transaction; update person set login =
addison-wesley, 2003, 0201799405.
- remember: the real purpose of a bicycle lock is to convince thieves to go and steal something else - first step is always risk assessment - what is most important to you?
def onehalf(a): return a/2.0 # one third.
for line in infile.readlines(): if line.find('\t') >= 0: print '%s contains tabs' % filename break if __name__
- option 3: mail, ftp, scp, etc.
the major version number is only incremented when significant changes are made, where “significant” means “changes that make this version's data/configuration/whatever impossible for older versions to read”.
particularly if it has been generated by a machine - a lot of data isn't actually trees - when storing a 2d matrix or a table, you have to organize data by row or by column… - …either of which makes the other hard to access - there are a lot of complications and subtleties - most applications ignore most of them - which means that they fail (usually badly) when confronted with something outside the subset they understand - like inglish speling, it's here to stay - comment on this slide a mini-project prev draft version 398 next
resolve the conflicts so that the file contains: 1.
mercury | chlorine print 'sample: %04x' % sample # check for various elements for (flag, name) in
while the target program (or debuggee) is running, the  debugger can: pause, resume, or restart the target inspect and display the values of variables change those values do not need to modify the source of the target program!
exercise 4.3: suppose you want to remove all files whose names (not including their extensions) are of length 3, start with the letter a, and have .txt as extension.
(competitive comparison)
the book that started the software design patterns movement.
each time python enters a try/except block, it  pushes theexcept handlers on a stack just like the function call stack
when there's a conflict, subversion saves your copy and the master copy side by side in your working directory - up to you to resolve the differences - comment on this slide rolling back changes and finally, getting started - to create a repository: - decide where to put it (e.g., /rotor/repo)
return len(self.data)
s.send(httprequest) response = ''
- suppose the code in overlap.c uses code in rectangle.c - if you change both, but only recompile overlap.c, you'll be using out-of-date rectangles - comment on this slide automate, automate, automate - remember rule #2: anything worth repeating is worth automating - computers are good at details, and don't get bored, so have them do repetitive tasks - we need: - a way to describe the tasks (what things to do) - a way to specify the dependencies between them (when to do things) - most widely used tool for this is called make - invented in 1975 by stuart feldman at bell labs
- comment on this slide general rules for unit tests - make tests independent of each other - no interaction between tests - nothing one test does can affect any other test - in particular, the order in which tests are run shouldn't matter - if two tests depend on one another, then when the first fails, the second either: - isn't run (so you have less information), or - runs, but gives you the wrong answer (which is even worse than no information) - keep tests small - each tests exactly one thing - when a test fails, you'll know the cause right away - don't hard-code absolute path names, magic numbers, etc.
[] def enq(self, val): self.data.append(val) def deq(self): if len(self.data)
lines = infile.readlines() infile.close() for line in lines:
0x04 # 0100 # sample contains mercury and chlorine sample =
- could just wrap the first child with  -
- tells rm not to report an error when trying to delete files that don't exist - comment on this slide dependencies - next step: create an overall summary for each treatment - e.g., combine hydroxyl_422.csv and hydroxyl_480.csv to create hydroxyl_all.csv, and similarly for the methyl files, using summarize.py - hydroxyl_all must be rewritten if it is older than either hydroxyl_422.csv or hydroxyl_480.csv - which must in turn be rewritten if they're newer than their corresponding .dat files - in this case, also make the results depend on summarize.py and
fcntl.flock(msgfile.fileno(), fcntl.lock_un) msgfile.close() # display.
run the debugger with the target program as a command-line argument
/usr/bin/env python '''check for tabs in one or more files, or on standard input, and report errors.''
there's a grain of truth in each claim.
c) change blue/ex01/planets.txt so that it reads: 1.
= {'a' : []} self.f2 = {'a' : ['a']} self.f3 = {'a' : ['b'], 'b' : []} self.f4 = {'a' : ['b', 'c'], 'b' : ['a'], 'c' : ['d'], 'd' : []} def testcanreachself(self): self.assert_(dependson(self.f1, 'a', 'a'))
second paragraph contains emphasis.
['file1.c', 'file2.c'] if os.platform == 'win32': dependencies.append('win32.c') # which version are we building?
peachpit press, 2003, 0321118030.
hopper&forename=grace surname=
far too many programmers still think and code as if resizeable vectors and string-to-pointer hash tables were the only data structures ever invented.
[x.rstrip() for x in infile.readlines()] infile.close() # add more data?
[' + ', '.join(value) + ']' print '%s: %s' % (cgi.escape(key), cgi.escape(value)) print '' - url value of a value of b http://www.third-bit.com/swc/show_params.py?a=0 "0" none http://www.third-bit.com/swc/show_params.py?a=0&b=hello "0" "hello" http://www.third-bit.com/swc/show_params.py?a=0&b=hello&a=22 [0, 22] "hello" - comment on this slide development tips - when developing scripts, it helps to add import cgitb; cgitb.enable() at the top - cgitb is the cgi traceback module - when enabled, it will create a web page showing a stack trace when something goes wrong in your script - testing whether a fieldstorage value is a string or a list is tedious - in almost all cases, you'll know whether to expect one value or many - use fieldstorage.getfirst(name) to get the unique value - returns the first, if there are many - fieldstorage.getlist(name) always returns a list of values - empty list if there's no data associated with name -
finally, groups will sometimes identify pre-releases as “beta 1”, “beta 2”, and so on, as in "6.2 beta 2".
else: print '...in the else block' val is 0.0 ..handling error!
[harold 2004] elliotte rusty harold: effective xml.
struct.pack('4c', 'a', 'b', 'c', 'd') print 'packed string:', repr(packed) left16, right16 = struct.unpack('hh', packed) print 'as two 16-bit integers:', left16, right16 all32 = struct.unpack('i', packed) print 'as a single 32-bit integer', all32[0] float32 = struct.unpack('f', packed) print 'as a 32-bit float', float32[0] packed string: 'abcd' as two 16-bit integers: 25185 25699 as a single 32-bit integer 1684234849 as a 32-bit float 1.67779994081e+22 - can be very hard to track down errors in packing and unpacking - unpacking the wrong type, or too many/too few values, produces garbage - comment on this slide packing variable-length data - how to store a variable-length vector of integers?
t.brahe@copenhagen.dk) room room 241 johannes kepler (j.kepler@uraniborg.org) program b.a. - polymorphism means “having more than one form” - in object-oriented programming, it means being able to treat different types of things as interchangeable - e.g., if every class derived from shape defines a method area, then obj.area() will return the area of obj without the caller having to know if obj is actually a square or a circle - comment on this slide the substitution principle - python looks up each method when it's called - so any two classes that define the same set of methods can be used interchangeably - however, the usual way to implement polymorphism is via inheritance - only override things that need to change - the liskov substitution principle states that it should always be possible to replace an instance of a parent class with an instance of the child class - means that if parent.meth returns a string, child.meth must also return a string - if parent.meth returns a non-empty string with at least three vowels, child.meth must as well - often expressed in terms of pre-conditions and post-conditions - child.meth must satisfy all the post-conditions of parent.meth, and may impose more - in other words, child.meth's possible output is a subset of parent.meth's - so any code that works correctly using the output of parent.meth will continue to work if given an instance of child instead - child.meth may ignore some of parent.meth's pre-conditions, but maynot impose more - equivalently, child.meth accepts everything that parent.meth did, and possibly more - so any code that could call parent.meth correctly is guaranteed to call child.meth correctly too - comment on this slide class members - sometimes want to share data between all instances of a class - constants, a count of the number of class instances created, etc.
- one secretary/hr/office admin - project lifecycle: - goal: meet schedule and quality goals without heroic effort - no point getting something flaky to the trade show if half the development team quits the week after - comment on this slide all the vision you'll ever need - important to have everyone on the same page - because common sense isn't - exercise: have everyone on the team fill out the following form independently, and compare answers (problem statement)
freq = {} for name in names: # already seen, so  increment count by one.
tycho brahe t.brahe@copenhagen.dk room 241 johannes kepler j.kepler@uraniborg.org b.a. - comment on this slide polymorphism - suppose we define person.__str__, then override it with more specific definitions in professor and
prof.runcall(tests, num) prof.close() stats = hotshot.stats.load(filename) stats.strip_dirs() stats.sort_stats('time', 'calls') stats.print_stats()
student - when python looks for a method, it checks the object's class, then its parent class, and so on - figure 12.2: method lookup - result is that python calls the most appropriate method for an object - class person(object): def __init__(self, name, email): self.name =
deadlock - figure 11.1: a debugger in action - figure 11.2: source browser - figure 11.3: code assistant - figure 11.4: microsoft visual studio in action - figure 11.5:
and yes, the debugger modifies the target's layout in memory, and execution speed… - …but a lot less than print statements… - …with a lot less effort from you - comment on this slide running in a debugger - depending on language and tools, there may be several ways to get into the debugger - launch the debugger, load the target program, and start work - run the debugger with the target program as a command-line argument -
his war stories are entertaining (although i think one or two are urban myths), and his advice is eminently practical.
- do you have a bug database?
[castro 2000] if you want to know more about xml - [harold 2004] if you want to become an expert - comment on this slide history - 1969-1986:
- xp is intrinsically limited to small teams - which in turn means small projects - comment on this slide summary prev top next - many people find that their productivity goes up when they adopt xp -
- vim: - “vi improved” is a modern version of the classic unix text editor, and is supported by an active development community.
rect(0, 0, 1, 1) r2 =
open(filename, 'r') count(filename, instream) instream.close() - note: always behave like a polite command line filter - if no arguments given, read from standard input - comment on this slide escape sequences - how to match against a literal "^" or "*"?
when an exception is raised, python look in this stack, and jumps to the  first matching handler def invert(vals, index): try: vals[index] = 1/vals[index] except  arithmeticerror, e: print 'inner exception handler:', e def each(func, vals,  indices): try: for i in indices: func(vals, i) except indexerror, e: print  'outer exception handler:', e # note: top index will be out of bounds allvalues  =
if no filenames specified, set the list of filenames to [''] - write a function readfile to open and read a file - if the function name is "", it reads from sys.stdin - have function function return both a list of lines, and the xml dom tree - we need the first to check for tabs and printable characters, and the second to look for glossary items - modified processing code includes checks for what to do with the glossary - try: if glossary:
sock_stream means “use tcp” - connect to the server - port 80 is the standard one for web servers - send the request, and read response data until there's nothing more to read - comment on this slide
[onehalf, onethird, onequarter] output = applyeach(functions, 0.25)
get return the value associated with a key, or  a default value if the key is not present.
what if you wanted the line numbers of matching lines?
when the target is paused, the debugger can display the contents of its memory - most debuggers can also evaluate expressions using the current values of variables - e.g., type in 2*x= 0 self.x =
- start with a simple question: how to figure out what this code does?
- don't consider "x \n" or " x\n" blank - constrain what the re can match using anchors - examples - can now count blank lines in a file - import sys, re # nothing but space, tab, carriage return, newline from start to end pattern = '^[ \t\r\n]*$' # count matches in one file/stream.
- if it's worth doing again, it's worth automating.
goerzen also doesn't delve as deeply into their internals, but instead on how to build clients that use them.
print >> output, transpose.transpose(sections[i])
1: raise valueerror('index is odd') else: print 'not raising exception for %d'  % i except valueerror, e: print 'caught exception for %d' % i, e not raising exception for 0 caught exception for 1 index is odd
anything that was in the file before the command was run is overwritten.
entries may or may not be unique.
[] for i in range(count): v = struct.unpack('i', buf[pos:pos+intsize]) result.append(v[0]) pos
but if there's a useful program called tools/findanswers, other users can still run it - comment on this slide ownership and permission: windows - of course, it all works differently on windows - not better or worse, just differently - windows xp uses access control lists (acls) - instead of describing users as “file owner, group member, or something else”, acls let you specify exactly what any particular user, or set of users, can do to a file, directory, device, etc.
- comment on this slide conclusion prev top next - “a good teacher has a value above pearls, but a good student has a value above rubies.”
[scanlan 1989] david a. scanlan: "structured flowcharts outperform pseudocode:
* data.txt - grep produces no output (since /dev/null is always empty) - then the web server deletes everything it can, recursively - oops - adding quotes around terms and escaping special characters hide the problem rather than eliminating it - right solution: don't rely on external programs - more specifically, if there's a layer of interpretation between you and what you're running, then there's one more weak spot for a villain to attack - note that the same thing can happen even if you don't rely on outside programs -
construct a sparse vector with all zero entries.'''
\t%s' % v - comment on this slide
right-hand add does the same thing as left-hand add.
addison-wesley, 2003, 0201745763.
if there are multiple parameters, they are separated from each other by "&" - http://www.google.ca/search?q=python&client=firefox - each parameter takes the form "name=value" - spaces are replaced by "+" (so “web programming” becomes “web+programming”)
[x.rstrip() for x in msgfile.readlines()] # add more data?
- each name may appear at most once - like keys in a dictionary - … is illegal - values must be quoted - old-style html often allowed things like … , but modern parsers will reject it - must use escape sequences for angle brackets, quotes, etc.
- on windows, every drive has its own root directory - so c:\home\gvwilson\notes.txt is different from j:\home\gvwilson\notes.txt -
once the program is paused, the debugger can single-step it execute one statement at a time most can:
open(filename, 'r') lines =
2 q.deq() q.deq() assert q.empty() - comment on this slide inheritance - what if we want two types of queue, one with __len__ and one without?
def onethird(a): return a/3.0 # one quarter.
true settings, filenames = getopt.getopt(sys.argv[1:], 'pt') for (opt, arg) in settings: if opt == '-p':
exercise 4.20: suppose you wanted prev top next ls to sort its output by filename extension, i.e., to list all .cmd files before all .exe files, and all .exe's before all .txt files.
- double quotes in a double-quoted string: "she said, \"you can quote me on that!\"" - tab and newline characters: '\tindented line\n' - comment on this slide numbers and arithmetic - the usual numeric types - 14 is an integer (32 bits long on most machines) - 14.0
if line.find(word) >= 0: return line.rstrip() errmsg =
some good, some bad, most average - knowing how to read code is as useful as knowing how to read a proof - learn by example how to accomplish specific things - figure out how to make changes in a particular program - figure out how to use the program - code inspections are essential for achieving and maintaining quality - comment on this slide seven plus or minus - known since the 1950s that human short term memory can hold 7±2 items [hock 2004] - seven random digits (as in phone numbers) - seven tasks that still have to be done - note: this is just an average - some prodigies can remember thousands of pieces of information for short periods of time -
self.assert_(not dependson(self.f3, 'b', 'a'))
- older versions of windows (such as windows 95 and windows 2000) are fundamentally insecure, and shouldn't be used - cygwin does its best to make the windows model look like unix's - if you trip over the differences, please consult a system administrator - comment on this slide more advanced tools exercises exercise 5.1: you're worried your data files can be read by your nemesis, dr. evil.
inverse = {} for (key, value) in freq.items(): seen = inverse.get(value, [])  seen.append(key) inverse[value] = seen # print.
if there is extra data, the web server will send content_length bytes to the cgi program on standard input - the cgi program sends data back to the web server via standard output - in most cases, the web server forwards this directly to the client - which means that the cgi program is responsible for creating headers - comment on this slide mime types hello, cgi - simplest possible cgi pays no attention to query parameters or extra data -
af_inet means “an internet socket” - socket.
- reproducibility often nonexistent - how many people can reproduce, much less trace, each computational result in their thesis?
* to count the words in some files, then sort -n to sort numerically - option 1: send output of first command to a temporary file, then read from that file - option 2: use a pipe to connect the two programs - can chain any number of commands together - any program that reads from standard input and writes to standard output can use redirection and pipes - programs that do this are often called filters -
- can't test methods unless we can construct objects… - …but the only way to see if objects have been constructed properly is to invoke their methods -
if not items: print 'nothing found for', asin if len(items) > 1: print len(items), 'items found for', asin # display information.
but first, strings - a string is an immutable sequence of characters - immutable means that it cannot be modified once it has been created - i.e., you cannot change individual characters in place - str = 'abc' print 'str is', str str[0] = 'x' print 'str is now', str str is abc traceback (most recent call last): file "immutable_err.py", line 3, in ? str[0] = 'x' typeerror: object does not support item assignment - though you can of course assign a new string value to a variable - str = 'abc' print 'str is', str str =
never  seen before, so add to dictionary.
from cstringio import stringio instream = stringio(fixture) outstream =
but please, don't write code to do this unless you absolutely have to - good libraries exist for working with every image, sound, and video format out there - comment on this slide how numbers are stored - positive numbers stored in base-2 format - 10012 is (1×23)+(0×22)+(0×21)+(1×20) =
['2', ':'], but '2:'.split()' gives
open('messages.txt', 'r+') fcntl.flock(msgfile.fileno(), fcntl.
- python: - the main site for all things python.
the nevex process prev draft version 547 next a happy medium - very few individuals or teams stick to a textbook process - a process is just a tool - you should always adapt tools to local needs… - …and personalities - this lecture is a slightly fictionalized account of what nevex did in 1999-2005 - a computer security startup (acquired by baltimore, then by hewlett-packard) - shipped several major versions of a complex product, and many patches - met deadlines without lots of late nights and weekends - starting point: - version 3.2 of grace shipped last week - version 3.3 has to ship in approximately eight months - personnel available are: - one overall manager - nine developers (two junior, four intermediate, three senior) - one developer support (installers, build, etc.)
how accurate these numbers are?
viewing file changes - following a changeset link takes you to the timeline view - comment on this slide issue tracker - an issue tracker (sometimes called a bug tracker is a tool for managing a shared to-do list - what needs to be done?
def original(left, right): return (left + right) /
== '__main__': tb = professor('tycho brahe', 't.brahe@copenhagen.dk', 'room 241') print tb.getname(), tb.getemail(), tb.getoffice() jk = student('johannes kepler', 'j.kepler@uraniborg.org', 'b.a.') print jk.getname(), jk.getemail(), jk.getprogram()
(you should get a copy of planets.txt .)
although that's no guarantee… - comment on this slide traceability - reproducibility is one of the things that makes science science - anyone can (at least in principle) repeat your experiment to verify your results - traceability is a key part of this in computational science - what program(s) did you use?
testcase - the former ensures that it inherits all the common test cases - the latter ensures that the framework will find it, and know how to run it - this class creates a fixture, and adds a few fixture-specific tests - class testempty(unittest.
testcase): def setup(self): self.f0 = {} self.f1
entries are guaranteed to be unique.
pragmatic bookshelf, 2005, 0974514063.
+= v return sum / float(max(1, len(values)))
- emacs: - it doesn't actually stand for “eighteen megabytes and constantly swapping”, and it isn't actually a lisp-based operating system, but
== '__main__': src = '''
common to have bugs that hide when print statements are added, and  reappear when they're removed
- what are the risks and unknowns?
- the deadline isn't when you're supposed to finish; the deadline is when it starts to be late.
if a class defines a method __add__, it takes precedence over the built-in “function” - so x + y calls x.__add__(y)
stringio() diff(left, right, actual) self.assertequal(actual.getvalue(), expected) def testempty(self): self.wrapandrun('', '', '') def testlengthymatch(self): str = 'a\nb\nc\n' self.wrapandrun(str, str, '') def testsinglelinemismatch(self):
grep takes many options as well; for example, grep -c /bin/bash /etc/passwd reports how many lines in /etc/passwd (the unix password file) that contain the string /bin/bash , which in turn tells me how many users are using bash as their shell.
- providing estimates of their own, of course -
items[0] productname = item.
once you have committed your changes, type svn log in your course directory.
- modify its argument in place and return that?
- every complex file format eventually turns into a badly-designed programming language.
[hunt & thomas 1999] andrew hunt and david thomas:the pragmatic programmer.
- not nearly as sophisticated as desktop interfaces - although programmers are doing more every day (particularly using javascript) - create a form using a  element - action is the url to send data to - method specifies the type of http request to send (e.g., "post")
- comment on this slide do and don't - always consult an expert when designing a system that relies on encryption - easy to use a perfectly good cipher in a way that either weakens the crypto, or provides no real security - example: 802.11 wireless networking took a cipher that is secure when used correctly… - …and created a system which gives away both your data and your private key to eavesdroppers - then they burned it into rom on millions of devices - never rely on keeping your algorithm secret - security must depend only on secrecy of keys - never design your own ciphers - unless you have a ph.d. in cryptography, in which case you should be teaching this section of the course - use the best well-known ciphers—they have been thoroughly tested, and are more secure than anything you could invent - 3des or aes for symmetric encryption - rsa, dsa, or ec-dsa for public-key - comment on this slide
where do their names come from?
summary - it took an hour to write and debug this code - started with something simple - tested everything as i wrote it - found and fixed 31 errors in the lecture notes -
greg wilson: data crunching.
- because it focuses on the details of the craft -
- for the same reasons use "scp" instead of "ftp".
viewing an old version of a file - see changes made to files over time - figure 25.5:
prentice hall, 1984, 013937681x. i have long believed that this book is the real secret to unix's success.
addison-wesley, 1998, 0201485419.
it works best if both files are plain text (i.e., not images or excel spreadsheets).
testcase[:-1], testcase[-1] actual = func(*args)
the problem changes over time - a good solution to last year's requirements may not be a good solution to this year's - as features are completed, update the design to reflect what was actually built - if you don't, then: - the next person who has to work with the code will have a harder time - you'll have to start from further behind the next time you need to modify this section - making sure this happens is the project manager's job - maintenance usually starts before the product goes out the door - fix bugs left over from the previous cycle while adding features in this one - start fixing bugs in new features as qa discovers them - last quarter of a project cycle is usually nothing but bug fixing - comment on this slide other activities - quality assurance starts at the same time as development - as soon as feature specifications are firm, qa can: - start making up lists of tests to run - start writing utility programs -
[pilgrim 2004] mark pilgrim:dive into python.
- what went wrong (that we want to avoid next time)?
- who's responsible for each task?
everything is illustrated with small examples, all of them clearly explained and to the point.
list of figures prev draft version 327 next prev top next - figure 3.1: basic use - figure 3.2: rapidsvn - figure 3.3: tortoisesvn - figure 3.4: merging conflicts - figure 3.5: undoing changes - figure 3.6: branching and merging - figure 4.1:
dictionary methods example: birthday = { 'newton' : 1642, 'darwin' : 1809, 'turing' : 1912 } print  'keys:', birthday.keys() print 'values:', birthday.values() print 'items:',  birthday.items() print 'get:', birthday.get('curie', 1867) temp = { 'curie' :  1867, 'hopper' : 1906, 'franklin' : 1920 } birthday.update(temp) print 'after  update:', birthday birthday.clear() print 'after clear:', birthday keys:
but some of the criticisms are well-founded - if developers don't have considerable self-discipline, xp quickly degenerates into “cowboy coding” - busy, rather than productive - customers often need to know what they're going to get more than a few weeks in advance - you can't add software to a space probe three days before launch - many programmers don't like to work in pairs - “i trust my account to do my tax return on her own; why don't you trust me to code?”
robustness diagram - figure 27.7: sequence diagram - figure 28.1:
- comment on this slide core practices - solution is a process built around twelve core practices, which are usually grouped into four areas - detailed feedback - test driven development: write tests before code in order to get instant feedback on correctness - planning game: described below - onsite customer: must be a customer representative on site to answer developers' questions at all times - subsequent revisions to the process acknowledged that this is sometimes not possible -
and the beatles would still be performing as a group… - in this world, documentation is often missing - or worse, it may have been up to date three years ago, but no longer describes the software correctly - many kinds of documentation are useful - embedded in code to explain tricky bits - “this is a while loop, instead of a for, because it may delete items from the list as it goes” - associated with class/method headers to explain what they're for - documentation for a library - “this function returns the first pair of non-overlapping subsequences that match the input pattern, or null otherwise” - architectural descriptions - the architecture of a program is what you draw on the whiteboard when explaining its internals to other people - may show relationships between classes, major modules, data flow, etc.
[chase & simon 1973] w.g. chase and h.a. simon: "perception in chess",cognitive psychology, vol.
for line in instream: mo = matcher.search(line) while mo: print >> outstream, mo.group(1) mo = matcher.search(mo.group(2)) #- end:findall # start:test if __name__
original image - figure 29.2:
self.fixture.addassignment('harald', 'floors') self.fixture.addassignment('rachel', 'floors') self.fixture.addassignment('rachel', 'counters')
- letters, digits, and whitespace character match against themselves - punctuation characters have special meaning - figure 17.1:
if something is awkward to test, it can be redesigned before it's written - a great way to communicate requirements - i write the tests - “all” you have to do is write code that passes those tests - example: i want you to write a function that: - a single rectangle (represented as an instance of class rect) as its first argument -
but it has the same problem as using the shell - exercise for the reader: construct an http query string that will do something evil - sql injection is a variation on the theme - cross-site scripting is the same problem in another guise - if a bulletin board or discussion forum lets you post html, you can include javascript in it
[ray & ray 2003] deborah s. ray and eric j. ray: unix.
- tortoisesvn: - a cross-platform gui for subversion.
- i.e., will satisfy the most customer needs for the least effort?
if d not in glossary: print 'term %s in %s missing from glossary' % (d, filename) elif glossary[d] is not none: print 'term %s defined in %s and %s' % (d, filename, glossary[d]) else: glossary[d] = filename - checkglossarycomplete looks for glossary entries without associated filenames - comment on this slide checking cross-references - last task (for now): check external files - every code fragment and image that's referenced must exist - every code file and image must be referenced - obvious opportunities for abstraction - get the set of files in a directory - get the set of files referenced in the lecture file - report differences in both directions - follow the pattern used for checking the glossary - -i dir specifies the root directory for images - if none provided, don't check images - -c dir specifies the root directory for code fragments - use the value of the lecture's id attribute to determine which particular subdirectory to search - no point having a “don't bother to check completeness” option, since each lecture's files are stored separately - add options to getopt.getopt string, and four more lines to the main processing loop -
yes, dictionaries are objects too… method purpose example result clear empty the  dictionary.
- what impact will it have on other features?
outfile.write(root.toxml('utf-8'))
the struct module - use python's struct module to pack and unpack - pack(fmt, v1, v2, …) packs the values v1, v2, etc.
if x[0] == address: return x return none def countfreq(lines): counts =
result = 0.0 for k in self.values.keys(): result += self.values[k] * other[k] return result def __rmul__(self, other): return self.__mul__(other) - note: __rmul__
prentice-hall ptr, 2005, 0131177052.
the former lets the checking functions share the code that opens files, handles errors, etc. - the latter makes it easier to re-use the pieces separately - solution: put them in the same program, and provide command-line flags to disable certain tests - might be philosophically purer to have the flags turn tests on… - …but the normal case is going to be run them all - parse command-line options using the getopt module - first argument is the list of command-line arguments to parse - not including sys.argv[0], which is the name of the program - second is a string telling it what flags to look for, and whether they take arguments - "a:bcd:" means “-a and -d have an argument, -b and -c don't” -
- the unified modeling language (uml) combines several notations used inobject-oriented analysis and design (ooad) - its three principal authors all had their favorite ways of doing things - unlike most designs by committee, this one actually (mostly) makes sense - uml 2.0 is very large - the iconix process uses only five kinds of diagram - four from uml, plus one to bridge an important gap - each diagram corresponds to a step in the analysis and design process - comment on this slide from here to there - what we have: a prototype of a user interface - [johnson 2000] will help you avoid horrible mistakes - if you're trying to get a group talking, [powazek 2001] is essential reading as well - draw it on paper (one screenshot per page)
- notice how the function gets all matches: - pattern captures what we want in group 1, and everything else on the line in group 2 - each time there's a match, continue the search in the remainder captured in group 2 - tests are straightforward - if __name__
but the python cookbook includes a generic file locking function that works on both unix and windows - modified solution: - open file - acquire lock - if someone else is using the file, blocks until file is available - read existing messages -
- inside the form, can have: -  elements to let users choose values from a list - list items specified using  elements -  elements for other kind of data - if type is "text", get a one-line text entry box - if type is "checkbox", get an on/off checkbox - "submit" and "reset" create buttons to submit the form, or re-set the data to initial values -    sequence:  search type:  exact match similarity match
[brand 1995] stewart brand: how buildings learn.
eating your own cooking - been talking since the first lecture about the importance of tools, and about building your own to automate repetitive tasks - this lecture takes a look at some of the tools used to manage the raw material for this course - show technologies like xml and regular expressions in action - show how to design something simple, and grow it over time - starting point: lecture slides are written in a simple xml format - root of each lecture is a  element with title and id attributes - may contain one or more  elements - must have title attribute - may optionally have a summary attribute (used to construct the syllabus) - topics contain one or more  elements - these contain  (for “bullet level 1”), which contain , and so on - may also contain tables, images, and code fragments - our task is to validate these files to make sure that: - they contain only printable characters - tabs haven't been used for indentation - the id in the root  element matches the filename - all the external files the lecture references (such as images and sample code) exist - solution: write a command-line utility that: - takes a list of filenames, along with - some command-line flags specifying which checks to run (or omit), and - reports any problems - you probably won't ever need to do this for lecture slides… - …but at some point, you probably will want to check the integrity of data files, experimental results, etc.
need to invert the dictionary (i.e., swap keys and values)
- two factors determine time to solution: - how long it takes to write a program (human time)
but you can't add an integer and a string typeerror: cannot concatenate 'str' and 'int' objects - comment on this slide printing and quoting - the print statement prints zero or more values - separated by spaces - automatically puts a newline at the end
how inaccurate the schedule currently is?
- what happens if someone sends a url with "term=dummy /dev/null;rm -rf *"?
so why not use transactions everywhere?
what command would you run to allow everyone to edit or delete the file?
- so now the product manager has to prioritize - which features are most cost-effective to develop?
is floating point (double precision, i.e., 64 bits long) - two unusual numeric types - 1+4j is a complex number (two 64-bit values) - 123456789l is a long integer - arbitrary length: uses as much memory as it needs to - operations are several times slower - python automatically switches to long-integer mode when it needs to - python borrows c's numeric operators - python also supports c's in-place operators - x += 3 does the same thing as x = x
- on unix, the file system has a unique root directory called / - every other directory is a child of it, or a child of a child, etc.
print 'content-type: text/html\n' print '' for line in lines: print '' + line + '' print '''
so what goes in pattern?
do you prefer it to unittest?
- relative paths are deciphered relative to this location - it can change while a program is running - finally, two special names: - "." means “the current directory” - ".." means “the directory immediately above this one - comment on this slide a few simple commands - easiest way to learn basic unix commands is to see them in action -
but it is very hard to reason about - which is why people get ph.d.'s in numerical analysis - comment on this slide binary i/o - read and write binary data using standard file methods - f.read(n) reads (up to)
describes an experimental comparison of pseudocode with equivalently-structured flowcharts, in which flowcharts did much better than in earlier studies.
depending on language and tools, there may be several ways to get into the  debugger launch the debugger, load the target program, and start work
what changes would you have to make tocomparebyfrequency? prev  top next prev  draft version 588 next what it is finding and fixing flaws in software assume for now that you built the right thing the wrong way requirements errors are actually a major cause of software project failure you're going to spend half your professional life debugging after all, once it's fixed, you move on to something else
the common gateway interface - how to let everyday users write programs that handle http requests?
- a lot of scientific data is stored in binary formats - important to know how to work with it -
- what parameters does it have, and what do they mean?
def walktree(currentnode, indent=0): spaces = ' '
its department of computer science, for giving me a home, and making me feel welcome - brent gorda, who helped create the first version of this course - heather mayer, for the artwork - yeslogic, for generously donating licenses for prince (their xml-to-pdf converter) - the many people who commented on this material, and suggested ways to improve it
0x01 # 0001 phosphorus =
if the slice is much smaller than the method itself, the method is probably bloated - comment on this slide naming - names of files, classes, methods, variables, and other things are the most visible clue to purpose - a variable called temperature probably doesn't store a user name or the number of pottery shards found at a dig site - should therefore choose names that are both meaningful and readable - current_surface_temperature_of_probe is meaningful, but not readable - cstp is easier to read, but hard to understand - the smaller the scope of a name, the more compact it can be -
- correctness of code rarely questioned - we all know programs are buggy, but when was the last time you saw a paper rejected because of concerns over the quality of the software used to produce the results?
' def testaddnew(self): '''check that adding a single new assignment works.'''
/usr/bin/env python import sys, os, cookie import cgitb; cgitb.enable() # get old count.
alex martelli, anna ravenscroft, and david ascher: python cookbook.
basic xml and xhtml prev draft version 574 next overview - xml is quickly becoming the standard way to store data - web pages - spreadsheets - images - astronomical observations - bewildering variety of tools for dealing with it - and more appearing every day - even simple things can be tricky to do right - generally agreed that standards are more complex than they should have been… - …but no agreement on which bits should have been left out - examine: - the rules for creating legal xml - the xml-compliant dialect of html (for web pages) - the standard python library for manipulating xml - note: there are lots of others, each with its strengths - reading: - [castro 2002] if all you care about is html -
but there is no proof that you cannot crack rsa in another way.
rect(0, 1, 3, 3) result =
except - figure 10.4: stacking exception handlers - figure 10.5: running another program - figure 10.6:
if the child is trying to write to the parent while the parent is trying  to write to the child, both are blocked
who allocates memory, where, for what?
the most important idea in this course - improving quality improves productivity - i.e., the tools and techniques you must adopt to produce better code also
[steele 1999] guy l. steele jr.: "growing a language",journal of higher-order and symbolic computation, vol.
(viewed 2005-07-29.)
this book describes what it takes to develop robust code quickly, what mistakes are often made in the name of rapid development, and how to identify and analyze potential risks.
- when someone views what you wrote, their browser runs that javascript - it can harvest information from your machine, and post it to the attacker - comment on this slide cryptography 101 - encryption is the process of obscuring information so that it can't be read without special knowledge -
but it isn't a particularly informative name - read embedded documentation (such as comments) - “fill in citations.”
{ 'newton' : 1642, 'darwin' : 1809 } for name in ['newton',  'turing']: if name in birthday: print name, birthday[name] else: print 'who  is', name, '?' newton 1642 who is turing ?
there are literally hundreds of plugins for it, and hundreds of thousands of users.
* 2 + self.y ** 2) - the __init__
[2, 11]) file "c:\python23\lib\unittest.py", line 302, in failunlessequal raise self.failureexception, \
def __init__(self, name): counter.num += 1 self.name = name if __name__
but you can't add an integer and a string twotwo traceback (most recent call last): file "add_int_str.py", line 4, in ?
def prettyname(arg): if type(arg) in (list, tuple): arg = ', '.join(arg[:-1]) + ' and ' + arg[-1] return arg if __name__
- most people consider a line with just spaces and tabs to be blank - but examining characters one by one is tedious - more complex patterns (like telephone numbers or email addresses) are hard to get right - solution: use regular expressions (res) instead - represent patterns as strings - just like the "*" in the shell's *.txt - warning: the notation is ugly - have to use what's on the keyboard, instead of inventing new symbols the way mathematicians do - can't use superscripts and subscripts - comment on this slide a simple example - load the re module, then use re.search(pattern, text)
doing a commit - ensures that what goes into the repository has at least some chance of being sensible - ensures that what other people add to the course will conform to style and usage rules - course materials include several other tools - re-run sample programs and check that the output stored in the lectures is still correct - translate lecture notes, glossary, and bibliography into html - extract summary values from each  element to create html version of course syllabus - etc.
== expected print 'input' print fixture print 'output' print expected # end:test - compiled res have many other useful methods - comment on this slide using res in other languages - like sine and sorting, regular expressions are independent of language - re libraries exist for c/c++, java, perl, ruby, matlab, … - syntax varies slightly, but the ideas are the same - example: java's java.util.regex package contains two classes: - pattern: a compiled regular expression - matcher: the result of a match - typical usage: - res are actually built into languages like perl and ruby - just as dictionaries are built into python, and arrays into matlab - typical perl usage: - comment on this slide
if, for example, you need to change one html form, or one dll, you will often just mail that out to customers, along with instructions about where to put it, rather than creating a new installer.
profile with the name of a log file as an argument - profile data accumulates in that file - use the profile object's runcall method to profile a single run of a function - which may of course call other functions - to process the data, use hotshot.stats - can load data from log files, sort it in various ways, print it, etc. - example: compare speed of 1000 handwritten substring function calls with built-in - import sys def builtin(str, substr): return str.find(substr) def handwritten(str, substr): for i in range(0, len(str)-len(substr)): match =
this book describes the most useful data crunching techniques, explains when you should use them, and shows how they will make your life easier.
this entry in the pragmatic bookshelf series focuses on getting your project to build itself, and (more importantly) tell you how the build went, automatically.
but you must be very careful about deadlock -
in fact, it doesn't even care if you're using it to recompile things - often used to run tests, keep web sites up to date, etc.
an update of rosenberg's 1999 book of the same name; in just eight chapters, the authors present a slimmed-down core of uml organized around a four-stage design process.
for line in instream: mo = matcher.search(line) while mo: print >> outstream, mo.group(1) mo = matcher.search(mo.group(2))
and while the author's use of c may seem old-fashioned in an age of java and c#, it does ensure that nothing magical is hidden inside an overloaded operator or virtual method call.
** * returns the least common ancestor of two species based on dna * comparison, with certainty no less than the specified threshold.
- usually best to bring in a neutral outsider to facilitate - feedback is only as useful as it is honest -
and many studies have shown that writing it down and checking it before you start coding leads to a working program faster - also allows qa and technical writing to overlap their work with development - note: make sure they're involved in writing test cases - if qa can't think of a way to test something, fix it - ditto if technical writer can't think of a way to explain it - a use case diagram shows the relationships between - the actors in the system (i.e., the users and major system components)
[kernighan & pike 1984] brian w. kernighan and rob
exercise 4.8: the command ls data > tmp.txt writes a listing of the data directory's contents into tmp.txt.
q.enq('second') assert len(q)
- rapidsvn: - a cross-platform gui for subversion.
but what if code is only almost duplicated?
what's wrong with print statements many people still debug by adding print statements to their programs “gee, i wonder what the value of maxtemp is when i call resolve?”
counting frequency note: dictionaries do not store keys in order no way to predict where a dictionary will insert a new value paradoxically, this is part of what makes dictionaries so fast
outfile.close() - looking higher up, see that biboutput is initialized to bib.html, so our guess was pretty good - you use these techniques (consciously or otherwise) whenever you are reading code - the purpose of good style is to improve the odds of them working - a good way to think about size and scope is the notion of a program slice - the subset of names in scope at a particular statement that are needed to understand what that statement does -
others, such as replacing temporary objects with queries, or replacing constructors with factory methods, are subtler, but no less important.
problem: there might be collisions, since values aren't  guaranteed to be unique
[wilson 2005] - for python-specific material, see andrew kuchling's python regular expression howto -
passing a slice - figure 8.9: functions
- what happens if two users try to save messages at the same time?
- title, author(s), revision history - executive summary (abstract) - one paragraph - tells someone browsing through dozens of a&e's whether this is one they should read - background - aim is to provide a context for evaluating decisions - introduce the problem to a reasonably knowledgeable developer - don't explain what the internet is… - imagine writing for who you were when you started the project - user stories - what will people be able to do (or do better) when this feature is implemented?
' def __init__(self): '''
- solution: create the format string on the fly, and save the string's length as well as its characters - import struct def packstrings(strings): result = ''
r = rect(0, 0, 1, 1) self.assert_(overlay(r, [r])) def testhalfonly(self): self.assert_(not overlay(rect(0, 0, 2, 2),
how would you check whether or not he can, and if necessary change permissions so only you can read or write the files?
"aluminum" def __init__(self): self.name = arg def meth(self, val): self.v =
but remember: - you're going to do all of this anyway
the overnight regression tests?
keys = freq.keys() keys.sort() for k in keys:  print k, freq[k] be 3 ca 1 mg 3
if coderootdir: checkfiles(filename, doc, coderootdir, 'code', 'src')
print 'content-type: text/html' print cookie print print '' print 'visits: %d' % count print '' - can control how long a cookie is valid by setting an expiry value -
a unit testing framework - unit testing follows a pattern - setup and teardown - lots of small, independent tests - reporting - aggregation (combine tests into a test suite, and test suites into larger suites) - see a pattern, build a framework - write shared code once - encourage people to work a certain way - i.e., make it easy for them to do things right - junit is a testing framework originally written by kent beck and erich gamma in 1997 - widely adopted - now integrated into almost all java ides - made testing easy enough that programmers actually started doing it - widely imitated: - workalikes are available c++, perl, .net, etc.
self.office = office ...
best of all, glass backs up every statement he makes with copious references to the primary literature; if you still disagree with him, you'd better be sure you have as much evidence for your point of view as he has for his.
this lecture has only scratched the surface - have discussed only a tiny fraction of the issues that programmers face - haven't talked about user-level issues at all - if you are going to do anything that's even a little bit complicated, please talk to a professional - the guy down the hall who once read an o'reilly book on perl doesn't count - comment on this slide teamware prev draft version 398 next introduction - no programmer is an island - you may be the only person writing code today, but you: - probably depend on tools and libraries written by other people - may have inherited the project from someone else - ought to be thinking about who's going to take over once you're gone - as open source spreads, being able to work in teams becomes even more important - this lecture looks at some of the things teams have to do to stay productive - all of which will make you more productive as an individual, too - introduce the ideas by showing you how to use a web-based project coordination tool called trac - open source - reliable - easy to set up and install - modular, so that you can add new features (relatively) easily) - comment on this slide
- first question: what's the context?
how would you archive them to send as one file?
but doesn't address broader issues, such as programming practices - see the bibliography for others - check out some of the online resources as well - comment on this slide typographic conventions - code fragments - commands - definitions -  - mathematics - ⌈regular expressions⌋ - "strings" - tags - attributes - urls source code.
ran 4 tests in 0.000s ok - everything works - should you really go to this much effort to test a simple function?
(socrates) - comment on this slide
you should still give it a number, though, and make an entry in your release log.
[ ['a', ''], ['a', 'abc'], ['abc', 'a'], ['pqrstuvwxyz', 'stuv'], ['pqrstuvwxyz', 'stuw'] ] for i in range(num): for (str, substr) in tests: expected = builtin(str, substr)
when you get a url, you check that url[:9] == '/web/docs' to prevent people from accessing /home/dknuth/grades.xsl - so someone sends you /web/docs/../../home/dknuth/grades.xsl - solution: normalize paths before using them, and then check whether the result lies in or below the directories you want to open up - analysis: circumventing access control - but also using a weakness in authorization - the web server (which is running the cgi on the client's behalf) shouldn't have permission to read anything it doesn't absolutely need to - example: temporary files -
exercise 4.15: the instructor wants you to use a hitherto unknown command for manipulating files.
- '2 :'.split() gives
if the actual value isn't in that set, you must settle for the closest available approximation - consequence #1: values are unevenly spaced - consequence #2: roundoff errors - our system can represent 6, and it can represent ¼, but not 5¾ - so 6 - 0.25 is 6, not 5.75 - and if 6 - 0.25 - 0.25 - 0.25 - 0.25 is evaluated left to right, the answer is still6 -
- need to know which shopping cart to display for a particular user - but http is a stateless protocol - if a client makes a second (or third, or fourth…) request, server has no reliable way of connecting it to the first one - can guess based on host, elapsed time, etc.
title = creates a level-1 heading, ==
found 6 spaces, expected 8 w: 0:
most readers will find [ sedgewick 2001] much more approachable.
read his discussion of pinch points.
name self.email = email ...
[steele 1999] shows you how a great computer scientist thinks about a particularly hard problem
write a short program that demonstrates this behavior, that can be run on its own without the user passing in any command-line arguments.
the main site for an advanced open source relational database.
trac architecture - figure 25.2: typical trac home page - figure 25.3: browsing directories and files - figure 25.4:
if restoftext: restoftext = doc.createtextnode(restoftext) para.insertbefore(restoftext, para.firstchild) # emphasize the first word.
[schneier 2003] bruce schneier: beyond fear.
self.assert_(dependson(self.f4, 'c', 'c')) def testsinglestep(self): self.assert_(dependson(self.f3, 'a', 'b'))
how long it took to fix/implement something?
print 'after creating first object', counter.num second = counter('second') print '
what order does it check these in?
- if it does, python calls it, and uses the string it returns - if it doesn't, python creates a default string representation - class first(object): def __init__(self, name): self.name = name class second(object): def __init__(self, name): self.name = name def __str__(self): return 'second/"%s"' % self.name
assignment() def testnoconsultants(self): '''make sure that nonexistent consultants aren't present.''
set instream = urllib.urlopen("http://www.third-bit.com/index.html") page = instream.read() instream.close() links = re.findall(r'href=\"[^\"]+\"', page) temp =
mike clark: pragmatic project automation.
[ professor('tycho brahe', 't.brahe@copenhagen.dk', 'room 241'), student('johannes kepler', 'j.kepler@uraniborg.org', 'b.a.') ] for person in crowd: print person tycho brahe (
result[i] + other[i] return result #
data = sys.stdin.read() else: infile = open(filename, 'r') data = infile.read() infile.close() infile = cstringio.stringio(data) lines = infile.readlines() doc = xml.dom.minidom.parsestring(data)
venus.txt what if you want this (note that an extra entry is being displayed): total 7 drwxr-xr-x 7 someone 0 may 6 08:27 .svn
counting frequency - figure 10.2: tracing execution of dictionary inversion - figure 10.3: flow of control in try/
[rect(0, 0, 1, 2), rect(1, 0, 2, 2)])) - comment on this slide exercises exercise 13.1: python has another unit testing module called doctest.
- where might the name rsa come from?
if a node is a text node, the text is in the member data - the single-character text nodes are the carriage returns separating elements - traversing a tree like this is just one of many recurring patterns in object-oriented programming - we'll discuss them briefly in backward, forward, and sideways - the visitor pattern is used to separate traversal of a data structure from operations on its elements - one class traverses a particular kind of structure the same way each time - user then defines the operation - derive a class, pass a function as an argument, etc.
deadlock things are even trickier if you use os.popen3, which gives  you the child process'sstdin, stdout, and stderr if the parent is trying to read from the child's stdout while  it's trying to write an error message tostderr, both programs will  be blocked solutions are outside the scope of this course
- gives everyone a common language with which to discuss it - collective code ownership: everyone is allowed to change any part of the system - no one is a bottleneck (i.e., you're never waiting on “the gui guy”)
sometimes it's as simple as putting the computer in the boy's room, because "he's the one who uses it most".
for s in strings: length = len(s) format = 'i%ds' % length result += struct.pack(format, length, s) return result def unpackstrings(buf): intsize = struct.calcsize('i') pos = 0 result =
para.removechild(textnode) - third part: test it -
and on, and on, real-world issue after real-world issue, each one analyzed and cross-referenced.
floating point representation - figure 20.3:
- doing this at 9:00 a.m. monday works better than asking for it at 4:45 on friday - always based on binary milestones -
intsize return result -
= 11102, instead of 01102 - depends on the hardware being used - java provides a separate operator for this - comment on this slide floating point - floating point numbers are more complicated - this means that you can only represent a fixed set of values -
program %s' % self.program return result if __name__
- answer: you url encode it using "%" followed by its 2-digit hexadecimal code - character encoding "#" %23 "$" %24 "%" %25 "&" %26 "+" %2b "," %2c "/" %2f ":" %3a ";" %3b "=" %3d "?
to add to the build and installer?
what about documentation?
- polymorphism - liskov substitution principle - class members - operator overloading structured unit testing - mechanics - example - setup and teardown - testing assertions - testing i/o - testing classes - test-driven development automated builds - motivation for this lecture - overview of make - basic features - handling multiple targets - defining phony targets - automatic variables - pattern rules - specifying dependencies - defining variables
and if there's a method called teardown, it will be run after each test - example: test whether a function can trace make-like dependencies correctly - several kinds of tests to run, and several fixtures to run them on - so create all the fixtures in setup, and use them in the test methods - alternatively, create a separate test class for each fixture - worth doing if creating a fixture takes so long that you don't want any redundant setup - class testdepends(unittest.
- cmd becomes grep term=dummy /dev/null; rm -rf
the iconix process prev draft version 588 next do it once, do it right - extreme programming is one end of the spectrum - if your requirements are always perpetually in flux, focus your process on adapting to/coping with change - this lecture looks at the other end - well, one of the other ends—it's not like programmers would ever make anything as simple as a two-ended spectrum - the iconix process was developed by doug rosenberg and colleagues - see [rosenberg & stephens 2005] for the definitive guide - a simple alternative to the rational unified process (rup) and other heavyweight paperwork-oriented processes - emphasizes up-front analysis and design - reduces total cost and time to delivery dramatically… - …provided your requirements are relatively stable - probably not appropriate for small, exploratory projects -
- when python needs a string representation of an object, it sees if the object's class defines __str__
interactive commands.
expected print 'input' print fixture print 'output' print expected import re #- start:findall def findall(instream, outstream): matcher = re.compile('\\b([a-z][a-z]*)\\b(.*)')
importantly, so are newer topics, like building plugins for your ide, code generation, and things you can do to protect your intellectual property.
peachpit press, 2000, 0321130073.
/usr/bin/env python import sys, cgi, fcntl import cgitb; cgitb.enable() # get existing messages.
- data are send as cleartext in "rlogin" and "telnet".
[ [], [1], [1, 2], [-3, 456, 7890] ] for t in tests: s = packvec(t) v = unpackvec(s) assert v
getopt.getopt(sys.argv[1:], 'g:gpt') for (opt, arg) in settings: if opt ==
red, green, blue = 0, 1, 2 # read image.
exercise 3.4: in this exercise, you'll simulate the actions of two people editing a single file.
this can be even more compact in c and c++, which treat null as equivalent to false -
- anything repeated in two or more places will eventually be wrong in at least one.
- most people consider cracking rsa as complicated as factorization.
the book covers systems and threats, the technologies used to protect and intercept data, and strategies for proper implementation of security systems.
some of what he says is well-known: good programmers are up to n times better than bad ones (his value for n is 28), reusable components are three times harder to build than non-reusable ones, and so on.
the file system is the set of files and directories the computer can access - “everything that stays put when you turn the computer off and restart it” - data is stored in files - by convention, files have two part names, like notes.txt or home.html - most operating systems allow you to associate a filename extension with an application - e.g., .txt is associated with an editor, and .html with a web browser -
- top 10 accessible web authoring practices: - ten simple, easy-to-follow rules that will make your web site more accessible to people with various disabilities.
== '__main__': try: word = sys.argv[1] for  filename in sys.argv[2:]: line = findfirstmatchingline(filename, word) print  '%s / %s => %s' % (filename, word, line) except valueerror, e: print  >> sys.stderr, e except ioerror, e: print >> sys.stderr, e except  exception, e: print >> sys.stderr, e comment on this slide assertions an assertion is a claim about the state of a program that must be  true if the program is correct e.g., “this list is not empty”, or “this value is  greater than
in your path - this allows you to run a program in the current directory just by typing whatever, instead of ./whatever -
inputfilename.split('.
y = 65 binary = struct.pack(fmt, x, y) print 'binary representation:', repr(binary) normal = struct.unpack(fmt, binary) print 'back to normal:', normal binary representation: '\x1f\x00a\x00' back to normal: (31, 65) - uh, what's '\x1f\x00a\x00'?
7.0 ''' sum = 0.0 for v in values: sum
text_node: print spaces + 'text' + ' (%d)' % len(currentnode.data) else: print spaces + currentnode.tagname for child in currentnode.childnodes: walktree(child, indent+1) doc = xml.dom.minidom.parsestring(src) walktree(doc.documentelement) solarsystem text (1) planet period text (5) text (1) planet period text (5) text (1) planet period text (6) text (1) - node's type is stored in a member variable called nodetype - element_node, text_node, attribute_node , document_node - if a node is an element, its children are stored in a list called childnodes - a read-only structure - see how to add, delete, and move children in a moment -
testcase): def testnorects(self): self.assert_(not overlay(rect(0, 0, 1, 1), [])) def testwithself(self):
what is the inverse of {'a':1, 'b':1, 'c':1}?
' def __init__(self, name, email): '''create a new person with a name and an email address.'''
triple an integer value.
that's in here too, along with dozens of other useful bits of information.
https://your.host.name/rotor/repo - creates a new directory repo - common to give it a more informative name using svn checkout https://your.host.name/rotor/repo rotorproject - important: only use svn checkout once, to initialize your working copy - comment on this slide subversion command reference how to read subversion output - svn status compares your working copy with the repository, printing one line for each file that's worth talking about - $ svn status m spin.c mc readme.txt - spin.c has been modified - readme.txt has been modified, and has conflicts - svn update prints one line for each file or directory it does something to - comment on this slide branching and merging - sometimes want to work on several different versions of software at once - example: need to do bug fixes on version 3 while making incompatible changes toward version 4 - or want two sets of developers to be able to write and test large changes independently, then put things back together - all modern version control systems allow you to branch a repository - can later merge changes from one branch to another - example: fix a bug on one branch, merge the changes into other branches that have the same bug - again, much better than copying by hand, since the version control system can keep track of where things came from, and where they went - warning: many people become over-excited about branching when they first start to use it - keeping track of what's going on where can be a considerable management overhead - on a small project, very rare to need more than two active branches - comment on this slide exercises exercise 3.1: follow the instructions given to you by your instructor to check out a copy of the subversion repository you'll be using in this course.
return the front value of the queue, or raise valueerror if the queue is empty.
== '__main__': crowd =
when team members expect to complete their current tasks (without asking them directly)?
if imagerootdir: checkfiles(filename, doc, imagerootdir, 'img', 'src') - write checkfiles - construct the path to the directory - find out what it contains - subtract things like the .svn directory
seq[0:1] for i in range(1, len(seq)): result.append(result[i-1] + seq[i]) return result .... ----------------------------------------------------------------------
the last two chapters describe what the authors have done to remedy the situation at high schools and university.
expected: pass += 1 else:
- we will ignore the complex bits for now, and take a look at a better way to solve these problems inbackward, forward, and sideways - comment on this slide our example - make doesn't care what language you use -
def reducebyhalf(x): return x * 0.75 out = source[green].point(reducebyhalf) # paste the processed band back, but only where red was < 100.
or that if more than 20-25% of a component has to be modified, it is more efficient to re-write it from scratch?
- do you build the software, and run the test suite, daily?
if villains can snoop on network traffic, they can hijack sessions - insert a copy of your cookie into their message - also vulnerable to replay attacks - copy the cookie (or an entire message) and re-send it later - useful if the message means “open the vault door” - note: none of this helps if there is spyware on the client machine - these days, this is much more likely than someone sniffing network traffic - keep your anti-virus protection and spyware monitors up to date, and run them regularly - what else is there for your machine to do at 3:00 a.m.?
saturn 14 (and counting) e) now, in green, do svn update.
spinellis isn't the first person to make this point, but he is the first person i know of to do something about it.
his approach is to build solutions to complex problems one step at a time, explaining each addition or modification along the way.
- in practice, serve two purposes: - communication: a concise way for designers to communicate with each other - and argue out exactly what they mean - education: gives them a way to communicate what they know to newcomers - comment on this slide refactoring - refactoring is the process of changing (hopefully, improving) the design of existing code - clean it up to make changes easier (or possible) - term popularized by martin fowler - often described in terms of “code smells” and corresponding cures - equivalent to an anti-pattern and an algorithm for fixing it - [fowler 1999] is a catalog of refactorings - design patterns describe code at rest; refactorings describe code in motion - smell: method or function body runs to several pages - cure: use extract method to break the method into smaller meaningful pieces - do not break up arbitrarily, just to satisfy coding conventions - each new method should make sense on its own - smell: function or method with many parameters - if a method takes eleven strings as parameters, sooner or later you'll pass them in the wrong order - cure: store values as members of the object, rather than passing them as parameters -
for i in range(len(b)): if os.path.isfile('%s.%d.dat'%(c[0],i+1)): print '%s.%d.dat already exists and cannot be overwritten!'%(c[0],i+1) break else: output=
using a debugger is one of the two things that separates professionals  from amateurs using version control is the other
[('turing', 1912),  ('newton', 1642), ('darwin', 1809)] values return the  dictionary's values as a list.
- first instance of message_form.py opens messages.txt , reads lines, closes file - second instance opens messages.txt, reads the same lines , closes file - first instance re-opens file, writes out original data plus one new line - second instance re-opens file, writes out original plus a different new line - first instance's message has been lost!
the operating system can only hold on to a limited amount of input or  output data at a time, so increasing the buffer size only delays the problem figure 10.6:
[2, 11] ----------------------------------------------------------------------
== '__main__': q = queue() q.enq('first')
true for j in range(len(substr)): if substr[j] !=
read permission for notes.txt - permissions mean something a little different for directories - execute permission means you can “go into” a directory, but doesnot mean you can read its contents -
but what if you have many source files?
[0.0, 0.1, 0.2, 0.3, 0.4, 0.5] print 'x + z', x + z print 'x
* y # multiplying a string concatenates it repeatedly print x + y #
regular expressions, numerical arrays, persistence, the basics of gui and web programming, interfacing to c, c++, and fortran: it's all here, along with hundreds of short example programs.
def lessthan100(x): if x > 128: return x else: return 0 mask = source[red].point(lessthan100) # process the green band.
and it has a lot of things matlab doesn't -
the original paper comparing the performance of novice and master chess players when confronted with actual and random positions.
- size - "10239472" is 8 bytes long -
- find out whether it's fast enough, and if not, what's slowing it down - optimize only those parts that you need to - the most effective way to optimize programs written in high-level languages like python and matlab is often to rewrite core modules in c (or some other low-level language) - also a good way to handle inherited code: wrapping tried-and-trusted c or fortran in python is safer and easier than rewriting - and faster - if you don't speak c, [kernighan & ritchie 1998] is the standard introduction - [ullman & liyanage 2004] is somewhat gentler - python represents things using a c structure of type pyobject that contains: - every c function that the interpreter calls must take two arguments: - self is null for pure functions, and an object for methods - args is a variable-length list of arguments - use the function pyarg_parsetuple to extract arguments' values - i.e., get the raw integer out of the first, a string pointer out of the second, etc. - example: take an integer and return three times its value - not particularly exciting, but it illustrates the main points - /
when you are done, bio.txt should look the way it did at the end of the first part of the previous exercise.)
- never debug standing up.
springer, 2003, 0387026207.
what feature requests have been deferred?
want to know which classes or methods to focus testing on?
- sends the user name and password as cleartext - actually, encoded using base-64… - …but that's not a cipher - never use http basic authentication - note: having users submit id and password via a form is also insecure - form data isn't encrypted - alternative: - have user provide id and password over secure connection - use a random number as a cookie - do not just use a sequence of integer session ids: too easy for attackers to fabricate - give that to the client to track the session - when it comes back, use it as a key into a dictionary of active sessions - still not perfect -
but its numeric package isn't bad -
- pep-008: python style guide: - a semi-official guide to python coding conventions.
- comment on this slide the shell vs. the operating system -
- see [scanlan 1989] for evidence and discussion - entity-relationship diagrams - class diagrams
part time - did c in first year; has been using matlab ever since - modeling thermal degradation (a.k.a.
if you're fond of legacy character-oriented editors, emacs and vim both work well -
>>> ave([]) 0.0 >>> ave([3]) 3.0 >>> ave([15, -1.0])
- this is what makes it hypertext… - use the a element to create a link - the text inside the element is displayed and (usually) underlined for clicking - the href attribute specifies what the link is pointing at - both local filenames and urls are supported -   links    a few of my favorite places  google python nature online examples in this lecture:  comments images lists and tables      figure 18.5: links in pages - comment on this slide
springer-verlag, 2004, 3540435085.
- edit the file so that it looks like this: - compare the sizes of the two files using wc (for “word count”)
morgan kaufmann, 2000, 1558605827.
addison-wesley, 1995, 0201633612.
visualizing dependencies - figure 15.1: chunking in short-term memory - figure 15.2: actual chess position - figure 15.3: retention of actual chess position - figure 15.4: random chess position - figure 15.5: retention of random chess position - figure 15.6: annotated syntax tree - figure 15.7: data display debugger - figure 17.1: matching - figure 17.2: anchoring matches - figure 17.3: compiling regular expressions - figure 17.4: word/non-word breaks - figure 17.5:
- more efficient to use two's complement - “roll over” when going below zero, like a car's odometer - 11112 is -110, 11102 is -210, etc.
+ 3 - 5 += 3 is an error, since you can't assign a new value to 5… - comment on this slide booleans - true and false are true and false (d'oh) - empty string, 0, and none are equivalent to false - just as 3 is equivalent to 3.0 - (almost) everything else is true - combine booleans using and, or, not - comment on this slide comparisons conditionals - python uses if, elif (not else if ), and else - use a colon and indentation to show nesting - why indentation?
none: print 'pass' else: print 'fail' traceback (most recent call last): file "overlap.py", line 97, in ?
- does your schedule allow for infrastructure development, training, sick time, etc.?
- the three chief virtues of a programmer are laziness, impatience, and hubris.
- comment on this slide creating files and directories - rather than messing with the course files, let's create a temporary directory and play around in there - mkdir temp - note: no output - the -v (“verbose”) flag tells mkdir to print a confirmation message - now go into that directory - cd temp - changes the shell's notion of our current working directory - pwd /home/gvwilson/swc/temp - no files there yet: - ls -a .
document_node: self.visit(node.documentelement) return # handle other types of nodes.
this title case each line some ''' from cstringio import stringio instream = stringio(fixture) outstream =
yes, it'll make you faster on future projects… - …but learning it will slow you down on this one… - …and if you don't meet this deadline, there won't be any future projects - comment on this slide
the principal author's home department, which helped make this course happen.
== '__main__': # get information.
solution: store a list of values instead of just a single value # count values as before.
testcase): def wrapandrun(self, left, right, expected): left =
frog-11&program=bayes-hart - comment on this slide handling forms - we could handle form data directly - read and parse environment variables - read extra data from standard input - the mechanics are the same each time, so use python's cgi module instead - defines a dictionary-like object called fieldstorage - keys are parameter names - values are either strings (if there's a single value assocatied with the parameter) or lists (if there are many) - when one is created, it reads and stores information contained in the url and environment - program can then read extra data from sys.stdin - example: show the parameters send to a script - #!
author) print '%s: %s (%s)' % (authors, productname, ourprice) - note: much more code devoted to creating human-readable output than to getting the information - comment on this slide summary prev top next - most computers now spend more time communicating than they do calculating - every few years, we put another layer on top of the pile of protocols to make communication easier - getting information from the web is now (almost) as easy as getting it from a file - see in the next lecture how to provide information to others - comment on this slide cgi prev draft version 547 next the active web - the web is far more than just a fancy replacement for inter-library loan - most of its power comes from the fact that browsers can interact with programs - more accurately, browsers can ask web servers to interact with programs on their behalf - this lecture looks at what to do if you receive an http request - very important that you also attend the next lecture on security before putting programs of your own on the web - comment on this slide
room %s' % self.office return result class student(person): def __init__(self, name, email, program): person.__init__(self, name, email) self.program = program ...
- people doing creative work in almost every field routinely inspect, dissect, and critique what's come before - would you hire an architect who'd never looked at anyone else's buildings?
in forty short chapters, hock describes the turning points in our understanding of how our minds work.
output.close() - use naming conventions to indicate purpose - constants written all_upper_case_with_underscores - class names written using camelcase with first letter capitalized - name “camel case” comes from the humps in the middle - parameters, methods, local variables, etc., use camelcase with first letter in lower case - many other conventions make just as much sense - write parameters, etc., using underscores, as in current_maximum - write class members like this_, _this, or m_this - not as useful in python, where you have to refer to members as self.this anyway -
self.name = name self.email = email def getname(self): return self.name def getemail(self): return self.email - then derive professor: - class professor(person): '''professors are more than people...''' def __init__(self, name, email, office): person.__init__(self, name, email) self.office = office def getoffice(self): return self.office - note that it's professor(person) instead of professor(object) - signals that professor extends person instead of the generic built-in object class - note also that professor's constructor calls person 's - ensures that all of person's initialization is done without duplicating code - ensures that changes to person will automatically be reflected in person - now define student: - class student(person): '''students are more than people too...''' def __init__(self, name, email, program): person.__init__(self, name, email) self.program = program def getprogram(self): return self.program - and run a few tests: - if __name__
= false elif opt == '-p':
- option 2: carry around a floppy or usb dongle - have to remember to copy files onto it and then off again - what if your project is too big?
/usr/bin/env python '''check for tabs in one or more files, or on standard input.''
the simulator's input widgets and graphical display - entity objects, which are from the core of the domain - vehicle types, road segments, etc. - control objects, which connect boundary objects to entity objects - represent the “intelligence” in the application - e.g., driver behaviors - a robustness diagram shows actors' relationships with these objects - the bridge between “what” and “how” - what's being implemented: use cases and domain model - how it's being implemented: we'll see in a moment - rules make intuitive sense from definitions: - actors communicate only with boundary objects - boundary objects communicate only with actors and controllers - controllers communicate with anything except actors - entity objects can only talk to controllers - these rules are what the graphical notation is for - forces us to classify things - limits how those things can use each other -
apache/2.0.54 (debian gnu/linux)
f = first("orange") print "first object is", f s = second("apple") print "second object is", s first object is  second object is second/"apple" - other examples: - if obj is an object, len(obj) calls obj.__len__() - easy to add to queue to report how long the queue is - x in obj is equivalent to obj.__contains__(x) - would also be easy to add to queue, but should we?
but in practice, almost none are followed to the letter - every real-world situation and team is different, so real process is always a variation on the theme
first, i type pwd (short for "print working directory”) to find out where i am - unfortunately, most unix commands have equally cryptic names - pwd /home/gvwilson/swc - i then type ls (for “listing”) to see what's in the current directory - what actually happens when i type ls is: - i can tell ls to produce more informative output by giving it someflags - by convention, flags start with "-", as in "-c" or "-l" - show directories with trailing slash - show all files and directories, including those whose names begin with .
im = image.open(sys.argv[1]) # split the image into individual bands.
expected: return 'pass' else: return 'fail' except exception, e: return 'error'
msgfile.seek(0) for line in lines: print >> msgfile, line # unlock and close.
associate .py files with python - double-clicking on anything ending in .py will then run it - happens automatically when you run the python windows installer - example - using an editor, put the following in powers.py - print 2, 2**2, 2**3, 2**4 print 3, 3**2, 3**3, 3**4 print 4, 4**2, 4**3, 4**5 - run using python powers.py - should see the following - 2 4 8 16 3 9 27 81 4 16 64 1024 - comment on this slide variables - variables are names for values - no types: a variable is just a name, and can refer to different types of values at different times - although your code will be easier to understand if you don't abuse this - must give a variable a value before using it - while variables don't have types, values do - if you try to operate on incompatible values, python will complain - x = 'two' # 'two' is a string y = 2 # 2 is an integer print x
d = str(defn.getattribute('ref'))
- code unto others as you would have others code unto you.
re.match(r'^(\s*)(\s*)\b(.*)$', str(textnode.data)) if not m: return leadingspace, firstword, restoftext = m.groups() if not firstword: return # if there's text after the first word, re-save it.
= 0 which is not disible by (p-1) and by (q-1).
the problem of not being able to access the bind molecular database remotely - bits in italics are typical answers: have your team members replace them with their answers (target market) affects scientists studying protein interactions.
microsoft press, 1996, 1556159005.
but not the second one: - r1 =
- option #1: require them to write socket-level code - complicated and error-prone - can only have one program listening to a socket at a time - option #2: have the web server accept the http request, and then invoke the user's code - recompiling the web server every time someone wants to add functionality would be a pain - so define a protocol that lets web servers invoke arbitrary external programs - the common gateway interface (cgi) is a simple set of rules that specifies: - how a web server passes information to a program - how that program passes information back to the web server -
dat2csv.py python dat2csv.py $ $@ clean : @rm -f *.csv python dat2csv.py hydroxyl_422.dat > hydroxyl_422.csv python dat2csv.py hydroxyl_480.dat > hydroxyl_480.csv python summarize.py hydroxyl_422.csv hydroxyl_480.csv > hydroxyl_all.csv python dat2csv.py methyl_422.dat > methyl_422.csv python dat2csv.py methyl_480.dat > methyl_480.csv python summarize.py methyl_422.csv methyl_480.csv > methyl_all.csv rm hydroxyl_480.csv methyl_422.csv hydroxyl_422.csv methyl_480.csv - notice that make automatically removes intermediate files at the end - often visualize dependencies as a directed graph - notice that the rule %_all.csv takes precedence over the rule %.csv - make uses the most specific rule available - comment on this slide defining macros - often want to define values inside a makefile - e.g., the directory programs are to send their output to - or optimization flags for a compiler - do not want to set these options over and over again - rule #3: anything repeated in two or more places will eventually be wrong in at least one - solution: define variables (usually called macros) - sometimes useful to pass values into make when invoking it - e.g., change the input directory - rather than rewriting the makefile each time, you can specify name=value pairs on the command line - define a macro with the default value - override it when you want to - so: - make -f macro.mk sets input_dir to /lab/gamma2100 -
like architects, most programmers spend most of their time renovating, rather than creating something completely new on a blank sheet of paper.
microsoft press, 2004, 0735619670.
how could you compress them?
pike: the unix programming environment.
- why is my program so slow?
- they're overkill for small projects - particularly research projects, which frequently change direction - comment on this slide dashboard - the dashboard is a graphical complement to the timeline view - comment on this slide blogging - weblogs (or blogs) started off as on-line journals - every trac project creates two blogs - the “compose blog entry” page allows project members to create entries for the announcements blog - note: only people logged in to that trac installation can comment on entries - occasionally annoying, but helps reduce comment spam - comment on this slide administration - trac is administered from the command line, rather than through the web - simpler to write and maintain - makes it simpler for administrators to create a dozen accounts in a single step, etc.
- best way to find out is often to build some throwaway code -
you will submit all of your exercises in this course by checking files into your repository.
what good fortran programmers were already doing - objects formalized the way good c, pascal, and lisp programmers managed their data structures and functions - java deserves credit for bringing two previously-esoteric practices into the mainstream - garbage collection: the computer recycles memory as it needs to - reflection: programs can inspect themselves at runtime - reflection simplifies the construction of large software systems - most big applications are now frameworks that load plug-in components dynamically - a little extra effort… - …but it forces programmers to really, truly modularize their code… - …which also reduces maintenance and customization costs - watching programs run is an essential part of the software development process - which parts of my code can be thrown away?
and the authors of the build tool don't have to create and maintain one, either - there's a debugger - con - much less widely used than make or ant (which is the java equivalent of make) - comment on this slide integrating with c - been saying since the first lecture that you should: - write the first version in python (or some other very high-level language)
- thank you, and good luck - comment on this slide bibliography prev draft version 574 next [agans 2002] david j. agans:debugging.
once you're over the (steeper) learning curve - easier to see and understand what the computer is doing on your behalf - which is part of what this course is about - most important: it's easier to combine clui tools than gui tools - small tools, combined in many ways, can be very powerful - [ray & ray 2003] is a good introduction for newcomers -
== '__main__': for filename in sys.argv[1:]: checktabs(filename) - great—except it only works on files - can't pipe things to it, because it doesn't know how to read standard input - implement the standard unix convention: if no filenames provided, read from standard input - hm… sys.stdin is an already-open file, not a filename - change signature of checktabs to take both the filename, and an open file - move the open and close to the main body - #!
in that directory, i get: earth.txt:period: 365.26 days venus.txt:period: 224.70 days search strings can use regular expressions, which will be discussed in a later lecture.
exercise 3.5: add another line or two to prev top next course/ex01/bio.txt and commit those changes.
if someone is using your library in a gui, you don't want to be printing to stderr reason #2: error handling code gets in the way of understanding the  algorithm, so disentangle the two import sys # look for the first matching line in a file.
stringio() reverse(instream, outstream) assert outstream.getvalue()
doc = xml.dom.minidom.parsestring(src) print doc.toxml('utf-8')   224.7  - finally, can build a tree by hand - import xml.dom.minidom impl =
[ullman & liyanage 2004] larry ullman and marc liyanage: c programming.
newx # get and set y coordinate.
' self.assertequal(self.fixture.getbyconsultant('nobody'), set()) def testnoprojects(self): '''make sure that nonexistent projects aren't present.''
- any comments other people have added to the ticket - every time you change a ticket, you should explain why - like commenting on changes you submit to version control - note: after updating a ticket, go back to the timeline view - time of change, ticket id, and comment are displayed - the display is a link back to the ticket - information is more useful when it's connected - comment on this slide how to write tickets - a badly-written ticket is better than no ticket at all, but not by much - the summary should be short and informative - aim is to help people who are looking at 100 summaries find the one(s) they care about - “bug in seq comp” is bad
this book explains which of xml's many features should be used when: item 12 tells you to store metadata in attributes, and then spends six pages explaining why, while item 24 analyzes the strengths and weaknesses of various schema languages, and item 38 covers character set encodings.
- human beings are creatures of habit - tend to make the same kinds of errors over and over again - so test for those first - has an interesting side effect: once you start testing for habitual errors, programmers become more conscious of them, and make them less often - the first tests you should write: - tests you expect to succeed - boundary cases (e.g., sort the empty list, or a list of one value) - simplest interesting case (e.g., sort a list of two values) - general case (e.g., sort a list of nine values)
each entry includes a section on motivation, the mechanics of actually carrying out the transformation, and an example in java.
the net effect is to teach all of the same principles that other books try to, but in a grounded, understandable way.
in interpreted languages like python, you can also switch into debugging  mode in the middle of an interactive session sometimes also do post mortem debugging when a program fails badly (e.g., illegal memory access in c++), it  creates acore dump copies all of its internal state to a file on disk can then load that dump into the debugger, and see where the program was  when it died not as good as watching it run… …but sometimes the best you can do modern graphical debuggers typically show: the source code the values of variables that are currently in scope i.e., global variables, parameters to the current function call, and local  variables in that function a panel displaying what your program has printed to standard output and/or  standard error figure 11.1: a debugger in action
- more realistically, suppose we have two types of people: professors and students - they have a lot in common: names, email addresses, etc.
the syntax is unpleasant - complex things are difficult to read… - …and even more difficult to debug - best you can do is use echo to print things as make executes - not really very portable - hands commands to the shell for execution -
the impact is that they can only inspect/update single records at a time via a browser.
mercury 0 venus 0 earth 1 mars 2 jupiter 16 (and counting)
once you've made changes, you can preview the page, or commit the changes - pages are saved in the database, rather than in subversion - translated from wiki syntax into html when the page is viewed - note: no conflict resolution mechanism - if two people try to edit a wiki page at the same time, the second one to commit will be denied - so put large and/or frequently-updated documents under version control instead - wiki syntax offers shortcuts for referring to other things in trac - #22 links to ticket 22 - @41 links to email message 41 - [94] links to revision 94 in the version control repository - source:path/to/filename.txt links to a particular file in the subversion repository - source:path/to/filename.txt#94 links to a particular version of the file - you can use this same syntax in: - tickets (to refer to changesets, file versions, email messages, etc.)
but it doesn't help to do a detailed design that customers can't understand - up-front design is a tool for managing risk -
and now we may begin - from one perspective, this course has just scratched the surface - from another, it has introduced you to the 20% of software engineering that accounts for 80% of what professional developers do - techniques - supported by tools - in this lecture, look at a few of the next steps you might want to take - comment on this slide numerical programming - in the beginning there was fortran - a great leap forward -
for example, most of us know that maintenance consumes 40-80% of software costs, but did you know that roughly 60% of that is enhancements, rather than bug fixes?
what command would you use?
[spolsky 2004] joel spolsky: joel on software.
- comment on this slide learn by building -
- do you use a style checker to ensure that your software is written in a uniform, readable way?
- best know algorithm is rsa - invented by ron rivest, adi shamir and len adleman in 1977 at mit.
2.0 # create an alias for it.
exercise 14.2: make gets definitions from environment variables, command-line parameters, and explicit definitions in makefiles.
>= 0: print '%s contains tabs' % filename break if __name__
- python imaging library: - a widely-used image processing library for python, capable of working with every popular graphics format around.
self.assertequal(self.fixture.getbyconsultant('alan'), set(['tables'])) self.assertequal(self.fixture.getbyproject('tables'), set(['alan']))
original image - figure 29.2: processed image - note: if you're looking for a professional-quality image editing tool, try gimp - it's complex, but also powerful - comment on this slide a better way to build - said back in automated builds that make has turned into a small programming language - a very clumsy one at that: confusing syntax, no debugger, … - the same thing happens eventually to every other build management tool -
list(temp) links.sort() for x in links: print x #ack #news #rules #search /mt/mt.cgi /blog /cgi-bin/awstats.pl?config=www.third-bit.com http://books.slashdot.org/books/05/06/16/1930227.shtml http://projects.edgewall.com/trac http://subversion.tigris.org http://weblog.infoworld.com/udell http://weblog.infoworld.com/udell/2005/06/23.html http://www.amazon.com/exec/obidos/redirect?path=asin/0974514071&link_code=as2&camp=1789&tag=thirdbit-20&creative=9325 http://www.amazon.com/exec/obidos/redirect?tag=thirdbit-20&creative=9325&camp=1789&link_code=as2&path=asin/0974514071 http://www.apache.org http://www.artima.com
another is to make a temporary directory, and check out a second copy of your repository there.
which files were changed to fix a problem?
the book's companion web site is updated regularly.
[williams & kessler 2003] laurie williams and rober kessler: pair programming illuminated.
unlike screen-scraping our product can be used directly and reliably in many languages.
it doesn't just show readers how to use unix---it explainswhy the operating system is built that way, and how its "lots of little tools" philosophy keeps simple tasks simple, while making hard ones doable.
[lutz & ascher 2003] mark lutz and david ascher: learning python.
the book's preface says it best: “the reading of code is likely to be one of the most common activities of a computing professional, yet it is seldom taught as a subject or formally used as a method for learning how to design and program.”
the definitive programmer's guide to regular expressions.
while the book moves a little slowly in some places, the examples are exceptionally clear.
mit press, 2002, 0262133989.
if you don't understand the question - so: - do you use version control?
topics range from gathering requirements through design, to the mechanics of coding, testing, and delivering a finished product.
simplecookie() cookie['count'] =
1: checktabs('', sys.stdin) else: for filename in sys.argv[1:]: infile = open(filename, 'r') checktabs(filename, infile) infile.close() except ioerror, e: print >> sys.stderr, e - note: could equally well put the exception handler: - inside the else (since we don't think i/o errors can happen while reading standard input) - inside the for (so that if an error occurs while reading one file, the program continues on to the next) - comment on this slide running tools - now, how to run the validation tool?
[schneier 2005] bruce schneier: secrets and lies.
much of the discussion has been superseded by more recent books, and the use of c++ and smalltalk for examples feels a little dated, but it is still a landmark in programming.
donothing - users call visitor.visit with the root node of the tree they want to traverse - override one or more of the three do-nothing methods to perform actions before, at, or after nodes - step 2: derive a class that does something useful (like count how many nodes are in the tree) - step 3: test - comment on this slide modifying the tree - modifying trees in place is a little bit tricky - helps to draw lots of pictures - example: want to emphasize the first word of each paragraph - ah, but it's not that simple - what if the first child of the paragraph already has some markup around it?
ignore these differences for the purpose of this question.
if the technical writer can't figure out how to explain a feature, the developer should redesign it - developer support starts work on installers the same day developers start on new features - makes sure the daily build & test keeps running - and chastises developers who've broken things - everyone has a status report in their mailbox when they arrive each morning - schedule is always up to date - developers provide progress reports every week (at least)
- comment on this slide securing http - http sends data as cleartext - as is too often the case, security was ignored in http's original design - netscape later developed https (secure http) to protect confidential information - uses a different port (443 instead of 80) protocol ( https in url instead of http) - encrypts data between the browser and the web server - does not guarantee secure storage on the server - far too many web sites store sensitive information in databases as cleartext - gives villains another point of attack - another flaw in http is its built-in password handling (called basic authentication)
testcase - see how this works in a later lecture - search each class to find methods whose names begin with the word "test" - for each method: - create a new instance of the class - call the method - record pass, fail, or error
[gamma et al 1995] erich gamma, richard helm, ralph johnson, and john vlissides: design patterns.
- the object-oriented solution is inheritance - one class extends its parent class by adding new state and methods - anything instances of the parent class can do, instances of the child class can do as well - but not vice versa - extend any class with any number of child classes - all children share the behavior of their parent -
- typically shared by many drivers - road segments - intersections - each road segments connects to exactly two intersections - each intersection connects to one or more road segments - “one” in order to model dead end streets - graphical display and other gui elements - configuration files - etc.
def bibref(root, biboutput, bibinfo): cites = root.getelementsbytagname('cite') for cite in cites: ref = str(cite.getattribute('ref'))
use os.popen (with temporary files if necessary) until you're  comfortable enough to move on comment on this slide exercises exercise 10.1: suppose you wanted to sort entries with the same frequency alphabetically.
- a single trac installation can manage any number of projects - relies on host to handle authentication - every user must have an account on the underlying linux system - one less password for them to remember - home page looks like pretty much every other web portal's home page - examine each of the components in turn below - comment on this slide repository browser and timeline - the repository browser is a web-based interface to subversion - read-only: cannot update local files, or commit changes - implementing this would require giving web pages the ability to mess with your hard drive - if you don't know why this is a bad thing, please re-read the lecture on security - read-only is more useful than you'd think - browse directories and files to see what they contain - figure 25.3: browsing directories and files - view old versions of files - figure 25.4:
not  raising exception for 2 caught exception for 3 index is odd raise exceptions to report errors in functions rather than returning none or -1 or something like that list.find (which returns -1 if something can't be found) is  unusual in this respect
that's why they call it computer science: it's experimental - for a broader tutorial, see
after  try/except figure 10.3: flow of control in try/except you can include code to execute when there isn't an error using else for val in (0.0, 1.0): print "val is", val try: x = 1.0/val  except: print '..handling error!'
but "\\t" is the two-character sequence ⌈\t⌋, which also matches a tab character - - "\" is also used in shorthand notation for common character sets - a couple of useful special cases: - the notation
if execution time is what we really care about, better to measure it directly - a statement that takes 10 milliseconds to execute is ten thousand times more expensive than one than takes a microsecond - profiling is the act of measuring aspects of a program's performance - typically measure execution time - can also measure disk usage, memory footprint, etc.
constructor sets the point's initial coordinates - the getter methods replace raw read access - the setter methods check the constraints on the state of the class - keep the memory model in mind when thinking about objects - comment on this slide defining a queue - a queue can do three things: - enqueue an item - dequeue the front item - which raises an exception if the queue is empty - remember, error behavior is part of a class's interface too - report whether it is empty or not - which is less powerful than reporting its size - a queue may store items in many different ways - the simplest in python is probably to use a list… - …but it isn't the only one… - …and whoever is using the class shouldn't care -
infile.readlines() infile.close() for line in lines: if line.find(word) >=  0: return line.rstrip() errmsg =
again - runs svn commit a second time - several hours later, hermione runs svn update on her working copy - subversion copies ron's changes into her directory
''' doc = xml.dom.minidom.parsestring(src) emphasize(doc) print doc.toxml('utf-8')
but both are often simpler (as well as more efficient) than the alternatives - comment on this slide design patterns - a design pattern is a way of doing things - e.g., porches, locked-room mysteries, and nested loops - too fuzzy to put in a library, but a great way to talk about design issues - the architect christopher alexander invented the term -
- i.e., what will cause the most pain if it's broken, or broken into?
- not everything worth doing is worth doing well.
if any found, print message - #!/usr/bin/env python '''check for tabs in one or more files.''
priorconsultants = self.fixture.getconsultants() priorprojects = self.fixture.getprojects() self.fixture.addassignment('alan', 'tables')
but then there'd be two representations of zero (0000 and 1000)
when you're using cygwin, you can also write c:\home\gvwilson as c:/home/gvwilson - or as /cygdrive/c/home/gvwilson - some unix programs give ":" a special meaning, so cygwin needed a way to write paths without it… - a path is a description of how to find something in a file system - an absolute path describes a location from the root directory down - equivalent to a street address
on some machines, the command will also display a group id.
xml.dom.minidom.parse('mercury.xml') print doc.toxml('utf-8')   87.97  -
and we know we're going to have other validation tools to run as well - put the command in a makefile -
- they call it computer science because it's experimental.
if software engineering is about building an electronic version of the channel tunnel, this stuff is the equivalent of putting an extension on the house - comment on this slide topics - shell programming - version control - automating builds - python (4 lectures) - systematic debugging - higher-level programming (2 lectures) - testing (2 lectures) - coding style and reading code - data crunching (4 lectures) - web programming and security (3 lectures) - software development project tools and processes (4 lectures) - comment on this slide setting up - some previous programming experience - for loops, if/ then/ else - function calls - arrays - file i/o - compilation - individual setup - python (version 2.4 or higher) - cygwin (on windows) - an editor - we'll look at smart ones later in the course - subversion - we'll spend a lecture on this next week - time - expect to spend 2-3 hours outside class for each lecture - comment on this slide recommended reading - “if you only have time to read one book, make time to read two” - [glass 2002] summarizes what we actually know about programmers' productivity - [hunt & thomas 1999] and [gunderloy 2004] are about the things that distinguish good programmers from bad ones -
- in practice, if input can't be validated, best to reject the request entirely - one exception: if your application is evolving, you might want to see if this input was meant for an old version - comment on this slide paths and i/
on unix, what would you do to find out how many instances of bash are running?
exercise 4.11: what command(s) could you use to find out how many instances of a program are running on your computer at once?
either the number of milliseconds - or the time it should expire (in utc) - use time.asctime(time.gmtime()) - warning: do not put sensitive information in cookies - browsers store them in files on disk - villains can watch network traffic, and steal data - cookies should instead be random values that act as keys into server-side information - talk about this more in the next lecture - comment on this slide summmary prev top next - cgi is example of event-driven programming - the framework invokes your code at specific times, and passes it specific information - what happens the rest of the time isn't your concern - at least, until something goes wrong, and you have to debug it - simple cgi programs can accomplish a lot - the entire first generation of web applications were built this way -
readlines wouldn't do the right thing if the thing being read was an image - use read to grab the bytes in that case - up to the client application to do the right thing - example: make a list of the links in a web page - the first step in build a web spider that can explore the web on its own - that, plus a search engine, and you're google… - fetch the page - parse it to extract all the links - should use xml, but regular expressions are good enough to give you the idea - import urllib, re from sets import
yes, it's another protocol… - cgi does not specify: - a particular language - you can use fortran, the shell, c, java, perl, python… - how the web server figures out what program to run - each web server has its own rules - we'll (briefly) talk about apache's - when a cgi is run, the web server sends it information: - through environment variables (which are strings) - on standard input -
inrange([0.0], 4.0, -2.0) except valueerror: pass else: self.fail() - comment on this slide
- comment on this slide example - fetch a page from the course site - import sys, socket httprequest = \ '''get /greeting.html
testcase - if we did, the framework would automatically try to run it… - …and it's not designed to be run on its own - this class does not create a fixture - that's the job of the derived class - add a test - each test records the state of the fixture… - …does something… - …and then checks that the fixture is in the right final state - remember, the fixture is recreated from scratch for each test - class commontests(object): '''tests that can be applied to all fixtures.''
the later you change or fix something, the more expensive it is -
concurrently, he uses those insights to argue that since buildings are always going to be modified, they should be designed to accommodate unanticipated change.
http://www.artima.com/chapters/book.jsp?num=114451 http://www.cs.utoronto.ca http://www.debian.org http://www.jonahgroup.com http://www.list.org http://www.oreillynet.com http://www.oreillynet.com/cs/user/print/a/5862 http://www.pragmaticprogrammer.com/titles/gwd/index.html http://www.provost.utoronto.ca http://www.python.org http://www.python.org/psf http://www.sf.net http://www.techbookreport.com/tbr0172.html http://www.third-bit.com/pyweb/index.html http://www.third-bit.com/swc http://www.third-bit.com/trac/argon http://www.third-bit.com/trac/pyre http://www.third-bit.com/trac/pyre/newticket http://www.third-bit.com/trac/swc http://www.third-bit.com/~gvwilson http://www.utoronto.ca mailinglists.html mailto:gvwilson@cs.utoronto.ca old-presentations.html past.html reading.html style.css - comment on this slide passing parameters - sometimes want to provide extra information as part of a url - example: when searching on google, have to specify what the search terms are - could do this as part of the url - amazon puts isbns in urls - more flexible to add parameters to the url - http://www.google.com?q=python searches for pages related to python - "?" separates the parameters from the rest of the url -
* * @param left one of the base species for the search * @param right the other base species for the search * @param threshold the degree of certainty required * @return the common ancestor, or null if none is found * @see
find out how many tests currently pass or fail with a single command?
commit this file to your repository.
for filename in args: filename, _, _, root = getfile(filename) gentime(root) crossref(root, xrefinfo) bibref(root, biboutput, bibinfo) outfile =
" %3f "@" %40 table 22.1: url encoding - example: to search google for “grade = a+”, use http://www.google.ca/search?q=grade+%3d+a%2b - helper functions: - urllib.quote(str) replaces special characters in str with escape sequences - urllib.unquote(str) replaces escape sequences with characters - urllib.urlencode(params) takes a dictionary, or a list of pairs, and constructs the entire query parameter string - import urllib print urllib.urlencode({'surname' : 'hopper', 'forename' : 'grace'}) print urllib.urlencode([('surname', 'turing'), ('forename', 'alan')])
productname ourprice = item.
if python finds a character in a string that doesn't have a printable representation, it prints a 2-digithexadecimal (base-16) escape sequence - uses the letters a-f (or a-f) to represent the digits from 10 to 15 - so this string represents the four bytes ['\x1f', '\x00', 'a', '\x00'] - 1f16 is (1×16 + 15), or 31 - ascii code for the letter "a" is 6510 - note that the least significant byte of the integer comes first - this is called little-endian, and is used by all intel processors - other chips put the most significant byte first (big-endian) - if you move data from one architecture to another, it's your responsibility to flip the bytes… - …because the machine doesn't know what the bytes mean - import struct packed =
there is still a lot you can do, both as a user and as a programmer - this lecture concentrates on the latter - comment on this slide how to think about security - security systems are responsible for: - authentication: who are you?
let's call the two working copies blue and green.
shifting - shifting an integer's bits left n places written as x >1 is 01112>>1, or 00112, which is 310 - shifting is not more efficient than multiplication and division on modern computers - what happens if the top bit changes value as a result of a shift?
exercise 16.2: can you honestly say that you write tests before code?
- bases on fermat's little theorem - for every a it is
other facts aren't part of the zeitgeist, though they should be.
= 0 # number of counter objects created.
false - have to make another change to checktabs - it and checkprintable need to process the same data - so neither can read that data in from the file - unless we want to open and read the file twice - solution: separate input, processing, and output - main body reads data and calls validation functions - try: if not filenames: lines = sys.stdin.readlines() checktabs('', lines)
docid = str(doc.documentelement.getattribute('id'))
- “seq. comparison returns wrong probabilities for bivalves” is much better - usually have three kinds of tickets: - bugs - feature requests (i.e., someone wants the software to do something it doesn't) - questions - i.e., “does anyone know how to parse external entities with expat?”
and (if you're using java, c++, or fortran) all that recompiling… misleading adding print statements moves things around in memory, changes execution  timing, etc.
doc.createtextnode('686.98') period.appendchild(text) print doc.toxml('utf-8')
- two interfaces: - a standalone command-line tool called trac-admin - a python library, so that administrators can write scripts to do whatever they want - as mentioned earlier, trac relies on underlying operating system to manage user accounts - authentication is (only) as secure as your password policy - trac uses (person, project, permission) triples for authorization - e.g., (aturing, enigma, wiki_write) or (ghopper, demo, ticket_read) - every operation requires one or more permissions -
brian w. kernighan and dennis ritchie: the c programming language .
but it also means you can never be quite sure what program a command will invoke - though you can use the command which program_name, which will tell you - common entries in path include: - /bin, /usr/bin: core tools like ls - note: the word “bin” comes from “binary”, which is geekspeak for “a compiled program”
exercise 25.2: what is the status of the overnight build?
123 # remember, modules are executed as they're loaded... if value = hix) or (loy > hiy): return none return rect(lox, loy, lox, hiy) - how many errors can you spot?
but we have to write the examples in something
self.fixture.addassignment('sally', 'counters')
[margolis & fisher 2002]
apress, 2004, 1590593561.
false break if match: return i return -1 def tests(num): tests =
the second section, for example, covers “the evils of duplication”, “orthogonality”, “reversibility”, “tracer bullets”, “prototypes and post-it notes”, and “domain languages”, and illuminates each with plenty of examples and short exercises.
that's one false alarm every 30 seconds - how much attention do you think the guards will pay to the system after a week on the job?
- so print on its own just prints a blank line - use either single or double quotes to create strings - the built-in function str converts things to strings - use escape sequences to put special characters in strings - single quotes in a single-quoted string: 'this isn\'t unusual.'
elts = doc.getelementsbytagname(eltname) referenced =
- comment on this slide checking for tabs - start with the simplest task: checking for tabs in files - open each file in turn - check each line for tabs - note: could also read entire contents of file into a string, and search for tabs in that -
but that also means that it doesn't work on linux or mac - figure 3.3: tortoisesvn -
and it's usually impossible to get a complete picture of the system's state - solution: get it right the first time -
- doctor dobb's journal python-url: - bi-weekly news from the world of python.
if you want a free integrated development environment (ide), try spe or pydev -
so if a directory called tools has permission rwx--x--x (i.e., owner can do anything, but everyone else only has execute permission), then: -
pragmatic bookshelf, 2004, 0974514039.
- smartsvn: - a cross-platform gui for subversion.
simplecookie() cookie.load(os.environ['http_cookie'])
the book's aim is to show scientists and engineers with little formal training in programming how python can make their lives better.
need to break inter-class dependencies in java so that you can test one module without having to configure the entire application?
d=sys.argv[1] a=reader.readlinesfromfile(d) b=splitter.splitintosections(a) c=d.split('.')
/usr/bin/env python import os, cgi form = cgi.
but if (for example) the link contains several words, this will look wrong - we'll ignore this problem for now - first part of solution: find all the paragraphs using getelementsbytagname, and iterate over them - second part: break the paragraph text into pieces, and handle each piece in turn - create a new node for each piece - push it onto the front of the paragraph's child list -
exercise 3.2: create a file course/ex01/bio.txt (where course is the root of your working copy of your subversion repository), and write a short biography of yourself (100 words or so) of the kind used in academic journals, conference proceedings, etc.
build numbers are never reset, i.e. you don't go from 5.2.2.1001 to 6.0.0.0, but from 5.2.2.1001 to 6.0.0.1002, and so on.
stringio() findall(instream, outstream) assert outstream.getvalue()
svn/1.1.4 mod_python/3.1.3 python/2.3.5 php/4.3.10-9 mod_ssl/2.0.54 openssl/0.9.7e content-length: 394 connection: close content-type: text/html; charset=iso-8859-1   404 not found  not found the requested url /greeting.html was not found on this server.
- unified modeling language (uml): - lei jiang - unit testing: - unpack: - url encode: - use case: - tingting zou - use case diagram: - simona mindy - user stories: - simona mindy v - validate: - verifiable deliverable: - version control system: - version number: - large projects typically use multi-part version numbers to identify software releases.
it searches files for sections of text that look like interactive python sessions, then re-executes those sections and checks the results.
if you'd prefer something with commercial support, komodo and wingide are my favorites - comment on this slide while loops, break, and continue prev top next - do something repeatedly as long as some condition is true - do the “something” zero times if the condition is false the first time it is tested -
[feldman 1979] - the good news is that make will: - figure out what has changed - work out what is affected by those changes - execute commands to bring things up to date (e.g., by recompiling) - commands are handed to the shell for execution, so they're the same ones you would run yourself - the bad news is make's syntax - initially very simple, but has grown more complex over time - has turned into a little programming language in its own right (rule #11)
if no match, echo line (without adding extra newline at end) else: print >> outstream, line, - let's not forget to test it: - if __name__
but make input_dir=/oldcrankymachine -f macro.mk uses /oldcrankymachine
- create temporary files when and as tests execute?
img for images - images for lec/xyz.swc go in the img/xyz directory - src for source code - src/xyz holds sample files for the xyz lecture - makefile runs tab checker on all .swc files - comment on this slide checking for printable characters - next on the list: make sure that files only contain printable characters - i.e., whitespace, alphanumeric, and punctuation - some editors insert “smart” (curly) quotes, automatically convert "---" into "—", etc.
- we'll return to this topic below - usually takes 3-6 weeks to do a&e - what's everyone else doing while this is going on?
if you make your programs work like filters, you can easily combine them with others - a combinatorial explosion of goodness - comment on this slide environment variables - like any other program, the shell has variables - since they define a user's environment, they are usually called environment variables - type set at the command prompt to get a listing: - get a particular variable's value by putting a "$" in front of its name - e.g., the shell replaces "$home" with the current user's home directory - often use the echo command to print this out - $ echo $home /home/gvwilson - question: why must you type echo $home, and not just $home?
it includes a list of 25 best practices, and discusses things that most other books leave out (like recovering from disasters and dealing with impossible demands).
the software vulnerability guide.
then there must be a blank line to signal the end of headers - common error to forget this - body is whatever data the server wants to send back - a web page, an image, etc.
- there's no such thing as one program.
debugging prev draft version 588 next
- [margolis & fisher 2002] describes work at carnegie-mellon university aimed at making computer science a less hostile environment for women and other underrepresented groups - note: while the gender ratio in computing as a whole is about six to one, the ratio in open source is closer to 200:1 - internet groupware for scientific collaboration talks about how much more the web could do for scientists - comment on this slide
but python doesn't allow assignment in the middle of expressions - you can figure out what the code is doing even if you don't know the idiom… - …but knowing the idiom makes it a lot simpler for your brain to chunk what it's reading - style guideline: use your language's idioms - if everyone else writes their code a certain way, write yours that way too - i never liked python's while 1: break idiom, but i used it - two ways to learn idioms: - books on programming style (e.g., the “effective” series from addison-wesley) - reading other people's code - note: idioms evolve over time - languages gain new features, programmers learn new tricks, etc. - people who have grown up with java tend to write cleaner c than people who learned it as a first language - so when reading code, prefer the style of newer code over that of older stuff - comment on this slide style tools - a growing number of tools exist to check and enforce style guidelines - look for things that the language spec and compilers allow, but which make code harder to read - pylint - parses programs to create an annotated syntax tree - then searches the tree to find things that match problem patterns - each pattern implemented as a class that looks for certain things in the tree - which means that users can write new checkers if they want to - class metal: name =
actual = set(os.listdir(dir))
- any task where one action depends on others is a good candidate - running example: sakura synthesis is studying organic fullerene production - comment on this slide hello, make - suppose we already have a program called dat2csv.py that reformats data as a table - use comma-separated values (csv) for the table - put the following into a file called hello.mk: - some terminology: - run make -f hello.mk - make sees that the csv file depends on the data file - since the csv file doesn't exist, make executes the rule's action (i.e., runs dat2csv.py) - run make -f hello.mk again - hydroxyl_422.csv is newer than its prerequisite, so the action isnot executed - comment on this slide multiple targets - very few programs consist of a single file - when you run make -f double.mk, only hydroxyl_422.csv is compiled - the first target in the makefile is the default target -
for line in lines: print >> outfile, line outfile.close() # display.
finally, the build number is incremented every time you create a new version of the product for qa to test.
'xyz' print 'str is now', str str is abc str is now xyz - sequence means that it can be indexed - indices start at 0 (as they do in c)… - …so text[0] is the first character of the string text - the built-in function
the lifework of the man who invented many of the basic concepts of algorithm analysis, these massive tomes are like everest: awe-inspiring, but not for the weak of heart.
- h1 (level-1 heading) is semantic, i (italics) is display - now generally considered a bad thing - documents should only contain semantics - display of that semantics should be specified separately… - …so that different browsers (or devices) can do it differently - sample document: -   software carpentry this course will introduce essential software development skills, and show where and how they should be applied.
but good style is tremendously important - well-written code is less likely to contain errors - and is much easier to maintain - rather than teaching you how to write well, this lecture will focus on how toread code - how to figure out how the code works - how to find what you need to know before making a change - hope that you'll pick up ideas about good style along the way - for a comprehensive guide to how open source unix applications are (or should be) structured, try [spinellis 2003] - comment on this slide why read code?
if name in freq: freq[name] = freq[name] + 1 #
“melting”) of firefighters' helmets - hermione - 34; ph.d. in physics - took two courses on c and two on numerical analysis as an undergrad, and a computer graphics course as a graduate student - now in charge of the 5-person flywheel braking group at yoyodyne inc. - ginny - 22; finished a b.eng.
project planning, source code control, unit testing, logging, and build management are all there.
- scons combines the most useful features of make with the full power of python - instead of a makefile, you write an sconstruct file - use function calls in that file to tell scons what you want to build, and how - like make, it has a rich set of default rules -
*/ void inittriple() { py_initmodule("triple", contents); } - the array contents has one entry for each function - the initialization function: - has a name of the form initxyz for the module xyz - calls py_initmodule to pass the table of module contents to the interpreter - to use: - compile the c to create a shared library ( .dll on windows, .so on unix) - copy the result to a directory that's on python's search path - then import triple and call triple.triple(11) - comment on this slide
according to fmt, returning a string - unpack(fmt, str) unpacks the values in str according to fmt, returning a tuple - calcsize(fmt) calculates how large (in bytes) the data produced using fmt will be - packing and unpacking are always fixed-size operations - format specifiers - example: pack two integers, using only 16 bits for each - import struct fmt = 'hh' # two 16-bit integers x = 31
- use x = x | mask - to set the ith of x to 0: - create a value mask in which bit i is 1 and all others are 0 - negate it using ~, so that the ith bit is 0, and all the others are 1 - use x = x & mask - comment on this slide
the answer is to keep tests as independent as possible - the first tests you write use simple constructors, and simple inspector methods - once those pass, start writing more complex tests - they probably won't be executed in this order once they're all written… - …but they still give you somewhere to set a breakpoint when simple things start to go wrong - much more interesting to think about how to use object-oriented ideas in constructing tests - create one class that has a lot of tests - derive other test classes that: - create specific fixtures - run specific tests - by default, the framework will run all the generic tests for the specific classes as well - this only works if the tests in the base class are generalized - a little more setup work for a big payoff - example: billing application for a software consulting firm - each consultant may be assigned to zero or more projects - each project may have zero or more consultant currently assigned to it - the assignment class keep track of who is currently assigned to what - use strings for consultant and project ids for now - create a base class commontests to hold shared tests - do not derive this from unittest.
- now choose two large prime numbers p and q. - compute n = p*q.
y = x) + 2 assigns the value of x to y , then adds 2 to that and assigns it to z - no one would (or should) ever use it in the manner show above, but it makes certain kinds of loops more compact -
feature rankings - figure 29.1:
and it's more efficient than posting them to the mailing list - whole team has to agree on what importance values mean - low: cosmetic ui problem, minor workflow annoyance with obvious workaround, etc. - high: program crashes, returns wrong result, inadvertently launches nuclear assault on iceland, etc.
how do people avoid nonreentrant code in signal handlers?
or what side effects (if any) this function has - read the function body - for each citation element in body… - …get the value of the element's ref attribute… - …make sure it's in bibinfo (presumably a dictionary)… - …set the citation's display and href attributes - hm…that means biboutput must be the name of the output file - notice how the explanation creates larger chunks from raws lines of code - consult external documentation - in this case, there doesn't appear to be any - examine call(s) to the function
[[mercury, "mercury"], [phosphorus, "phosphorus"], [chlorine, "chlorine"]]: if sample & flag: print 'sample contains', name else: print 'sample does not contain', name sample: 0005 sample contains mercury sample does not contain phosphorus sample contains chlorine - can use and, or, and not to set specific bits to 1 or 0 - to set the ith of x to 1: - create a value mask in which bit i is 1 and all others are 0
- programs come and go; data is forever.
yet another book from the folks at pragmatic, this one is everything you'll ever need to know about subversion, which is on its way to becoming the version control system of choice for open source development.
this title case each line some '''
(viewed 2005-08-16.)
- flaw #2: you can create new directories, but can't ever delete old ones - subversion - designed as a backward-compatible replacement for cvs starting in 2000 - fixes both of the major flaws in cvs - many open source projects have switched, or are switching… - …so we'll use it in this course - see the subversion site for details - comment on this slide basic use - assume for a moment that a repository has been created, and that ron and hermione already have working copies - ron wants to make changes to the rotor spin simulation - runs svn update to bring his copy up to date with the repository - edits spin.c and spin.h - runs svn commit to save those changes in the repository - note: the whole repository gets a new version number - ron realizes that he forgot to make one change - runs svn update again, just in case hermione has also been making changes (she hasn't) - edits spin.c
welcome - these notes are part of a course on software development skills for scientists and engineers being prepared by greg wilson for the python software foundation - please use the links included with the slides to provide comments and feedback - comment on this slide course outline - introduction - version control - shell basics - more shell - basic scripting - strings, lists, and files - functions, libraries, and the file system - testing basics - dictionaries and error handling - debugging - object-oriented programming - structured unit testing - automated builds - coding style and reading code - watching programs run
nathan a. good: regular expression recipes.
oh yeah, release the lock - otherwise, everyone else will wait forever - #!
['be','mg','mg','ca','be','mg', 'be'] # build a  dictionary of frequencies.
subversion should tell you that there are conflicts in planets.txt.
the 32-bit integer it represents is 4 bytes - "false" is 5 bytes, 0 is one bit (40:1) - speed - takes dozens of operations to add the integer represented by "34" to the one represented by "57" - hardware interfaces - somewhere, something has to convert the electrical signal from the gas chromatograph to a readable number - lack of anything better - it's possible to represent images as text (ascii art, postscript) -
print birthday['turing'] keyerror: 'turing' remove an entry using del d[k] can only remove entries that are actually present birthday = { 'newton' : 1642, 'darwin' : 1809, 'turing' : 1912 } print  'before deleting turing:', birthday del birthday['turing'] print 'after  deleting turing:', birthday before deleting turing: {'turing': 1912, 'newton': 1642, 'darwin': 1809}  after deleting turing: {'newton': 1642, 'darwin': 1809} for k in d loops over the dictionary's keys (rather than its  values)
apress, 2004, 1590593898.
and if you're going to be doing serious work, check out [good 2005] or [ friedl 2002] - comment on this slide exercises exercise 17.1: by default, regular expression matches are greedy: the first term in the re matches as much as it can, then the second part, and so on.
if it's worth doing again, it's worth automating - directory structure of the course: - a root directory - lec for lecture notes (in .swc files)
there's a much better way comment on this slide symbolic debuggers a symbolic debugger is a program that runs another program on  your behalf called “symbolic” because it can show you the source code you  wrote, rather than the raw machine code that's executing
but others find that their productivity goes up when they adopt diametrically opposed processes - like the one will see in the next lecture - option #1: most people program in the worst possible way, and anything is an improvement - option #2: the most important thing isn't which process you adopt, it's that you actually adopt one - what matters is that you're paying attention to process - and thinking about how to improve it - “the unexamined life is not worth living.”
unless you tell it otherwise, that's all make will update - run make -f double.mk methyl_422.csv to build methyl_422.csv - comment on this slide phony targets - obviously don't want to have to run make separately for each possible target - that would hardly count as “automation” - solution: create a phony target that: - typical phony targets in a software project: - "all": recompile everything - "clean": delete all temporary files, and everything produced by compilation - "install": copy files to system directories - many open source projects are installed by typing make, and then make install - comment on this slide automatic variables pattern rules - most files of similar type (java, c++, etc.) are compiled the same way - rule #2 again: write a pattern rule specifying what to do in the general case - use the wildcard "%" to represent the stem of the file's name in the target and prerequisites - notice that there's another phony target in this makefile - make -f
in this book, he walks through hundreds of examples of c, c++, java, and perl, drawn from dozens of open source projects such as apache, netbsd, and cocoon.
every day, all around the world, programmers have to recycle legacy data, translate from one vendor's proprietary format into another's, check that configuration files are internally consistent, and search through web logs to see how many people have downloaded the latest release of their product.
a good introduction to python, which is also available on-line at dive into python .
== '__main__': > for i in range(1, int(sys.argv[1])): > bar(i) - coverage is most useful when integrated with unit tests - usually not economical to aim for 100% code coverage - tests for simple get/set methods are as likely to be buggy as the methods themselves… - …and some things (like the network cable being kicked out at exactly the wrong moment) really are hard to automate -
sock_stream) s.connect(("www.third-bit.com", 80))
- actually check things inside test methods using methods provided by testcase - allows the framework to distinguish between test assertions, and normal assert statements - since the code being tested might use the latter - checking methods include: - assert_(condition): check that something is true (note the underscore) - assertequal(a, b): check that two things are equal - assertnotequal(a, b): the reverse of the above - assertraises(exception, func, …args…): call func with arguments (if provided), and check that it raises the right exception - fail(): signal an unconditional failure - comment on this slide testing a function - you want to test a function that calculates a running sum of the values in the list - replaces [a, b, c, …] with [a, a+b, a+b+c, …] - test cases: - empty list - single value - long list with mix of positive and negative values - hm… is it supposed to: - return a new list?
if a value has not been set explicitly, its value is zero.''
missing required attribute "__revision__" w: 1:metal: missing docstring e: 5:metal.__init__: undefined variable 'arg' w: 7:metal.meth: missing docstring r: 1:metal: not enough public methods (1/2) w: 8:metal.meth:
for i in range(len(functions)): print functions[i].__name__, output[i] onehalf 0.125
if there's a new message: - seek to the beginning of the file - overwrite data -
d.get('x', 99) returns d['x'] if "x" is in d, or 99  if it is not.
- spe: - “stani's python editor” has grown to be more than just an editor: it now supports several cool tools, including a regular expression debugger.
- note: there's no magic - an http request is just text—any program that wants to can create them or parse them - comment on this slide http response - just as simple as a request - http response line -
deadlock - things are even trickier if you use os.popen3, which gives you the child process's stdin, stdout, and stderr - if the parent is trying to read from the child's stdout while it's trying to write an error message to stderr, both programs will be blocked - solutions are outside the scope of this course - use os.popen (with temporary files if necessary) until you're comfortable enough to move on - comment on this slide exercises exercise 10.1: suppose you wanted to sort entries with the same frequency alphabetically.
right = max(values) assert left  temp.txt.gz', 'w') for i in range(1000): for word in 'this is a test'.split(): print >> outstream, word outstream.close() print 'output is %d bytes' % os.stat('temp.txt.gz').st_size # see how big it would have been.
f) update the blue repository, and check that planets.txt now has the same content as it has in the green repository.
yes, it really is part of the program - if __name__
- a villain with an account on the system writes a python script that repeatedly looks in /tmp for *.cgidata files - when it finds one, it makes a copy for the villain to inspect later - or overwrites its contents with fabricated data - analysis?
wiley, 2005, 0471453803.
error: testlong (__main__.sumtests) ---------------------------------------------------------------------- traceback (most recent call last): file "running_sum_wrong.py", line 21, in testlong self.assertequal(runningsum([-3, 0, 3, -2, 5]),
uneven spacing of floating-point numbers - figure 20.4: packing data - figure 20.5: unpacking data - figure 20.6: packing a variable-length vector - figure 20.7: structure of a binary file with metadata - figure 21.1:
and (if you're using java, c++, or fortran) all that recompiling… - misleading - adding print statements moves things around in memory, changes execution timing, etc.
handwritten(str, substr) if __name__
- the real purpose of a schedule is to help the project manager cut corners when things go wrong - how far off track are we?
as objects - figure 9.1: possible overlap tests - figure 10.1:
checkprintable('', lines) else: for filename in filenames: infile = open(filename, 'r') lines = infile.readlines() infile.close() checktabs(filename, lines) checkprintable(filename, lines) except ioerror, e: print >> sys.stderr, e - change to checktabs is easy - def checktabs(filename, lines): '''look for tabs.'''
- four quality assurance (qa) - one technical writer - one system administrator - one help desk - one product manager (marketing, sales support, etc.)
this is not random - happens exactly the same way every time -
what flag(s) should you give diff to tell it to ignore changes that just insert or delete blank lines?
in short, it is everything i wished someone had told mebefore i started my first full-time programming job.
keys return the dictionary's keys as a list.
def gety(self): return self.y def sety(self, newy): assert newy >= 0
(viewed 2005-07-26.)
but the more you estimate, the better your estimates will become - expect to revise this document several times - project manager assigns task of reviewing a&e to specific developer(s) - ensures that reviews actually get done… - …and that knowledge and decisions are communicated - comment on this slide
this article is reprinted in [spolsky 2004] .
call stack (b) - figure 8.3: call stack (c) - figure 8.4: argument passing (a) - figure 8.5: argument passing (b) - figure 8.6: argument passing (c) - figure 8.7: argument passing (d) - figure 8.8:
- apache web server: - the main site for the most widely-used web server in the world.
9 - could use sign-and-value for negative numbers - 00112 would be 310, 10112 would be -310 -
- what do you do next?
once they've all been handled, get rid of the original text node - def emphasizetext(doc, para, textnode): # look for optional spaces, a word, and the rest of the paragraph.
fieldstorage() term = form['term'] cmd =
words.len - nothing appears, because output is being sent to the file words.len - $ ls -t words.len venus.txt earth.txt - $ cat words.len 4 9 69 earth.txt 4 9 69 venus.txt 3 12 62 words.len 11 30 200 total - try typing cat > junk.txt -
and it's good documentation for search engines - often, the “other data” you want to connect to is other html
- answers to these questions define a development process - dozens have been formalized and described -
- can you rebuild everything in one step?
add a new value to the end of the queue.
- /usr/local/bin: optional (but common) tools, like the gcc - $home/bin: tools you have built for yourself - remember, $home means “the user's home directory”
once the program is paused, the debugger can single-step it - execute one statement at a time - most can: - step into function calls - step over them, or - run to the end of the current function -
- and most likely a turing award, a fields medal or a nobel prize.
0x02 # 0010 chlorine =
addison-wesley, 2004, 0321150406.
your message:        ''' print '' - comment on this slide who are you again?
integrating the other way - it's simpler with swig - simple wrapper interface generator - interprets specially-formatted comments in c header files to generate python wrappers - similar tools exist to connect python to fortran - can also go the other way, and embed python in c/c++ - every large application eventually needs an interactive command interpreter - to embed: - initialize a python interpreter object - convert application values into python objects - pass the interpreter a string containing the code to be executed, and the values to execute it on - unwrap the result - multilanguage programming isn't simple - and multilanguage debugging is downright hard -
what to know three different ways to inject a test into a c++ class without changing the code?
the debugger can set breakpoints in the target program tells the target to pause when it reaches particular lines of code
right = stringio(right) actual =
yes, it contains a lot of guesswork… - …but it's better than nothing… - …and estimates improve with practice - comment on this slide
this has several "title case" words on each line (some in parentheses). '''
'grep %s data.txt' % term instream = os.popen(cmd, 'r') results = instream.readlines() instream.close() print '
- which parts of their work are my colleagues actually testing?
this planet provided as-is.
but the whole point of cgi is to generate content dynamically - show a list of environment variables - #!/python/python.exe import os, cgi # headers and an extra blank line print 'content-type: text/html\n' # body print '' keys = os.environ.keys() keys.sort() for k in keys: print '%s: %s' % (cgi.escape(k), cgi.escape(os.environ[k]))
== '__main__': import doctest doctest.testmod() convert a handful of the tests you have written for other questions in this lecture to use prev top next doctest.
['be','mg','mg','ca','be','mg', 'be']  freq = {} for name in names: freq[name] = freq.get(name, 0) + 1 # invert.
so why are we where we are?
the more odds and ends you require readers (including yourself) to keep track of, the greater their error rates will be - fundamental rule of good programming style is therefore to limit the amount of information needed at any one time - note that a hundred one-line methods is not an improvement over one hundred-line method - a related rule: the greater the difference, the more likely we are to notice it - so every difference in naming and layout ought to mean something… - …because readers' brains will assume that it does - conversely, every significant difference ought to be visually distinct - comment on this slide what does this function do?
what it is - finding and fixing flaws in software - assume for now that you built the right thing the wrong way - requirements errors are actually a major cause of software project failure - you're going to spend half your professional life debugging - after all, once it's fixed, you move on to something else
and yes, the debugger modifies the target's layout in memory, and  execution speed… …but a lot less than print statements… …with a lot less effort from you comment on this slide
- util for utility programs (like the validation tools) -
- comment on this slide more xhtml tags - well-written html pages have a head element as well as a body - well-written pages also use comments (just like code)
- the absolute minimum every software developer absolutely, positively must know about unicode and character sets (no excuses!): - joel spolsky's 15-minute guide to character set encodings, and what you have to do to deal with the fact that most of the world doesn't use the standard american alphabet.
self.assert_(dependson(self.f2, 'a', 'a')) self.assert_(dependson(self.f3, 'b', 'b'))
its 16 chapters and 4 appendices are organized into 1- and 2-page explanations of particular topics, from writing non-empty elements to namespaces, schemas, and xml transformation.
this book isn't about web logging, streaming video, or managing mailing lists.
d.clear() returns none, but d is now empty.
self.assert_(dependson(self.f4, 'b', 'd')) def testnegative(self): self.assert_(not dependson(self.f1, 'a', 'c'))
== '__main__': tests =
"kovalev" where login = "skol"; update involved set login = "kovalev" where login = "skol"; end transaction; select
but wait, there's more - we've only scratched the surface - regular expressions have proved to be too useful to remain clean and elegant - use ⌈|⌋ for either/or - ⌈ab|cd⌋ matches either "ab" or "cd" - ⌈a(b|c)d⌋ matches either "abd" or "acd" - use ⌈pat{n}⌋ to match exactly n occurrences of a pattern - more generally, ⌈pat{m,n}⌋ matches between m and n occurrences - ⌈\d{2,3}⌋ matches "19" or "207", but not "3" or "4567" -
- email messages (as long as your mailer sends messages as plain text, rather than html) - subversion commit comments - just about everywhere else - remember, information is more useful when it's connected - comment on this slide roadmap and milestones - a milestone is a time by which something is supposed to be done - a roadmap is just a collection of milestones - usually give milestone symbolic names, like “version 2 beta release” - that way, when the date changes, you don't have a milestone called “april 1” whose due date is may 15 - trac requires you to associate every issue with a milestone - default is the empty milestone, which means “sometime” - can sort and view tickets by milestone - moving low-priority tickets from upcoming milestone to later ones is part of pre-release triage process - much (much) simpler than most project management tools - no gantt charts, no dependency graphs, etc.
glossary = readglossaryfile(glossary) if not filenames: filenames =
- often the most important documentation of all, since it's what gives other programmers a mental map of how everything fits together - requirements - description of what needs the software is supposed to meet - “if more than 100 events arrive in a second, the seismograph interface must store them in a queue“ tells you to look for a seismograph interface, and a queue that feeds it data - user guide - as above, knowing what the software is supposed to do often helps figure out how it works - it's increasingly fashionable to embed some documentation in code, then extract and format it - javadoc (for java) translates specially-formatted comments into html - java html /
after creating second object', counter.num initial count 0 after creating first object 1 after creating second object 2 - can also define methods that belong to the class, rather than to particular objects - out of scope for this course, but often useful - comment on this slide overloading operators prev top next - (almost) every feature of python objects can be overridden by defining the right special method - if done carefully, makes code much easier to read - if done haphazardly, makes it almost impossible to understand - one common use is operator overloading - the symbol "+" is just a shorthand for a function that takes two arguments -
self.before(node) self.at(node)
def handwritten(str, substr): return 0 10001 function calls in 0.166 cpu seconds ordered by: internal time, call count ncalls tottime percall cumtime percall filename:lineno(function) 1 0.098 0.098 0.166 0.166 empty.py:11(tests) 5000 0.034 0.000 0.034 0.000 empty.py:7(handwritten) 5000 0.034 0.000 0.034 0.000 empty.py:4(builtin)
exercise 3.3: what's the difference between mv and svn mv?
emph = doc.createelement('em') emph.appendchild(doc.createtextnode(firstword)) para.insertbefore(emph, para.firstchild) # if there's leading space, re-save it.
outfile = open('messages.txt', 'w')
- cruisecontrol: - a framework for managing continuous builds.
if that code is exercised by unit tests, then changes can be made quickly and safely; if it isn't, they can't, so your first job when you inherit legacy code should be to write some.
and indexerror (list/string index out of bounds) and keyerror (non-existent dictionary key) are specializations of lookuperror for i in range(2): try: if i ==
- tools are amplifiers: they allow good programmers to be better, and bad ones to be worse.
= rect(1, 1, 2, 2) result =
[gunderloy 2004] mike gunderloy:coder to developer.
[langtangen 2004] is a comprehensive introducton to python aimed squarely at scientists and engineers - goes into much more detail than this course will -
if duplicate values are allowed, make sure you test with them - tests you expect to fail - invalid input (e.g., passed a dictionary instead of a list) - remember, error handling is part of the interface too - sanity tests - make sure data structures remain consistent - if there is redundant information, check it against itself - a catalog of errors - numbers: zero, largest, smallest magnitude, most negative - structures: empty, exactly one element, maximum number of elements - duplicate elements (e.g., the letter "j" appears three times in a string) - aliased elements (e.g., a list contains two references to another list) - circular structures (e.g., a list that contains a reference to itself) - searching: no match found, one match found, multiple matches found, everything matches - code like x = findall(structure)[0] is almost always wrong - should also check aliased matches (same thing found multiple times) - comment on this slide dictionaries and error handling prev draft version 590 next motivation - problem: you want to count how often different people send messages to a mailing list - input: a file with one email address per line - each address may appear many times - output: a table of addresses, sorted by frequency of appearance - solution: keep track of counts in a list of pairs - each entry in the list is [address, countsofar] - each time an address is read in, search the list, and either: - increment the count of an existing entry, or - create a new entry with a count of 1 -
testcase, commontests): '''set up common tests with multiple assignments already present.''
while true: data = s.recv(1024) if not data: break response += data s.close() print response http/1.1 404 not found date: sat, 02 jul 2005 11:16:44 gmt server: apache/2.0.54 (debian gnu/linux) dav/2
in contrast, gui bloopers presents case study after case study: what's wrong with this dialog?
== '__main__': fixture = '''\ # leading comment followed by blank line 10 20 30\t40\t 50 60 70 80 \t90 100 ''' expected = '''\ # leading comment followed by blank line 20\t10 40\t30 50 60 70 80 100\t90 '''
- example: build either a normal or a debugging version of a program, and include an extra source file on windows - # what does the program depend on?
'-g': glossary = arg elif opt
self.values = {} def __len__(self): '''the length of a vector length is the largest index ever seen.'''
- modify its argument and return
find out how to do this, and then modify the re in the previous paragraph so that the first group winds up containing prev top next "a", and the second group " and xbx".
in biochemistry - did c in first year, and has built a personal web site (static html only) - thesis topic is improving the yield of organic fullerene production - albus - 47; ph.d. in mathematics; studies large random graphs using both analytic and computational techniques - undergraduate degree in mathematics and computer science in the 1970s; programs mainly in c++ - professor at euphoric state university; former chair of graduate studies - comment on this slide a quick self-test - adapted from [spolsky 2004] and [mcconnell 1997] - 1 for “yes”, 0 for “no”, and -1
, you write your tests, then write the code - a key element of agile development methodologies like extreme programming… - …but it was around long before they were… - …and pays off in almost every context - seems backward, but has very real advantages: - gives programmers a definite goal - coding is finished when all tests run - particularly useful when trying to fix bugs in old code, as it forces you to figure out how to recreate the bug - helps prevent the “one more feature” syndrome - ensures that tests actually get written - people are often too tired, or too rushed, to test after coding - helps clarify the api before it is set in stone -
[rosenberg & stephens 2005] doug rosenberg and matt stephens: use case driven object modeling with uml.
- product manager turns that into, “we want the product to be able to do y.”
[pilgrim 2004] is also good, and is available on-line -
it's not what you know, it's what you can.
person.__str__(self) result += '
the writing is personal without being sappy or overbearing, and the author draws upon a wealth of personal experience to explain why you sometimes don't want to make it easy for people to post comments, or how best to deal with abusive posters.
species */ public species getconcestor(species left, species right, float threshold) { ...implementation... } getconcestor public species getconcestor(species left, species right, float threshold)  returns the least common ancestor of two species based on dna comparison, with certainty no less than the specified threshold.
for example, assume i have files earth.txt and venus.txt containing lines like this: name: earth period: 365.26 days inclination: 0.00 eccentricity: 0.02 if i type grep period *.txt
prentice hall ptr, 1998, 0131103628.
- do you know what rwxr-xr-x means?
yes, it's a lot of detail -
turing&forename=alan - comment on this slide web services - suppose you want to write a script that actually does search google - construct a url: easy - send it and read the response: no problem - parse the response: hmm, there's a lot of junk on the page… - many first-generation web applications relied on screen scraping - problem is that whenever the site changes its layout, your application breaks - modern web services are designed more intelligently - most web services use the simple object access protocol (soap)
recovering the information is called decryption - an algorithm for encrypting and decrypting is called a cipher - original and encrypted messages are called plaintext and ciphertext respectively - all classical (pre-1970s) ciphers are symmetric - same key is used for both encryption and decryption - which means that the key can only be shared among trusted parties - asymmetric ciphers have two keys - each undoes the other's effects - (practically) impossible to determine one given the other - asymmetric systems are often called public-key systems - note: symmetric encryption is typically many times faster than asymmetric encryption - usual scheme these days is to use asymmetric encryption (slow) to exchange a one-time symmetric key - then use the symmetric key (fast) for the rest of the transaction - comment on this slide how asymmetric cryptography works?
creating a tree - usual way to create a dom tree is to parse a file -
and finally, some tests - if __name__
- numeric: - the standard numerical programming module for python, with good support for multi-dimensional arrays.
['a', 'b'] x = vals[99] else:  vals = {20 : 'a', 30 : 'b'} x = vals[40] except keyerror, e: print 'loop %d,  handling key errors:' % i, e except lookuperror, e: print 'loop %d, handling  generic lookup errors:' % i, e loop 0, handling generic lookup errors: list index out of range loop 1,  handling key errors: 40 we'll see in a later lecture how this hierarchy is implemented hint: it has something to do with objects… common exception types exception root of exception hierarchy.
clark doesn't confine himself to running make at 3:00 a.m.; he also covers ways of automatically re-running tests, building and testing installers, monitoring applications, and more.
what about cd ~gvwilson ? exercise 4.5: what's the difference between the commands cd home and cd $home?
if the programs change, there's a good chance the data file format has changed - or a bug has been found and fixed - updated makefile, and its output when no csv files exist, are: - all : hydroxyl_all.csv methyl_all.csv %_all.csv :
etc. - domain model is for talking to users; class diagram is for talking to developers - an easy way to spot flaws in a design - tangled lines are usually a sign of tangled flow of control - one big class in the middle that talks to all the others are usually a sign of poor decomposition - twenty-seven layers of derivation are usually a sign that you should switch to decaf - comment on this slide sequence diagrams - last piece of the puzzle is to connect the system's static and dynamic aspects - a sequence diagram shows what methods objects call to communicate with each other during a particular use case - note: creating class diagram and sequence diagrams is also iterative - “discover” methods as you realize there's no way for x to ask y to do something - sometimes realize that one entity ought to be split into several, or vice versa - again, the discussion around the diagrams is as important as the diagrams themselves - comment on this slide actual order - now that you know what the pieces are, let's put them together - phase 1: - identify real-world domain objects and their relationships - start drawing domain model diagram - draw use case diagrams - don't write the use cases themselves yet - phase 2: - start writing use cases - create robustness diagram - iterate, iterate, iterate - update domain model diagram to reflect your discoveries - phase 3: - draw sequence diagram for each use case - create class diagram by combining information from domain model and sequence diagrams - phase 4: - write code that implements class diagram - most important rule: if you change something, update everything upstream from it that refers to it - e.g., if you add a method while writing code, put it in the class diagram and sequence diagram - comment on this slide a note on tools - drawing uml diagrams by hand is tedious, error-prone, and counter-productive - “counter-productive” because there's no way to automatically check a hand-drawn diagram against your actual code - specialized tools to aid in constructing diagrams have been around a long time - span the spectrum from: - pure modeling tools: help users create diagrams, but don't integrate with code - round-trip engineering tools: can translate models into skeletal code, and modified code back into models - some integrate with ides, support multiple languages, can talk to databases, etc.
in chemical engineering last year, now doing an m.sc.
% ref assert false cite.setattribute('display', bibinfo[ref]) cite.setattribute('href', '%s#%s' % (biboutput, ref))
the waterfall model - figure 27.1: flowcharts - figure 27.2: entity-relationship diagrams - figure 27.3: class diagrams - figure 27.4: iconix:
but other editors can't display these - so disallow them, and require authors to use xml escape sequences for anything special - solution: make sure every character in the file is in string.printable - contains letters, digits, spaces, and common punctuation - easier to use this than to write our own regular expression - should we add this function to the existing validation program, or create a second program?
but it's bad to introduce members called param1 and param2 - alternative cure: use the introduce parameter object to combine co-occurring parameters into one value - smell: duplicated code - cure: use extract method once again, of course -
automated builds prev draft version 590 next how do you rebuild a program?
- komodo: - a commercial ide that supports perl, php, tcl, and xslt as well as python.
- do you know the difference between an absolute path and a relative path?
infile = open('messages.txt', 'r') lines =
- of course, it's not quite that simple - 2 + x and x + 2 don't always do the same thing - string concatenation - matrix multiplication - classes can define right-hand versions of operators, e.g., __radd__ instead of __add__
expaterror, e: print >> sys.stderr, e - then write readfile - def readfile(filename): if filename == '':
* 3; return py_buildvalue("i", val); } - returns null to signal error - otherwise, uses py_buildvalue to build a python structure with the result value - need some boilerplate to bring this function to the python interpreter's attention - /* table of module contents (handed back to python at initialization).
its first six chapters describe the many small ways in which we are all, male and female, are conditioned to believe that computers are "boy's things".
- how n is factorized is actually the important secret.
experimentdate is not null)
the analysis isn't as deep as that in knuth's monumentalthe art of programming, but that makes the book far more accessible.
- can you set up a development environment (including any libraries you need) on a fresh machine without heroic effort?
- factorizing n allows you to generate d. -
- internet groupware for scientific collaboration: - while it is now several years old, udell's examination of what the web could be, and how it could help scientists collaborate more effectively, is still as thought-provoking as it was when it first appeared.
what about rm *.[ch]?
dorset house, 1999, 0932633439.
/usr/bin/env python import cgi print 'content-type: text/html\n' print '' form = cgi.
if expr is a string, eval(expr) interprets it as if it had been typed in then and there - sometimes used to let people specify complex search criteria - http request contains "criteria=
ran 4 tests in 0.000s failed (failures=1, errors=1) - notice that test methods deserve to have meaningful names too - can you spot the error?
mercury.txt data/saturn.txt data/
- even account names and passwords are sent in clear text.
im = image.merge(im.mode, source) #
"b" (1, 2) b+c+ / abbcb => "bbc" (1, 4) - every parenthesized subexpression in the re is a group - group 0 is the entire match - text that matched nth parentheses (counting from left) is group n - mo.group(3)
parameters:  left - one of the base species for the search right - the other base species for the search threshold - the degree of certainty required  parameters:  the common ancestor, or null if none is found  see also:  image   -
infile = open(filename, 'r')
onethird 0.0833333333333 onequarter 0.0625 - note: every function has an attribute called __name__, which is the name it was originally defined under - # an example function.
our solution is to let programmers search and update the database programmatically using multiple languages.
- firefox: - the best web browser around, where “best” means “nicest interface”, “most extensible”, and “least insecure”.
using anecdotes, humor, and common sense, demarco and lister explain how important good physical space, aligning authority with responsibility, and clear direction are.
print '' - you'll use this frequently when debugging… - comment on this slide creating forms - html forms allow users to enter text, choose items from lists, etc.
while the focus is definitely on .net, gunderloy covers a wide range of other technologies, both proprietary and open source.
key, asin = sys.argv[1], sys.argv[2] amazon.setlicense(key) items = amazon.searchbyasin(asin) # handle errors.
print  'after try/except' before try/except ..first line of try block ..handling error!
- authorization: who is allowed to do what?
self.wrapandrun('a\n', 'b\n', '1\n') def testmiddlemismatch(self): self.wrapandrun('a\nb\nc\n', 'a\nx\nc\n', '2\n') - comment on this slide testing with classes - testing classes isn't much different from what we've already seen - create objects, call their methods, check the results -
later on, the "who needs a social life?" atmosphere of undergraduate computer labs drives many women away (and many men, too).
if you have to do any significant work on an attribute's value to figure out what it means, you should use an element instead.
flowcharts - more useful than advocates of structured programming in the 1970s believed
it covers everything from how to avoid common mistakes in c to how to set up a testing framework, how to organize multi-platform builds, and how to coordinate the members of a team.
the hypertext transfer protocol - http (the hypertext transfer protocol) specifies how programs exchange documents over the web - originally designed to support file download - has grown in many ways - three stages in a typical transaction: - this cycle may be repeated many times to display one web page - each image is requested and downloaded separately - comment on this slide http request - an http request has three parts - http request line - http method is usually either get or post - get typically used to fetch information - post usually used to submit form data, or to upload files - url is the thing the request wants - typically a path to a file, such as /index.html - but other information (discussed below) can be put there as well - entirely up to the server how to interpret the url - http version - headers - a set of name/value pairs - a given name may appear many times, i.e., may be associated with many values - examples: - accept: text/html - accept-language: en, fr - if-modified-since: 16-may-2005 - body is any extra data associated with the request - used with web forms, to upload files, etc.
- n and e are published.
having written the standard book on cryptography, schneier now argues that technology alone can't solve most real security problems.
- what does it cost for an empty function call?
- [clark 2004] discusses other things you can do to automate routine project maintenance tasks - prevents your project materials from rusting - which makes those materials easier to share - and gives you higher confidence that they're working correctly - gives you more time to concentrate on things that actually require human attention - comment on this slide exercises exercise 19.1:
- python cookbook: - an ever-growing collection of python tips and tricks.
please make your error messages more informative… for i in range(4): try: # raise exception if value is odd.
sub-match   programs: frog (version 1.1) frog (2.0 beta) bayes-hart         - figure 23.1: a simple form - notice that each  element has a name attribute - these become the names of the parameters that the client sends to the server - the input elements' values are the parameters' values - submitting the form shown above with default values produces: - os.environ['request_method']: "post" - os.environ['script_name']: "/cgi-bin/simple_form.py" - os.environ['content_type']: "application/x-www-form-urlencoded" - os.environ['request_length']: "80" - standard input:
def onequarter(a): return a/4.0 # test.
what goes into an a&e - no template is ideal for all a&e's - every a&e is different, because every problem is different - requiring team members to express their ideas in a fixed way just leads to fewer ideas - typical a&e has these sections:
throughout, castro strikes a perfect balance between “what”, “why”, and “how”, and provides a surprising amount of detail without ever overwhelming the reader.
for example, he explains why security systems must not just work well, but fail well, and why secrecy often undermines security instead of enhancing it.
a lot of software engineering books try to convey the same message about allowing for change, but few do it so successfully.
the book isn't just about psychology; you'll also learn a lot about how science gets done, and about the scientists who do it.
none) and (len(values) > 0),  'illegal input' left = min(values)
for line in instream.readlines(): total += len(line) instream.close() print  'output would have been %d bytes' % total output is 79 bytes output would have been 15000 bytes you can use os.popen2 to connect to the other program's input  and output simultaneously import os childin, childout = os.popen2('sort') for word in 'this is a  test'.split(): print >> childin, word childin.close() for line in  childout.readlines(): print line.rstrip() childout.close() a is test this
sybex, 2004, 078214327x. this practical, readable book is subtitled “tools and strategies for delivering your software”, and that's exactly what it's about.
expected - comment on this slide
the classic description of the one programming language every serious programmer absolutely, positively has to learn.
[demarco & lister 1999] tom demarco and timothy lister: peopleware.
over the course of forty-five short chapters, he ranges from the specific to the general and back again, tossing out pithy observations on the commoditization of the operating system, why you need to hire more testers, and why nih (the not-invented-here syndrome) isn't necessarily a bad thing.
every feature must be tested and documented - must also be added to the daily build, and to the installer - so qa, documentation, and developer support need to add time estimates to the a&e too - when all a&e's are done, the product manager collects the estimates - total time is (for example) 9000 work-days - but only 2000 work-days are available - fifteen people in development, qa, tech writing, and technical support - eight months of five days a week, minus statutory holidays - minus 20% for sick days, emergency bug fixes for existing customers, etc.
- re.search looks for a match anywhere in text - skips the "m", then ⌈a⌋ matches "a", and ⌈[bc]*⌋ matches the empty string - comment on this slide anchoring - if re.search looks anywhere in the line, how to find blank lines?
inside values - strictly speaking, attributes are redundant - you should use attributes when: - each value can occur at most once for any element.
- don't want to create “kitchen sink” classes - class queue(object): def __init__(self): self.data =
- same way, first encrypted with d and then with e gives the original.
then some simple rules most taken from [agans 2002] remember: never debug standing up the faster you try to work, the slower you'll go comment on this slide
well, ok, it will match the first three characters of "456" -
and, most importantly, why?
0 0.000 0.000 profile:0(profiler)
once everything has been read, sort the entries - note: you can pass your own comparison function to list.sort - import sys def countfind(counts, address): for x in counts:
- escape from the character's special meaning by putting "\" in front of it - ⌈\$⌋ matches a literal "$" , and ⌈\\⌋ matches a literal "\" - must write these in python as "\\$" and "\\\\" - two layers of compilation: - this can get very confusing, very quickly - "\t" is a tab character, which matches a tab character -
-g': doglossarycomplete
what should its creators have done instead.
what command or commands would you use?
prentice hall, 2004, 0131147293.
while i ", output[i] 0.0 => 0.0 0.5 => 0.166666666667 0.75 =>
comment on this slide prev top next version control prev draft version 534 next problem #1: synchronizing files - want to work on one set of files on three different machines - option 1: use a shared file system - difficult to set up - and even more difficult to make secure - inflexible: what if you're on the road?
rect(1, 1, 2, 2): print 'pass' else: print 'fail' except exception, e: print 'error', e error name 'overlap' is not defined - this is only one case out of many - how many tests should we write?
else: for i in range(len(other)): result[i] =
- in other words, some text encrypted with e and than encrypted again with d returns to the original.
[gamma et al 1995] applied the notion to object-oriented programming - now dozens of books, conferences, etc. - easiest way to explain is by example - singleton - synopsis: ensure that only one instance of a class is created - context: want every object that uses a class to use the same instance of that class - e.g., the graphics driver for the screen - forces: - there must be exactly one instance of the class - all objects that use the class must have access to that instance - solution: - make the constructor private so that other classes can't get at it - provide a static method for construction - have that method keep a copy of the first object it creates, and re-use it on subsequent calls - filter - synopsis: dynamically connect objects to transform a data stream - context: some computations most easily expressed as a sequence of transformations - e.g., image processing, or unix commands joined by pipes - allows uses to mix and match operations easily - forces: - every filter should read and write the same format, so that they can be chained together - it should be possible to chain filters together in arbitrary orders - solution: - have each filter implement an interface that reads and writes data - define special cases for sources (that only write) and sinks (that only read) - provide filters with a way to signal that they have nothing more to produce - visitor - synopsis: separate traversal of a complex structure from operations on that structure - context: want an easy way to do walk around a complex structure - e.g., visit each node in a graph once - forces: - many different operations may need to be performed - structure is complex enough that visiting elements is error-prone - the types of objects in the structure, and the ways they are connected, change infrequently - solution #1: create an iterator class with do-nothing methods that are called at specific times - this class takes care of things like remembering which nodes have already been seen - users derive their own iterators from this, filling in methods to do what they want - solution #2: create one iterator class that takes a callback argument - callback only provides methods that do things - iterator calls these at appropriate times - solution #1 is simpler, but: - some languages (like c) don't support derivation, so you have to use solution #2 - solution #2 allows you to re-use callbacks with different kinds of collections - not just about object-oriented design - user interface patterns - business patterns - anti-patterns (things to avoid)
[2, 11]) def testlong(self): self.assertequal(runningsum([-3, 0, 3, -2, 5]),
: - hossein bidhendi stephane bortzmeyer michelle craig simon duane paul dubois hans fangohr brent gorda adam goucher perry greenfield paul gries brandon king catherine letondal michelle levesque andy lumsdaine laurie macdougall keir mierle kit-sun ng dirkjan ochtman victor
- always include version control information in source files - data files are source files too!
what command could you use to append the listing to tmp.txt instead? exercise 4.9: what command(s) would you use to find out how many subdirectories there are in the lectures directory?
steve mcconnell: code complete.
' def setup(self): self.fixture = assignment() self.fixture.addassignment('bhargan', 'dishes')
once you know one, you can easily learn and use the others - widely extended - add-ons for measuring test execution times, recording tests, testing web applications, etc.
standard generalized markup language (sgml) - developed by charles goldfarb and others at ibm - a way of adding information to medical and legal documents so that computers could process them - large (500-page spec) and complex - 1989:
val is 1.0 ...in the else block comment on this slide when an error occurs, python actually creates an object to store  information about it typically an error message can choose to handle specific errors by specifying an exception type in the except statement e.g., handle division by zero, but
- convert it to a string (e.g., by printing it) to create the required http header - to use a cookie: - create a cookie - get the value associated with the environment variable "http_cookie" - pass that value to the cookie's load method - example: count the number of times a user has visited a web site -
[kernighan & ritchie 1998]
if you can do this you get immediately an a in this course.
sys.stderr, e except ioerror, e: print >> sys.stderr, e except exception, e: print >> sys.stderr, e import sys # look for the first matching line in a file.
' self.data.append(val) def deq(self): '''
set() for e in elts: if e.hasattribute(attrname): referenced.add(str(e.getattribute(attrname))) # show differences (if any).
how today's profile differs from last month's?
overview - trac is a python cgi program that provides: - a repository browser, so that users can inspect the contents and history of a version control repository - an issue tracker for managing a shared to-do list - mailing lists, to help groups stay in touch - a wiki for creating web pages and making links to other items in trac - a roadmap, for keeping track of upcoming milestones, and what's to be done for them - a dashboard, which graphs statistics about project progress and status - a timeline showing recent project activity - a weblog, which reports timeline events to interested parties - these are all integrated - to-do items can refer to web pages, which can refer to particular revisions of files, etc.
= socket.socket(socket.af_inet, socket.
os.path.join(rootdir, docid) if not os.path.isdir(dir): print >> sys.stderr, 'missing directory: %s' % dir return # find out what's there that we care about.
- go into the containing directory: cd /rotor - svnadmin create repo - can then interact with repository in two ways - directly through the file system: file:///rotor/repo - use this if you're working on the same machine the repository is on - through a web server: https://your.host.name/rotor/repo - use this if the repository is on a remote machine - note: requires your system administrator to configure the web server properly - https (instead of http) means “use a secure connection” - to get a working copy (assuming you're using a web server): - svn checkout
self.assert_(dependson(self.f4, 'c', 'd')) def testbackward(self): self.assert_(dependson(self.f4, 'b', 'a'))
testcase - define one method for each test - name must begin with "test" - takes no argument (other than self) - returns nothing - call unittest.main() - what the framework does: - search the program to find classes derived from
and probably some trouble from secret services.
experimentdate <> 1901-05-01) and (experiment.
== 0: raise valueerror, "can't dequeue from empty queue" val = self.data[0] self.data = self.data[1:] return val def __len__(self): return len(self.data) def empty(self): return self.__len__() == 0
for testcase in tests: try: args, expected =
any index not encountered in this loop doesn't matter, since it corresponds to something that's zero - def __mul__(self, other): '''calculate cross product of a sparse vector with something else.'''
def __str__(self): return '%s (%s)' % (self.name, self.email) class professor(person): def __init__(self, name, email, office): person.__init__(self, name, email)
the most popular open source database around (though many discerning users prefer postgresql).
[skoudis 2004] ed skoudis: malware.
debugging with print statements is: error-prone: adding print statements is a good way to add typos particularly when you have to modify the block structure of your program  to fit it in time-consuming
- alternatives - ant - primarily for java - less platform-dependent… - …but just as hard to read and debug - integrated development environments - most are proprietary and platform-specific - scons - give users a library to manage dependencies and actions - “makefile” is actually a small program - more powerful, and debuggable, but steeper learning curve - once builds are automated, the next step is to run them continuously - every time someone checks something into version control, rebuild the software (or site), and re-run tests - cruisecontrol and bitten will both handle the details - comment on this slide exercises exercise 14.1: how can you stop make from removing intermediate files automatically when it finishes processing?
this is when you do your hard thinking (while you're still fresh)!
how the profile differs across machines?
exercise 28.2: can you find out when your manager expects you to complete your current task (without asking her directly)?
- do you document as you program, and keep your documentation in your source files?
- so learn how to do it well - talk about tools first (because they'll make everything else less painful)
- what do customers want to be able to do that they can't right now?
== '__main__': fixture = '''
- domain model diagram shows relationships between domain model elements - if you don't get the domain model right, everything else will go wrong - note: writing use cases, and defining a domain model, is always iterative - discussion about use cases uncovers new domain model elements - discussion about domain model uncovers new use cases - use a whiteboard, colored markers, and patience - like any notation, domain model diagrams exist to help you think and communicate - add comments as appropriate to make meaning clear - comment on this slide robustness diagrams - re-read the use cases, and classify the objects in the domain model into: - boundary objects, which actors use to communicate with the system
the order of the values doesn't matter.
more shell prev draft version 584 next redirecting input and output - a running program is called a process - by default, every process has three connections to the outside world: - you can tell the shell to connect standard input and standard output to files instead - example: save number of lines in all text files to words.len - $ wc -w *.txt >
% outputfilename break else: output = file(outputfilename, 'w')
none) and (len(values) > 0), 'illegal input' left = min(values)
- a race condition - solution is to lock the file - as the name implies, gives one process exclusive rights to the file - after the first process acquires the lock, any other process that tries to read or write the file issuspended until the first releases it - mechanics are different on different operating systems -
false - note: if no glossary file specified, don't check glossary items at all - now have enough logic that it's worth reorganizing the main processing loop -
file('%s.%d.dat'%(c[0],i+1),'w') print>>output,transpose.transpose(b[i]) output.close() import sys, os import reader, splitter, transpose inputfilename = sys.argv[1] lines = reader.readlinesfromfile(inputfilename) sections = splitter.splitintosections(lines)
- modern computer systems are so complex that it's practically impossible to figure this out from first principles - so write the code, profile, and then start tuning - comment on this slide exercises exercise 16.1: what percentage of your code is tests?
formatting rules - for our purposes, an xml document contains elements and text - full spec allows for external entity references, processing instructions, and other fun - elements are shown using tags - must be enclosed in angle brackets "<>" - full form: … - short form (if the element doesn't contain anything):  - elements must be properly nested -
everything is clearly explained, and illustrated with well-chosen examples.
note: the purpose of this exercise is to teach you how to go back in time to get old versions of files—while it would be simpler in this case just to edit bio.txt, you can't (reliably) do that when you've made larger changes, to multiple files, over a longer period of time.
[friedl 2002] jeffrey e. f. friedl:
- no team ever works at 100% capacity, so don't schedule that way!
>= 0: print '%s contains tabs' % filename break infile.close() if __name__
import sys def checktabs(filename, infile): '''look for tabs.''' for line in infile.readlines(): if line.find('\t')
if we try to remember more than that, we either: - make mistakes, or - create chunks so that we can remember things at a higher level - [chase & simon 1973] studied what happened when novice and master chess players are shown actual and random positions - masters (naturally) remember actual positions better -
- essential tool for managing long-lived or multi-person projects -
- every exploit attacks one or more of these - convince the system you are someone else - a regular user (if you're trying to buy stuff with someone else's credit card) - an administrator (or someone else with special privileges) - convince it that you're allowed to do something you're not - e.g., give yourself administrative privileges - circumvent its enforcement of the rules - a browser bug lets javascript in a page send copies of your cookies to a villain's site - when analyzing security, look for ways to compromise the three a's - use defense in depth -
content-type: text/html\n' print '' for line in results: print '', cgi.escape(line), '' print ''
help you write more code, faster - comment on this slide who you are - user stories - important part of designing user interfaces for mass-distribution software - helps make discussion of features and usability more concrete - harry - 27; b.sc.
remember to provide a meaningful comment when committing the file!
the operation isn't a flaw in this code (which is what assertions are for) - question: should point2d.setx and point2d.sety have raised valueerror as well?
dictionary methods - table 10.2: common exception types - table 14.1: automatic variables in make - table 15.1: typical logging levels - table 17.1: basic regular expression operators - table 17.2: anchoring regular expressions - table 17.3: regular expression escape sequences - table 17.4: regular expression object methods - table 18.1: common xml escape sequences - table 18.2: common xhtml tags - table 18.3: more xhtml tags - table 20.1: bitwise operators in python - table 20.2: format specifiers in python - table 22.1: url encoding - table 23.1: cgi environment variables - table 23.2: common mime types syllabus prev draft version 327 software carpentry - course outline - acknowledgments introduction - motivation for course - need to improve quality as well as efficiency - key idea - target audience - self-test - course philosophy - topics - what you will need - recommended reading - typographic conventions version control - motivation for this lecture - version control systems - cvs and subversion - basic operations - command line and gui clients - merging conflicts - versioning - binary files - rollback - getting started - subversion command reference - reading subversion output - branching and merging shell basics - motivation for this lecture - difference between shell and operating system - the file system - basic commands - creating files and directories - wildcards more shell - input, output, and redirection - pipes - environment variables - the path variable - basic tools - unix ownership and permission - windows ownership and permission - some more advanced tools basic scripting - introducing python - interactive use - batch use - variables - printing and quoting - numbers - booleans - comparisons - conditionals - while, break, and continue strings, lists, and files - strings - indexing - string methods - lists - list methods - for and range - testing for membership - aliasing - tuples - file i/o functions, libraries, and the file system - defining functions - variable scope - aliasing - default parameter values - variable-length argument lists - functions as objects - creating modules - math library - system library - representing and manipulating times - file system programming - the os.path module - the __main__
- can you trace everything you release back to the software that produced it?
== '__main__': import hotshot, hotshot.stats filename = 'substr.prof' num = int(sys.argv[1]) prof = hotshot.
- every original data file should go under version control, and have revision information stored in it - can record author and date of last change as well as version number - carry this information through when processing files - comment on this slide executable documentation - also increasingly fashionable to talk about executable documentation - things that describe the program in ways that the computer can check - assertions - assertions at the top of a method are usually checking pre-conditions that must be true for the method to run properly - those at the bottom are guarantees of what will be true after the method has run - unless there are return statements embedded in the middle of the method… - …which is another reason they're a bad idea - assertions in the middle of methods are usually checking: - invariants (i.e., number of items in the searched list, plus the number in the tosearch list, stays constant) - old bugs: common to introduce assertions while debugging, then leave them in to detect the bug's reappearance - when reading code, assertions let you compare your current understanding of the code with what it actually does - if you see assert x  import sys > def foo(x, y): > for i in x: > y += 1 > print 'result:', y > def bar(z): > if z  elif z == 0: !
doc.documentelement root.setattribute('name', 'mars') period =
"%s" (%d, %d)' % \ (pattern, text, mo.group(), mo.start(), mo.end()) b+ / abbcb =>
create a dictionary by putting key/value pairs inside {} {'newton':1642, 'darwin':1809} get a value from an existing dictionary using [] (just like  everything else in python) birthday = { 'newton' : 1642, 'darwin' : 1809 } print "darwin's  birthday:", birthday['darwin'] print "newton's birthday:",  birthday['newton'] darwin's birthday: 1809 newton's birthday: 1642
but they remember random positions worse - they're “seeing” patterns that aren't there - figure 15.2: actual chess position figure 15.3:
- developers don't know enough (don't have enough customer contact) to make this decision - usual way to do this is to build a 3×3 grid - product manager is not allowed to shave developers' time estimates - if she is, developers will start padding their estimates… - …or supplying random numbers, secure in the knowledge that they won't be able make the deadline anyway - letting managers make up “science fiction schedules” is one of the most common mistakes companies make - the other is not doing enough testing early on - yes, customers (and your marketing department) will complain if their feature doesn't make it onto the schedule - but putting it in the schedule when you know that schedule is fiction doesn't improve the chances of it getting implemented on time - it's better to live up to small promises than break big ones - end result of a&e process is a schedule that everyone believes is achievable -
unlike most “how to do it better” books, it isn't try to sell any particular practice or style, which adds even more weight to mcconnell's carefully balanced opinions.
- how long it takes that program to run (machine time) - different languages make different tradeoffs between programming speed and execution speed - python is: - like the shell, only better - freely available for many platforms - widely used - well documented - (much) easier to read than perl - material that took three days to teach in perl took only two to teach in python - follow-up surveys showed significantly higher retention rates - (much) slower than c/c++ or fortran - 10-100 times slower than compiled, optimized code -
[castro 2002] elizabeth castro: html for the world wide web.
do you think doctest makes it easier to test small problems?
/usr/bin/env python import sys, cgi import cgitb; cgitb.enable() # get existing messages.
- comment on this slide summary prev top next - there's a lot of hype in hypertext - haven't yet heard anyone claim that xml will cure the common cold, but i'm sure it's been said - strengths: - one set of rules for people to learn - one parser can handle all of their data - at least, the low-level syntactic bits—still need to figure out what all those tagsmean - weaknesses: - raw xml is hard to read -
would it be possible to write something similar for c, java, fortran, or mathematica?
but this is all just convention: you can call files (almost) anything you want - files are stored in directories (often called folders)
prev top next basic scripting prev draft version 590 next why python?
0.3125 - example: apply several functions to a single value - # apply each function in a list to a value.
- do you have a schedule with small binary milestones?
- 10002 is the most negative 4-bit integer, 01112 the most positive - asymmetric: there is one more negative number than positive - since there has to be room for 0 in the middle - comment on this slide bitwise operators - like most languages, python has four operators that work on bits - common to store several independent yes-or-no flags as a set of bits - example: need to record whether a sample contains any mercury, phosphorus, or chlorine - use bit 1 for mercury, bit 2 for phosphorus, bit 3 for chlorine - figure 20.1: using bits to record sets of flags - define constants to test for particular elements - # hex binary mercury =
/usr/bin/env python - this tells unix to look up a program called python, and run it with the rest of the file as its input - option 3 (windows only):
this book presents and analyzes patterns that come up again and again when programs are being reorganized.
and that's it - at least, so far—trac is under active development - all you need to run a small or medium-sized project - very useful for geographically-distributed collaborations - just as useful when one person has to manage his or her own work over the course of months or years - harder to lose a database than a lab notebook… - if trac is too small for your needs, there are many larger alternatives - sourceforge is by far the most famous - will host open source projects for free on their machines - comment on this slide exercises exercise 25.1: can you find out what bugs are currently being worked on?
once again, version is typically http/1.0 - status code is a number indicating what happened - 200: everything worked - 404: page not found - status phrase repeats that information in a human-readable phrase (like “ok” or “not found”) - headers are once again name/value pairs -
- use docstrings instead of comments to document classes and methods (and functions) - unlike comments, they are kept at runtime to provide interactive help - print queue.__doc__ print queue.enq.__doc__
- everyone has to (potentially) eat their own cooking - coding standard: essential to making collective ownership possible - programmer welfare - sustainable pace: no one works overtime - because in almost all cases, overtime actually puts the project behind - tired people make more mistakes, which then have to be fixed - and fixing things downstream is more time-consuming than slowing down and getting them right in the first place - programmer turnover delays projects as well - lose all the implicit knowledge in the departing programmer's head - remaining team members have to spend time bringing newcomers up to speed - comment on this slide the planning game - at the start of each iteration, customers write user stories to define the functionality they want added or changed -
- everybody on the same sub-net can easily track them.
- because they require the database to serialize some operations - which slows the system down - comment on this slide client-side web programming prev draft version 534 next small pieces, loosely joined - the unix command line was the world's first component object model - allowed programmers to build small pieces, then connect them in arbitrary ways - key features: - low barriers to entry: it's easy to add one more tool to the toolbox - common data format: stream of strings - common communication protocol: stdin, stdout, and zero/nonzero exit codes - the web succeeded (in part) because it followed the same model - data format: html (now xml) - communication protocol: http - this lecture looks at how to build programs that get data from the web - next lecture will discuss simple ways to build programs that supply data -
steve mcconnell: software project survival guide.
- comment on this slide concurrency prev top next -
['2:'] - don't want to search the string to find the longest leading sequence of digits - need a better way to extract the text that matched sub-patterns - result of re.search is actually a match object that records what what matched, and where - mo.group() returns the whole string that matched the re - mo.start() and mo.end() are the indices of the match's location -
missing docstring w: 0:
database tables - figure 21.2: a combined table - figure 21.3: join in action - figure 22.1: http request cycle - figure 22.2: http request format - figure 22.3: http response format - figure 22.4: remote procedure call using http - figure 23.1: a simple form - figure 23.2: three tier architecture - figure 24.1: secure communication with asymmetric keys - figure 25.1:
prentice-hall, 2004, 0131014056.
how would you check it made it (other than wandering over to the printer and standing there)?
prev top next extreme programming prev draft version 588 next code early, code often - knowing how to write code doesn't tell you how to run a project - where do you start?
== '__main__': try: if len(sys.argv)
o'reilly, 2005, 0596007973.
do the following: a) create blue/ex01/planets.txt, and add the following lines: mercury venus earth mars jupiter saturn commit the file.
dav/2 svn/1.1.4 mod_python/3.1.3 python/2.3.5 php/4.3.10-9 mod_ssl/2.0.54 openssl/0.9.7e server at pyre.third-bit.com
what if you want to ignore changes in case (i.e., treat lowercase and uppercase letters as the same)?
[] for f in functions: y = f(value) result.append(y) return result # one half.
set() for x in links: temp.add(x[6:-1]) links =
else: freq[name] = 1 # display.
i really wish someone had given me something like this book when i took my first programming job.
and you need to reorganize desk layout to prevent back and neck problems -
== 0: continue print '...bottom of loop', a top of loop 5 top of loop 4 ...bottom of loop 3 top of loop 3 top of loop 2 ...bottom of loop 1 top of loop 1 - again, don't abuse this by writing loops that are hard for other people to figure out - if only because “other people” includes you three months from now - comment on this slide strings, lists, and files prev draft version 546 next where we just were - python is a nimble language with: - numbers, strings, and booleans - conditionals ( if, elif, and else) - while loops (with break and continue )
what's wrong with print statements - many people still debug by adding print statements to their programs - “gee, i wonder what the value of maxtemp is when i call resolve?” - debugging with print statements is: - error-prone: adding print statements is a good way to add typos - particularly when you have to modify the block structure of your program to fit it in - time-consuming - all that typing… -
element_node: for child in node.childnodes: self.visit(child) self.after(node) def donothing(self, node): pass before =
- most programming languages require you to compile programs before running them - e.g., turn c source files into machine-specific object files - which usually have a .o
its first sentence says, “this book tells you how to find out what's wrong with stuff, quick,” and that's exactly what it does.
- do you use a symbolic debugger?
compiling - the regular expression library compiles patterns into a more concise form for matching - you can improve a program's performance by compiling the re once, and re-using the compiled form - use re.compile(pattern) to get the compiled re - its methods have the same names and behavior as the functions in the re module - e.g., matcher.search(text) searches text for matches to the re that was compiled to create
it may not be glamorous, but knowing how to do it efficiently is essential to being a good programmer.
if the child is trying to write to the parent while the parent is trying to write to the child, both are blocked - the operating system can only hold on to a limited amount of input or output data at a time, so increasing the buffer size only delays the problem - figure 10.6:
binary data prev draft version 546 next isn't it all 'binary'?
and of course, there's always bug fixes to the previous version to test… - qa's usual role is to find bugs in the finished product - yes, developers should do this as they're coding… - …but in practice, they are usually too focused on particular features to find wider issues - developers also tend not to be good at testing - subconsciously don't want to find problems - focus on the parts they're most familiar with, rather than the product as a whole - qa's real job is to figure out why bugs are happening - “trying to improve the quality of software by doing more testing is like trying to lose weight by weighing yourself more often.”
- python check_tabs.py file1 fil2 file… will work… - …but typing in a bunch of filenames every time would be annoying - which means that we wouldn't do it as often as we should -
print "calling in loop..." for f in [original, alias]: print f.__name__, f(5, 8) calling original: original 3.5 calling alias: original 3.5 calling in loop...
- argouml is probably the most advanced open source uml tool available - most programmers haven't adopted uml modeling tools because: - the tools are expensive and/or difficult to learn - if people can't do something useful with a tool in the first hour, they usually stop trying -
there are lots of simple diagrams, and a short glossary; all that's missing is hype.
birthday.values() [1912, 1642, 1809] update copy keys and values from one dictionary into another.
next n bytes - result is returned as a string, but there's no guarantee its contents are readable - if the file is empty, returns none - f.write(str) writes the bytes in the string str - caution: must open files in binary mode on windows - input =
how would you get help on this command?
if os.environ.has_key('http_cookie'): cookie = cookie.
john goerzen: foundations of python network programming.
- really don't want to write each method twice - anything repeated in two or more places will eventually be wrong in at least one.
mike mason:pragmatic version control using subversion.
- use introduce parameter to give callers a way to signal exactly what they want… - …or use pull up method to move shared code into parent… - …and form template method to have that shared code call something that each child class defines - smell: complex boolean expressions in conditionals - cure: introduce explaining variable to give sub-expressions meaningful names - particularly effective when it's used to turn nested if-then-elses into a lookup table - same benefits as patterns: communication shorthand, and education -
this goes under version control like anything else… - …but should not then be “grown” into the product - how long will it take?
- default output gives the stack trace, to help you find the problem - you can also provide messages to the testcase.assert family of methods - tests are run in an arbitrary order - classes store methods in a dictionary for fast lookup - means that there's no guarantee they'll be run in the order in which you defined them - yet another good reason to make each test independent - fix the method and re-run the tests - def runningsum(seq): result =
the better developers understand the product and the technologies it uses, the less risk there is of a lightweight design leading to nasty surprises - the greater the cost of delivering the wrong thing, the more detailed the design should be -
it finds lines in files that match a pattern and prints them out.
- still have to remember to push and pull exactly the right files at exactly the right time - option 4: get the computer to do the work - keep a master copy in one place - use a program to synchronize working copies when and as needed - comment on this slide problem #2: undoing changes - often want to undo changes to a file - start work, realize it's the wrong approach, want to get back to starting point - like “undo” in an editor… - …but longer-lived—keep the whole history of every file, forever - similarly, often want to see who changed what, and when - when working in teams, want to see what your partners did - bugs are more likely to be in fresh code than in code that's been running for a long time - comment on this slide solution: version control - solve both problems at once by using a version control system (vcs) - mechanics: - keep the master copy of every file in a central repository - actually, keep all old versions of every file - everyone on the development team does their work in a working copy - when you're ready to share your changes, you commit them to the repository - the vcs saves the old version of the file, then writes your changes on top - also records the time of the change, who made it, and a comment - take a look in a moment at what happens if two or more people try to make changes at the same time - comment on this slide cvs and subversion - two open source version control systems in widespread use - many others available commercially - if you can afford it, use perforce - cvs (concurrent version system) - invented in the 1980s - very popular, but showing its age - flaw #1: it keeps track of each file separately -
rect(2, 2, 3, 3) result =
lutz and ascher cover the entire core of the language, and enough of its advanced features and libraries to give readers a feeling for just how powerful python is.
what would you use to display lines 50-100?