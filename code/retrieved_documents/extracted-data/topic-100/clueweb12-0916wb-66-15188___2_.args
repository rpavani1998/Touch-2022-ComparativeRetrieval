the other thing that i believe to be a killer reason for using python: proper support for unit testing: if we could inculcate testing into the scientific development workflow, i, for one, believe a lot of time would be saved in scientific coding.the motivation for that has been my contention that python is easy to learn (particularly on one's own using a book supplemented by the web) - and that's important when we are mostly hiring scientists who we want to code, not software engineers to do science, the python syntax is conducive to writing "easier to maintain" code (although obviously it's possible to write obscure code in python, the syntax, at least, promotes easier-to-read code).as scientists they need to be able to unpick the internals and be sure they trust them, but they'll also be lazy; once trusted,tools need to be simultaneously easy and extensible.my feeling is that the big advantage of python over matlab is the integration with all the other bits and pieces one wants as soon as a workflow gets sufficiently interesting (guis, databases, xml parsers, other people's libraries etc), and the easy extensibility.i'm another dedicated pythonista - i've been using it for quite some time now, and it's my go-to tool for tackling virtually any programming challenge), mainly because it's so simple to bang out a cohesive, well-structured program in a short period of time.ideally of course, one wants to develop toolsets that the community will start to own themselves, so that the ongoing maintenance and development doesn't become an unwelcome burden (even as we might invest ourselves in ongoing support, we want that support to be manageable, and even better, we might want collaborators to take some of that on too)!we've seen that i believe python is easy to learn, and that at least two uk departments have built their courses around it.given the importance of statistics to our field, and the fact that r is in relatively common usage and has anoutlet for publishing code we should also keep it in the mix.python helps with the latter too: with documentation utilities vastly superior to anything available in the idl (and i suspect, matlab) space.in principle that means staff should be more flexible in what they can do (both in terms of their day jobs and in backing up others) without learning a plethora of languages.overall, it appears that a ranking of programming language provision would be: c++ matlab python off the cuff comments from a member of the institute of physics asked if they had any insight into the provision of programming languages in a wider group of physics departments suggest these results aren't unique to the russell group departments (but also that python, having been off the radar, is increasing rapidly).it's too verbose, it requires too much "expertise", and it's a nightmare to maintain.however, most ordinary idl users are likely to be able to read python very easily - even if they have never seen python before: for a time we used to give candidates for jobs at the badc a bit of python code and ask them to explain what it did, and we only did that to folk whohadn't seen python before.the context is clearly that we have data producers and data consumers - who are not the same communities - and both of whom ideally would use the same toolset.some of those scientists are very familiar with idl - but my gut feeling is that those are also the very same ones, that, if they spent an afternoon familiarising themselves with python, would find they can go faster and further with python.