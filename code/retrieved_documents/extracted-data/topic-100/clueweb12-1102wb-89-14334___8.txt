[[f[1:-1] for f in line.split("\t")] for line in fileinput.input()] contacts =
i think that readable code is useful in a development team that has different programming skills.
i don't claim to write beautiful code, and honestly i suspect i don't.
modules, support, structure, community, and the internet/open source mentality are paving the way for great new computer ideas and languages, as well as changing opinion that programming is just for "geeks".
and this idiom is used throughout perl.
we use php for such programs.
there cannot be a perfect language.
you also copy the whole list with the second list comprehension, which can be transformed into a for loop after the in-place sort.
i've seen beautiful, clean, maintainable, performant perl code, and horrible, ugly, slow python/ruby code."
yes, specially because of the sigils thing.
:-) the whole argument that one can write easy-to-read perl code is, to me, kind of vacuous.
carl williams there is a comparison for python, perl, and ruby as far as job demand and median salary goes at http://www.odinjobs.com/odin/marketstatcompare?id=51907&q=python+vs+perl+vs+rubypaul pomerleau november 1, 2010 1:37 pm
kerry kartchner i find it interesting that, particularly with the python and ruby solutions, nobody chose to use classes.
anyway i found python to be a good choice also.
i was trawling through the web for python, ruby, perl comparisons when i saw your excellent discussion.
good programmers rarely brag about it, rather they just know that it's what they're paid to do, and they do it instinctively.
both are working towards integration with cocoa, but again python is further along.
contactrecordswhere contactme is not 1.
that improves readability when you try to follow.
larry and company have gone through great pains -- years of polishing and fine tuning -- to get perl to have that well-worn comfortable feel.
this is because the modules tends to focus on a much more clearly defined target, which makes the context much narrower.
ben may 13, 2009 10:54 am
the microsoft world is a nightmare.
can you also even imagine writing a module containing wrapper methods around the infinity of possibilities regular expressions give you?
p.s. sorry for my englishthoran hi, thanks for the comparison.
http://graphcomp.com/opengl/benchmarks perl provides opengl performance comparable to c, and much faster than python; i suspect that ruby will also be faster than python, and close to perl.
edward chua october 2, 2009 1:50 am wow.
i've deliberately tried not to be too terse.
[] for line in fileinput.input(): record =
python is a hybrid o-o language that is a good replacement for basic as a introductory tutorial language, yet has sufficient power to displace perl for many tasks in the perl domain.
am try http://perldoc.perl.org/ then click on "tutorials".
i never really did proper learning for programming, only bits of c or php here and there, and as such usually write horrid code.
perl derived some of its functionality from lisp, and since ruby is perl-inspired, i'd expect it has a similar chained mechanism.
michael xtopher: (1) google has such big computations that they have to split them across multiple processes (and machines), anyway.
so there's no readability problem in our project.
suppose we have to automate the server configuration process.
what happens if you get hit by that bus on the way home?
the best easy book to learn perl i´ve ever read is perl and cgi for the world wide web: visual quickstart guide, from liz castro.
what we really like in perl is very huge cpan archive.
also, when i write .net code for work (luckily .net is only 30% of the work, i yearn for the freedom of perl, bash, and c on linux.
before i came to it, i was an experienced, long-time perl programmer with major doubts about my chosen language.
and the pass by reference...
i’ve been using perl for [...]sam june 23, 2008 7:36 am michael: understand this: 1)
perl allows for very clear and concise code.
read eric raymond's 2000 article on why python?
much of any language is going to be planning, and figuring out what works, does so consistently, and provides benefits over other languages.
all developers receive those updates).
granted, sometimes that is ourselves, but in those cases, like so many of us have pointed out, we'll just do things our own way and cleanliness and commenting go out the window, fast. :-)
in your code; i turned it) as early as possible in the stream.
i learned the basics quite quickly and soon i could write useful scripts to make my life easier.
s/\s+//g is perfectly readable.
since most of the time you don't know who this will be, i'd always go for perl as it's the most widly known scripting language - even if it gives you the most rope to hang yourself.
def parseline(line): fieldlist = line.split('\t') return customer(int(clean(fieldlist[27])), clean(fieldlist[34]), clean(fieldlist[17]))
summary: ------- for high calculation and graphics - use python [scipy, wx are just gr8] for standalone apps - use python
in the comments of those who spoke for perl i detect something like a certain infatuation with the language and i can relate to this.
i plan to do the same for ruby shortly.
i much prefer python's 'there must be one obviuos way of doing it' over perl's 'there is more than one way...'.
often projects become a simple stitching together cpan modules.
perl is a powerful language, but i think it’s ugly and encourages writing bad code, so i want to get rid of it.
here's one of the possible (simplified) ways i would do it: it should comply with your requirements as described above.
the reason being that the team that would maintain it afterwards knew python the best.
i decided to redo the ruby version since that is my language of choice, and have made this much shorter (slightly more than 50% fewer loc) and quite a bit more efficient (by rejecting unwanted records as they are read, rather than going through all records again later and also by not sorting before rejecting), and made a small change to the output---which was to remove the contactme field, since i would expect that it would not be required any further.
only few people can play with 'pyrex' perl - 2, python -1 3) mod-perl better than mod-python
is not an in-depth manual.
assume that  there are no quotation marks in the interior of the field.
i don't know about you, but i'd rather juggle two sets of operators than have to convert my numberish strings to numbers explicitly.
create another array, records and fill it with all the records.
as someone in the thread pointed out ... perl is like art and i agree.
one thing that python has and gcc doesn't is, have you ever seen a current, stable gcc windows xp x64 binary?
for your example, creating a class is needless overhead unless this is embedded in a larger context.
good programmers are rarely flashy.
and had it not been for the success of python and its influence to fix the ugliness of perl code.
ruby made it easy to go from perl, it has the variable syntax to lure perl programmers over.
[...]old unix guy march 25, 2008 8:22 pm
you can, of course, incur an expensive fork process, but then passing values between the seperate processes becomes expensive.
ruby on rails is a home run in that problem domain.
but then again, perl's syntax doesn't bother me at all, and i can usually read right through (its kind of like a warm blanket ;-).
the good languages each have a problem domain (or several) that they are best suited for.
marktroy may 21, 2007 10:09 pm this requirement is most efficiently done in standard bourne shell... % cat x "skutitle" "contactme" "email" "product1" "0" "foo@bar.com" "product2"
#!/usr/bin/python import sys import string def clean(quotedstring): return quotedstring.strip()[1:-1] #get rid of whitespace and slice the quotes off the end.
i have been using perl for many years now, and have also been involved with much java and some .net.
i assumed the comment-taker was smart enough to html-ificate the text.
it could have been anything, of course it just have to be meaningful in the context..
i found all versions of all programs above very readable (perhaps i'm gifted?
programming is complex why would i use a language thats hard to read and understand.
john november 13, 2009 7:22 pm awesome thread.
but arguments could be made for either, and really not a good reasons for choosing either.
but if you write "noisy" code, then comment... dammit
first time i am planning to use one scripting language for the common administrative purpose.
[[r[skutitle], r[contactme], r[email]] for r in  records] contactrecords.sort() # default sort will group by sku title  contactrecords =
talking about a waste of time, finding names to those methods would a huge one.
you shouldn't have to comment every second line to make it clear why you are doing something.
it is recommendend to do things while (<>) instead.
do i comment on discussions/blogs/forums etc.
anyone reading that sort of code at work is probably going to have nightmares with gigantic (^[a-z])'s...
this task, which required 2 full time employees to assemble the catalogue every fortnight, is now done by the program and through the internet, sparing my employees who can now perform more productive work.
in my case -- and it's been 18 years since i wrote my first perl program -- perl has time and again proven its value in the must diverse and unsuspect circumstances.
i am back to my beloved perl and i will never sin again.
i'd been writing perl for many years, but i found i could accomplish the same tasks in much cleaner ways with far fewer mistakes coding in ruby.
if customer.contactme: customers.append( customer) customers.sort( lambda x,y: cmp(x.skutitle, y.skutitle) ) for customer in customers: print customermichael
once you get the hang of these idoms then you can use them throughout.
sh sed -e 1d -e 's/"//g' | awk 'begin { fs="\t" } $28 ==
i still don't know which language is better to become more familiar with.
based on existing matured capabilities, rather than anticipating x will reach y state if modules are ported ...etc, which is not guaranteed.
i like and use all three, altough i am currently more proficient in python...n3xtl3v3l february 22, 2007 5:30 pm
read each line of standard input and break it into fields at each tab.
but if the aim here is to accomplish a goal and speed is not a crucial factor, then the following perl code would be a better solution, as it is more self-documenting.
i simply like expressive, clean languages.
ruby and python are far more similar than they are different.
you must learn the power of generators in python.
nowadays though, the programmer's time should be worth more than the computer's, so rapid development time and maintainability are key.
if you put one statement in incorrect place, ofcourse wehave to debug.
perhaps in that sense python scores better.
» [...] two (1,2) interesting personal comparasions of perl vs ruby vs python (both evaluating ruby and python after thinking about replacing perl — not suited for perl addicts ;-) [...]sciolizer june 19, 2006 8:03 am "specialization is for insects.
java is slooowly gaining the (lower-order) functional features that c# has been piling on recently.
well, after having gone through all the chapters and done many of the exercises, i realized that... perl and my brain go in different directions.
the algorithm i chose was just the first one that came to mind.
in my first job i had to program monte carlo simulations and markov-chain algorithms in c, which after compilation was send to mini computers that required a couple of hours to come back with the results.
this has got to be the most surreal thread i've ever read.
the beauty of perl is what really grabbed me, and that was after i was a professional developer for 10+ years.
the reason i found this is that i was asked to help with something in my company which may require file/text manipulation for a conversion of data from one system to another.
personal bytes » blog archive some links..
even if you are concerned by readability, perl is very customizable.
ruby follows the perl idiom of bazillions of ways to accomplish the task, but only gajillions (which is much less than bazillions) of them are ruby-esque.
i think the python version is generally the cleanest to read—that is,  it’s the most english-like.
but get real - almost nobody does.
so, the solution is regardless the language, do comment when is (even barely) worth it.vlad december 31, 2008 5:24 pm btw, the comment "#--- contactrecords is an...." is just an example...
if japh wrote his first perl code 18 years ago then he was using perl before larry wall invented the language!
ruby follows perl with its integrated regex support.
27 skutitle = 34 readlines.collect { |line| line.split('\t').collect { |field| field[1..-1] } }.find_all {
"thats just seems stupid" ------------learn---------------------------- ------------and----------------------------- -------------use--------------------------- -------------python------------------------ python may or may not be the language that brings about a computer-programming-for-everybody world.
i was very proficient with rexx (if anyone knows that that is) which i loved.
also, i can iterate that we can write clean code with perl also.
if i werejust writing this in perl, i might  have tried to avoid perl’s messy syntax for nested arrays and instead  used an array of strings.
ruby has a truck load more functions to do things which means you have to remember them, where as perl has a small set of functions that can be manipulated to do all kinds of things.
since this is a plain pipe&filter operation, the way to write it in ruby is imo using filter ops.
but it is hard to run the scripts without the example stuff.
recently a friend asked me if i could help him write a script for manipulating a dataset in text-file for his research project.
i want someone (not necessarily someone conversant in the language!) to be able to go back to the code and quickly grok what it is doing.
pm list comprehensions are by now very idomatic in python.
i know well, i have to learn a fresh.
if i'm to create an script only for my self, and i do not need to read it again and modify it a month later, a super-optimized-obfuscated on line programs makes me feel very happy and proud ( but i don't share that code, otherwise i have always to add comments like the shell version )
it may be a bit more true for perl, as it has been candidly confessed by its developers "more than enough rope to hang yourself".
pm i seems very ignorant/arrogant to choose a language mostly based on how much one can understand without knowing it.
since there's often a _good_
the thing i like about perl over ruby is the fact that perl's functions are very versatile.
python, perl and indeed php have many similar problem domains, and there is no question, that if i am in one of those domains, i prefer python every time.
that's a real win for short scripts like this one.
monday, november 25, 2002 perl vs. python vs. ruby i’m evaluating python and ruby as replacements for perl.
i have read eric raymond's discussion on why he prefers python.
stop on by and check it out!
it's strength and flexibility makes it perfect for fast development/prototyping.
" -robert a. heinlein learn as many languages as you can.
i do all sorts of numerical stuff with pdl as grad student in physics, doing (single-core) simulations at the moment.
probably that is also the reason why m$ "languages" ( are they programming languages yet
i won't repeat all the reasons here but you can read my post if you like athttp://www.strangeblueplanet.com/2008/10/perl-python-ruby.htmlmichael tsai sbp editor: it sounds like you have some misconceptions about how python works.stevebsd i'm trying to create this blog on programming in different languages.
/usr/bin/perl use strict; use warnings; my @records = (); while ( my $line = ) { chomp $line; my @record = split /\t/, $line; s/"//g foreach @record; push @records, \@record; } my $email = 17; my $contactme = 27; my $skutitle = 34; my @contactrecords = map { [ @$_[ $skutitle, $contactme, $email ] ] } sort { $a->[$skutitle] cmp $b->[$skutitle] } grep { $_->[$contactme] eq '1' } @records; foreach my $r (@contactrecords) { print join( "\t", @$r ), "\n"; }pavel kudinov july 28, 2006 3:40 am #!
if i was a new coder, never having worked in any of them, i might not chose perl, but i'm not a new programmer.
this helped me to choose lang.
tom c july 20, 2007 6:59 pm i find it interesting the number of programmers who assume that shorter code == better code.
just to be sure everybody is clear: perl can do serious computational stuff, at the computational level of c/fortran.
the >>> interface of python is where we can check the code.
for example, i quote the original algorithm written in plain english.
no matter how much better you *think* you can do it.
i am not sure that is true :-)
a real discussion on the internet with gentlemen (sorry if any of the post were from ladies).
while (my $rec = $csv->getline_hr($fh)) { push @contactrecords, [$rec->{email}, $rec->{sku_title}, $rec->{contact_me}]; } @contactrecords = grep $_->[contact_me], sort {$a->[sku_title] cmp $b->[sku_title]} @contactrecords; for my $rec (@contactrecords) { $csv->combine(@$rec); print $csv->string, "\n"; } hi all, really interesting thread, i learned a lot...thanks!
peacemuni february 15, 2009 8:24
/usr/bin/perl -w use strict; incidentally, (nowadays) better use warnings instead.
i might add that perl seems to have the most support here and offers up a variety of ways to solve the initial problem.
quite frankly, i'm not exactly sure where python would fit on the web as there aren't that many tasks that it seems overwhelmingly suited for, but perhaps that's because i don't know it well enough.
languages (all modern ones) will get more (lower-order) functional in nature, not less.
in this case, perl's cpan with mature building blocks such as poe and mod_perl wins me over every time.
currently i wondered if i should write the zeta function test i run in c in order to speed things a bit.
this is a huge leap forward for programming.
other times, i have found documented code in whatever language, and it is sooo much easier.
'which language can teach me more' is at least as important as 'which language fits my brain'.
i already know that in perl we can write highly readable or highly idiomatic code or both if you write lots of comments.
ruby, from what it sounds, looks pretty good as well.
if python 'has only one way to do it', how come we've got dozens of variants above?genny august 30, 2009 6:06
i just neglected to make that simplification when porting the code.
too many @ signs, etc.
still under java of course.
i’ve been using perl for several years and am very comfortable with it, although i’m definitely not an expert.
kind of reminds me of php where there are a lot of functions that serve almost the same purpose.
into: for record in (line.split('\t') for line in sys.stdin): would change the full list comprehension into a generator, meaning it will only read the next line when the loop iterates.
at this point i defer to tom c's brilliant comment: "the language usually doesn't make anywhere near as much of a difference as the programmer's skill does.
ruby is bicycle version 2.0.
thus, the style is perhaps not canonical  python or perl, although since i’m new to ruby it’s probably not  canonical ruby either.
and as he pointed out, the 'right' style is the one that appeals most to readability.
perl, python, and ruby all have their strengths.
i realised early on in my career that i was no programmer (with fortran, pascal, c).
for few projects in our organization, we are looking for suitable lang among these three.
(we also review other possible problems in the code.
it's something i probably wouldn't use in production but it's a fairly decent example.
i know that sounds strange, but if everybody would be a good programmer, everybody would have used these dynamic languages in the last decade.
whereas the second requires you to check what the removeallwhitespaces method is actually doing, and if it isn't doing it, then you have the problem of figuring out whether that behaviour is correct or not (better hope the comments/docs are good ;) ).
btw, excelent discussion you have here :)sandy december 31, 2008 10:57 pm hello friends, i am looking for perl indepth good tutorial.
and maybe using more maps or statement modifiers would make the code more perlish and closer to the other examples.
if you think that, then you aren't using modules and other object oriented techniques.
34; my @contactrecords = (); foreach my $r ( @records ) { push(@contactrecords,  [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } @contactrecords = sort  {$$a[0] cmp $$b[0]} @contactrecords; @contactrecords = grep($$_[1] eq  "1", @contactrecords); foreach my $r ( @contactrecords ) { print  join("\t", @$r), "\n"; } the punctuation and my’s make this harder to read than  it should be.
these languages ( python, ruby, perl ) have remained to a small amount of experienced programmers.
ruby is quite something and i expect people will start using ruby for scripting.
vlad january 2, 2009 9:41 am
roman march 30, 2011 4:35 am i'm only few month programer in perl, but... not better write perl like this ?
i was a mainframe alc/cobol programmer for years before venturing into java/c++ a little then was "promoted" (lol) to management.
here is my preferred solution: http://paste.lisp.org/display/90009 also, read pep8, in python we eschew the use of camelcase.
python vs ruby: the flame war « rudimentary art of programming & development [...] michael tsai post. smack down between perl vs python vs ruby.
esellerate gives me a tab-delimited file containing information about the people who boughtmy shareware.
hit and posted the durned thing!
('"', '').split("\t").values_at(27).include?("1") }phaldor i think all of you have missed a vital element to writing any program.....the customer.
some cool stuff written in it, though.
(17, 27, 34); i'm not commenting the rest of your code because it seems more awkward perl code.
i felt like i just went through a 7-year long discussion, and never did it stray away from its initial focus (of python, perl, ruby).
shell script like old unix guy says...
i realize that this particular example rather lends itself to a simple procedural approach, but as someone who uses python and java regularly, i would have done something very similar to bbum's solution except i would use a class rather than a dictionary or an array of arrays.
but the perl community took to heart the criticism of the programmers who fled to pyhton.
:->conficker i don't understand how people can like ruby.
so, not only learn these, but lisps, haskell, tcl, etc.. and yes, regex.
this obviously ignores the fact that both are used by many many people, but that doesn't make them "better" by any means.
[...]xtopher april 13, 2008 3:05 am my principal tool of choice was perl for several years; then it was python for several years; now, i am back to perl.
27  skutitle = 34 contactrecords =
i had to look up howjoin and filter worked, because they weren’t methods of list as i had guessed.
so while this is an interesting read (esp.
like i mentioned in my comment (jan 7), i look at each new problem/project individually, and try to select the tools accordingly.
i would rather readable, maintainable code over one line programs while developing in group.
also it's emphasis on "only one way to do something" (the pythonic way).
nuovo labs - florida i've been learning python for a few months now, and it's surprisingly easy to learn.
remove the elements of contactrecords where contactme is not 1.
once you are expert at any one of them, there would probably be little reason to ever switch to another.
in perl, you can say:
in bartek's solution, changing for record in [line.split('\t') for line in sys.stdin]:
the solution is simple: use english; seriously.
perl provides absolutely simple ways to document your code.
bkb do you think you could put the example text back up?
my focus is always on getting the job done.
use variables only for stable phase objects!
what we do to avoid complex constructions is we have our internal rules which developers should follow.
any code is going to be difficult for another programmer to know exactly what the previous programmer wrote and why.
i had to look up how join and filter worked, because they weren’t methods of list as i had guessed.
if you want it to decide according to context whether "4.5" is a string or a number, you have to provide a context.
oh, i also agree that perl is the swiss army knife hell.
"1"} it is now nearly nine (9) years later.
apart from style (i prefer ruby, it is a cleaner design to my view, like smalltalk, but with cleaned-up perl things like integrated regex), there are other things that may sway you for a particular project.
contactrecordsby skutitle.
"1", contactrecords) for r  in contactrecords: print "\t".join(r)
may 15, 2008 7:04 am regarding maintainability.
i'm not saying there is anything wrong with compiled code, but in many cases, especially with the rise of web applications, this holds true.
it almost always takes much longer to roll your own than it does to learn a new system.
i wanted a script to extract from this file the e-mail addresses of people who asked to be contacted when i release the new versions of the products.
guido did an excellent job of making code look like pseudo code.
i prefer to go with perl.
it's clean compared to perl, or java, etc.
i decided to solve this problem in each language and then compare the  resulting programs.
i wanted a script to extract from this file the e-mail addresses of  people who asked to be contacted when i release the new versions of the  products.
in days of old, we had sed and awk, and we liked 'em: #!
python #!/usr/bin/python import fileinput records =
map, grep, filter are too complex to support.
it's true that you could drop the "use strict;" pragma and then avoid having to use "my", but imho perl 5's variable scoping options is one of it's greatest features.
japh got the closest when he talked about writing in python so that the people that would inherit the code would understand it, but ultimately, we have to face the fact that we are generally not going to own the code once it is handed off to the real owners, those that told us to write it in the first place.
my example used a two-phase approach, imagining that it would be part of a larger system.
once you've done, you will never want to come back to dumb wrappers like .removeallwhitespaces().
to get from someone who loved perl and is well respected in the industry as a user of programming languages why python is definitively a "better language".
when i learned java, my basic programs became more structured.
they did ) have as well that wider acceptance.
further, having $, @, % helps me to know the datatype at any point in the program than just a name as used in python, java, c++ etc.
the one thing i find really really really annoying in ruby (besides the end all over the place ) is the non autovivifying arrays and hashes.
guo september 11, 2007 9:30 pm
(2) cite, please.brian now that google has released the google apps framework which is authored in python, do you think that python will become a more popular choice than ruby?
it may not be actually a problem to do so, but it is generally recommended not to do this, as it will slurp all of your file at once, which is not needed.
good perl code needs to be documented very heavily in order to be readable over time.
has some share of either of three.
however, there are "poor" languages, languages that make things difficult or obscure or are just poorly designed.
- unless somebody has a nice way to do this ? - i am doing a python / ruby comparison trying do decide which language to choose for a big project that i have before me.
so, to me, the first way of doing it is more maintainable.
good programmers are rarely impressed with the newest hype or fad, and good programmers can write good code in any language.
- i had the same problem (as i also came from perl to ruby and couldn't figure this one out right away).
i did a similar comparison between c vs perl and perl vs python - with the intent of comparing opengl performance.
that looks like such a "lazy compiler/interpreter writer" thing that one has to ask wtf?
the language usually doesn't make anywhere near as much of a difference as the programmer's skill does.
i've seen beautiful, clean, maintainable, performant perl code, and horrible, ugly, slow python/ruby code.
p.s. python sounds like a 70's joke and ruby sounds jewish.
python tutorial has moved to a new url : http://www.python.org/doc/current/tutorial/index.htmlgenny august 30, 2009 5:49 pm
interpreted languages are definitely better in that they done require a re-compile if you switch operating systems.
jess may 5, 2008 11:23 pm
you simply cannot survive without the regular expression (imho, the real swiss army knife) at your back, when you are thrown into the tremendous biological text data desert.
and perl well... see http://tinyurl.com/yob2nmjaph february 6, 2008 3:47 pm contrary to /.'s post of jan 25, i don't code in a given language just cuz i know it.
my scripts are more often than not treated with a weird awe as they can't understand how someone who isn't a "techie" can produce results so quickly... even stupid little scripts such as open (unsorted,"file1.txt"); open (out,">file2.txt"); @orig_list=; @sorted_list=sort(@orig_list); print out @sorted_list; however, my scripts seem to reach critical mass at a certain number of lines (this could well be my lack of skill).
also note that i moved your filter (implemented using reject!
so, looking at code and understanding it clearly without comments is only good for you, and not another programmer that comes along.
@list = sort { $a->[0] cmp $b->[1] } grep { $a->[1] ==
early optimization (in other words, optimizing before you know the scope of the problem) is a telltale giveaway of a programmer who thinks he knows more than he does.
in conclusion, i will carry on with perl.
class customer: def __init__(self, contactme, skutitle, emailaddress): self.contactme = contactme
test your variables please, it will make all of us very happy!
== '__main__': customers =
ruby is a pure o-o language that should appeal to perl programmers.
please refer to the comment made by anonymous on january 27, 2009 12:31 am to see the simplicity of awk.
python and ruby both come with mac os x 10.2, both havebbedit language modules,  and both promise a cleaner approach to scripting.
decide which language is best for a particular task.
posters like "tom c" and "mark affuleck" made valuable commnets.
#- unless somebody has a nice way to do this ?
i have never programmed a single line in my entire life, but i read this post and its comments with great pleasure.
i have been recently learning and scripting in ruby, and i could not be happier, an excellent language that has been eating up and converting some of the oldest perl programmers.
i was expecting ruby code to be more easy to read, but definitely python looks easier in this comparison.
i'd like to add my 2p to the discussion.
1 { printf "%s\t%s\n", $35, $18 }' | sort $ doit.sh ooops.
i just started learning python and was interested in other scripting languages (that darned o'reilly book gave me the idea of looking up "python vs perl" (seems he's pretty popular around here)).
[field.replace('"', '') for field in line.split("\t")] records.append(record) email = 17 contactme =
i coded it first in ruby, and then ported the code to python and perl,  changing it as little as possible.
[[r[i] for i in sku, contact, email] for r in records if r[contact]=="1"] contacts.sort() for r in contacts: print "\t".join(r) print '\t'.join(sorted(contacts)) will save you two more lines but will it make the code better??
with proper commenting, all 3 language examples would be ideal.
anyway, one must be confortable with the tools one choose.
#!/usr/bin/env ruby -w email = 17 contactme =
imho good, supportable program should not have them - it requires knowing language to read them.
perl is way too cryptic for my purposes.
but the bottom line is that when presented with a new problem, if the platform i work with poses no constraints in terms of the language i can use, i will normally choose perl.
it can do anything 4.
i'd like to dwell on that for a moment.
alun ap rhisiart december 21, 2002 6:12 am both python and ruby are very enjoyable languages to write in.
but always remember: you can write fortran in any language.
the program reached maybe 500 or 600 lines before i finally refactored it into many modules.
sed has it all, if you can be sure the input is in a fixed format.
python is practical like recipe.
perl is a very powerful sharp knife, with bazillions of ways to accomplish a task.
ok, now a different set of problem.
blah..blah completely disgusting.
over the past few weeks i  read thepython tutorial and the non-reference parts of programming ruby,  however as of this afternoon i’d not written any python or ruby code yet.
for god sake help me god bless ujust another programming language designer january 1, 2009 8:08
do you believe that compile time vs. runtime error check makes a difference with the novice programmers, that is with the 80% of the programmers out there.
pm here's another way to do it, using a cpan module called sort::fields.
1 { printf "%s\t%s\n", $35, $18 }' | sort $ doit.sh okay, my apologies.
having to see a lot of code from others programmers, having them forced to indent correctly seems like a nice feature.
i’ve  been using perl for several years and am very comfortable with it, although  i’m definitely not an expert.
here’s the basic algorithm: read each line of standard input and break it into fields at each tab.
say we have to modify /etc/inittab and change it to init 3.
while python allows you to do a job, perl allows you to do it "and" dream.
we have thousands of perl scripts in our projects, and really like to maintain it!
i found couple of tutorials over google but they are not good enough.
[] for line in  fileinput.input(): record =
i really do like the cleanliness of the python.
i replaced your regexp replacement with a plain string extract, which supports double quotes inside values, and is faster.
it has helped me determine that i'm on the right course in that i should consider all aspects of every project and chose the best language for the individual task at hand.
when there is a better horse, i'll switch my bet.
my hunch/hope is that they're doing/have-done the same thing with perl 6, but i haven't learned perl 6 yet.
my ($email,$contactme,$skutitle,@contactrecords)=(17,27,34); push @contactrecords,[$_->[$skutitle],$_->[$contactme],$_->[$email]] for @records; and not like : my $email = 17; my $contactme = 27; my $skutitle = 34; my @contactrecords = (); foreach my $r ( @records ) { push(@contactrecords, [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } the comment thread clearly needs more code examples: #!
smith march 10, 2007 7:22
nevertheless i was aware of all the hullabaloo about python and ruby and i thought i may need to upgrade.
you don't understand.
i am a ror fan but that is secondary compared to the issue of maintainability of code.
both perl5 and ruby are reasonably terse, and can have both good function-point density and comment density in a page of code.
byeaureliano december 15, 2008 9:54 am to all above: nice discussion.
am both bartek's and baishampayan's versions read the whole file into the memory before running.
while ruby has a number of nice features, its lack of list comprehensions always frustrates me a bit.
no one language is best at everything, even on a web application, so my conclusion is to learn them all and utilize them in their areas of strengths: perl for text manipulation, shell scripting for simple operations, ruby (most likely) for database integration.
its possible to write unreadable code in any language.
my rule of thumb is that if my script gets much longer than 200 lines, it probably has some ideas that i can (and should) abstract into modules.
zack april 5, 2008 4:25 pm oh, and one more thing: i had was completly ignorant as to the fact that you could just type "python" or "ruby" or whatever kindof oldskool stuff that that unix guy conjured up, into like 99% of major linux distrobutions.
{|field| field.gsub('"', '') } records ).
though i'm not a sophisticaded programmer, as a course six alumn from mit i like to think of myself not as a complete rookie either.
in regards to the various comments about the 'my' keywords in the perl versions.
i didn't think so, only thing that i've seen for windows x64 would be the ms vc .net
use what you learned from the other languages to better design something in the one.
ruby and python use too much of english and one poster rightly pointed out that org.
leo i know this thread is old, but i couldn't resist to post my perl version.
and i previoulsy had c/c++ exp.(ofcoursely relatively very small).
eivind eklund november 27, 2003 1:29 pm
python is anyway naturally clean perl - 1, python -1 2)
and so my career path took a different turn (config mngmt).
but no, it just eats things that look like tags.
$r->{$k}; $sep="\t"; } print "\n"; } ------------- christopher wrote: [quote]"no, no.
especially perl > 5.6 with the 'our' scoping option.
{ my @record = map {s/"//g; $_} split("\t", $line); push(@records, @record); } i really do not see the need for the intermediate @record variable, and from the description above it seems to me that you may really want push(@records, \@record); instead (in which case it's still not really needed either).
i blogged about this same topic... to me ruby comes out way ahead almost all cases...
jon december 11, 2009 3:11 pm john said that rexx is no longer relevant.
hi, very interesting posts!
if you find regular expressions difficult, break them down in smaller pieces using qr//.wow january 24, 2008 6:11 pm what an amazing thread.
i like python better than ruby better than perl.
kerry's python example is the only one that really "fits my brain".
and when they do, i will probably be back to python.
} grep { $_->[1] eq '1' } map {
print contactrecords to standard output, with the fields  separated by tabs and the records separated by newlines.
of course you can write clean code in those, but the language structures support it less.
and i absolutely agree with david's point when he mentions python being very verbose, and the need to strike a balance between function point and comment density.
another thing we do is review all commits to follow those rules.
good programmers produce good code.
i like that with mine it is more clear which field we are sorting and filtering on.
you can write easily readable and maintainable perl code, but it's something the language tries hard to prevent you from doing in it's simplest form, as you have demonstrated.
this thread make me more confused about selecting a correct scripting language.
anyway, end of commentmark aufflick
as a result, i will go with perl (i dabbled in it a long time ago) and will play with the others for fun.zen sand gardens
i decided to solve this problem in each language and then compare the resulting programs.
foreach my $r ( @records ) { push(@contactrecords, [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } .... .... hundreds of lines of code here .... .... .... foreach my $r ( @contactrecords ) { my @rec = @{$r}; #--- contactrecords is an array of records print join("\t", @rec), "\n"; } of course i know that every perl programmer will assume that @contactrecords is like that...
in this thread different level of developers shared their views.
[[r[skutitle], r[contactme], r[email]] for r in records] contactrecords.sort() # default sort will group by sku title contactrecords =
but really, i would count bbum's solution as pretty normal looking python.
i recently ran into this very problem with a really simple simulator for my research.
as for those that find it cryptic or hard to maintain, i must say that there were times i went full five years without writing a single line of perl code and yet was able to go back and re-use thousands of lines i had written long before.
y product2 foo1@bar.com product3 foo2@bar.com
i also like cpan as a repository better than anything similar offered by any language, period.
here is my solution to this problem in python: #!/usr/bin/env python import fileinput email, contact, sku = 17, 27, 34 records =
anyway, feed the sample file to the shell script as standard input.
november 19, 2007 5:51 pm why do you use such complex languages?
jon ------------------------------- "the difference between theory and reality is that in theory, there is no difference, but in reality, there is.
store the fields in an array called record.
those features (map/l.c, sort, grep/filter) can be grasped fully by 12 year olds (i've taught them).
i took the liberty to state the jobs greatest to smallest for folks who may not check this out for themselves.
/usr/bin/perl $,="\t"; $\="\n"; print @$_
nullpointerexception in the last 8 years.
'1' and (row[0], row[2]) or '\r', i know this is outside the scope of your examples, but possibly informative...
that was aswell the reason why smalltalk, and even things like objective-c did not had the acceptance that c, c++ and java had.
assume that there are no quotation marks in the interior of the field.
i would reccomend that you pick one and use it forever.
now, i am actually planning a little pet project for home automation, and is torn between perl and python (thus i'm here, no ruby tho, my brain just refuses to comprehend no matter how much i read it).
when i look at other people’s code in these three languages, i find it easier and more enjoyable to read python and ruby.
there are many languages, and there is no one "perfect" language.
am many thanks to all who haver so far participated in this lengthy, but friendly and thoughtful thread.
i do this for them as i want them to get on and "develop" (using more traditional langs).
perl is an abomination.
if the modules are equivalent then python is preferred because its programming style helps the programmer avoid much documentation.
i wouldn't touch python with a long pole if i had to, i'm now completely addicted to the perl way of things and beyond hope.
meaningful syntax and well named intermediate variables are essential to writing code that is "intuitive".
zack april 5, 2008 4:21 pm
here’s a toy problem i wanted to solve.
as i only have a livecd distro to work with atm, i was shocked really, when i opened my terminal, and to my utter surprise, when i type "python", sure enough, the interactive python interpreter comes up.
each field is wrapped in quotation marks, so remove them.
įdomu, ką tiobe reitingai rodys po
surrounded by many pythonistas, i fully intended to make the jump to python, but it felt awkward to me.
thus, the style is perhaps not canonical python or perl, although since i’m new to ruby it’s probably not canonical ruby either.
i like how the  sequence of operations in the first line of thewhile isn’t  “backwards” as it is in the perl and python versions.
and by and large i have succeeded at it.
finally, you can't ship compiled code with ruby, but with python you can.
perl is faster than python even using pyscho doesn't help(offers a max of 4x speed than the original version).
i guess i'd rather write my own library/extension in/for ruby (which one has to do less frequently these days) than use an existing solution in python or perl.
it has worked well for me 3.
i found perl often to be counterintuitive (the concept of default variable appeared to me mysterious, unnecessary and that $_ look didn't help.
#!/usr/bin/perl use strict; use sort::fields; # you can use these as comments #my $email = 17; #my $contactme = 27; #my $skutitle = 34; my @selectedrecords; while () { my @array = split (/\t/); next if $array[27] ne "\"1\""; push (@selectedrecords,"$array[17]\t$array[27]\t$array[34]"); } print map { "$_\n" } fieldsort '\t' , [3], @selectedrecords; alpha monk i realize this as a 7 year old weblog(blog) post, but i wonder what michael tsai is using as a programming language, when dealing with text now.
here's something which is simpler but still idoimatic, and in my opinion, easier on the eye than your example.
it made me think of rappers freestyling.starter october 20, 2007 5:53 pm hi, this is one of interesting articles where experienced developers shared their views on perl,python,ruby without many flames.
thats one of the things that i am really impressed with with python.
, it results in perl programmers using the same libraries, in understandable ways.
the problem domain).sbp editor
good code is easy to understand (variant of 2a.)
for an indepth view, just check the documentation of perl itself, available through the console, or just googling perldoc perlanonymous january 27, 2009 12:31 am this can be achieved in a single line of bash shell scripting: cat inputfile | awk '{if($27=="1") print}' | sort -k 34 | awk '{print $34 $17}' assumptions: 1) inputfile is the input data file 2) as shown in an example above email is the 17th field, contactme is the 27th field and skutitle is the 34th field respectively.
my @records = (); incidentally, my @records; is just as fine.
now i am back to writing 15 line scripts using my newly created libraries.
i am very very comfortable with the real-life-nature of oop so the customer class just fits.
also in my previous post i forgot to mention list comprehensions for python as a really cool thing and -> came out => (which is also used in ruby) but for building hashes.
sys.stdin.readlines()[1:] # the slice gets rid of the field names.
:-)younger unix guy march 27, 2008 5:03 pm word to the old unix guy.
interesting blog and comments.palash february 12, 2010 4:51 pm really an interesting discussion.
python and ruby both come with mac os x 10.2, both havebbedit language modules, and both promise a cleaner approach to scripting.
my $email = 17; my $contactme = 27; my $skutitle = 34; you may find constant.pm useful in cases like this.
people that write one liners will have their name cursed...those of you who write poorly documented code won't fare much better either.
zkr ryz august 30, 2007 9:56 am a word on why these excellent languages have not become the mainstream in the last decade.
michael tsai - blog - perl vs. python vs. ruby … in perl, i might have tried to avoid perl
the perl community has come a long way.
i will point out that all of the above code examples are flawed in that if you want clear, readable code, you need to add many comments.
there are many tutorials about specific sub-topics in perl, but maybe you better try http://perldoc.perl.org/perlintro.html first.
" great stuff all around.
how is this trend changing (python gaining/loosing popularity over perl)?
i'm not saying it is the best, but i reach for perl as my secret weapon over and over again.
in general i find that blindly following the hold-on-to-the-language-you-know approach tends to correlate with poor programming skills.qor february 10, 2008 3:23 am argf.each { |line| p line.split("\t").values_at(17, 27, 34) if line.gsub!
i like the "clean" look of python and will consider for larger scripts/programs especially if other people are going to pick it up and run with it.
hashfactory.call data[:x][:y]['z'][1] = 2121 puts data.inspect #{:x=>{:y=>{"z"=>{1=>2121}}}} hope this helps!
the website indeed has a list of how many perl jobs, php jobs, ruby jobs and python jobs are available.
looking at other folks code (ahem, java developers listen up), i find the lack of try...catch... disturbing, and the constant drone in logs about java.nullpointer...blah...
all are good implementations.
i coded it first in ruby, and then ported the code to python and perl, changing it as little as possible.
it is another nightmare.
matt b.godhack july 4, 2008 7:32 pm useless talks... perl is art like poetry.
people familiar with unix know how pipelines work, and the same idea works here.
i've had to use python (matplotlib and pymol scripting in particular) for some projects since then; it is a great language with fantastic libraries.
my %blah; $blah{dum}[2][7]{verydum}[0]="tralala"; which creates all arrays and hashes along the line its more convoluted in ruby.
also, if you were inside a function, the my and our definitions would relate to you the scoping the author was trying to achieve.
python has more available for it than ruby at this time, and having a library to do what you want can make a big difference.
python does not have braces for blocks.
january 25, 2008 7:19 pm
of course if you're building a large collaborative website, choose your environment first (like my personal favourite openacs or perhaps zope).
i have toyed with ruby and python, and both, while "ok", just didn't do it for me.
[though django is better than catalyst (less time to process requests), catalyst has a better dbic orm ] love u, sam wow.
good code is optimized late.
it also goes to point out that i agree (with whoever now ;-), that knowing multiple languages is invaluable.
good code is rarely impressive; rather, it's clean and functional.
tho after spending a really long time going through this page, i think i'm settling on perl.
there are a number of open source rexx's available including several object-oriented rexx's.
well, there's my two cents.
the way to improve your programming is not by learning the intracacies of a particular language, but by learning many different paradigms.
you send input to a, it sends its output to b, which sends to c, and you only store the end result, not the intermediate results.
i'm a biologist who sometimes has to analyze large datasets so a few months ago i convinced myself to learn a scripting language.
we are quite big project (well, more than 100 requests per second).
to the warm blanket above).vsb october 14, 2009 2:43 am awk was the best suited then, now and in future for the task mentioned above.
my experience with writing code has always been very project specific.
sort contactrecords by skutitle.
what are you using these days to solve problems similar to the original one?
otherwise, and more similarly to what you did, my ($email, $contactme, $skutitle) =
braces are useful to trap errors.
i've been programming perl for more than 10 years now, and i have to admint that i really love it.
something like astring.removeallwhitespaces() is pretty clear, gibberish like s/"//g isn't.
it's a personal thing i suppose.
contactrecords, that contains arrays of just the fields we care about: skutitle, contactme, email.
perl finishes the race and python is not even out of its tracks.
my own perl code is quite readable and usable even after years and years.
i would have switched languages long ago.mssram november 30, 2007 1:19 am
perhaps somethings such as strings should (optionally?) not be an object.
generally perl is preferred over python mainly because of the advantages perl modules offer over that of python.
the first time i encountered that, i pretty much figured that perl was a poorly designed language hack, even if it did make some things "easy to do".
it provides an strict syntax that allows the compiler to remove thousands of trivial errors, and allow the novice programmers to have a more readable high level version than something written in c++, plus the portability.
this is not uncommon.
i am impressed with the opinions and insights.
the advantage over your example is that the sort comes after the grep, thus avoiding sorting records you are going to reject anyway, the same with quotes.
after the hour of carefully reading through this thread, i am now...drum roll...still a perl programmer.
is this 200+ line mental limit on perl scripts a feature or a bug?
regex is not part of the core language, but is part of the python standard library -- but having it be a standard library means that the core language is not intimately regex-ified (this may be a plus or a minus, depending on the programmer and
"[/quote] um, it's not.
(i will say nothing about his "zeta function and the riemann hypothesis... or the chinese typesetting" he he he...
imho python is the least readable language of the three for maintenance as it's more verbose.
when i learned haskell, my java programs became more interface driven.
sh cat x | # open file and process tr -d "\"" | # remove quotes grep "^.* 1 "| # regex to find proper rows (tabs inside quotes) cut -d" " -f 1,3 | # cut fields 1 & 3 (tabs inside quotes) sort # sort and display to stdout =
also, the absence of language-religious fanatics or dumb/flames is a rare find nowadays in the year 2009.
i think he has good points, but he wrote those comments in 2000.
so it is not problem with language "perl".
as such the best language to use is one that's most likely to be known by the maintainer.
hi, interesting thread, .. i am a perl lover that just learnt ruby and indeed i like ruby a lot, partly because it is close to perl in some sense with a lot of built in stuff and a cpan like network with gem ( though less libraries and a lot of beta/alpha code).
in my case (and in my organization) we comment everything that is not clear enough at first sight.
now with parrot, no language can compete with perl!"
"1"}  contactrecords.each {|r| print r.join("\t"), "\n" } this is actually the shortest version, and i think it’s the easiest  to read if you aren’t put off by the block syntax.
oh, i don't mind jj's solution at all but you need to grok functional programming to get it...
the sample codes include list comprehension, filter, lambda, block, and various perl idioms.
you cannot compare perl and python with such examples/problems.
and here’s the code: #!/usr/bin/perl -w use strict; my @records = (); foreach my $line ( <> ) { my @record = map {s/"//g; $_} split("\t", $line); push(@records, \@record); } my $email = 17; my $contactme = 27; my $skutitle = 34; my @contactrecords = (); foreach my $r ( @records ) { push(@contactrecords, [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } @contactrecords = sort {$$a[0] cmp $$b[0]} @contactrecords; @contactrecords = grep($$_[1] eq "1", @contactrecords); foreach my $r ( @contactrecords ) { print join("\t", @$r), "\n"; } the punctuation and my’s make this harder to read than it should be.
at the risk of lots of flames, i consider perl to be one of these, ditto for php.
by the way, you might think that my collection of modules should have the same 200-line mental limitations, but i find that i can work with a module with many thousands of lines of code and it doesn't bother me.
rexx continues to be distributed with ibm systems and there has been an ansi standard for rexx since 1996.
recordsand fill it with all the records.
like many others, i had to face the biblical dilemma perl vs python (i hardly knew about the existence of ruby at that time).
resently i was required to learn visual basic (and vba) for a project.
it is more wasteful of space and slightly slower than a some of the above examples, but unless you have a whole lot of records, that shouldn't matter.
we can tweak apache better with perl perl - 3, python -1 4) dbi:x (no such facility in python) perl -4,
foo3@bar.com product3 foo7@bar.com i still don't like list comprehensions [is that what they are called?] -- but, as i said, that's just me...
monday, november 25, 2002 i’m evaluating python and ruby as replacements for perl.
cpan (one of the real clinchers) 6.
and what is the situation in the field of bioinformatics?
as to learning perl better, i dislike looking at perl code, especially when it’s written by perl experts and is highly idiomatic.
i guess once you learn one of them (perl, python or ruby) you will just hold to it.
for example, we don't write ifs on the same line like: print if $something_happened; we use if ($something_happened) { print; } instead.
if you write bad ugly code you've got nobody to blame but yourself.
and i guess this is also as fast as you can get...anonymous march 12, 2010 11:17 am jon: "why in the world did someone come up with the idea in the late 1980s that there had to be two sets of comparison operators, one for numbers and one for strings?
although it is interesting somewhat, it only matters in the very beginning.
one of the things that i do is to use a lot of hashes.
java forces you to do it all the time, but it isn't necessary even in pure oo languages (eg ruby and smalltalk).james july 3, 2003 1:34 pm all of the the "my"s in the original perl script are unnecessary.
some employers have required me to have a comment on every line.
michael tsai - blog - perl vs. python vs. ruby [...] http://mjtsai.com/blog/2002/11/25/perl_vs_python_v… i’m evaluating python and ruby as replacements for perl.
from that day, i am weekly writing perl scripts for my developers to parse information, sort files, text manipulation, and even the odd gui.
the blocks-by-indentation may be extremely distasteful to curly-brace lovers.
the global interpreter lock problem is a sincere impediment.
david i've done quite a lot of perl, enough ruby and python.
you can write ugly code in any language.
esellerate gives me a  tab-delimited file containing information about the people who boughtmy  shareware.
the beauty with any good agile language (like these three) is that while you can get started quite easily, the deeper you understand it the more productive you get (and the richer programs you can easily create).
lawl january 16, 2008 3:33 pm until you learn what a regular expression is.
i do think the crosstalk between the languages is a good thing and appreciate all the great code that comes out of each camp.
i think the real key is to find a language that fits in with how you think, whether that's perl or not isn't an issue for me, i just wanted the comparison to be a fair one.
sorry, but it looks like that file’s been missing for a long time, and i don’t have an archive handy.
/usr/bin/env ruby b = [] a = `curl -s http://www.mjtsai.com/blog/files/2002-11-25-sample-input.txt` a.gsub!
perl really is the swiss army knife from hell.
remove the elements of contactrecords where contactme is not  1.
leave that to the java peeps since they can't get enough widgetwhichproducesbsfactory.
i don't know for the rest, but re perl: #!
i used to program in old good 'cobol' language.
i have recently started to dabble with python and, thanks to this great article/discussion will also look at ruby.
so, i came across this page.
i suspect that the python community will figure these out ... and not take as long as the perl communities release of perl6 ...
i happen to love perl.
it's like going from learning italian, then spanish, then portuguese, and then arabic.
python -1 5) great template engines (equal) perl -5, python-2 6) good web framework (django better than catalyst) perl -5, python-3 7) optimized scientific modules (graph & math) python better than perl perl -5, python-4 8) programming web services with ease (equal) perl -6, python-5
also, i tend to be much stricter with my libraries than with my scripts, especially when it comes to documentation.
(sorry in advance if i seem a bit too loosly connected to the subject of this thread)python - dar neatrasta | dirbtuvės [...] korporacijų užnugarius ir didelių projektų, tad artimiausi python populiarumo konkurentai yra perl, ruby ir tikriausiai php bei delphi.
trolling ;) bartekbartek heh exactly speaking: print '\n'.join(['\t'.join(r) for r in sorted(contacts)]),soul-burn march 17, 2007 7:51
the perl intro is a short introduction to perl and complete enough to get you started in the earnest.
michael tsai alpha monk: i’m using python, and i’m very happy with it.
cpan does have it's problems, but its wealth as others have pointed out is remarkable.
if you want some tool intuitive(in these programmers' words object-oriented style) to deal with large dataset in biology, why do you just try r (www.r-project.com), the statistical software package with features they mentioned above in python, like classes, functions, english-style, along with even more powerful extensional packages designated for specific biological analyses.
for a similar reason something like cpan is a great factor in maintainability.
i have never found a language so powerful, and so "suited' to unix.
but my point is why should you go and hang yourself at all?
i read all the contributions with interest and i conclude that although python and ruby are nice languages and they indeed force you to write readable and maintainable code, perl has nothing to be envious of them.
the whole thing could probably be done with one s///ge in perl, but that wasn't what i was going for.
i've learned a lot today, so my conclusion, as far as perl is concerned, is this one print: #!
i keep forgetting about the string composition using keywords.
throughout the years the occasions when i had to actually sit down and write code varied substantially in size and scope.
since the perl community acknowledged and started devising problems for this short-coming, i was more comfortable returning to perl.
the same for reference/dereference.)
in such case which can score better?
i am a perl guy and just wanted to add my notes and clarify a few points, especially about the 200-line 'mental limit' for perl scripts.
why not go all the way and make it a one-liner? :-)
17  contactme = 27 skutitle = 34 contactrecords = records.collect {|r|  [r[skutitle], r[contactme], r[email]] } contactrecords.sort!
dr bullshit january 11, 2008 1:10 pm i started programming with c++ and adopted its efficiency and terseness philosophy.
born00slippy i always found perl to rescue me in the toughest of the circumstances :)from /.
i've been a spamsieve user for many years (and love it).michael brian: certainly, it can only help python's popularity, however i was under the impression that python was already more widely used than ruby.
use strict; my @contactrecords; my $fields_hash ={email=>17, contactme =>27, skutitle=>34}; my $fields_array =[qw/email contactme skutitle/]; while (my $line=){ $line=~s/"//g; my @record = split /\t/, $line; if ($record[$fields_hash->{contactme}]==1){ my $r={}; foreach my $k (@$fields_array){ $r->{$k}=$record[$fields_hash->{$k}]; } push @contactrecords, $r; } } foreach my $r (@contactrecords){ my $sep=""; foreach my $k (@$fields_array){ print $sep.
{|field| field.gsub('"', '') } records <
wow, i love this thread.
i could make sense of my python scripts even after weeks i wrote them.
readability, english-ness etc.
#!/usr/bin/python import fileinput records =
readability is definitely a point which assists a programmer or even a non programmer who wants to learn and improve the code but doesnt have the technical competence in that language.
to those (like j) who think that languages like perl5, ruby and python are "complex languages"...
of 5 routines i rewrote in c, one ran faster than the original perl code, 3 of them ran as fast as... and one ran more slowly than the original perl code!!!
so i took it up to learn a new language even though i would be perfectly comfortable writing it in php or perl (or c/c++, for that matter).
this appearance may be what makes some developers shy away from learning perl (some of my developers i still consider lazy mind).
let me tell about my experience with perl.
the most important thing, by far, for me is maintainability.
neil c august 7, 2007 8:00 am this post and comments has confirmed that for me: (1) python code is far easier to read than ruby or perl code.
rubygems has got to be close to rivaling cpan in breadth, if not in depth (i'm referring to a comment up there ^^^ from 2006).
this is a really useful post.
i was surprised but that apparently had to do with perl's dynamic allocation of memory.
cpan in itself could be an excuse for one to choose perl (the pdf::api2 comes to mind, for instance, allowing me to do image manipulation and typesetting work with chinese/unicode, the latter being something that not even knuth's tex would allow me to accomplish).
i just don’t want to write that kind of code.
james may 18, 2009 9:41 am only one or 2 people have picked up on this, but not as a major point, but when it comes to maintaining; it is often not the one who wrote the code who has to do it.
still, i've seen hundreds of thousands of java.lang.
it really helps saving time which would otherwise spent on programming quite simple things.
i think that in the decision to learn perl or python one should consider also how intensively s/he is going to use them.
does anyone have an idea of the number of perl vs python users, roughly?
api/portability differences usually make much more of an impact than syntax.
sure 'word[2:4]' is cooler than 'substr($word,2,4)', but 'substr' is literal and helps to see immediately that i am dealing with a scalar and returning a substring.
gavin i was intending my example to be extreme, it's idiomatic but very functional.
27 skutitle = 34 contactrecords =
good code is easy to read.
learning the language behind it (tcl or python) is going to be a lot easier than writing the hundreds of thousands of lines of existing code yourself.japhy someone already mentioned how you should be sorting after you've removed the unwanted elements from the array.
i'd like to finish with a couple of questions.
iam new to these three langs
a couple of months ago i had to design a program to assemble a custom-made catalogue with hundred of photos on the fly for our clients, in the format of a pdf file.
it is the hell where condemned programmers go to for their sins.
use constant email => 17; use constant contactme => 27; use constant skutitle => 34; my @recs = (); while (<>) { s/"//g; my @rec = split /\t/; push @recs, [@rec[skutitle, contactme, email]] if $rec[contactme]; } for (sort { $a->[0] cmp $b->[0] } @recs) { print join("\t", @$_), "\n" }michael fair enough.
lambda expressions and composition functions like map and filter seem to be more common than list expressions, but most of the python code i've read was written by java developers, so that may just be a foreign dialect intruding.
foreach grep { $_->[1] eq "1" } sort { $a->[0] cmp $b->[0] } map { [ @$_[17,27,34] ] } grep { s/"//g for @$_ } map { [ split /\t/ ] } ; intermediate variables it's a rubbish!
i do not, and have never liked python's syntax, for whatever reason, i don't like it.
to this end, i will choose java as being my language of choice.
blazar april 13, 2005 8:50 am
i think list comprehension are good when used with moderation
i could program what everyone else could but it took me five times longer
obviously it depends on what you're trying to do, but for me, it has turned out to be a great feature.
for the input below "fred@1.com" 0 director of research "fred@3.com" 1 director of research "fred@4.com" 1 director of research "fred@5.com" 1 director of research "fred@2.com" 1 director of research i recommend this as a solution: #!/usr/bin/perl -w use strict; my @contactable_records; while ( ) { if (/\s/) { # check for blank lines my @fields; my %record; s/[\r\n\"]//g; @fields = split("\t",$_); ($record{email}, $record{contact_me}, $record{sku_title}) = ($fields[0], $fields[1], $fields[2]); push (@contactable_records, \%record) if ($record{contact_me} == 1); } } foreach my $record ( sort { $a->{email} cmp $b->{email} } @contactable_records ) { print "$record->{email} $record->{contact_me} $record->{sku_title}\n"; } you can certainly make a much shorter perl program than this, but you generally want something which makes sense when you look at it.
lucky coincidence, some people in our department started a reading group of tisdall's "beginning perl for bioinformatics" which i promptly joined (good book by the way).
regex is perl's greatest strength.
i realize this thread is a bit dead, but here's a perl solution that reduces 'line noise', being rather maintainable while still making good use of perlisms (just because something can be expressed on one line doesn't mean you should slurp it onto one line): #!
many thanks to the person who started this topic and to everyone for all the replies.
bottom line is that a good programmer will even mix his programming languages in a single project when possible to take advantage of their individual strengths.
the algorithm i chose was just the first one that came to  mind.
one-lining things is not so much a display of guruism, but rather a comprehension of how to streamline your code.
perhaps your time would be better spent becoming a better perl programmer than to learn a new language?
i even think it is possible to convert perl to any language without even changing to other interpreter :)
i also suppose you really want "\t" rather than "\t", as in the latter case it wouldn't work at all (wrt your description).
btw, i write/have written in many languages over the years, including like john, in alc for the 370, cobol, pl/i, c, c++, objective-c (before it was used on the mac :-), java, rexx, python, ruby, sql, etc.
('"', '') a.each {|l| b << l.split("\t").values_at(34, 27, 17)} b[1..-1].sort!.each {|l| puts l.join("\t")
the immediacy of the language really charmed me as i could now write programs that made sense to me very quickly and with little effort.
i already write well-structured, easy-to-read, non-obfuscated code 5.
vlad december 31, 2008 5:18 pm perl may be cryptic....
can some one clearly deciphre it?artist mp3
:)dan december 4, 2008 2:24 pm perl have been, is and remains the most powerful piece of software.
so my advice to users (of any language) is to learn to document your code if you are concerned with readability.
actually i think this is the reason java is so successful.
michel started with perl but settled (happy with python).
cpan module/library that does something common
acceptance is as much an accident of history as it is a matter of goodness.
http://tinyurl.com/24jou4 shows python as growing most in 2007.
foreach my $line ( <> ) ouch!
the $ on variables is actually a good thing.
i disagree that perl is hard to maintain on larger projects.
with comments, it is just mix of english everywhere and just imagine you write a comment in near line syntax and missed the "#" or "//" whatever.
then you get nice names such as $arg, $os_error, $child_error, and $eval_error in stead of $_, $!, $?, and $@. if it were not for this module (its been a core module for a while now, so it works anywhere)
i've been writing perl scripts for well, at very least 5 or 6 years, and i still cannot skim through one of my colleague's scripts and know exactly what it does instantly.
there is an example below (not tested).
some perl examples given above are not readable but some are readable.
accept a readable style of programming.
i agree with several other posters though, in that good, readable code is "documented code".
even though i only knew it for days, it feels, weirdly comforting and nice (ref.
as for scalability of perl scripts, i have heard that perl programs get quite difficult to maintain after they get much larger than about 100 lines.
passing it a tring and relying on the automatic conversion, while actualy working is not something most perl programmer would regard as a good practice.
for me, ruby, despite her few warts, flows in a way that i haven't been able to duplicate in python.
you cannot look at this code snippet and just "know" what it's meant to do without reading ever single line and mentally parsing/executing it.
in the case of my website for instance, i decided to rewrite the core engine in python, even though i had never coded in that language (not perl, contrary to /.'s argument).
the if $rec[contactme] in the while loop goes against that, but could easily be moved into the for loop.
my @recs = sort { $a->[0] cmp $b->[0] } grep { $_->[1] eq '1' } map { my @r = split /\t/; [map { s/"//g; $_ } @r[34, 27, 17]] } <>; print join("\t", @$_), "\n" for @recs;michael gavin: i definitely should have used the array slice idiom rather than writing out [$$r[$skutitle], $$r[$contactme], $$r[$email]].
perl is easy to maintain, scale, and debug.
make a new array, contactrecords, that contains arrays of  just the fields we care about: skutitle, contactme, email.
the power of python and perl is not put into proper use when you don't do stuff that are the strengths of those languages.
edward c wrote: > even though i only knew it for days, it feels, weirdly comforting and nice (ref. to the warm blanket above).
ruby's author took the best of perl and the best of python to create ruby (other developer's idea of "best" may vary).
i am a little surprised that compute intensive companies such as google have not pushed the python folks to overcoming this limitation.
michael jm: i wanted to try out arrays, sorting, and filtering in the various languages.
that's why i like perl, it supports a variety of styles of thinking.
every other aspect of readability boils down to two things - 1) do you know the language, and 2) does your code follow the project/company standards previously established.
also, i  correctly guessed which classes “owned” the methods and whether  they were mutators.
nb: i'm not bragging; i've written code that falls into both the former and the latter categories.
#!/usr/bin/env ruby email, contactme, skutitle = 17, 27, 34 records =
that right there i think is one of the keys to perl's success.
for web apps - use mod-perl with catalyst.
people who insist upon using what is most comfortable for them just because of that fact alone aren't taking into consideration the strengths of each language and utilizing them to their best.
those that only bother with one are destined to be the guy that gets laid off when the company moves on without them.
1 } something_that_builds_a_list(); in ruby, i'd expect you can do: contactrecords = records .collect {...} .reject!
i like this last version a lot, though a lot of the cleanness comes from using $_ and avoiding temporary variables.
the point i am trying to make is that all languages have their strengths and weaknesses.
brad cathey november 19, 2007 9:50
the best programming language must: 1.
and this is to say nothing about the syntax.
as i said, i'm not a full time programmer so for me an intuitive and english-like style is a big plus since i might not touch a script for months.
over the past few weeks i read thepython tutorial and the non-reference parts of programming ruby, however as of this afternoon i’d not written any python or ruby code yet.
seldom (i think this is the third time)
this is what you need: wget -o - http://www.mjtsai.com/blog/files/2002-11-25-sample-input.txt 2>/dev/null | sed -ne '/\("[^"]*"\t\)\{26\}"1"/s#\("[^"]*"\t\)\{17\}"\([^"]*\)".*$#\2#p'
[...]japh january 7, 2008 2:58 pm
ruby #!/usr/bin/ruby records =
seeing that it's no longer relevant i did a search on interpretive languages for file/text manipulation and eventually found this thread.
on the other hand, your example is both idiomatic and ugly (to me).
as someone who has worked in everything ranging from windows/vb -> solaris/java -> linux/php/perl, i have only found my skills getting stronger with each new task/project.
#!/usr/bin/ruby records =
i used rexx for a long time, but use python almost exclusively now.
i guess i need to learn at least two out of the three.
now with parrot, no language can compete with perl!
perl is a powerful language, but i think  it’s ugly and encourages writing bad code, so i want to get rid of it.
i just don't find them terribly intuitive and am much more comfortable with lambda/map/filter.
# default sort  will group by sku title contactrecords.reject!
skutitle self.emailaddress =
on the other hand, it doesn't take any additional effort to write code that can be future proofed against data that would otherwise break.
thanks comments rss feed name mail (will not be published) url prev | next blog archives rss rss comments
i'm not fond of the ugly perl syntax myself.
and for what i do, python has two annoying quirks, both related to performance.
perl, python or ruby ....
and here’s the code: perl #!/usr/bin/perl -w use strict; my @records = (); foreach my $line (  <> ) { my @record = map {s/"//g; $_} split("\t", $line);  push(@records, \@record); } my $email = 17; my $contactme = 27; my $skutitle =
after a few hundred lines the ability to quickly surmise what's going on becomes suddenly more challenging.
kerry: i avoided classes because i lacked experience with python and ruby (those were my first programs) and because i'm used to languages where there is a higher overhead (in loc) for introducing a new class.
?tbartdev i know this is ot, but seriously, gentlemen, if you want to use console & friends, then please do so responsiby ;-> i say forget grep, awk and whatnot.
many times now i have revisited my old code, only to find that i hadn't documented it.
i argue that this: $t=~s/\s+//g; is more maintainable than: t.removeallwhitespaces() because real perl programmers would know exactly what the first line did without having to look at some other function/method, and if they understand the rest of the code, they might know instantly whether that line is doing the right thing or not (otherwise hope the comments/docs are good ;) ).
why in the world did someone come up with the idea in the late 1980s that there had to be two sets of comparison operators, one for numbers and one for strings?
"1" }.collect { |r| r[skutitle], r[contactme], r[email] }.sort.each { |r| puts r.join("\t") }david ross this is an interesting document you have made.
to ddber: i'm also a biologist, but feel comfortable (actually, couldn't more) with perl.
with perl, i forgot what i was doing even after coffee break.
from csv import reader, quote_none from sys import argv, stdin for row in reader(stdin.readlines(), delimiter='\t', quoting=quote_none):
where in perl you can write :
if you have developers/maintainers who can't grasp the language, you've got much bigger problems waiting for you.
am a lot of people complain that perl doesn't look like english.
also, bear in mind that split really wants a regex as aq first argument, with one major -useful- exception.
the best rejoinder is probably perl best practices, by damian conway.
#!/usr/bin/perl use constant {sku_title => 1, contact_me => 2}; use strict; use warnings; use text::csv; my $file = $argv[0] or die "usage: $0 "; open(my $fh, 'new({sep_char => "\t"}); $csv->column_names($csv->getline($fh));
it seems very common sense to somebody coming from another language.
it's just a matter of becoming familiar with the idioms; becoming fluent.
i came here looking for a good discussion on what language was the best to use in a given situation and found a very well developed discussion on programming in general, which is good.
kiran thanks for the comparison, i prefer python over perl for complicated programs.
i know your input data was very specific.
i agree with that - maintaining a sense of context becomes mind-bending.
for line in lines: customer = parseline(line)
although the thread has argued long and hard over readability of code, i believe this finally boils down to individual style.
readable and logical to the way we commonly think.
oh, for the old guy, i agree that sed/awk/ etc were fairly easy, but man, what a pain in the arse, and to boot, i had so many of those darn things running around, i thought i was going to lose my mind ;-).anon123
i would have stayed with python.
perl fans may find python's non-perl to be off-putting.
you need to upgrade your brain, not downgrade your language.
the likelihood of that mostly rests on education of future programmers (right now we're churning out idiots)...
terrible sponge november 26, 2007 8:21
i think the python version is generally the cleanest to read—that is, it’s the most english-like.
we can write maintainable code in perl too.
i think the syntax also makes the program (at this point i no longer consider it a script) "look" like a garbled mess even though it's still as clear as its smaller cousins.
mark mcdonald may 17, 2007 6:08 pm #where in perl you can write : #my %blah; #$blah{dum}[2][7]{verydum}[0]="tralala"; #which creates all arrays and hashes along the line #its more convoluted in ruby.
though being primarily a basic/c programmer myself, i think i'm going to like python/c and feel at home.
# some more optimisation.
but as there is a huge base of young people learning to do things, something as strict as java is needed.
so once i get a bit better at python, i'll post my solution and see how it fares against these others (there hasn't been a new example in a few years).
tend october 28, 2007 4:12 pm i will agree with tom c that it is more of a matter of style since any language allows you to write in a lengthy or short way.
objects orientation comes at a price (~20% from some simple benchmarks).
emailaddress def __repr__(self): return self.skutitle + "\t" + str(self.contactme) + "\t" + self.emailaddress if __name__
it was painful but very enlightening to refactor and now i have an extensible (extendable) library that i can use for my research that should carry me through my thesis and quite possibly beyond.
good code is easy to maintain (result of 2a.
currently one my hobbies is to play with math intensive coding that explores the intricacies of the zeta function and the riemann hypothesis (all programing done in perl).
being a biologist, i found perl+r+mysql almost can do every thing one can encounter.
i own a website that has around 200 thousand unique visitors a day, and that was done in php (though i only sat down to write the core engine of the site, which is very math and db intensive; i have rewritten some of it in python recently).
anyway, that's my 2cproteus february 22, 2008 11:21
if you chose to ignore the things which make perl (or again, any language) readable, easy to understand, easy to maintain, etc. then of course you can make things unpleasant.
ruby drives more like a lexus than a toyota to me, although i still like taking out the bmw and the chevy for a drive!!!
the kind of programmers that only learns enough to earn some money and have a job, but does not care about forums like this one, or learning anything new?
if i werejust writing this in perl, i might have tried to avoid perl’s messy syntax for nested arrays and instead used an array of strings.
but i agree that it’s a good idea to use the idioms of the language you are writing in, so i think the solution is for me to learn a language that has a more appealing style.
[@$_[34,27,17]] } map { s/"//g for @$_; [@$_] } map { [split /[\t\r\n]/] } ; the perl examples look like jokes...
what i'm looking forward to is a time when: the programming retards have changed profession simple applications are programmed using languages like perl6, java7, c#4, etc demanding/important applications are programmed using languages like haskell, scala, erlang, etc.
is due the existence of novice programmers.
perl6 is a quantum-leap toward a full-featured dynamic programming platform.
once the task becomes cpu bound on one of the processors of your smp box.
but many times, we have non-perl programmers looking at the code (we use many languages, from java, visual basic, asp, c adn perl) and many systems interact here, each part written by different companies with different language choices.
i was also looking for a comparison of the three languages, but after seeing gavin's excellent post from december 1 at 7:17 pm, i don't really need to see more.
gavin's comment, "perhaps your time would be better spent becoming a better perl programmer than to learn a new language?" was the watershed moment.
standard and defacto standard ways of doing common tasks make for better maintainability.
[] while gets record = $_.split('\t').collect!
is really cheap, and short.
remembering someone mentioning perl being very well suited for such purposes (ie bioinformatics) i went online for a quick tutorial and very quickly came up with the script which did the job and had fun doing it =)
proteus march 31, 2009 7:56 pm
if it was something i was writing for myself i would use something like this.
if there was no perl, biologists would be upto their a***s in c code or something even more horrible.
when i think of ruby i think of: if user.is.not.logged.in create.new.table.in.the.database end as a programmer, it's easier to remember how to do things across languages if they at least appear similar, instead of reinventing the wheel for the sake of making your code appear to have the same exact lexical value as english, at the expense of the language's speed, and usability.oilbane december 23, 2008 10:04 pm ""perl have been, is and remains the most powerful piece of software.
having programmed for a quarter century and professionally for 15 years, having gone through literally dozens of languages, operating systems, and development environments, i've come to a few conclusions: 1.
updates will be posted on the pogl site.
the poster who recommended choosing your featureset/api first, then learning the language required, was spot on.
i'll have to say that comentador's comment about nightmares from programming perl really cracked me up once i saw what he was talking about.
i do a lot of perl maintenance programming and my run perl tidy on some programs to clean them up a bit, but perl continues to be a beautiful girl to me.
i have been in management a long time but love programming.
i like that *much* better.
if not for the aforementioned english, and perl critic and, especially, moose ... that made perl more like python ...
i mention all this for the sake of showing that i believe that my view on how programming languages compare with each other comes after many years of using and exploring a variety of them in different contexts, and for different needs.
encourage a readable style of programming.
that's why i chose java, and i would be more inclined to use python as a scripting language.
contactrecordsto standard output, with the fields separated by tabs and the records separated by newlines.
for example, date conversion, file format detection, server processes handling, protocol handling and many many more...muni february 15, 2009 7:47 pm this is in response to a question of perl vs python in the field of bioinformatics.
as mentioned before, perl is very very attractive as the components i'm going to use are incidentally already written in perl, but yet i was afraid if the project gets large, perl might get very messy.
later i tried ruby and very quickly fell in love.
somewhere i found a post that did something like this: data = hash.new() hashfactory = lambda { hash.new {|h,k| h[k] = hashfactory.call} } data =
the reason why i think none of these excellent programming languages have become the mainstream and will never do at least for another 10 yrs.
as such, i have had a chance do program in a number of languages, both systemic and dynamic, such as lisp, c, c++, fortran, pascal, perl, python, ruby, .net, visual basic, sed, awk, tcl/tk, etc.
" perl can't do all the work for you.
then i tried python and that was another story.
while java also has lots of standard libraries, java tends to be a lower level language (more lines of code to look through), and many of the libraries appear to be written to fulfill some spec rather than to accomplish common tasks more easily (whereas cpan modules tend to be written to be used by mere mortals).rtfa.net »
fedora 9 comes out in a few days, i'll use that as my development platform.
" no code that works and is easy to understand is powerful.
mark march 3, 2008 8:46 pm re: proteus funny we both found this old discussion so many years later.
there's also the environment ; if you have a huge ide with tons of automated tasks and refactorings, it won't be a hurdle to clean your code, so your code will be cleaner.
so almost both are nearly equals with a bit of advantage with perl.
tend october 28, 2007 4:44 pm
i want tutorial for job perspective or any one having personal notes and can share with me.....please send me buddy please friends help me, i don't even have enough money to buy books or to join any classes but i promise i'll pay you back once i got the job....
i decided to give it a go with perl for two good reasons 1) perl is the english of bioinformatics 2)
although i can program in many languages i am hooked on perl.
who can draw a conclusion then?james september 15, 2007 12:12 pm
a few years ago i discovered perl.
did you program spamsieve in python?
[field.replace('"', '') for field in  line.split("\t")] records.append(record) email = 17 contactme =
site » blog archive » syntax vs forever young-always young [...]
i have not seen anything in ruby that compares.
legibility near the level of line-noise is perl's greatest weakness -- perl developers who write legible code are the exception, not the norm.
but it is currently the best contender.
of course it reflects my personal coding preferences: #!/usr/bin/perl use strict; use warnings; my @records; push @records, [ (/"(.*?)"/g)[17,27,34] ] while <>; ($\,$")=($/,"\t"); print "@$_" for sort { $a->[0] cmp $b->[0] } grep $_->[1] eq '1', @records; __end__q june 18, 2005 4:24 am blazar, while this is perfectly reasonable perl code for a seasoned veteran like you or me, it demonstrates perfectly why perl is such a horrible language for writing intuitive and maintainable code.
make a new array, contactrecords, that contains arrays of just the fields we care about: skutitle, contactme, email.
days of one liners are over ; you may spend 5 minutes writing that one line, and make people(including yourself) lose 1000 hours reading it and expanding its meaning in their head.
i mean even lowly basic didn't need that kludge.
(2) list comprehensions are much clearer to read than map/filter/lambda (3) the .join string method is a blight upon the otherwise clear python syntax.
python needs it as well, but its syntax makes the program code more obvious than its perl counterpart.
the only thing i hate about perl5 is the lack of a nicer oop syntax.
"1", contactrecords) for r in contactrecords: print "\t".join(r)
you didn't have to worry about embedded delimiters, records spanning multiple lines, and escaped quotes.
i was interested in your comparison
% interesting discussion though!
the flame war uses list as its battlefield.
here’s the basic algorithm: record.
/usr/bin/perl print join("\t", @$_), "\n" for sort { $a->[0] cmp $b->[0]
when i learned python, all my programs in java and c# became cleaner (though annoyingly verbose).
why have 50 almost-the-same regexp functions, then another 50 for case insensitive operations?
spamsieve is written in objective-c, however i use python in eaglefiler and dropdmg, as well as during the development process for all my apps.
if anything, the fact that i never get to code in any single language for long enought certainly doesn't help in mastering the idiomatic strenghts of any of the languages i used.
things are looking great right now.
{|field| field.gsub('"', '') } records  ) { my @record= split("\t"); next if($record[$contactme] ne '"1"'); $record[$email] =~ s/"//g; $record[$skutitle] =~ s/"//g; print $record[$skutitle]."\t"; print $record[$email]."\n"; } you can even try something like s/^"(.+)"$/$1/ to try to remove only the external quotes (but then i guess potential quote inside the quotes need to be escaped) $ perl foo.pl 2002-11-25-sample-input.txt product1 foo0@bar.com product3foo2@bar.com product2
as for classes, i like the fact that both languages make creating classes easy, but don't force it.
all three languages have had 9 years of additional development and maturity.
but it doesn't have a recognizable syntax.
and mailing list is awfully nice, too!john p i started with perl, then learned some java and c/c++.
"1" "foo1@bar.com" "product3" "1" "foo2@bar.com"
being widely used at google helps python, also microsoft support in ironpython and jython integration on java side of world make python in my opinion first choice if you haven't got scripting language into you programmer's toolbox yet.
my point here is that you absolutely must consider who the code will be viewed by and whether they will be able to replace you as their primary programmer after accepting your code.
i linked to pdl's web page, and while it looks old, the modules are still in active maintenance and development.
legibility fans may find python's emphasis on fun and legibility to be a major plus.
if you know them all, you can 1.
they started the tracking in 2005 and it is current to date.
there is no question about it.
that alone should make all 3 of these languages a wise choice.
i hate the absence of type declarations in python, but it appears that pychecker can help out in this regard.
another point of view in choosing languages and environments is that "it's all about the api".
i would have happily never written another line of perl code.
it takes what other languages accomplish, does it faster, with less code, and makes it fun to write.
i find that perl/ruby are more of the old paradigm.
michael i've restored a recreation of the sample data.
i have my own conventions when i program perl so i won't get confused when i read the code later.
print contactrecords to standard output, with the fields separated by tabs and the records separated by newlines.
it's all in the skill of the coder.
i'm afraid that you'll find your skill-relevance will have evaporated in about 5 years.
if a programming language could input this and give the correct results, in my opinion, this is the best language.
but when overdosed make code look very cryptic, like perl maybe...
however, given a small computing task that needs to be done *right now* with little fuss i'll probably always do it in perl and probably will be doing until my fingers can no longer type.
seriously, it's unfair to compare bad perl code that doesn't use common idioms.
wrt syntax differences between the three scripting languages), i don't think it's terribly edifying.