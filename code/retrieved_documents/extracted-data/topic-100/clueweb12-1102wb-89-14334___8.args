i think that readable code is useful in a development team that has different programming skills.
modules, support, structure, community, and the internet/open source mentality are paving the way for great new computer ideas and languages, as well as changing opinion that programming is just for "geeks".
you also copy the whole list with the second list comprehension, which can be transformed into a for loop after the in-place sort.
i've seen beautiful, clean, maintainable, performant perl code, and horrible, ugly, slow python/ruby code."
yes, specially because of the sigils thing.
:-) the whole argument that one can write easy-to-read perl code is, to me, kind of vacuous.
kerry kartchner i find it interesting that, particularly with the python and ruby solutions, nobody chose to use classes.
anyway i found python to be a good choice also.
good programmers rarely brag about it, rather they just know that it's what they're paid to do, and they do it instinctively.
that improves readability when you try to follow.
larry and company have gone through great pains -- years of polishing and fine tuning -- to get perl to have that well-worn comfortable feel.
this is because the modules tends to focus on a much more clearly defined target, which makes the context much narrower.
http://graphcomp.com/opengl/benchmarks perl provides opengl performance comparable to c, and much faster than python; i suspect that ruby will also be faster than python, and close to perl.
python is a hybrid o-o language that is a good replacement for basic as a introductory tutorial language, yet has sufficient power to displace perl for many tasks in the perl domain.
i never really did proper learning for programming, only bits of c or php here and there, and as such usually write horrid code.
michael xtopher: (1) google has such big computations that they have to split them across multiple processes (and machines), anyway.
so there's no readability problem in our project.
the best easy book to learn perl i´ve ever read is perl and cgi for the world wide web: visual quickstart guide, from liz castro.
what we really like in perl is very huge cpan archive.
also, when i write .net code for work (luckily .net is only 30% of the work, i yearn for the freedom of perl, bash, and c on linux.
before i came to it, i was an experienced, long-time perl programmer with major doubts about my chosen language.
perl allows for very clear and concise code.
much of any language is going to be planning, and figuring out what works, does so consistently, and provides benefits over other languages.
granted, sometimes that is ourselves, but in those cases, like so many of us have pointed out, we'll just do things our own way and cleanliness and commenting go out the window, fast. :-)
i learned the basics quite quickly and soon i could write useful scripts to make my life easier.
s/\s+//g is perfectly readable.
since most of the time you don't know who this will be, i'd always go for perl as it's the most widly known scripting language - even if it gives you the most rope to hang yourself.
in the comments of those who spoke for perl i detect something like a certain infatuation with the language and i can relate to this.
often projects become a simple stitching together cpan modules.
perl is a powerful language, but i think it’s ugly and encourages writing bad code, so i want to get rid of it.
the reason being that the team that would maintain it afterwards knew python the best.
i decided to redo the ruby version since that is my language of choice, and have made this much shorter (slightly more than 50% fewer loc) and quite a bit more efficient (by rejecting unwanted records as they are read, rather than going through all records again later and also by not sorting before rejecting), and made a small change to the output---which was to remove the contactme field, since i would expect that it would not be required any further.
as someone in the thread pointed out ... perl is like art and i agree.
good programmers are rarely flashy.
ruby made it easy to go from perl, it has the variable syntax to lure perl programmers over.
you can, of course, incur an expensive fork process, but then passing values between the seperate processes becomes expensive.
but then again, perl's syntax doesn't bother me at all, and i can usually read right through (its kind of like a warm blanket ;-).
marktroy may 21, 2007 10:09 pm this requirement is most efficiently done in standard bourne shell... % cat x "skutitle" "contactme" "email" "product1" "0" "foo@bar.com" "product2"
i assumed the comment-taker was smart enough to html-ificate the text.
i found all versions of all programs above very readable (perhaps i'm gifted?
first time i am planning to use one scripting language for the common administrative purpose.
talking about a waste of time, finding names to those methods would a huge one.
do i comment on discussions/blogs/forums etc.
anyone reading that sort of code at work is probably going to have nightmares with gigantic (^[a-z])'s...
this task, which required 2 full time employees to assemble the catalogue every fortnight, is now done by the program and through the internet, sparing my employees who can now perform more productive work.
i am back to my beloved perl and i will never sin again.
i'd been writing perl for many years, but i found i could accomplish the same tasks in much cleaner ways with far fewer mistakes coding in ruby.
once you get the hang of these idoms then you can use them throughout.
i still don't know which language is better to become more familiar with.
based on existing matured capabilities, rather than anticipating x will reach y state if modules are ported ...etc, which is not guaranteed.
i like and use all three, altough i am currently more proficient in python...n3xtl3v3l february 22, 2007 5:30 pm
but if the aim here is to accomplish a goal and speed is not a crucial factor, then the following perl code would be a better solution, as it is more self-documenting.
i simply like expressive, clean languages.
nowadays though, the programmer's time should be worth more than the computer's, so rapid development time and maintainability are key.
perhaps in that sense python scores better.
java is slooowly gaining the (lower-order) functional features that c# has been piling on recently.
well, after having gone through all the chapters and done many of the exercises, i realized that... perl and my brain go in different directions.
in my first job i had to program monte carlo simulations and markov-chain algorithms in c, which after compilation was send to mini computers that required a couple of hours to come back with the results.
the beauty of perl is what really grabbed me, and that was after i was a professional developer for 10+ years.
the reason i found this is that i was asked to help with something in my company which may require file/text manipulation for a conversion of data from one system to another.
personal bytes » blog archive some links..
even if you are concerned by readability, perl is very customizable.
ruby follows the perl idiom of bazillions of ways to accomplish the task, but only gajillions (which is much less than bazillions) of them are ruby-esque.
i think the python version is generally the cleanest to read—that is, it’s the most english-like.
so, the solution is regardless the language, do comment when is (even barely) worth it.vlad december 31, 2008 5:24 pm btw, the comment "#--- contactrecords is an...." is just an example...
i was very proficient with rexx (if anyone knows that that is) which i loved.
also, i can iterate that we can write clean code with perl also.
ruby has a truck load more functions to do things which means you have to remember them, where as perl has a small set of functions that can be manipulated to do all kinds of things.
since this is a plain pipe&filter operation, the way to write it in ruby is imo using filter ops.
but it is hard to run the scripts without the example stuff.
recently a friend asked me if i could help him write a script for manipulating a dataset in text-file for his research project.
i want someone (not necessarily someone conversant in the language!) to be able to go back to the code and quickly grok what it is doing.
i know well, i have to learn a fresh.
if i'm to create an script only for my self, and i do not need to read it again and modify it a month later, a super-optimized-obfuscated on line programs makes me feel very happy and proud ( but i don't share that code, otherwise i have always to add comments like the shell version )
it may be a bit more true for perl, as it has been candidly confessed by its developers "more than enough rope to hang yourself".
pm i seems very ignorant/arrogant to choose a language mostly based on how much one can understand without knowing it.
the thing i like about perl over ruby is the fact that perl's functions are very versatile.
that's a real win for short scripts like this one.
it's strength and flexibility makes it perfect for fast development/prototyping.
i do all sorts of numerical stuff with pdl as grad student in physics, doing (single-core) simulations at the moment.
if i was a new coder, never having worked in any of them, i might not chose perl, but i'm not a new programmer.
tom c july 20, 2007 6:59 pm i find it interesting the number of programmers who assume that shorter code == better code.
just to be sure everybody is clear: perl can do serious computational stuff, at the computational level of c/fortran.
the >>> interface of python is where we can check the code.
a real discussion on the internet with gentlemen (sorry if any of the post were from ladies).
/usr/bin/perl -w use strict; incidentally, (nowadays) better use warnings instead.
quite frankly, i'm not exactly sure where python would fit on the web as there aren't that many tasks that it seems overwhelmingly suited for, but perhaps that's because i don't know it well enough.
languages (all modern ones) will get more (lower-order) functional in nature, not less.
in this case, perl's cpan with mature building blocks such as poe and mod_perl wins me over every time.
other times, i have found documented code in whatever language, and it is sooo much easier.
'which language can teach me more' is at least as important as 'which language fits my brain'.
i already know that in perl we can write highly readable or highly idiomatic code or both if you write lots of comments.
ruby, from what it sounds, looks pretty good as well.
i’ve been using perl for several years and am very comfortable with it, although i’m definitely not an expert.
kind of reminds me of php where there are a lot of functions that serve almost the same purpose.
into: for record in (line.split('\t') for line in sys.stdin): would change the full list comprehension into a generator, meaning it will only read the next line when the loop iterates.
at this point i defer to tom c's brilliant comment: "the language usually doesn't make anywhere near as much of a difference as the programmer's skill does.
thus, the style is perhaps not canonical python or perl, although since i’m new to ruby it’s probably not canonical ruby either.
and as he pointed out, the 'right' style is the one that appeals most to readability.
it's something i probably wouldn't use in production but it's a fairly decent example.
i know that sounds strange, but if everybody would be a good programmer, everybody would have used these dynamic languages in the last decade.
and maybe using more maps or statement modifiers would make the code more perlish and closer to the other examples.
if you think that, then you aren't using modules and other object oriented techniques.
these languages ( python, ruby, perl ) have remained to a small amount of experienced programmers.
esellerate gives me a tab-delimited file containing information about the people who boughtmy shareware.
('"', '').split("\t").values_at(27).include?("1") }phaldor i think all of you have missed a vital element to writing any program.....the customer.
(17, 27, 34); i'm not commenting the rest of your code because it seems more awkward perl code.
i realize that this particular example rather lends itself to a simple procedural approach, but as someone who uses python and java regularly, i would have done something very similar to bbum's solution except i would use a class rather than a dictionary or an array of arrays.
but the perl community took to heart the criticism of the programmers who fled to pyhton.
:->conficker i don't understand how people can like ruby.
so, not only learn these, but lisps, haskell, tcl, etc.. and yes, regex.
this obviously ignores the fact that both are used by many many people, but that doesn't make them "better" by any means.
i had to look up howjoin and filter worked, because they weren’t methods of list as i had guessed.
like i mentioned in my comment (jan 7), i look at each new problem/project individually, and try to select the tools accordingly.
i would rather readable, maintainable code over one line programs while developing in group.
also it's emphasis on "only one way to do something" (the pythonic way).
nuovo labs - florida i've been learning python for a few months now, and it's surprisingly easy to learn.
once you are expert at any one of them, there would probably be little reason to ever switch to another.
perl provides absolutely simple ways to document your code.
any code is going to be difficult for another programmer to know exactly what the previous programmer wrote and why.
i had to look up how join and filter worked, because they weren’t methods of list as i had guessed.
apart from style (i prefer ruby, it is a cleaner design to my view, like smalltalk, but with cleaned-up perl things like integrated regex), there are other things that may sway you for a particular project.
i wanted a script to extract from this file the e-mail addresses of people who asked to be contacted when i release the new versions of the products.
guido did an excellent job of making code look like pseudo code.
it's clean compared to perl, or java, etc.
i wanted a script to extract from this file the e-mail addresses of people who asked to be contacted when i release the new versions of the products.
map, grep, filter are too complex to support.
japh got the closest when he talked about writing in python so that the people that would inherit the code would understand it, but ultimately, we have to face the fact that we are generally not going to own the code once it is handed off to the real owners, those that told us to write it in the first place.
my example used a two-phase approach, imagining that it would be part of a larger system.
once you've done, you will never want to come back to dumb wrappers like .removeallwhitespaces().
to get from someone who loved perl and is well respected in the industry as a user of programming languages why python is definitively a "better language".
when i learned java, my basic programs became more structured.
further, having $, @, % helps me to know the datatype at any point in the program than just a name as used in python, java, c++ etc.
the one thing i find really really really annoying in ruby (besides the end all over the place ) is the non autovivifying arrays and hashes.
it may not be actually a problem to do so, but it is generally recommended not to do this, as it will slurp all of your file at once, which is not needed.
however, there are "poor" languages, languages that make things difficult or obscure or are just poorly designed.
so, to me, the first way of doing it is more maintainable.
good programmers are rarely impressed with the newest hype or fad, and good programmers can write good code in any language.
the language usually doesn't make anywhere near as much of a difference as the programmer's skill does.
i've seen beautiful, clean, maintainable, performant perl code, and horrible, ugly, slow python/ruby code.
p.s. python sounds like a 70's joke and ruby sounds jewish.
interpreted languages are definitely better in that they done require a re-compile if you switch operating systems.
you simply cannot survive without the regular expression (imho, the real swiss army knife) at your back, when you are thrown into the tremendous biological text data desert.
my scripts are more often than not treated with a weird awe as they can't understand how someone who isn't a "techie" can produce results so quickly... even stupid little scripts such as open (unsorted,"file1.txt"); open (out,">file2.txt"); @orig_list=; @sorted_list=sort(@orig_list); print out @sorted_list; however, my scripts seem to reach critical mass at a certain number of lines (this could well be my lack of skill).
so, looking at code and understanding it clearly without comments is only good for you, and not another programmer that comes along.
in conclusion, i will carry on with perl.
test your variables please, it will make all of us very happy!
ruby is a pure o-o language that should appeal to perl programmers.
python and ruby both come with mac os x 10.2, both havebbedit language modules, and both promise a cleaner approach to scripting.
posters like "tom c" and "mark affuleck" made valuable commnets.
i have been recently learning and scripting in ruby, and i could not be happier, an excellent language that has been eating up and converting some of the oldest perl programmers.
i was expecting ruby code to be more easy to read, but definitely python looks easier in this comparison.
i just started learning python and was interested in other scripting languages (that darned o'reilly book gave me the idea of looking up "python vs perl" (seems he's pretty popular around here)).
with proper commenting, all 3 language examples would be ideal.
imho good, supportable program should not have them - it requires knowing language to read them.
perl is way too cryptic for my purposes.
but the bottom line is that when presented with a new problem, if the platform i work with poses no constraints in terms of the language i can use, i will normally choose perl.
it can do anything 4.
alun ap rhisiart december 21, 2002 6:12 am both python and ruby are very enjoyable languages to write in.
but always remember: you can write fortran in any language.
python is practical like recipe.
perl is a very powerful sharp knife, with bazillions of ways to accomplish a task.
do you believe that compile time vs. runtime error check makes a difference with the novice programmers, that is with the 80% of the programmers out there.
having to see a lot of code from others programmers, having them forced to indent correctly seems like a nice feature.
i’ve been using perl for several years and am very comfortable with it, although i’m definitely not an expert.
we have thousands of perl scripts in our projects, and really like to maintain it!
i found couple of tutorials over google but they are not good enough.
i really do like the cleanliness of the python.
i replaced your regexp replacement with a plain string extract, which supports double quotes inside values, and is faster.
nevertheless i was aware of all the hullabaloo about python and ruby and i thought i may need to upgrade.
i am a ror fan but that is secondary compared to the issue of maintainability of code.
both perl5 and ruby are reasonably terse, and can have both good function-point density and comment density in a page of code.
am both bartek's and baishampayan's versions read the whole file into the memory before running.
while ruby has a number of nice features, its lack of list comprehensions always frustrates me a bit.
no one language is best at everything, even on a web application, so my conclusion is to learn them all and utilize them in their areas of strengths: perl for text manipulation, shell scripting for simple operations, ruby (most likely) for database integration.
its possible to write unreadable code in any language.
my rule of thumb is that if my script gets much longer than 200 lines, it probably has some ideas that i can (and should) abstract into modules.
zack april 5, 2008 4:25 pm oh, and one more thing: i had was completly ignorant as to the fact that you could just type "python" or "ruby" or whatever kindof oldskool stuff that that unix guy conjured up, into like 99% of major linux distrobutions.
though i'm not a sophisticaded programmer, as a course six alumn from mit i like to think of myself not as a complete rookie either.
i didn't think so, only thing that i've seen for windows x64 would be the ms vc .net
use what you learned from the other languages to better design something in the one.
ruby and python use too much of english and one poster rightly pointed out that org.
leo i know this thread is old, but i couldn't resist to post my perl version.
but no, it just eats things that look like tags.
i blogged about this same topic... to me ruby comes out way ahead almost all cases...
if you find regular expressions difficult, break them down in smaller pieces using qr//.wow january 24, 2008 6:11 pm what an amazing thread.
i like python better than ruby better than perl.
kerry's python example is the only one that really "fits my brain".
print contactrecords to standard output, with the fields separated by tabs and the records separated by newlines.
of course you can write clean code in those, but the language structures support it less.
good programmers produce good code.
i like that with mine it is more clear which field we are sorting and filtering on.
you can write easily readable and maintainable perl code, but it's something the language tries hard to prevent you from doing in it's simplest form, as you have demonstrated.
this thread make me more confused about selecting a correct scripting language.
as a result, i will go with perl (i dabbled in it a long time ago) and will play with the others for fun.zen sand gardens
but really, i would count bbum's solution as pretty normal looking python.
i recently ran into this very problem with a really simple simulator for my research.
as for those that find it cryptic or hard to maintain, i must say that there were times i went full five years without writing a single line of perl code and yet was able to go back and re-use thousands of lines i had written long before.
i also like cpan as a repository better than anything similar offered by any language, period.
anyway, feed the sample file to the shell script as standard input.
those features (map/l.c, sort, grep/filter) can be grasped fully by 12 year olds (i've taught them).
i took the liberty to state the jobs greatest to smallest for folks who may not check this out for themselves.
that was aswell the reason why smalltalk, and even things like objective-c did not had the acceptance that c, c++ and java had.
now, i am actually planning a little pet project for home automation, and is torn between perl and python (thus i'm here, no ruby tho, my brain just refuses to comprehend no matter how much i read it).
when i look at other people’s code in these three languages, i find it easier and more enjoyable to read python and ruby.
am many thanks to all who haver so far participated in this lengthy, but friendly and thoughtful thread.
i do this for them as i want them to get on and "develop" (using more traditional langs).
if the modules are equivalent then python is preferred because its programming style helps the programmer avoid much documentation.
i wouldn't touch python with a long pole if i had to, i'm now completely addicted to the perl way of things and beyond hope.
meaningful syntax and well named intermediate variables are essential to writing code that is "intuitive".
as i only have a livecd distro to work with atm, i was shocked really, when i opened my terminal, and to my utter surprise, when i type "python", sure enough, the interactive python interpreter comes up.
each field is wrapped in quotation marks, so remove them.
surrounded by many pythonistas, i fully intended to make the jump to python, but it felt awkward to me.
thus, the style is perhaps not canonical python or perl, although since i’m new to ruby it’s probably not canonical ruby either.
i like how the sequence of operations in the first line of thewhile isn’t “backwards” as it is in the perl and python versions.
finally, you can't ship compiled code with ruby, but with python you can.
perl is faster than python even using pyscho doesn't help(offers a max of 4x speed than the original version).
i found perl often to be counterintuitive (the concept of default variable appeared to me mysterious, unnecessary and that $_ look didn't help.
here's something which is simpler but still idoimatic, and in my opinion, easier on the eye than your example.
it made me think of rappers freestyling.starter october 20, 2007 5:53 pm hi, this is one of interesting articles where experienced developers shared their views on perl,python,ruby without many flames.
thats one of the things that i am really impressed with with python.
, it results in perl programmers using the same libraries, in understandable ways.
i am very very comfortable with the real-life-nature of oop so the customer class just fits.
sys.stdin.readlines()[1:] # the slice gets rid of the field names.
interesting blog and comments.palash february 12, 2010 4:51 pm really an interesting discussion.
python and ruby both come with mac os x 10.2, both havebbedit language modules, and both promise a cleaner approach to scripting.
my $email = 17; my $contactme = 27; my $skutitle = 34; you may find constant.pm useful in cases like this.
people that write one liners will have their name cursed...those of you who write poorly documented code won't fare much better either.
i will point out that all of the above code examples are flawed in that if you want clear, readable code, you need to add many comments.
in general i find that blindly following the hold-on-to-the-language-you-know approach tends to correlate with poor programming skills.qor february 10, 2008 3:23 am argf.each { |line| p line.split("\t").values_at(17, 27, 34) if line.gsub!
i like the "clean" look of python and will consider for larger scripts/programs especially if other people are going to pick it up and run with it.
the website indeed has a list of how many perl jobs, php jobs, ruby jobs and python jobs are available.
looking at other folks code (ahem, java developers listen up), i find the lack of try...catch... disturbing, and the constant drone in logs about java.nullpointer...blah...
matt b.godhack july 4, 2008 7:32 pm useless talks... perl is art like poetry.
i've had to use python (matplotlib and pymol scripting in particular) for some projects since then; it is a great language with fantastic libraries.
my %blah; $blah{dum}[2][7]{verydum}[0]="tralala"; which creates all arrays and hashes along the line its more convoluted in ruby.
also, if you were inside a function, the my and our definitions would relate to you the scoping the author was trying to achieve.
python has more available for it than ruby at this time, and having a library to do what you want can make a big difference.
python does not have braces for blocks.
i have toyed with ruby and python, and both, while "ok", just didn't do it for me.
[though django is better than catalyst (less time to process requests), catalyst has a better dbic orm ] love u, sam wow.
good code is optimized late.
it also goes to point out that i agree (with whoever now ;-), that knowing multiple languages is invaluable.
good code is rarely impressive; rather, it's clean and functional.
the way to improve your programming is not by learning the intracacies of a particular language, but by learning many different paradigms.
you send input to a, it sends its output to b, which sends to c, and you only store the end result, not the intermediate results.
i'm a biologist who sometimes has to analyze large datasets so a few months ago i convinced myself to learn a scripting language.
we are quite big project (well, more than 100 requests per second).
to the warm blanket above).vsb october 14, 2009 2:43 am awk was the best suited then, now and in future for the task mentioned above.
my experience with writing code has always been very project specific.
braces are useful to trap errors.
i've been programming perl for more than 10 years now, and i have to admint that i really love it.
contactrecords, that contains arrays of just the fields we care about: skutitle, contactme, email.
perl finishes the race and python is not even out of its tracks.
my own perl code is quite readable and usable even after years and years.
the first time i encountered that, i pretty much figured that perl was a poorly designed language hack, even if it did make some things "easy to do".
it provides an strict syntax that allows the compiler to remove thousands of trivial errors, and allow the novice programmers to have a more readable high level version than something written in c++, plus the portability.
i am impressed with the opinions and insights.
the advantage over your example is that the sort comes after the grep, thus avoiding sorting records you are going to reject anyway, the same with quotes.
after the hour of carefully reading through this thread, i am now...drum roll...still a perl programmer.
imho python is the least readable language of the three for maintenance as it's more verbose.
when i learned haskell, my java programs became more interface driven.
also, the absence of language-religious fanatics or dumb/flames is a rare find nowadays in the year 2009.
so it is not problem with language "perl".
as such the best language to use is one that's most likely to be known by the maintainer.
hi, interesting thread, .. i am a perl lover that just learnt ruby and indeed i like ruby a lot, partly because it is close to perl in some sense with a lot of built in stuff and a cpan like network with gem ( though less libraries and a lot of beta/alpha code).
in my case (and in my organization) we comment everything that is not clear enough at first sight.
now with parrot, no language can compete with perl!"
"1"} contactrecords.each {|r| print r.join("\t"), "\n" } this is actually the shortest version, and i think it’s the easiest to read if you aren’t put off by the block syntax.
the sample codes include list comprehension, filter, lambda, block, and various perl idioms.
you cannot compare perl and python with such examples/problems.
at the risk of lots of flames, i consider perl to be one of these, ditto for php.
by the way, you might think that my collection of modules should have the same 200-line mental limitations, but i find that i can work with a module with many thousands of lines of code and it doesn't bother me.
resently i was required to learn visual basic (and vba) for a project.
it is more wasteful of space and slightly slower than a some of the above examples, but unless you have a whole lot of records, that shouldn't matter.
we can tweak apache better with perl perl - 3, python -1 4) dbi:x (no such facility in python) perl -4,
as to learning perl better, i dislike looking at perl code, especially when it’s written by perl experts and is highly idiomatic.
if you write bad ugly code you've got nobody to blame but yourself.
java forces you to do it all the time, but it isn't necessary even in pure oo languages (eg ruby and smalltalk).james july 3, 2003 1:34 pm all of the the "my"s in the original perl script are unnecessary.
from that day, i am weekly writing perl scripts for my developers to parse information, sort files, text manipulation, and even the odd gui.
the blocks-by-indentation may be extremely distasteful to curly-brace lovers.
david i've done quite a lot of perl, enough ruby and python.
you can write ugly code in any language.
esellerate gives me a tab-delimited file containing information about the people who boughtmy shareware.
the beauty with any good agile language (like these three) is that while you can get started quite easily, the deeper you understand it the more productive you get (and the richer programs you can easily create).
i do think the crosstalk between the languages is a good thing and appreciate all the great code that comes out of each camp.
i think the real key is to find a language that fits in with how you think, whether that's perl or not isn't an issue for me, i just wanted the comparison to be a fair one.
sorry, but it looks like that file’s been missing for a long time, and i don’t have an archive handy.
leave that to the java peeps since they can't get enough widgetwhichproducesbsfactory.
i used to program in old good 'cobol' language.
i have recently started to dabble with python and, thanks to this great article/discussion will also look at ruby.
i suspect that the python community will figure these out ... and not take as long as the perl communities release of perl6 ...
it's like going from learning italian, then spanish, then portuguese, and then arabic.
also, i tend to be much stricter with my libraries than with my scripts, especially when it comes to documentation.
michael tsai alpha monk: i’m using python, and i’m very happy with it.
cpan does have it's problems, but its wealth as others have pointed out is remarkable.
if you want some tool intuitive(in these programmers' words object-oriented style) to deal with large dataset in biology, why do you just try r (www.r-project.com), the statistical software package with features they mentioned above in python, like classes, functions, english-style, along with even more powerful extensional packages designated for specific biological analyses.
for a similar reason something like cpan is a great factor in maintainability.
i have never found a language so powerful, and so "suited' to unix.
i read all the contributions with interest and i conclude that although python and ruby are nice languages and they indeed force you to write readable and maintainable code, perl has nothing to be envious of them.
i keep forgetting about the string composition using keywords.
since the perl community acknowledged and started devising problems for this short-coming, i was more comfortable returning to perl.
i am a perl guy and just wanted to add my notes and clarify a few points, especially about the 200-line 'mental limit' for perl scripts.
dr bullshit january 11, 2008 1:10 pm i started programming with c++ and adopted its efficiency and terseness philosophy.
i've been a spamsieve user for many years (and love it).michael brian: certainly, it can only help python's popularity, however i was under the impression that python was already more widely used than ruby.
i could make sense of my python scripts even after weeks i wrote them.
readability, english-ness etc.
readability is definitely a point which assists a programmer or even a non programmer who wants to learn and improve the code but doesnt have the technical competence in that language.
so i took it up to learn a new language even though i would be perfectly comfortable writing it in php or perl (or c/c++, for that matter).
this appearance may be what makes some developers shy away from learning perl (some of my developers i still consider lazy mind).
the most important thing, by far, for me is maintainability.
neil c august 7, 2007 8:00 am this post and comments has confirmed that for me: (1) python code is far easier to read than ruby or perl code.
cpan in itself could be an excuse for one to choose perl (the pdf::api2 comes to mind, for instance, allowing me to do image manipulation and typesetting work with chinese/unicode, the latter being something that not even knuth's tex would allow me to accomplish).
i just don’t want to write that kind of code.
it really helps saving time which would otherwise spent on programming quite simple things.
api/portability differences usually make much more of an impact than syntax.
sure 'word[2:4]' is cooler than 'substr($word,2,4)', but 'substr' is literal and helps to see immediately that i am dealing with a scalar and returning a substring.
gavin i was intending my example to be extreme, it's idiomatic but very functional.
good code is easy to read.
learning the language behind it (tcl or python) is going to be a lot easier than writing the hundreds of thousands of lines of existing code yourself.japhy someone already mentioned how you should be sorting after you've removed the unwanted elements from the array.
it is the hell where condemned programmers go to for their sins.
lambda expressions and composition functions like map and filter seem to be more common than list expressions, but most of the python code i've read was written by java developers, so that may just be a foreign dialect intruding.
i do not, and have never liked python's syntax, for whatever reason, i don't like it.
to this end, i will choose java as being my language of choice.
obviously it depends on what you're trying to do, but for me, it has turned out to be a great feature.
lucky coincidence, some people in our department started a reading group of tisdall's "beginning perl for bioinformatics" which i promptly joined (good book by the way).
regex is perl's greatest strength.
bottom line is that a good programmer will even mix his programming languages in a single project when possible to take advantage of their individual strengths.
one-lining things is not so much a display of guruism, but rather a comprehension of how to streamline your code.
the immediacy of the language really charmed me as i could now write programs that made sense to me very quickly and with little effort.
i already write well-structured, easy-to-read, non-obfuscated code 5.
:)dan december 4, 2008 2:24 pm perl have been, is and remains the most powerful piece of software.
so my advice to users (of any language) is to learn to document your code if you are concerned with readability.
actually i think this is the reason java is so successful.
michel started with perl but settled (happy with python).
with comments, it is just mix of english everywhere and just imagine you write a comment in near line syntax and missed the "#" or "//" whatever.
i've been writing perl scripts for well, at very least 5 or 6 years, and i still cannot skim through one of my colleague's scripts and know exactly what it does instantly.
i agree with several other posters though, in that good, readable code is "documented code".
even though i only knew it for days, it feels, weirdly comforting and nice (ref.
as for scalability of perl scripts, i have heard that perl programs get quite difficult to maintain after they get much larger than about 100 lines.
passing it a tring and relying on the automatic conversion, while actualy working is not something most perl programmer would regard as a good practice.
for me, ruby, despite her few warts, flows in a way that i haven't been able to duplicate in python.
you cannot look at this code snippet and just "know" what it's meant to do without reading ever single line and mentally parsing/executing it.
in the case of my website for instance, i decided to rewrite the core engine in python, even though i had never coded in that language (not perl, contrary to /.'s argument).
the if $rec[contactme] in the while loop goes against that, but could easily be moved into the for loop.
perl is easy to maintain, scale, and debug.
the power of python and perl is not put into proper use when you don't do stuff that are the strengths of those languages.
edward c wrote: > even though i only knew it for days, it feels, weirdly comforting and nice (ref. to the warm blanket above).
ruby's author took the best of perl and the best of python to create ruby (other developer's idea of "best" may vary).
i am a little surprised that compute intensive companies such as google have not pushed the python folks to overcoming this limitation.
also, i correctly guessed which classes “owned” the methods and whether they were mutators.
people who insist upon using what is most comfortable for them just because of that fact alone aren't taking into consideration the strengths of each language and utilizing them to their best.
those that only bother with one are destined to be the guy that gets laid off when the company moves on without them.
i like this last version a lot, though a lot of the cleanness comes from using $_ and avoiding temporary variables.
the point i am trying to make is that all languages have their strengths and weaknesses.
as i said, i'm not a full time programmer so for me an intuitive and english-like style is a big plus since i might not touch a script for months.
seeing that it's no longer relevant i did a search on interpretive languages for file/text manipulation and eventually found this thread.
as someone who has worked in everything ranging from windows/vb -> solaris/java -> linux/php/perl, i have only found my skills getting stronger with each new task/project.
now with parrot, no language can compete with perl!
perl is a powerful language, but i think it’s ugly and encourages writing bad code, so i want to get rid of it.
i just don't find them terribly intuitive and am much more comfortable with lambda/map/filter.
on the other hand, it doesn't take any additional effort to write code that can be future proofed against data that would otherwise break.
after a few hundred lines the ability to quickly surmise what's going on becomes suddenly more challenging.
kerry: i avoided classes because i lacked experience with python and ruby (those were my first programs) and because i'm used to languages where there is a higher overhead (in loc) for introducing a new class.
i argue that this: $t=~s/\s+//g; is more maintainable than: t.removeallwhitespaces() because real perl programmers would know exactly what the first line did without having to look at some other function/method, and if they understand the rest of the code, they might know instantly whether that line is doing the right thing or not (otherwise hope the comments/docs are good ;) ).
to ddber: i'm also a biologist, but feel comfortable (actually, couldn't more) with perl.
with perl, i forgot what i was doing even after coffee break.
if you have developers/maintainers who can't grasp the language, you've got much bigger problems waiting for you.
am a lot of people complain that perl doesn't look like english.
the best rejoinder is probably perl best practices, by damian conway.
it seems very common sense to somebody coming from another language.
i came here looking for a good discussion on what language was the best to use in a given situation and found a very well developed discussion on programming in general, which is good.
kiran thanks for the comparison, i prefer python over perl for complicated programs.
i know your input data was very specific.
i agree with that - maintaining a sense of context becomes mind-bending.
readable and logical to the way we commonly think.
perl fans may find python's non-perl to be off-putting.
you need to upgrade your brain, not downgrade your language.
the likelihood of that mostly rests on education of future programmers (right now we're churning out idiots)...
i think the python version is generally the cleanest to read—that is, it’s the most english-like.
we can write maintainable code in perl too.
i think the syntax also makes the program (at this point i no longer consider it a script) "look" like a garbled mess even though it's still as clear as its smaller cousins.
though being primarily a basic/c programmer myself, i think i'm going to like python/c and feel at home.
but as there is a huge base of young people learning to do things, something as strict as java is needed.
tend october 28, 2007 4:12 pm i will agree with tom c that it is more of a matter of style since any language allows you to write in a lengthy or short way.
objects orientation comes at a price (~20% from some simple benchmarks).
it was painful but very enlightening to refactor and now i have an extensible (extendable) library that i can use for my research that should carry me through my thesis and quite possibly beyond.
good code is easy to maintain (result of 2a.
being a biologist, i found perl+r+mysql almost can do every thing one can encounter.
i own a website that has around 200 thousand unique visitors a day, and that was done in php (though i only sat down to write the core engine of the site, which is very math and db intensive; i have rewritten some of it in python recently).
if you chose to ignore the things which make perl (or again, any language) readable, easy to understand, easy to maintain, etc. then of course you can make things unpleasant.
ruby drives more like a lexus than a toyota to me, although i still like taking out the bmw and the chevy for a drive!!!
the kind of programmers that only learns enough to earn some money and have a job, but does not care about forums like this one, or learning anything new?
but i agree that it’s a good idea to use the idioms of the language you are writing in, so i think the solution is for me to learn a language that has a more appealing style.
is due the existence of novice programmers.
once the task becomes cpu bound on one of the processors of your smp box.
but many times, we have non-perl programmers looking at the code (we use many languages, from java, visual basic, asp, c adn perl) and many systems interact here, each part written by different companies with different language choices.
i was also looking for a comparison of the three languages, but after seeing gavin's excellent post from december 1 at 7:17 pm, i don't really need to see more.
standard and defacto standard ways of doing common tasks make for better maintainability.
remembering someone mentioning perl being very well suited for such purposes (ie bioinformatics) i went online for a quick tutorial and very quickly came up with the script which did the job and had fun doing it =)
if it was something i was writing for myself i would use something like this.
if there was no perl, biologists would be upto their a***s in c code or something even more horrible.
when i think of ruby i think of: if user.is.not.logged.in create.new.table.in.the.database end as a programmer, it's easier to remember how to do things across languages if they at least appear similar, instead of reinventing the wheel for the sake of making your code appear to have the same exact lexical value as english, at the expense of the language's speed, and usability.oilbane december 23, 2008 10:04 pm ""perl have been, is and remains the most powerful piece of software.
the poster who recommended choosing your featureset/api first, then learning the language required, was spot on.
i'll have to say that comentador's comment about nightmares from programming perl really cracked me up once i saw what he was talking about.
i do a lot of perl maintenance programming and my run perl tidy on some programs to clean them up a bit, but perl continues to be a beautiful girl to me.
i have been in management a long time but love programming.
if not for the aforementioned english, and perl critic and, especially, moose ... that made perl more like python ...
i mention all this for the sake of showing that i believe that my view on how programming languages compare with each other comes after many years of using and exploring a variety of them in different contexts, and for different needs.
encourage a readable style of programming.
that's why i chose java, and i would be more inclined to use python as a scripting language.
contactrecordsto standard output, with the fields separated by tabs and the records separated by newlines.
for example, date conversion, file format detection, server processes handling, protocol handling and many many more...muni february 15, 2009 7:47 pm this is in response to a question of perl vs python in the field of bioinformatics.
as mentioned before, perl is very very attractive as the components i'm going to use are incidentally already written in perl, but yet i was afraid if the project gets large, perl might get very messy.
later i tried ruby and very quickly fell in love.
the reason why i think none of these excellent programming languages have become the mainstream and will never do at least for another 10 yrs.
as such, i have had a chance do program in a number of languages, both systemic and dynamic, such as lisp, c, c++, fortran, pascal, perl, python, ruby, .net, visual basic, sed, awk, tcl/tk, etc.
" perl can't do all the work for you.
fedora 9 comes out in a few days, i'll use that as my development platform.
" no code that works and is easy to understand is powerful.
there's also the environment ; if you have a huge ide with tons of automated tasks and refactorings, it won't be a hurdle to clean your code, so your code will be cleaner.
i want tutorial for job perspective or any one having personal notes and can share with me.....please send me buddy please friends help me, i don't even have enough money to buy books or to join any classes but i promise i'll pay you back once i got the job....
although i can program in many languages i am hooked on perl.
legibility near the level of line-noise is perl's greatest weakness -- perl developers who write legible code are the exception, not the norm.
days of one liners are over ; you may spend 5 minutes writing that one line, and make people(including yourself) lose 1000 hours reading it and expanding its meaning in their head.
i mean even lowly basic didn't need that kludge.
(2) list comprehensions are much clearer to read than map/filter/lambda (3) the .join string method is a blight upon the otherwise clear python syntax.
python needs it as well, but its syntax makes the program code more obvious than its perl counterpart.
you didn't have to worry about embedded delimiters, records spanning multiple lines, and escaped quotes.
the flame war uses list as its battlefield.
when i learned python, all my programs in java and c# became cleaner (though annoyingly verbose).
spamsieve is written in objective-c, however i use python in eaglefiler and dropdmg, as well as during the development process for all my apps.
if anything, the fact that i never get to code in any single language for long enought certainly doesn't help in mastering the idiomatic strenghts of any of the languages i used.
as for classes, i like the fact that both languages make creating classes easy, but don't force it.
all three languages have had 9 years of additional development and maturity.
and mailing list is awfully nice, too!john p i started with perl, then learned some java and c/c++.
being widely used at google helps python, also microsoft support in ironpython and jython integration on java side of world make python in my opinion first choice if you haven't got scripting language into you programmer's toolbox yet.
my point here is that you absolutely must consider who the code will be viewed by and whether they will be able to replace you as their primary programmer after accepting your code.
i linked to pdl's web page, and while it looks old, the modules are still in active maintenance and development.
legibility fans may find python's emphasis on fun and legibility to be a major plus.
i hate the absence of type declarations in python, but it appears that pychecker can help out in this regard.
another point of view in choosing languages and environments is that "it's all about the api".
i would have happily never written another line of perl code.
it takes what other languages accomplish, does it faster, with less code, and makes it fun to write.
i find that perl/ruby are more of the old paradigm.
michael i've restored a recreation of the sample data.
i have my own conventions when i program perl so i won't get confused when i read the code later.
print contactrecords to standard output, with the fields separated by tabs and the records separated by newlines.
i'm afraid that you'll find your skill-relevance will have evaporated in about 5 years.
if a programming language could input this and give the correct results, in my opinion, this is the best language.
but when overdosed make code look very cryptic, like perl maybe...
however, given a small computing task that needs to be done *right now* with little fuss i'll probably always do it in perl and probably will be doing until my fingers can no longer type.
seriously, it's unfair to compare bad perl code that doesn't use common idioms.
wrt syntax differences between the three scripting languages), i don't think it's terribly edifying.