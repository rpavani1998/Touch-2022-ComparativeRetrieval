each association key is then assigned a list of datasets from the dataset dictionary.
notice that we now load both the pfitsio and the numerical modules and how, once an image is stored in a two dimensional array, we can compute statistics on any part of this array.
starting from the set of dictionaries we have built in our first example, we now proceed to read in each individual fits file (fig.2).
hence, dataset['o46p47010']['xoff'] would return the value of 0.0.
d. m. mehringer, r. l. plante, & d. a. roberts (san francisco: asp), 479 python in astronomy norbert pirzkal, richard n. hook st-ecf, karl-schwarschild str.2, garching bei munchen d-85748, germany abstract: we report on the use of python to perform basic astronomical tasks.
one can download the compiled python binaries or the python source code from thepython homepage.
python ships with a large number of modules (see the python standard documentation), and can be easily extended in c. with modules such as pfitsio or pyfits and the numerical modules, astronomical images and tables can be easily accessed and manipulated as numerical arrays.
notice that we now load both the pfitsio and the numerical modules and how, once an image is stored in a two dimensional array, we can compute statistics on any part of this array.
one can download the compiled python binaries or the python source code from thepython homepage.
another dictionary is then created and uses the names of the associations (column 1 in the ascii file) as a key.
our second example also shows the use of the powerful numerical module's where() command which the idl1 user will recognize.
hence, dataset['o46p47010']['xoff'] would return the value of 0.0.
each entry of the dataset dictionary is in fact itself a dictionary which uses the original ascii file column name as keys to hold the ascii file original data.
we report on the use of python to perform basic astronomical tasks.
each entry of the dataset dictionary is in fact itself a dictionary which uses the original ascii file column name as keys to hold the ascii file original data.
starting from the set of dictionaries we have built in our first example, we now proceed to read in each individual fits file (fig.2).
we would like to be able to easily query all the members of a given association (``id'' column), and to be able to access and potentially modify the information of the individual datasets that make up an association.
we have found that python satisfies the need for a high level programming language which fills the gap between regular shell scripting languages and compiled languages such as c. for tasks that are too complicated and too large to implement with regular shell scripts, but for which the extra overhead of coding everything in c is not warranted, python offers a quick and elegant option.
we therefore build a dictionary of datasets where each dataset's name serves as a key in this dictionary.
we present small python examples as illustrations of the language's power and encourage the reader to learn more about python from the book by lutz (1996).
once the dictionaries are set up, which only takes a few lines (grey overlay region), one has the ability to manipulate and ``query'' those dictionaries in a very high level, natural, way.
each association key is then assigned a list of datasets from the dataset dictionary.
python has a simple, easy to learn syntax which emphasizes readability, and it draws many of its features from other popular languages such as c, c++, modula-3, abd, and others.
our second example also shows the use of the powerful numerical module's where() command which the idl1 user will recognize.
python has a simple, easy to learn syntax which emphasizes readability, and it draws many of its features from other popular languages such as c, c++, modula-3, abd, and others.
python ships with a large number of modules (see the python standard documentation), and can be easily extended in c. with modules such as pfitsio or pyfits and the numerical modules, astronomical images and tables can be easily accessed and manipulated as numerical arrays.
another dictionary is then created and uses the names of the associations (column 1 in the ascii file) as a key.
we would like to be able to easily query all the members of a given association (``id'' column), and to be able to access and potentially modify the information of the individual datasets that make up an association.
we therefore build a dictionary of datasets where each dataset's name serves as a key in this dictionary.
we present small python examples as illustrations of the language's power and encourage the reader to learn more about python from the book by lutz (1996).
once the dictionaries are set up, which only takes a few lines (grey overlay region), one has the ability to manipulate and ``query'' those dictionaries in a very high level, natural, way.
we have found that python satisfies the need for a high level programming language which fills the gap between regular shell scripting languages and compiled languages such as c. for tasks that are too complicated and too large to implement with regular shell scripts, but for which the extra overhead of coding everything in c is not warranted, python offers a quick and elegant option.
