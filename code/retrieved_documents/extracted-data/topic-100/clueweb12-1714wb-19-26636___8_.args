many developers work with newer dynamic languages like python and r. to meet the needs of these users, we've developed a python-based coordination system called "networkspaces" (nws) that is easy to learn, accessible via almost all development environments (including r, java, octave, python, perl, and ruby), and deployable on ad hoc collections of spare cpus.the key point is that the nws encapsulation is amenable to a network-based implementation, which lets different processes exchange data and synchronize via nws bindings.because this is a concept familiar to programmers, it is a good foundation for building a coordination system.the advantages this neutrality offers include: nws coordination patterns and idioms can be recycled from one language environment to the next.performance improvement via parallelism should be of interest to anyone whose codes run too slowly.we've used nws to run parallel programs on hundreds of processors, producing many cpu years of useful computation.nws is designed to be a coordination facility that is language neutral.to facilitate interlanguage coordination, nws variable names are ascii strings and don't need to conform to the variable naming rules of any given language.the language also provides operations for establishing a binding and for retrieving the value of a bound name.most values in most of the languages mentioned can be automatically serialized (the serialization is done behind the scenes by nws, and is not of direct concern to programmers).the advantages this neutrality offers include: >>> from nws.client import networkspacefinally, ascii strings used as values are treated in a special way (they are not subject to the client language serialization protocol) that makes it possible for them to be exchanged across client languages.unfortunately, due in part to its history, parallel programming languages and tools still mostly focus on "big iron" and older languages such as c and fortran.a given language has rules about allowable names, allowable values for a given name, and the context in which the binding is valid (the binding's scope).in many languages, including python, we could have used syntax similar to that of normal bindings: ws.x = ws.yusing this encapsulation, we explicitly specify the look-up (fetch), the association of the namex with the retrieved value (store), and the intended binding set (indicated by thews object).