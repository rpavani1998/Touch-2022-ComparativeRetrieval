i tried to explain in my previous post that r could have important advantages over stata when it came to managing weird, “non-rectangular” datasets that need to be transformed/combined/reshaped in non-trivial ways:
i am not trying to start the first flamewar of “code and culture” — rather i’d like to argue that both languages have their own strengths and weaknesses; the important thing for me is not to come to a definitive conclusion (“stata is better than r” or vice versa) and only use one package while discarding the other, but to identify conditions under which r or stata are more or less painful to use for the type of data analysis i am working on.
my substantive interpretation of this animation (and a comparable event history) is that the network doesn’t really matter and the endogenous cascade is based on attention to aggregate peer behavior rather than that of specific alters.
or if that’s too hard, just stick to piping to r.app instead of rdaemon.
i think the trick is to realize that two of the key differences are that: whereas handles only come up in a few stata commands (e.g., file, postfile, log), they are very important in r, what with all the “<-” statements in r there’s a much fuzzier line between commands and functions than in stata.
note that the weight argument is optional so that: col.table(x,y) is equivalent to tabulate x y, col nofreq.
for i in range(0,52): datafile='ties_bounded%d' % i # igraph code here that treats the python object "datafile" as a filename update so thanks to brian rubineau’s suggestion on how to better use the “paste()” function, which is functionally equivalent to the second line of the python code above.
anyway, i worked his suggestions into my code (see below) and it works great.
that’s quite ugly compared to the simple tabstat command, but i could deal with it… now suppose i am working on survey data and observations have sampling weights, and the syntax will have to get even more complicated — i’d have to think about something for a few minutes, when all stata would need is a quick [fw=weight] statement added before the comma.
in fact, it only took me, a complete python-noob, about ten minutes to figure out what’s been a real stumper in r. i haven’t yet workedigraph into this loop but i’m thinking it can’t be that hard.
the “mv” commands are necessary because imagemagick has a naive view of alphabetical order.
the actual r code only takes about 7 seconds to execute in either version.
r, write text replace file write rsource "library(foreign)" _n file write rsource `"data source("~/documents/book/stata/testgraph.
note that you may have to click on the image to see the animation.
this kind of thing is trivially easy in stata since stata expands locals and then interprets them.
as such i rewrote the script to work entirely from stata.
yellow vertices have missing data on airplay (true missing data, not just right-censored).
this follows my general philosophy of doing a lot of code mise en place in a user-friendly language so i can spend as little time as necessary in r. (note that you could just as easily write this in bash, but i figured this way you can a) make it cross-platform and b) attach it to “use” for a one-stop shop “import” command).
it does no good to have multiple versions of a graph if they don’t look at all similar, which is what you get if you generate the layout on the fly as part of each plot.
what i mean by this is both the superficial thing of all the parentheses and also the more substantive issue that often you don’t put them one to a line and they just do something (like stata commands) but you usually put them many to a line and feed them into something else (like stata functions).
r makes it much easier to work on several datasets at the same time, and different types of objects can be used in consistent ways.
give up on writing this kind of loop and just resign myself to writing really repetitive r code.
the table() function cannot even compare with stata’s tabulate twoway command, since: luckily, writing an r function that can achieve this is not too hard: col.table <- function(var1, var2, weights=rep(1,length(var1)),
forvalues i=0/52 { use ties_bounded`i', clear twoway scatter x y graph export chrnet_hc`i'.png, replace } r not only doesn’t let you do this directly, but i can’t even figure out how to do it by adding an extra step where the looped local feeds into a new object to write the filename.
merging the diffusion data (a vertice-level trait) onto the network.
this is weird because r.app has no trouble finding it.
i have basically zero experience using python but it has a good reputation for usability.
that stata can be a horrible, horrible tool when it comes to manipulating datasets that are not already rectangular.
furthermore, i get the same error even if i make sure igraph is installed directly from r (terminal) in the same r session: choosecranmirror(graphics = false) install.packages("igraph") source("/users/rossman/documents/book/stata/testgraph.
but things can get complicated when the raw dataset i need to manipulate is not already “rectangular”: this may include network data and multilevel data — even when the ultimate goal is to turn these messy-looking data, sometimes originating from multiple sources, into a nice rectangular dataset that can be analyzed with a simple linear model… sure, stata has a few powerful built-in commands (although i’d be embarrassed to say how many times i had to recheck the proper syntax for “reshape” in the stata help).
pdf("~/documents/book/images/chrnetwork.pdf") plot.igraph(chrnet, layout=layout.fruchterman.reingold, vertex.size=4, vertex.label=na, vertex.color="red", edge.color="gray20", edge.arrow.size=0.3, margin=0) dev.off() #ties bounded to only top 40, includes adoption time color-codes, but use is optional chrnetbounded <- read.graph("ties_bounded_humpcolor.net", c("pajek"))
r use `statafile', clear end june 29, 2010 at 3:01 pm gabrielrossman 6 comments thanks for the aspirin guys | gabriel | in a recent post, i lamented that i couldn’t figure out how to do loops and a few other things in r. the script at issue was intended to create a slideshow of network graphs which i’d then use image magick to convert to an animated gif.
currently my code is really long and repetitive.
i think i’ve gotten the hang ofigraph itself but r itself is still pretty opaque to me and that limits my ability to useigraph.
mike wanted to do this in bash but couldn’t figure out how to pass arguments from the shell to r. frankly, i don’t know how to do this either which is why my solution is to have stata write and execute an r source file so all the argument passing occurs within stata.
for me, r is particularly useful when i need to manipulate certain kinds of data and turn them into a “rectangular” dataset: stata is perfect for “rectangular” data, when the dataset fits nicely inside a rectangle of observations (rows) and variables (colums) and when the conceptual difference between rows and columns is clear — this is what a dataset will have to look like just before running a regression.
the graph layout is based on directed nominations from a survey so vertices near each other have low path length, but i hid the actual edges to preserve some privacy about the stations social network ties.
for those who don’t know me, my name is pierre, i am a graduate student in sociology at princeton and i’ve been doing work on organizations, culture and economic sociology (guess who’son my committee).
r") i guess that’s another difference with stata, stataconsole knows where the ado library is.
the problem seems to be that r (terminal) can’t find the igraph library.
: unable to load shared library '/library/frameworks/r.framework/resources/library/igraph/libs/x86_64/igraph.so': dlopen(/library/frameworks/r.framework/resources/library/igraph/libs/x86_64/igraph.so, 10): symbol not found: ___gmpz_clear referenced from: /library/frameworks/r.framework/resources/library/igraph/libs/x86_64/igraph.so expected in: dynamic lookup error : .onload failed in 'loadnamespace' for 'igraph' error: package/namespace load failed for 'igraph' >
the thing is that i can’t figure out how to make a loop in r where the looping local feeds to be part of a filename.
kieran’s code has a certain elegance to it, but it’s an r style of elegance based on objects and lists and the like so it’s not completely intuitive to me, despite his thorough commenting.
it reads my pajek formatted network data on top 40 radio stations and does a graph.
i think that’s amazingly fast to import 60 or so datasets (albeit small datasets), generate two different fr layouts, apply the layouts to 60 or so graphs (albeit graphs that are written directly to disk rather than to screen), and do miscellaneous housekeeping.
to make 52 versions of the graph, i need about two hundred lines of code, whereas i should be able to just loop my core four lines of code 52 times — pdf(); read.graph();plot.igraph();dev.off().
anyway, the python / r method of first defining a new object then calling it is an extra step compared to stata loops (where the looping local can expand directly) but it’s still reasonably easy.
this has proven really difficult to me so instead i wrote analternate version of stata2pajek that let’s me do this within stata.
mike wanted to do this in bash but couldn’t figure out how to pass arguments from the shell to r. frankly, i don’t know how to do this either which is why my solution is to have stata write and execute an r source file so all the argument passing occurs within stata.
i’d like to be able to use the terminal mode for r as this would let me to reach my nirvana-like goal of having a single script that does everything without any proximate human intervention.
once imagemagick is installed, i can do everything from directly within r usingsystem() .
vertices are stations, which turn black when the station has begun playing “my humps” by black eyed peas.
textwrangler and smultron already support r, but getting it for textmate requires the terminal: cd "~/library/application support/textmate/bundles" svn co http://svn.textmate.org/trunk/bundles/r.tmbundle/ note that 64-bit r is buggy so if you have trouble piping scripts from textmate to rdaemon (i.e., the command line r running in the background), you can use the bundle editor to redirect it to “r32″ instead of just “r” which will force it to use the slightly slower but more reliable 32-bit r.
l_ply(g.list, plot, layout=la, vertex.size=4, vertex.label=na, edge.color="gray60", edge.arrow.size=0.3, margin=0) dev.off() timestamp() ### finally, generate the gif without having to renumber the files ### individually.
importspss.ado (requires r) | gabriel | mike gruszczynski has a post up pointing out that you can use r to translate files, for instance from spss to stata.
the preferred way to do this is to read in the network file to r then merge in the vertice-level trait (or more technically, read the vertice data and associate it with the network data).
setwd("~/documents/sjt/radio/survey") #ties bounded to only top 40, includes adoption time color-codes, but use is optional chrnetbounded <- read.graph("ties_bounded_humpcolor.net", c("pajek"))
also, as long as you’re playing with the textmate library, you might as well install “getbundles,” a gui frontend for browsing the textmate bundle server.
with some help from brian and kieran, i ultimately got it to work and the results are inthis post (as well as a presentation at a mini-conference i made a few days later).
*importspss.ado *by ghr 6/29/2010 *this script uses r to translate spss to stata *it takes as arguments the spss file and stata file *adapted from http://mikegruz.tumblr.com/post/704966440/convert-spss-to-stata-without-stat-transfer *dependency: r and library(foreign)
much how like i can do this for stata to launch a do-file into the stata gui exec /applications/stata/statamp.app/contents/macos/statamp ~/documents/book/stata/import.do november 24, 2009 at 4:42 am gabrielrossman 11 comments | pierre | it’s amazing how r can make complicated things look simple and simple things look complicated.
i haven’t run a timestamped comparison, but my impression is that this is much faster than comparable operations in pajek or nwb and appreciably faster than doing scatterplots in stata.
this follows my general philosophy of doing a lot of code mise en place in a user-friendly language so i can spend as little time as necessary in r. (note that you could just as easily write this in bash, but i figured this way you can a) make it cross-platform and b) attach it to “use” for a one-stop shop “import” command).
r on the other hand has two features that make it a great tool for data management: in my next post, i’ll try to explain why i keep using stata despite all this… april 28, 2009 at 12:57 pm pkremp 9 comments newer posts theme: blix by sebastian schmieg .
(to make it fair, i commented out the “pdf” version of the flipbook, which only appears in the “old” code — this saves about one second).
to accomplish this, i just added these lines of code to the end of yesterday’s script.
| gabriel | mike gruszczynski has a post up pointing out that you can use r to translate files, for instance from spss to stata.
specifically, i’m trying to merge diffusion data onto a network graph and plot it as kind of a slideshow, where each successive image is a new period.
related to this is that the typical stata line has the syntax “verb object, adverb” whereas the typical r line has the syntax “object <- verb(object2, adverb)” the two combine in an obvious way with something as simple as opening a dataset, which is justuse file in stata but is filehandle <- read.table(“file”) in r, that is, there’s not a read.table() command but a read.table() function and you feed this function to a handle.
kieran very generously further improved on the code at his own blog using simulated data.
*importspss.ado *by ghr 6/29/2010 *this script uses r to translate spss to stata *it takes as arguments the spss file and stata file *adapted from http://mikegruz.tumblr.com/post/704966440/convert-spss-to-stata-without-stat-transfer *dependency: r and library(foreign)
