[[r[skutitle], r[contactme], r[email]] for r in  records] contactrecords.sort() # default sort will group by sku title  contactrecords =
it's a personal thing i suppose.
based on existing matured capabilities, rather than anticipating x will reach y state if modules are ported ...etc, which is not guaranteed.
recently a friend asked me if i could help him write a script for manipulating a dataset in text-file for his research project.
eivind eklund november 27, 2003 1:29 pm
suppose we have to automate the server configuration process.
store the fields in an array called record.
i have been in management a long time but love programming.
personal bytes » blog archive some links..
standard and defacto standard ways of doing common tasks make for better maintainability.
it's strength and flexibility makes it perfect for fast development/prototyping.
i decided to redo the ruby version since that is my language of choice, and have made this much shorter (slightly more than 50% fewer loc) and quite a bit more efficient (by rejecting unwanted records as they are read, rather than going through all records again later and also by not sorting before rejecting), and made a small change to the output---which was to remove the contactme field, since i would expect that it would not be required any further.
i came here looking for a good discussion on what language was the best to use in a given situation and found a very well developed discussion on programming in general, which is good.
i'd been writing perl for many years, but i found i could accomplish the same tasks in much cleaner ways with far fewer mistakes coding in ruby.
this is a really useful post.
i agree with that - maintaining a sense of context becomes mind-bending.
in my case -- and it's been 18 years since i wrote my first perl program -- perl has time and again proven its value in the must diverse and unsuspect circumstances.
yes, specially because of the sigils thing.
there are a number of open source rexx's available including several object-oriented rexx's.
larry and company have gone through great pains -- years of polishing and fine tuning -- to get perl to have that well-worn comfortable feel.
i have not seen anything in ruby that compares.
days of one liners are over ; you may spend 5 minutes writing that one line, and make people(including yourself) lose 1000 hours reading it and expanding its meaning in their head.
now i am back to writing 15 line scripts using my newly created libraries.
surrounded by many pythonistas, i fully intended to make the jump to python, but it felt awkward to me.
there is no question about it.
for your example, creating a class is needless overhead unless this is embedded in a larger context.
rubygems has got to be close to rivaling cpan in breadth, if not in depth (i'm referring to a comment up there ^^^ from 2006).
i decided to solve this problem in each language and then compare the resulting programs.
mark mcdonald may 17, 2007 6:08 pm #where in perl you can write : #my %blah; #$blah{dum}[2][7]{verydum}[0]="tralala"; #which creates all arrays and hashes along the line #its more convoluted in ruby.
then you get nice names such as $arg, $os_error, $child_error, and $eval_error in stead of $_, $!, $?, and $@. if it were not for this module (its been a core module for a while now, so it works anywhere)
" no code that works and is easy to understand is powerful.
of course you can write clean code in those, but the language structures support it less.
byeaureliano december 15, 2008 9:54 am to all above: nice discussion.
jon ------------------------------- "the difference between theory and reality is that in theory, there is no difference, but in reality, there is.
zack april 5, 2008 4:21 pm
» [...] two (1,2) interesting personal comparasions of perl vs ruby vs python (both evaluating ruby and python after thinking about replacing perl — not suited for perl addicts ;-) [...]sciolizer june 19, 2006 8:03 am "specialization is for insects.
python is practical like recipe.
i have my own conventions when i program perl so i won't get confused when i read the code later.
kiran thanks for the comparison, i prefer python over perl for complicated programs.
[] for line in  fileinput.input(): record =
cpan in itself could be an excuse for one to choose perl (the pdf::api2 comes to mind, for instance, allowing me to do image manipulation and typesetting work with chinese/unicode, the latter being something that not even knuth's tex would allow me to accomplish).
sys.stdin.readlines()[1:] # the slice gets rid of the field names.
it has helped me determine that i'm on the right course in that i should consider all aspects of every project and chose the best language for the individual task at hand.
this task, which required 2 full time employees to assemble the catalogue every fortnight, is now done by the program and through the internet, sparing my employees who can now perform more productive work.
i found all versions of all programs above very readable (perhaps i'm gifted?
but get real - almost nobody does.
well, after having gone through all the chapters and done many of the exercises, i realized that... perl and my brain go in different directions.
i was very proficient with rexx (if anyone knows that that is) which i loved.
both are working towards integration with cocoa, but again python is further along.
is due the existence of novice programmers.
the likelihood of that mostly rests on education of future programmers (right now we're churning out idiots)...
people that write one liners will have their name cursed...those of you who write poorly documented code won't fare much better either.
perhaps somethings such as strings should (optionally?) not be an object.
use variables only for stable phase objects!
if a programming language could input this and give the correct results, in my opinion, this is the best language.
wow, i love this thread.
i realize this thread is a bit dead, but here's a perl solution that reduces 'line noise', being rather maintainable while still making good use of perlisms (just because something can be expressed on one line doesn't mean you should slurp it onto one line): #!
both perl5 and ruby are reasonably terse, and can have both good function-point density and comment density in a page of code.
michael tsai - blog - perl vs. python vs. ruby … in perl, i might have tried to avoid perl
this helped me to choose lang.
since the perl community acknowledged and started devising problems for this short-coming, i was more comfortable returning to perl.
i like that with mine it is more clear which field we are sorting and filtering on.
and what is the situation in the field of bioinformatics?
i like and use all three, altough i am currently more proficient in python...n3xtl3v3l february 22, 2007 5:30 pm
but always remember: you can write fortran in any language.
imho good, supportable program should not have them - it requires knowing language to read them.
i’ve been using perl for several years and am very comfortable with it, although i’m definitely not an expert.
tom c july 20, 2007 6:59 pm i find it interesting the number of programmers who assume that shorter code == better code.
summary: ------- for high calculation and graphics - use python [scipy, wx are just gr8] for standalone apps - use python
i want someone (not necessarily someone conversant in the language!) to be able to go back to the code and quickly grok what it is doing.
but it is hard to run the scripts without the example stuff.
the whole thing could probably be done with one s///ge in perl, but that wasn't what i was going for.
it's like going from learning italian, then spanish, then portuguese, and then arabic.
for an indepth view, just check the documentation of perl itself, available through the console, or just googling perldoc perlanonymous january 27, 2009 12:31 am this can be achieved in a single line of bash shell scripting: cat inputfile | awk '{if($27=="1") print}' | sort -k 34 | awk '{print $34 $17}' assumptions: 1) inputfile is the input data file 2) as shown in an example above email is the 17th field, contactme is the 27th field and skutitle is the 34th field respectively.
create another array, records and fill it with all the records.
and i previoulsy had c/c++ exp.(ofcoursely relatively very small).
november 19, 2007 5:51 pm why do you use such complex languages?
the reason being that the team that would maintain it afterwards knew python the best.
neil c august 7, 2007 8:00 am this post and comments has confirmed that for me: (1) python code is far easier to read than ruby or perl code.
i guess once you learn one of them (perl, python or ruby) you will just hold to it.
whereas the second requires you to check what the removeallwhitespaces method is actually doing, and if it isn't doing it, then you have the problem of figuring out whether that behaviour is correct or not (better hope the comments/docs are good ;) ).
- unless somebody has a nice way to do this ? - i am doing a python / ruby comparison trying do decide which language to choose for a big project that i have before me.
do i comment on discussions/blogs/forums etc.
there is an example below (not tested).
foreach my $line ( <> ) ouch!
still under java of course.
the best programming language must: 1.
after the hour of carefully reading through this thread, i am now...drum roll...still a perl programmer.
i would have happily never written another line of perl code.
it takes what other languages accomplish, does it faster, with less code, and makes it fun to write.
esellerate gives me a  tab-delimited file containing information about the people who boughtmy  shareware.
perl really is the swiss army knife from hell.
since most of the time you don't know who this will be, i'd always go for perl as it's the most widly known scripting language - even if it gives you the most rope to hang yourself.
the $ on variables is actually a good thing.
{ my @record = map {s/"//g; $_} split("\t", $line); push(@records, @record); } i really do not see the need for the intermediate @record variable, and from the description above it seems to me that you may really want push(@records, \@record); instead (in which case it's still not really needed either).
i don't know for the rest, but re perl: #!
since this is a plain pipe&filter operation, the way to write it in ruby is imo using filter ops.
i took the liberty to state the jobs greatest to smallest for folks who may not check this out for themselves.
test your variables please, it will make all of us very happy!
ruby follows the perl idiom of bazillions of ways to accomplish the task, but only gajillions (which is much less than bazillions) of them are ruby-esque.
now with parrot, no language can compete with perl!
i like how the  sequence of operations in the first line of thewhile isn’t  “backwards” as it is in the perl and python versions.
% interesting discussion though!
contactrecordsto standard output, with the fields separated by tabs and the records separated by newlines.
27  skutitle = 34 contactrecords =
the language usually doesn't make anywhere near as much of a difference as the programmer's skill does.
is not an in-depth manual.
i hate the absence of type declarations in python, but it appears that pychecker can help out in this regard.
and maybe using more maps or statement modifiers would make the code more perlish and closer to the other examples.
no one language is best at everything, even on a web application, so my conclusion is to learn them all and utilize them in their areas of strengths: perl for text manipulation, shell scripting for simple operations, ruby (most likely) for database integration.
perl is a powerful language, but i think  it’s ugly and encourages writing bad code, so i want to get rid of it.
also, the absence of language-religious fanatics or dumb/flames is a rare find nowadays in the year 2009.
can some one clearly deciphre it?artist mp3
does anyone have an idea of the number of perl vs python users, roughly?
good code is rarely impressive; rather, it's clean and functional.
i would have switched languages long ago.mssram november 30, 2007 1:19 am
#!/usr/bin/ruby records =
another thing we do is review all commits to follow those rules.
that alone should make all 3 of these languages a wise choice.
ben may 13, 2009 10:54 am
anyway, that's my 2cproteus february 22, 2008 11:21
the blocks-by-indentation may be extremely distasteful to curly-brace lovers.
thanks comments rss feed name mail (will not be published) url prev | next blog archives rss rss comments
seeing that it's no longer relevant i did a search on interpretive languages for file/text manipulation and eventually found this thread.
contactrecordsby skutitle.
# some more optimisation.
ruby is bicycle version 2.0.
talking about a waste of time, finding names to those methods would a huge one.
python needs it as well, but its syntax makes the program code more obvious than its perl counterpart.
also, i tend to be much stricter with my libraries than with my scripts, especially when it comes to documentation.
[field.replace('"', '') for field in  line.split("\t")] records.append(record) email = 17 contactme =
quite frankly, i'm not exactly sure where python would fit on the web as there aren't that many tasks that it seems overwhelmingly suited for, but perhaps that's because i don't know it well enough.
james may 18, 2009 9:41 am only one or 2 people have picked up on this, but not as a major point, but when it comes to maintaining; it is often not the one who wrote the code who has to do it.
born00slippy i always found perl to rescue me in the toughest of the circumstances :)from /.
as i only have a livecd distro to work with atm, i was shocked really, when i opened my terminal, and to my utter surprise, when i type "python", sure enough, the interactive python interpreter comes up.
here’s the basic algorithm: record.
blah..blah completely disgusting.
i much prefer python's 'there must be one obviuos way of doing it' over perl's 'there is more than one way...'.
my own perl code is quite readable and usable even after years and years.
(we also review other possible problems in the code.
įdomu, ką tiobe reitingai rodys po
"[/quote] um, it's not.
lambda expressions and composition functions like map and filter seem to be more common than list expressions, but most of the python code i've read was written by java developers, so that may just be a foreign dialect intruding.
if you want some tool intuitive(in these programmers' words object-oriented style) to deal with large dataset in biology, why do you just try r (www.r-project.com), the statistical software package with features they mentioned above in python, like classes, functions, english-style, along with even more powerful extensional packages designated for specific biological analyses.
and here’s the code: perl #!/usr/bin/perl -w use strict; my @records = (); foreach my $line (  <> ) { my @record = map {s/"//g; $_} split("\t", $line);  push(@records, \@record); } my $email = 17; my $contactme = 27; my $skutitle =
python -1 5) great template engines (equal) perl -5, python-2 6) good web framework (django better than catalyst) perl -5, python-3 7) optimized scientific modules (graph & math) python better than perl perl -5, python-4 8) programming web services with ease (equal) perl -6, python-5
you didn't have to worry about embedded delimiters, records spanning multiple lines, and escaped quotes.
[...]japh january 7, 2008 2:58 pm
pm i seems very ignorant/arrogant to choose a language mostly based on how much one can understand without knowing it.
"1", contactrecords) for r  in contactrecords: print "\t".join(r)
here’s a toy problem i wanted to solve.
assume that  there are no quotation marks in the interior of the field.
the same for reference/dereference.)
but as there is a huge base of young people learning to do things, something as strict as java is needed.
it's all in the skill of the coder.
every other aspect of readability boils down to two things - 1) do you know the language, and 2) does your code follow the project/company standards previously established.
things are looking great right now.
well, there's my two cents.
anyway, one must be confortable with the tools one choose.
some perl examples given above are not readable but some are readable.
i am impressed with the opinions and insights.
for me, ruby, despite her few warts, flows in a way that i haven't been able to duplicate in python.
[field.replace('"', '') for field in line.split("\t")] records.append(record) email = 17 contactme =
in bartek's solution, changing for record in [line.split('\t') for line in sys.stdin]:
ruby #!/usr/bin/ruby records =
i really do like the cleanliness of the python.
anyone reading that sort of code at work is probably going to have nightmares with gigantic (^[a-z])'s...
readability, english-ness etc.
perl is easy to maintain, scale, and debug.
ruby and python use too much of english and one poster rightly pointed out that org.
you must learn the power of generators in python.
the microsoft world is a nightmare.
i own a website that has around 200 thousand unique visitors a day, and that was done in php (though i only sat down to write the core engine of the site, which is very math and db intensive; i have rewritten some of it in python recently).
i like this last version a lot, though a lot of the cleanness comes from using $_ and avoiding temporary variables.
though being primarily a basic/c programmer myself, i think i'm going to like python/c and feel at home.
print contactrecords to standard output, with the fields separated by tabs and the records separated by newlines.
[] for line in fileinput.input(): record =
the beauty of perl is what really grabbed me, and that was after i was a professional developer for 10+ years.
[...]xtopher april 13, 2008 3:05 am my principal tool of choice was perl for several years; then it was python for several years; now, i am back to perl.
encourage a readable style of programming.
mark march 3, 2008 8:46 pm re: proteus funny we both found this old discussion so many years later.
the global interpreter lock problem is a sincere impediment.
to this end, i will choose java as being my language of choice.
python tutorial has moved to a new url : http://www.python.org/doc/current/tutorial/index.htmlgenny august 30, 2009 5:49 pm
my scripts are more often than not treated with a weird awe as they can't understand how someone who isn't a "techie" can produce results so quickly... even stupid little scripts such as open (unsorted,"file1.txt"); open (out,">file2.txt"); @orig_list=; @sorted_list=sort(@orig_list); print out @sorted_list; however, my scripts seem to reach critical mass at a certain number of lines (this could well be my lack of skill).
my rule of thumb is that if my script gets much longer than 200 lines, it probably has some ideas that i can (and should) abstract into modules.
i do not, and have never liked python's syntax, for whatever reason, i don't like it.
my ($email,$contactme,$skutitle,@contactrecords)=(17,27,34); push @contactrecords,[$_->[$skutitle],$_->[$contactme],$_->[$email]] for @records; and not like : my $email = 17; my $contactme = 27; my $skutitle = 34; my @contactrecords = (); foreach my $r ( @records ) { push(@contactrecords, [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } the comment thread clearly needs more code examples: #!
the immediacy of the language really charmed me as i could now write programs that made sense to me very quickly and with little effort.
i've been a spamsieve user for many years (and love it).michael brian: certainly, it can only help python's popularity, however i was under the impression that python was already more widely used than ruby.
remembering someone mentioning perl being very well suited for such purposes (ie bioinformatics) i went online for a quick tutorial and very quickly came up with the script which did the job and had fun doing it =)
programming is complex why would i use a language thats hard to read and understand.
what we really like in perl is very huge cpan archive.
iam new to these three langs
{|field| field.gsub('"', '') } records ).
hit and posted the durned thing!
sed has it all, if you can be sure the input is in a fixed format.
otherwise, and more similarly to what you did, my ($email, $contactme, $skutitle) =
when i learned java, my basic programs became more structured.
nb: i'm not bragging; i've written code that falls into both the former and the latter categories.
but the perl community took to heart the criticism of the programmers who fled to pyhton.
the point i am trying to make is that all languages have their strengths and weaknesses.
/usr/bin/perl $,="\t"; $\="\n"; print @$_
the most important thing, by far, for me is maintainability.
no matter how much better you *think* you can do it.
i would have stayed with python.
sh cat x | # open file and process tr -d "\"" | # remove quotes grep "^.* 1 "| # regex to find proper rows (tabs inside quotes) cut -d" " -f 1,3 | # cut fields 1 & 3 (tabs inside quotes) sort # sort and display to stdout =
although the thread has argued long and hard over readability of code, i believe this finally boils down to individual style.
/usr/bin/env ruby b = [] a = `curl -s http://www.mjtsai.com/blog/files/2002-11-25-sample-input.txt` a.gsub!
# default sort  will group by sku title contactrecords.reject!
one thing that python has and gcc doesn't is, have you ever seen a current, stable gcc windows xp x64 binary?
i've deliberately tried not to be too terse.
anyway, end of commentmark aufflick
as i said, i'm not a full time programmer so for me an intuitive and english-like style is a big plus since i might not touch a script for months.
into: for record in (line.split('\t') for line in sys.stdin): would change the full list comprehension into a generator, meaning it will only read the next line when the loop iterates.
"thats just seems stupid" ------------learn---------------------------- ------------and----------------------------- -------------use--------------------------- -------------python------------------------ python may or may not be the language that brings about a computer-programming-for-everybody world.
my $email = 17; my $contactme = 27; my $skutitle = 34; you may find constant.pm useful in cases like this.
map, grep, filter are too complex to support.
although it is interesting somewhat, it only matters in the very beginning.
to the warm blanket above).vsb october 14, 2009 2:43 am awk was the best suited then, now and in future for the task mentioned above.
(2) list comprehensions are much clearer to read than map/filter/lambda (3) the .join string method is a blight upon the otherwise clear python syntax.
tend october 28, 2007 4:12 pm i will agree with tom c that it is more of a matter of style since any language allows you to write in a lengthy or short way.
you cannot look at this code snippet and just "know" what it's meant to do without reading ever single line and mentally parsing/executing it.
but it doesn't have a recognizable syntax.
in my first job i had to program monte carlo simulations and markov-chain algorithms in c, which after compilation was send to mini computers that required a couple of hours to come back with the results.
vlad december 31, 2008 5:18 pm perl may be cryptic....
i have been recently learning and scripting in ruby, and i could not be happier, an excellent language that has been eating up and converting some of the oldest perl programmers.
proteus march 31, 2009 7:56 pm
kerry kartchner i find it interesting that, particularly with the python and ruby solutions, nobody chose to use classes.
contactrecordswhere contactme is not 1.
they did ) have as well that wider acceptance.
there are many tutorials about specific sub-topics in perl, but maybe you better try http://perldoc.perl.org/perlintro.html first.
{|field| field.gsub('"', '') } records  ) { my @record= split("\t"); next if($record[$contactme] ne '"1"'); $record[$email] =~ s/"//g; $record[$skutitle] =~ s/"//g; print $record[$skutitle]."\t"; print $record[$email]."\n"; } you can even try something like s/^"(.+)"$/$1/ to try to remove only the external quotes (but then i guess potential quote inside the quotes need to be escaped) $ perl foo.pl 2002-11-25-sample-input.txt product1 foo0@bar.com product3foo2@bar.com product2
as such, i have had a chance do program in a number of languages, both systemic and dynamic, such as lisp, c, c++, fortran, pascal, perl, python, ruby, .net, visual basic, sed, awk, tcl/tk, etc.
i won't repeat all the reasons here but you can read my post if you like athttp://www.strangeblueplanet.com/2008/10/perl-python-ruby.htmlmichael tsai sbp editor: it sounds like you have some misconceptions about how python works.stevebsd i'm trying to create this blog on programming in different languages.
the beauty with any good agile language (like these three) is that while you can get started quite easily, the deeper you understand it the more productive you get (and the richer programs you can easily create).
as someone in the thread pointed out ... perl is like art and i agree.
in such case which can score better?
with perl, i forgot what i was doing even after coffee break.
perl is an abomination.
oh, i also agree that perl is the swiss army knife hell.
i have never programmed a single line in my entire life, but i read this post and its comments with great pleasure.
but many times, we have non-perl programmers looking at the code (we use many languages, from java, visual basic, asp, c adn perl) and many systems interact here, each part written by different companies with different language choices.
but my point is why should you go and hang yourself at all?
anyway, feed the sample file to the shell script as standard input.
python, perl and indeed php have many similar problem domains, and there is no question, that if i am in one of those domains, i prefer python every time.
now with parrot, no language can compete with perl!"
it provides an strict syntax that allows the compiler to remove thousands of trivial errors, and allow the novice programmers to have a more readable high level version than something written in c++, plus the portability.
i already write well-structured, easy-to-read, non-obfuscated code 5.
there's also the environment ; if you have a huge ide with tons of automated tasks and refactorings, it won't be a hurdle to clean your code, so your code will be cleaner.
even though i only knew it for days, it feels, weirdly comforting and nice (ref.
perl is a powerful language, but i think it’s ugly and encourages writing bad code, so i want to get rid of it.
@list = sort { $a->[0] cmp $b->[1] } grep { $a->[1] ==
what are you using these days to solve problems similar to the original one?
all three languages have had 9 years of additional development and maturity.
when there is a better horse, i'll switch my bet.
it was painful but very enlightening to refactor and now i have an extensible (extendable) library that i can use for my research that should carry me through my thesis and quite possibly beyond.
the only thing i hate about perl5 is the lack of a nicer oop syntax.
this thread make me more confused about selecting a correct scripting language.
can you also even imagine writing a module containing wrapper methods around the infinity of possibilities regular expressions give you?
generally perl is preferred over python mainly because of the advantages perl modules offer over that of python.
rexx continues to be distributed with ibm systems and there has been an ansi standard for rexx since 1996.
over the past few weeks i  read thepython tutorial and the non-reference parts of programming ruby,  however as of this afternoon i’d not written any python or ruby code yet.
i am not sure that is true :-)
of 5 routines i rewrote in c, one ran faster than the original perl code, 3 of them ran as fast as... and one ran more slowly than the original perl code!!!
shell script like old unix guy says...
also, if you were inside a function, the my and our definitions would relate to you the scoping the author was trying to achieve.
so i took it up to learn a new language even though i would be perfectly comfortable writing it in php or perl (or c/c++, for that matter).
i was surprised but that apparently had to do with perl's dynamic allocation of memory.
january 25, 2008 7:19 pm
further, having $, @, % helps me to know the datatype at any point in the program than just a name as used in python, java, c++ etc.
/usr/bin/perl print join("\t", @$_), "\n" for sort { $a->[0] cmp $b->[0]
zkr ryz august 30, 2007 9:56 am a word on why these excellent languages have not become the mainstream in the last decade.
i suspect that the python community will figure these out ... and not take as long as the perl communities release of perl6 ...
say we have to modify /etc/inittab and change it to init 3.
if you know them all, you can 1.
while (my $rec = $csv->getline_hr($fh)) { push @contactrecords, [$rec->{email}, $rec->{sku_title}, $rec->{contact_me}]; } @contactrecords = grep $_->[contact_me], sort {$a->[sku_title] cmp $b->[sku_title]} @contactrecords; for my $rec (@contactrecords) { $csv->combine(@$rec); print $csv->string, "\n"; } hi all, really interesting thread, i learned a lot...thanks!
currently one my hobbies is to play with math intensive coding that explores the intricacies of the zeta function and the riemann hypothesis (all programing done in perl).
tho after spending a really long time going through this page, i think i'm settling on perl.
:-) the whole argument that one can write easy-to-read perl code is, to me, kind of vacuous.
that's a real win for short scripts like this one.
objects orientation comes at a price (~20% from some simple benchmarks).
at this point i defer to tom c's brilliant comment: "the language usually doesn't make anywhere near as much of a difference as the programmer's skill does.
btw, i write/have written in many languages over the years, including like john, in alc for the 370, cobol, pl/i, c, c++, objective-c (before it was used on the mac :-), java, rexx, python, ruby, sql, etc.
i am a perl guy and just wanted to add my notes and clarify a few points, especially about the 200-line 'mental limit' for perl scripts.
terrible sponge november 26, 2007 8:21
:)dan december 4, 2008 2:24 pm perl have been, is and remains the most powerful piece of software.
like many others, i had to face the biblical dilemma perl vs python (i hardly knew about the existence of ruby at that time).
before i came to it, i was an experienced, long-time perl programmer with major doubts about my chosen language.
from csv import reader, quote_none from sys import argv, stdin for row in reader(stdin.readlines(), delimiter='\t', quoting=quote_none):
my %blah; $blah{dum}[2][7]{verydum}[0]="tralala"; which creates all arrays and hashes along the line its more convoluted in ruby.
my @recs = sort { $a->[0] cmp $b->[0] } grep { $_->[1] eq '1' } map { my @r = split /\t/; [map { s/"//g; $_ } @r[34, 27, 17]] } <>; print join("\t", @$_), "\n" for @recs;michael gavin: i definitely should have used the array slice idiom rather than writing out [$$r[$skutitle], $$r[$contactme], $$r[$email]].
perl6 is a quantum-leap toward a full-featured dynamic programming platform.
my @records = (); incidentally, my @records; is just as fine.
it almost always takes much longer to roll your own than it does to learn a new system.
but if the aim here is to accomplish a goal and speed is not a crucial factor, then the following perl code would be a better solution, as it is more self-documenting.
if you write bad ugly code you've got nobody to blame but yourself.
i was a mainframe alc/cobol programmer for years before venturing into java/c++ a little then was "promoted" (lol) to management.
ruby and python are far more similar than they are different.
what we do to avoid complex constructions is we have our internal rules which developers should follow.
http://graphcomp.com/opengl/benchmarks perl provides opengl performance comparable to c, and much faster than python; i suspect that ruby will also be faster than python, and close to perl.
python is a hybrid o-o language that is a good replacement for basic as a introductory tutorial language, yet has sufficient power to displace perl for many tasks in the perl domain.
ruby is a pure o-o language that should appeal to perl programmers.
i decided to solve this problem in each language and then compare the  resulting programs.
perl is faster than python even using pyscho doesn't help(offers a max of 4x speed than the original version).
i guess i need to learn at least two out of the three.
nowadays though, the programmer's time should be worth more than the computer's, so rapid development time and maintainability are key.
python #!/usr/bin/python import fileinput records =
it has worked well for me 3.
john november 13, 2009 7:22 pm awesome thread.
michel started with perl but settled (happy with python).
for god sake help me god bless ujust another programming language designer january 1, 2009 8:08
of course if you're building a large collaborative website, choose your environment first (like my personal favourite openacs or perhaps zope).
if python 'has only one way to do it', how come we've got dozens of variants above?genny august 30, 2009 6:06
this is because the modules tends to focus on a much more clearly defined target, which makes the context much narrower.
you simply cannot survive without the regular expression (imho, the real swiss army knife) at your back, when you are thrown into the tremendous biological text data desert.
we can write maintainable code in perl too.
but it is currently the best contender.
the algorithm i chose was just the first one that came to mind.
here's something which is simpler but still idoimatic, and in my opinion, easier on the eye than your example.
however, given a small computing task that needs to be done *right now* with little fuss i'll probably always do it in perl and probably will be doing until my fingers can no longer type.
here is my solution to this problem in python: #!/usr/bin/env python import fileinput email, contact, sku = 17, 27, 34 records =
in your code; i turned it) as early as possible in the stream.
i found couple of tutorials over google but they are not good enough.
although i can program in many languages i am hooked on perl.
legibility near the level of line-noise is perl's greatest weakness -- perl developers who write legible code are the exception, not the norm.
did you program spamsieve in python?
the poster who recommended choosing your featureset/api first, then learning the language required, was spot on.
once you've done, you will never want to come back to dumb wrappers like .removeallwhitespaces().
so once i get a bit better at python, i'll post my solution and see how it fares against these others (there hasn't been a new example in a few years).
here's one of the possible (simplified) ways i would do it: it should comply with your requirements as described above.
cpan does have it's problems, but its wealth as others have pointed out is remarkable.
perl, python or ruby ....
i do think the crosstalk between the languages is a good thing and appreciate all the great code that comes out of each camp.
with comments, it is just mix of english everywhere and just imagine you write a comment in near line syntax and missed the "#" or "//" whatever.
esellerate gives me a tab-delimited file containing information about the people who boughtmy shareware.
they started the tracking in 2005 and it is current to date.
especially perl > 5.6 with the 'our' scoping option.
that improves readability when you try to follow.
and the pass by reference...
the first time i encountered that, i pretty much figured that perl was a poorly designed language hack, even if it did make some things "easy to do".
where in perl you can write :
once you are expert at any one of them, there would probably be little reason to ever switch to another.
i even think it is possible to convert perl to any language without even changing to other interpreter :)
i'm a biologist who sometimes has to analyze large datasets so a few months ago i convinced myself to learn a scripting language.
here’s the basic algorithm: read each line of standard input and break it into fields at each tab.
i was expecting ruby code to be more easy to read, but definitely python looks easier in this comparison.
i also like cpan as a repository better than anything similar offered by any language, period.
i found perl often to be counterintuitive (the concept of default variable appeared to me mysterious, unnecessary and that $_ look didn't help.
actually i think this is the reason java is so successful.
bottom line is that a good programmer will even mix his programming languages in a single project when possible to take advantage of their individual strengths.
being a biologist, i found perl+r+mysql almost can do every thing one can encounter.
i guess i'd rather write my own library/extension in/for ruby (which one has to do less frequently these days) than use an existing solution in python or perl.
seriously, it's unfair to compare bad perl code that doesn't use common idioms.
good programmers rarely brag about it, rather they just know that it's what they're paid to do, and they do it instinctively.
on the other hand, your example is both idiomatic and ugly (to me).
nevertheless i was aware of all the hullabaloo about python and ruby and i thought i may need to upgrade.
use what you learned from the other languages to better design something in the one.
also it's emphasis on "only one way to do something" (the pythonic way).
guo september 11, 2007 9:30 pm
the reason why i think none of these excellent programming languages have become the mainstream and will never do at least for another 10 yrs.
ruby on rails is a home run in that problem domain.
ruby drives more like a lexus than a toyota to me, although i still like taking out the bmw and the chevy for a drive!!!
i think list comprehension are good when used with moderation
hi, very interesting posts!
accept a readable style of programming.
this has got to be the most surreal thread i've ever read.
it's true that you could drop the "use strict;" pragma and then avoid having to use "my", but imho perl 5's variable scoping options is one of it's greatest features.
has some share of either of three.
let me tell about my experience with perl.
i am back to my beloved perl and i will never sin again.
i’ve  been using perl for several years and am very comfortable with it, although  i’m definitely not an expert.
why have 50 almost-the-same regexp functions, then another 50 for case insensitive operations?
my hunch/hope is that they're doing/have-done the same thing with perl 6, but i haven't learned perl 6 yet.
#- unless somebody has a nice way to do this ?
early optimization (in other words, optimizing before you know the scope of the problem) is a telltale giveaway of a programmer who thinks he knows more than he does.
as someone who has worked in everything ranging from windows/vb -> solaris/java -> linux/php/perl, i have only found my skills getting stronger with each new task/project.
i'm afraid that you'll find your skill-relevance will have evaporated in about 5 years.
def parseline(line): fieldlist = line.split('\t') return customer(int(clean(fieldlist[27])), clean(fieldlist[34]), clean(fieldlist[17]))
i wanted a script to extract from this file the e-mail addresses of  people who asked to be contacted when i release the new versions of the  products.
[[r[i] for i in sku, contact, email] for r in records if r[contact]=="1"] contacts.sort() for r in contacts: print "\t".join(r) print '\t'.join(sorted(contacts)) will save you two more lines but will it make the code better??
so while this is an interesting read (esp.
do you believe that compile time vs. runtime error check makes a difference with the novice programmers, that is with the 80% of the programmers out there.
in the case of my website for instance, i decided to rewrite the core engine in python, even though i had never coded in that language (not perl, contrary to /.'s argument).
('"', '') a.each {|l| b << l.split("\t").values_at(34, 27, 17)} b[1..-1].sort!.each {|l| puts l.join("\t")
i'm not saying there is anything wrong with compiled code, but in many cases, especially with the rise of web applications, this holds true.
but i agree that it’s a good idea to use the idioms of the language you are writing in, so i think the solution is for me to learn a language that has a more appealing style.
is this 200+ line mental limit on perl scripts a feature or a bug?
that was aswell the reason why smalltalk, and even things like objective-c did not had the acceptance that c, c++ and java had.
am many thanks to all who haver so far participated in this lengthy, but friendly and thoughtful thread.
#!/usr/bin/python import sys import string def clean(quotedstring): return quotedstring.strip()[1:-1] #get rid of whitespace and slice the quotes off the end.
like i mentioned in my comment (jan 7), i look at each new problem/project individually, and try to select the tools accordingly.
(17, 27, 34); i'm not commenting the rest of your code because it seems more awkward perl code.
as such the best language to use is one that's most likely to be known by the maintainer.
"1" "foo1@bar.com" "product3" "1" "foo2@bar.com"
wrt syntax differences between the three scripting languages), i don't think it's terribly edifying.
you can, of course, incur an expensive fork process, but then passing values between the seperate processes becomes expensive.
spamsieve is written in objective-c, however i use python in eaglefiler and dropdmg, as well as during the development process for all my apps.
(i will say nothing about his "zeta function and the riemann hypothesis... or the chinese typesetting" he he he...
other times, i have found documented code in whatever language, and it is sooo much easier.
you don't understand.
== '__main__': customers =
marktroy may 21, 2007 10:09 pm this requirement is most efficiently done in standard bourne shell... % cat x "skutitle" "contactme" "email" "product1" "0" "foo@bar.com" "product2"
good code is optimized late.
foreach my $r ( @records ) { push(@contactrecords, [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } .... .... hundreds of lines of code here .... .... .... foreach my $r ( @contactrecords ) { my @rec = @{$r}; #--- contactrecords is an array of records print join("\t", @rec), "\n"; } of course i know that every perl programmer will assume that @contactrecords is like that...
good code is easy to read.
p.s. sorry for my englishthoran hi, thanks for the comparison.
good programmers produce good code.
and for what i do, python has two annoying quirks, both related to performance.
once the task becomes cpu bound on one of the processors of your smp box.
ruby's author took the best of perl and the best of python to create ruby (other developer's idea of "best" may vary).
after a few hundred lines the ability to quickly surmise what's going on becomes suddenly more challenging.
having to see a lot of code from others programmers, having them forced to indent correctly seems like a nice feature.
even if you are concerned by readability, perl is very customizable.
its possible to write unreadable code in any language.
#!/usr/bin/perl use strict; use sort::fields; # you can use these as comments #my $email = 17; #my $contactme = 27; #my $skutitle = 34; my @selectedrecords; while () { my @array = split (/\t/); next if $array[27] ne "\"1\""; push (@selectedrecords,"$array[17]\t$array[27]\t$array[34]"); } print map { "$_\n" } fieldsort '\t' , [3], @selectedrecords; alpha monk i realize this as a 7 year old weblog(blog) post, but i wonder what michael tsai is using as a programming language, when dealing with text now.
i'm not fond of the ugly perl syntax myself.
probably that is also the reason why m$ "languages" ( are they programming languages yet
i have recently started to dabble with python and, thanks to this great article/discussion will also look at ruby.
i still don't know which language is better to become more familiar with.
so, not only learn these, but lisps, haskell, tcl, etc.. and yes, regex.
matt b.godhack july 4, 2008 7:32 pm useless talks... perl is art like poetry.
it seems very common sense to somebody coming from another language.
while python allows you to do a job, perl allows you to do it "and" dream.
i coded it first in ruby, and then ported the code to python and perl,  changing it as little as possible.
i wanted a script to extract from this file the e-mail addresses of people who asked to be contacted when i release the new versions of the products.
i'd like to finish with a couple of questions.
of course it reflects my personal coding preferences: #!/usr/bin/perl use strict; use warnings; my @records; push @records, [ (/"(.*?)"/g)[17,27,34] ] while <>; ($\,$")=($/,"\t"); print "@$_" for sort { $a->[0] cmp $b->[0] } grep $_->[1] eq '1', @records; __end__q june 18, 2005 4:24 am blazar, while this is perfectly reasonable perl code for a seasoned veteran like you or me, it demonstrates perfectly why perl is such a horrible language for writing intuitive and maintainable code.
leo i know this thread is old, but i couldn't resist to post my perl version.
somewhere i found a post that did something like this: data = hash.new() hashfactory = lambda { hash.new {|h,k| h[k] = hashfactory.call} } data =
hashfactory.call data[:x][:y]['z'][1] = 2121 puts data.inspect #{:x=>{:y=>{"z"=>{1=>2121}}}} hope this helps!
bkb do you think you could put the example text back up?
it may be a bit more true for perl, as it has been candidly confessed by its developers "more than enough rope to hang yourself".
thus, the style is perhaps not canonical python or perl, although since i’m new to ruby it’s probably not canonical ruby either.
y product2 foo1@bar.com product3 foo2@bar.com
we use php for such programs.
a few years ago i discovered perl.
and so my career path took a different turn (config mngmt).
remove the elements of contactrecords where contactme is not  1.
i didn't think so, only thing that i've seen for windows x64 would be the ms vc .net
i blogged about this same topic... to me ruby comes out way ahead almost all cases...
i prefer to go with perl.
my focus is always on getting the job done.
the best rejoinder is probably perl best practices, by damian conway.
interesting blog and comments.palash february 12, 2010 4:51 pm really an interesting discussion.
the if $rec[contactme] in the while loop goes against that, but could easily be moved into the for loop.
so almost both are nearly equals with a bit of advantage with perl.
i used rexx for a long time, but use python almost exclusively now.
pm list comprehensions are by now very idomatic in python.
i learned the basics quite quickly and soon i could write useful scripts to make my life easier.
some cool stuff written in it, though.
interpreted languages are definitely better in that they done require a re-compile if you switch operating systems.
so, the solution is regardless the language, do comment when is (even barely) worth it.vlad december 31, 2008 5:24 pm btw, the comment "#--- contactrecords is an...." is just an example...
" perl can't do all the work for you.
api/portability differences usually make much more of an impact than syntax.
all are good implementations.
foreach grep { $_->[1] eq "1" } sort { $a->[0] cmp $b->[0] } map { [ @$_[17,27,34] ] } grep { s/"//g for @$_ } map { [ split /\t/ ] } ; intermediate variables it's a rubbish!
am a lot of people complain that perl doesn't look like english.
i think that readable code is useful in a development team that has different programming skills.
here is my preferred solution: http://paste.lisp.org/display/90009 also, read pep8, in python we eschew the use of camelcase.
i felt like i just went through a 7-year long discussion, and never did it stray away from its initial focus (of python, perl, ruby).
ruby is quite something and i expect people will start using ruby for scripting.
i think the syntax also makes the program (at this point i no longer consider it a script) "look" like a garbled mess even though it's still as clear as its smaller cousins.
#!/usr/bin/env ruby -w email = 17 contactme =
throughout the years the occasions when i had to actually sit down and write code varied substantially in size and scope.
people familiar with unix know how pipelines work, and the same idea works here.
you can write easily readable and maintainable perl code, but it's something the language tries hard to prevent you from doing in it's simplest form, as you have demonstrated.
:-)younger unix guy march 27, 2008 5:03 pm word to the old unix guy.
assume that there are no quotation marks in the interior of the field.
i would rather readable, maintainable code over one line programs while developing in group.
i already know that in perl we can write highly readable or highly idiomatic code or both if you write lots of comments.
i have never found a language so powerful, and so "suited' to unix.
kind of reminds me of php where there are a lot of functions that serve almost the same purpose.
emailaddress def __repr__(self): return self.skutitle + "\t" + str(self.contactme) + "\t" + self.emailaddress if __name__
you also copy the whole list with the second list comprehension, which can be transformed into a for loop after the in-place sort.
gavin i was intending my example to be extreme, it's idiomatic but very functional.
i am a ror fan but that is secondary compared to the issue of maintainability of code.
michael tsai - blog - perl vs. python vs. ruby [...] http://mjtsai.com/blog/2002/11/25/perl_vs_python_v… i’m evaluating python and ruby as replacements for perl.
[though django is better than catalyst (less time to process requests), catalyst has a better dbic orm ] love u, sam wow.
as to learning perl better, i dislike looking at perl code, especially when it’s written by perl experts and is highly idiomatic.
sorry, but it looks like that file’s been missing for a long time, and i don’t have an archive handy.
python is anyway naturally clean perl - 1, python -1 2)
regex is not part of the core language, but is part of the python standard library -- but having it be a standard library means that the core language is not intimately regex-ified (this may be a plus or a minus, depending on the programmer and
it could have been anything, of course it just have to be meaningful in the context..
i could program what everyone else could but it took me five times longer
legibility fans may find python's emphasis on fun and legibility to be a major plus.
perl is a very powerful sharp knife, with bazillions of ways to accomplish a task.
am try http://perldoc.perl.org/ then click on "tutorials".
a couple of months ago i had to design a program to assemble a custom-made catalogue with hundred of photos on the fly for our clients, in the format of a pdf file.
i disagree that perl is hard to maintain on larger projects.
'which language can teach me more' is at least as important as 'which language fits my brain'.
i had to look up how join and filter worked, because they weren’t methods of list as i had guessed.
much of any language is going to be planning, and figuring out what works, does so consistently, and provides benefits over other languages.
only few people can play with 'pyrex' perl - 2, python -1 3) mod-perl better than mod-python
then i tried python and that was another story.
the best easy book to learn perl i´ve ever read is perl and cgi for the world wide web: visual quickstart guide, from liz castro.
the one thing i find really really really annoying in ruby (besides the end all over the place ) is the non autovivifying arrays and hashes.
you shouldn't have to comment every second line to make it clear why you are doing something.
i've been writing perl scripts for well, at very least 5 or 6 years, and i still cannot skim through one of my colleague's scripts and know exactly what it does instantly.
make a new array, contactrecords, that contains arrays of just the fields we care about: skutitle, contactme, email.
monday, november 25, 2002 perl vs. python vs. ruby i’m evaluating python and ruby as replacements for perl.
once you get the hang of these idoms then you can use them throughout.
lawl january 16, 2008 3:33 pm until you learn what a regular expression is.
you cannot compare perl and python with such examples/problems.
the problem domain).sbp editor
if the modules are equivalent then python is preferred because its programming style helps the programmer avoid much documentation.
and this idiom is used throughout perl.
please refer to the comment made by anonymous on january 27, 2009 12:31 am to see the simplicity of awk.
(2) cite, please.brian now that google has released the google apps framework which is authored in python, do you think that python will become a more popular choice than ruby?
my example used a two-phase approach, imagining that it would be part of a larger system.
i read all the contributions with interest and i conclude that although python and ruby are nice languages and they indeed force you to write readable and maintainable code, perl has nothing to be envious of them.
peacemuni february 15, 2009 8:24
why in the world did someone come up with the idea in the late 1980s that there had to be two sets of comparison operators, one for numbers and one for strings?
i linked to pdl's web page, and while it looks old, the modules are still in active maintenance and development.
readability is definitely a point which assists a programmer or even a non programmer who wants to learn and improve the code but doesnt have the technical competence in that language.
(sorry in advance if i seem a bit too loosly connected to the subject of this thread)python - dar neatrasta | dirbtuvės [...] korporacijų užnugarius ir didelių projektų, tad artimiausi python populiarumo konkurentai yra perl, ruby ir tikriausiai php bei delphi.
we are quite big project (well, more than 100 requests per second).
but if you write "noisy" code, then comment... dammit
and this is to say nothing about the syntax.
" great stuff all around.
posters like "tom c" and "mark affuleck" made valuable commnets.
make a new array, contactrecords, that contains arrays of  just the fields we care about: skutitle, contactme, email.
some employers have required me to have a comment on every line.
what i'm looking forward to is a time when: the programming retards have changed profession simple applications are programmed using languages like perl6, java7, c#4, etc demanding/important applications are programmed using languages like haskell, scala, erlang, etc.
i used to program in old good 'cobol' language.
that right there i think is one of the keys to perl's success.
jess may 5, 2008 11:23 pm
my point here is that you absolutely must consider who the code will be viewed by and whether they will be able to replace you as their primary programmer after accepting your code.
27 skutitle = 34 contactrecords =
kerry's python example is the only one that really "fits my brain".
michael tsai alpha monk: i’m using python, and i’m very happy with it.
imho python is the least readable language of the three for maintenance as it's more verbose.
those that only bother with one are destined to be the guy that gets laid off when the company moves on without them.
the good languages each have a problem domain (or several) that they are best suited for.
in regards to the various comments about the 'my' keywords in the perl versions.
acceptance is as much an accident of history as it is a matter of goodness.
the program reached maybe 500 or 600 lines before i finally refactored it into many modules.
perl finishes the race and python is not even out of its tracks.
i think the python version is generally the cleanest to read—that is,  it’s the most english-like.
python vs ruby: the flame war « rudimentary art of programming & development [...] michael tsai post. smack down between perl vs python vs ruby.
a real discussion on the internet with gentlemen (sorry if any of the post were from ladies).
by the way, you might think that my collection of modules should have the same 200-line mental limitations, but i find that i can work with a module with many thousands of lines of code and it doesn't bother me.
often projects become a simple stitching together cpan modules.
ok, now a different set of problem.
in this thread different level of developers shared their views.
in perl, you can say:
it also goes to point out that i agree (with whoever now ;-), that knowing multiple languages is invaluable.
looking at other folks code (ahem, java developers listen up), i find the lack of try...catch... disturbing, and the constant drone in logs about java.nullpointer...blah...
ruby follows perl with its integrated regex support.
if i'm to create an script only for my self, and i do not need to read it again and modify it a month later, a super-optimized-obfuscated on line programs makes me feel very happy and proud ( but i don't share that code, otherwise i have always to add comments like the shell version )
am both bartek's and baishampayan's versions read the whole file into the memory before running.
apart from style (i prefer ruby, it is a cleaner design to my view, like smalltalk, but with cleaned-up perl things like integrated regex), there are other things that may sway you for a particular project.
[@$_[34,27,17]] } map { s/"//g for @$_; [@$_] } map { [split /[\t\r\n]/] } ; the perl examples look like jokes...
as a result, i will go with perl (i dabbled in it a long time ago) and will play with the others for fun.zen sand gardens
i recently ran into this very problem with a really simple simulator for my research.
good perl code needs to be documented very heavily in order to be readable over time.
java is slooowly gaining the (lower-order) functional features that c# has been piling on recently.
i had to look up howjoin and filter worked, because they weren’t methods of list as i had guessed.
sure 'word[2:4]' is cooler than 'substr($word,2,4)', but 'substr' is literal and helps to see immediately that i am dealing with a scalar and returning a substring.
perl fans may find python's non-perl to be off-putting.
the >>> interface of python is where we can check the code.
the sample codes include list comprehension, filter, lambda, block, and various perl idioms.
if japh wrote his first perl code 18 years ago then he was using perl before larry wall invented the language!
meaningful syntax and well named intermediate variables are essential to writing code that is "intuitive".
while ruby has a number of nice features, its lack of list comprehensions always frustrates me a bit.
34; my @contactrecords = (); foreach my $r ( @records ) { push(@contactrecords,  [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } @contactrecords = sort  {$$a[0] cmp $$b[0]} @contactrecords; @contactrecords = grep($$_[1] eq  "1", @contactrecords); foreach my $r ( @contactrecords ) { print  join("\t", @$r), "\n"; } the punctuation and my’s make this harder to read than  it should be.
when i learned python, all my programs in java and c# became cleaner (though annoyingly verbose).
but when overdosed make code look very cryptic, like perl maybe...
in the comments of those who spoke for perl i detect something like a certain infatuation with the language and i can relate to this.
since there's often a _good_
we can tweak apache better with perl perl - 3, python -1 4) dbi:x (no such facility in python) perl -4,
resently i was required to learn visual basic (and vba) for a project.
if you want it to decide according to context whether "4.5" is a string or a number, you have to provide a context.
for example, date conversion, file format detection, server processes handling, protocol handling and many many more...muni february 15, 2009 7:47 pm this is in response to a question of perl vs python in the field of bioinformatics.
the website indeed has a list of how many perl jobs, php jobs, ruby jobs and python jobs are available.
if i werejust writing this in perl, i might have tried to avoid perl’s messy syntax for nested arrays and instead used an array of strings.
first time i am planning to use one scripting language for the common administrative purpose.
something like astring.removeallwhitespaces() is pretty clear, gibberish like s/"//g isn't.
i've been programming perl for more than 10 years now, and i have to admint that i really love it.
so, looking at code and understanding it clearly without comments is only good for you, and not another programmer that comes along.
in days of old, we had sed and awk, and we liked 'em: #!
python and ruby both come with mac os x 10.2, both havebbedit language modules,  and both promise a cleaner approach to scripting.
nuovo labs - florida i've been learning python for a few months now, and it's surprisingly easy to learn.
oh, i don't mind jj's solution at all but you need to grok functional programming to get it...
there cannot be a perfect language.
granted, sometimes that is ourselves, but in those cases, like so many of us have pointed out, we'll just do things our own way and cleanliness and commenting go out the window, fast. :-)
so, i came across this page.
thats one of the things that i am really impressed with with python.
the perl community has come a long way.
languages (all modern ones) will get more (lower-order) functional in nature, not less.
who can draw a conclusion then?james september 15, 2007 12:12 pm
too many @ signs, etc.
many times now i have revisited my old code, only to find that i hadn't documented it.
i coded it first in ruby, and then ported the code to python and perl, changing it as little as possible.
foo3@bar.com product3 foo7@bar.com i still don't like list comprehensions [is that what they are called?] -- but, as i said, that's just me...
i think the real key is to find a language that fits in with how you think, whether that's perl or not isn't an issue for me, i just wanted the comparison to be a fair one.
it is more wasteful of space and slightly slower than a some of the above examples, but unless you have a whole lot of records, that shouldn't matter.
and when they do, i will probably be back to python.
1 } something_that_builds_a_list(); in ruby, i'd expect you can do: contactrecords = records .collect {...} .reject!
$r->{$k}; $sep="\t"; } print "\n"; } ------------- christopher wrote: [quote]"no, no.
why not go all the way and make it a one-liner? :-)
if customer.contactme: customers.append( customer) customers.sort( lambda x,y: cmp(x.skutitle, y.skutitle) ) for customer in customers: print customermichael
it really helps saving time which would otherwise spent on programming quite simple things.
i agree with several other posters though, in that good, readable code is "documented code".
is really cheap, and short.
" -robert a. heinlein learn as many languages as you can.
#!/usr/bin/env ruby email, contactme, skutitle = 17, 27, 34 records =
i wouldn't touch python with a long pole if i had to, i'm now completely addicted to the perl way of things and beyond hope.
/usr/bin/perl use strict; use warnings; my @records = (); while ( my $line = ) { chomp $line; my @record = split /\t/, $line; s/"//g foreach @record; push @records, \@record; } my $email = 17; my $contactme = 27; my $skutitle = 34; my @contactrecords = map { [ @$_[ $skutitle, $contactme, $email ] ] } sort { $a->[$skutitle] cmp $b->[$skutitle] } grep { $_->[$contactme] eq '1' } @records; foreach my $r (@contactrecords) { print join( "\t", @$r ), "\n"; }pavel kudinov july 28, 2006 3:40 am #!
having programmed for a quarter century and professionally for 15 years, having gone through literally dozens of languages, operating systems, and development environments, i've come to a few conclusions: 1.
"1"}  contactrecords.each {|r| print r.join("\t"), "\n" } this is actually the shortest version, and i think it’s the easiest  to read if you aren’t put off by the block syntax.
i was trawling through the web for python, ruby, perl comparisons when i saw your excellent discussion.
dr bullshit january 11, 2008 1:10 pm i started programming with c++ and adopted its efficiency and terseness philosophy.
#!/usr/bin/perl use constant {sku_title => 1, contact_me => 2}; use strict; use warnings; use text::csv; my $file = $argv[0] or die "usage: $0 "; open(my $fh, 'new({sep_char => "\t"}); $csv->column_names($csv->getline($fh));
zack april 5, 2008 4:25 pm oh, and one more thing: i had was completly ignorant as to the fact that you could just type "python" or "ruby" or whatever kindof oldskool stuff that that unix guy conjured up, into like 99% of major linux distrobutions.
perl derived some of its functionality from lisp, and since ruby is perl-inspired, i'd expect it has a similar chained mechanism.
i plan to do the same for ruby shortly.
contactrecords, that contains arrays of just the fields we care about: skutitle, contactme, email.
each field is wrapped in quotation marks, so remove them.
cpan module/library that does something common
[] while gets record = $_.split('\t').collect!
i've seen beautiful, clean, maintainable, performant perl code, and horrible, ugly, slow python/ruby code.
and mailing list is awfully nice, too!john p i started with perl, then learned some java and c/c++.
i think he has good points, but he wrote those comments in 2000.
if you chose to ignore the things which make perl (or again, any language) readable, easy to understand, easy to maintain, etc. then of course you can make things unpleasant.
"1", contactrecords) for r in contactrecords: print "\t".join(r)
we have thousands of perl scripts in our projects, and really like to maintain it!
for line in lines: customer = parseline(line)
currently i wondered if i should write the zeta function test i run in c in order to speed things a bit.
i keep forgetting about the string composition using keywords.
i did a similar comparison between c vs perl and perl vs python - with the intent of comparing opengl performance.
japh got the closest when he talked about writing in python so that the people that would inherit the code would understand it, but ultimately, we have to face the fact that we are generally not going to own the code once it is handed off to the real owners, those that told us to write it in the first place.
in my case (and in my organization) we comment everything that is not clear enough at first sight.
learning the language behind it (tcl or python) is going to be a lot easier than writing the hundreds of thousands of lines of existing code yourself.japhy someone already mentioned how you should be sorting after you've removed the unwanted elements from the array.
but arguments could be made for either, and really not a good reasons for choosing either.
alun ap rhisiart december 21, 2002 6:12 am both python and ruby are very enjoyable languages to write in.
that's why i chose java, and i would be more inclined to use python as a scripting language.
hi, interesting thread, .. i am a perl lover that just learnt ruby and indeed i like ruby a lot, partly because it is close to perl in some sense with a lot of built in stuff and a cpan like network with gem ( though less libraries and a lot of beta/alpha code).
anyway i found python to be a good choice also.
how is this trend changing (python gaining/loosing popularity over perl)?
so it is not problem with language "perl".
when i learned haskell, my java programs became more interface driven.
it may not be actually a problem to do so, but it is generally recommended not to do this, as it will slurp all of your file at once, which is not needed.
david i've done quite a lot of perl, enough ruby and python.
perl provides absolutely simple ways to document your code.
regex is perl's greatest strength.
many thanks to the person who started this topic and to everyone for all the replies.
i’ve been using perl for [...]sam june 23, 2008 7:36 am michael: understand this: 1)
kerry: i avoided classes because i lacked experience with python and ruby (those were my first programs) and because i'm used to languages where there is a higher overhead (in loc) for introducing a new class.
pm here's another way to do it, using a cpan module called sort::fields.
17  contactme = 27 skutitle = 34 contactrecords = records.collect {|r|  [r[skutitle], r[contactme], r[email]] } contactrecords.sort!
i like python better than ruby better than perl.
i don't claim to write beautiful code, and honestly i suspect i don't.
and i guess this is also as fast as you can get...anonymous march 12, 2010 11:17 am jon: "why in the world did someone come up with the idea in the late 1980s that there had to be two sets of comparison operators, one for numbers and one for strings?
i know that sounds strange, but if everybody would be a good programmer, everybody would have used these dynamic languages in the last decade.
i've had to use python (matplotlib and pymol scripting in particular) for some projects since then; it is a great language with fantastic libraries.
to those (like j) who think that languages like perl5, ruby and python are "complex languages"...
you send input to a, it sends its output to b, which sends to c, and you only store the end result, not the intermediate results.
brad cathey november 19, 2007 9:50
in general i find that blindly following the hold-on-to-the-language-you-know approach tends to correlate with poor programming skills.qor february 10, 2008 3:23 am argf.each { |line| p line.split("\t").values_at(17, 27, 34) if line.gsub!
you need to upgrade your brain, not downgrade your language.
this is what you need: wget -o - http://www.mjtsai.com/blog/files/2002-11-25-sample-input.txt 2>/dev/null | sed -ne '/\("[^"]*"\t\)\{26\}"1"/s#\("[^"]*"\t\)\{17\}"\([^"]*\)".*$#\2#p'
i happen to love perl.
updates will be posted on the pogl site.
, it results in perl programmers using the same libraries, in understandable ways.
/usr/bin/perl -w use strict; incidentally, (nowadays) better use warnings instead.
it is another nightmare.
read each line of standard input and break it into fields at each tab.
27 skutitle = 34 readlines.collect { |line| line.split('\t').collect { |field| field[1..-1] } }.find_all {
to get from someone who loved perl and is well respected in the industry as a user of programming languages why python is definitively a "better language".
the advantage over your example is that the sort comes after the grep, thus avoiding sorting records you are going to reject anyway, the same with quotes.
?tbartdev i know this is ot, but seriously, gentlemen, if you want to use console & friends, then please do so responsiby ;-> i say forget grep, awk and whatnot.
python has more available for it than ruby at this time, and having a library to do what you want can make a big difference.
but then again, perl's syntax doesn't bother me at all, and i can usually read right through (its kind of like a warm blanket ;-).
but really, i would count bbum's solution as pretty normal looking python.
gavin's comment, "perhaps your time would be better spent becoming a better perl programmer than to learn a new language?" was the watershed moment.
michael i've restored a recreation of the sample data.
i have been using perl for many years now, and have also been involved with much java and some .net.
carl williams there is a comparison for python, perl, and ruby as far as job demand and median salary goes at http://www.odinjobs.com/odin/marketstatcompare?id=51907&q=python+vs+perl+vs+rubypaul pomerleau november 1, 2010 1:37 pm
i was also looking for a comparison of the three languages, but after seeing gavin's excellent post from december 1 at 7:17 pm, i don't really need to see more.
i've learned a lot today, so my conclusion, as far as perl is concerned, is this one print: #!
it's clean compared to perl, or java, etc.
also, i  correctly guessed which classes “owned” the methods and whether  they were mutators.
any code is going to be difficult for another programmer to know exactly what the previous programmer wrote and why.
at the risk of lots of flames, i consider perl to be one of these, ditto for php.
so, to me, the first way of doing it is more maintainable.
java forces you to do it all the time, but it isn't necessary even in pure oo languages (eg ruby and smalltalk).james july 3, 2003 1:34 pm all of the the "my"s in the original perl script are unnecessary.
edward chua october 2, 2009 1:50 am wow.
just to be sure everybody is clear: perl can do serious computational stuff, at the computational level of c/fortran.
i will point out that all of the above code examples are flawed in that if you want clear, readable code, you need to add many comments.
[...]old unix guy march 25, 2008 8:22 pm
fedora 9 comes out in a few days, i'll use that as my development platform.
class customer: def __init__(self, contactme, skutitle, emailaddress): self.contactme = contactme
i argue that this: $t=~s/\s+//g; is more maintainable than: t.removeallwhitespaces() because real perl programmers would know exactly what the first line did without having to look at some other function/method, and if they understand the rest of the code, they might know instantly whether that line is doing the right thing or not (otherwise hope the comments/docs are good ;) ).
good programmers are rarely flashy.
for example, i quote the original algorithm written in plain english.
i find that perl/ruby are more of the old paradigm.
[[r[skutitle], r[contactme], r[email]] for r in records] contactrecords.sort() # default sort will group by sku title contactrecords =
trolling ;) bartekbartek heh exactly speaking: print '\n'.join(['\t'.join(r) for r in sorted(contacts)]),soul-burn march 17, 2007 7:51
the power of python and perl is not put into proper use when you don't do stuff that are the strengths of those languages.
{|field| field.gsub('"', '') } records <
i'll have to say that comentador's comment about nightmares from programming perl really cracked me up once i saw what he was talking about.
i know your input data was very specific.
} grep { $_->[1] eq '1' } map {
blazar april 13, 2005 8:50 am
as for those that find it cryptic or hard to maintain, i must say that there were times i went full five years without writing a single line of perl code and yet was able to go back and re-use thousands of lines i had written long before.
skutitle self.emailaddress =
if anything, the fact that i never get to code in any single language for long enought certainly doesn't help in mastering the idiomatic strenghts of any of the languages i used.
and as he pointed out, the 'right' style is the one that appeals most to readability.
people who insist upon using what is most comfortable for them just because of that fact alone aren't taking into consideration the strengths of each language and utilizing them to their best.
from that day, i am weekly writing perl scripts for my developers to parse information, sort files, text manipulation, and even the odd gui.
you can write ugly code in any language.
stop on by and check it out!
i might add that perl seems to have the most support here and offers up a variety of ways to solve the initial problem.
good code is easy to understand (variant of 2a.)
later i tried ruby and very quickly fell in love.
one of the things that i do is to use a lot of hashes.
when i think of ruby i think of: if user.is.not.logged.in create.new.table.in.the.database end as a programmer, it's easier to remember how to do things across languages if they at least appear similar, instead of reinventing the wheel for the sake of making your code appear to have the same exact lexical value as english, at the expense of the language's speed, and usability.oilbane december 23, 2008 10:04 pm ""perl have been, is and remains the most powerful piece of software.
if you think that, then you aren't using modules and other object oriented techniques.
i just don’t want to write that kind of code.
those features (map/l.c, sort, grep/filter) can be grasped fully by 12 year olds (i've taught them).
#!/usr/bin/python import fileinput records =
remove the elements of contactrecords where contactme is not 1.
i assumed the comment-taker was smart enough to html-ificate the text.
perl allows for very clear and concise code.
:->conficker i don't understand how people can like ruby.
the thing i like about perl over ruby is the fact that perl's functions are very versatile.
i mention all this for the sake of showing that i believe that my view on how programming languages compare with each other comes after many years of using and exploring a variety of them in different contexts, and for different needs.
the flame war uses list as its battlefield.
i like that *much* better.
jon december 11, 2009 3:11 pm john said that rexx is no longer relevant.
tend october 28, 2007 4:44 pm
but no, it just eats things that look like tags.
though i'm not a sophisticaded programmer, as a course six alumn from mit i like to think of myself not as a complete rookie either.
'1' and (row[0], row[2]) or '\r', i know this is outside the scope of your examples, but possibly informative...
site » blog archive » syntax vs forever young-always young [...]
when i look at other people’s code in these three languages, i find it easier and more enjoyable to read python and ruby.
what happens if you get hit by that bus on the way home?
for few projects in our organization, we are looking for suitable lang among these three.
so my advice to users (of any language) is to learn to document your code if you are concerned with readability.
for example, we don't write ifs on the same line like: print if $something_happened; we use if ($something_happened) { print; } instead.
python does not have braces for blocks.
readable and logical to the way we commonly think.
p.s. python sounds like a 70's joke and ruby sounds jewish.
i was interested in your comparison
ruby made it easy to go from perl, it has the variable syntax to lure perl programmers over.
i'm not saying it is the best, but i reach for perl as my secret weapon over and over again.
sh sed -e 1d -e 's/"//g' | awk 'begin { fs="\t" } $28 ==
i do a lot of perl maintenance programming and my run perl tidy on some programs to clean them up a bit, but perl continues to be a beautiful girl to me.
i have read eric raymond's discussion on why he prefers python.
and by and large i have succeeded at it.
i am very very comfortable with the real-life-nature of oop so the customer class just fits.
but the bottom line is that when presented with a new problem, if the platform i work with poses no constraints in terms of the language i can use, i will normally choose perl.
michael xtopher: (1) google has such big computations that they have to split them across multiple processes (and machines), anyway.
now, i am actually planning a little pet project for home automation, and is torn between perl and python (thus i'm here, no ruby tho, my brain just refuses to comprehend no matter how much i read it).
so there's no readability problem in our project.
python and ruby both come with mac os x 10.2, both havebbedit language modules, and both promise a cleaner approach to scripting.
1 { printf "%s\t%s\n", $35, $18 }' | sort $ doit.sh ooops.
read eric raymond's 2000 article on why python?
in this case, perl's cpan with mature building blocks such as poe and mod_perl wins me over every time.
smith march 10, 2007 7:22
one-lining things is not so much a display of guruism, but rather a comprehension of how to streamline your code.
this is not uncommon.
it's something i probably wouldn't use in production but it's a fairly decent example.
also, when i write .net code for work (luckily .net is only 30% of the work, i yearn for the freedom of perl, bash, and c on linux.
may 15, 2008 7:04 am regarding maintainability.
also, bear in mind that split really wants a regex as aq first argument, with one major -useful- exception.
good code is easy to maintain (result of 2a.
i like the "clean" look of python and will consider for larger scripts/programs especially if other people are going to pick it up and run with it.
decide which language is best for a particular task.
this obviously ignores the fact that both are used by many many people, but that doesn't make them "better" by any means.
"1"} it is now nearly nine (9) years later.
oh, for the old guy, i agree that sed/awk/ etc were fairly easy, but man, what a pain in the arse, and to boot, i had so many of those darn things running around, i thought i was going to lose my mind ;-).anon123
recordsand fill it with all the records.
passing it a tring and relying on the automatic conversion, while actualy working is not something most perl programmer would regard as a good practice.
ruby has a truck load more functions to do things which means you have to remember them, where as perl has a small set of functions that can be manipulated to do all kinds of things.
use strict; my @contactrecords; my $fields_hash ={email=>17, contactme =>27, skutitle=>34}; my $fields_array =[qw/email contactme skutitle/]; while (my $line=){ $line=~s/"//g; my @record = split /\t/, $line; if ($record[$fields_hash->{contactme}]==1){ my $r={}; foreach my $k (@$fields_array){ $r->{$k}=$record[$fields_hash->{$k}]; } push @contactrecords, $r; } } foreach my $r (@contactrecords){ my $sep=""; foreach my $k (@$fields_array){ print $sep.
modules, support, structure, community, and the internet/open source mentality are paving the way for great new computer ideas and languages, as well as changing opinion that programming is just for "geeks".
seldom (i think this is the third time)
however, there are "poor" languages, languages that make things difficult or obscure or are just poorly designed.
i am a little surprised that compute intensive companies such as google have not pushed the python folks to overcoming this limitation.
i do all sorts of numerical stuff with pdl as grad student in physics, doing (single-core) simulations at the moment.
print contactrecords to standard output, with the fields  separated by tabs and the records separated by newlines.
if i was a new coder, never having worked in any of them, i might not chose perl, but i'm not a new programmer.
my experience with writing code has always been very project specific.
i just neglected to make that simplification when porting the code.
for web apps - use mod-perl with catalyst.
the solution is simple: use english; seriously.
i mean even lowly basic didn't need that kludge.
guido did an excellent job of making code look like pseudo code.
ruby, from what it sounds, looks pretty good as well.
i think the python version is generally the cleanest to read—that is, it’s the most english-like.
nullpointerexception in the last 8 years.
cpan (one of the real clinchers) 6.
i just started learning python and was interested in other scripting languages (that darned o'reilly book gave me the idea of looking up "python vs perl" (seems he's pretty popular around here)).
also, i can iterate that we can write clean code with perl also.
i never really did proper learning for programming, only bits of c or php here and there, and as such usually write horrid code.
i also suppose you really want "\t" rather than "\t", as in the latter case it wouldn't work at all (wrt your description).
these languages ( python, ruby, perl ) have remained to a small amount of experienced programmers.
[[f[1:-1] for f in line.split("\t")] for line in fileinput.input()] contacts =
edward c wrote: > even though i only knew it for days, it feels, weirdly comforting and nice (ref. to the warm blanket above).
if it was something i was writing for myself i would use something like this.
if not for the aforementioned english, and perl critic and, especially, moose ... that made perl more like python ...
perhaps your time would be better spent becoming a better perl programmer than to learn a new language?
i replaced your regexp replacement with a plain string extract, which supports double quotes inside values, and is faster.
as mentioned before, perl is very very attractive as the components i'm going to use are incidentally already written in perl, but yet i was afraid if the project gets large, perl might get very messy.
it is recommendend to do things while (<>) instead.
as for scalability of perl scripts, i have heard that perl programs get quite difficult to maintain after they get much larger than about 100 lines.
roman march 30, 2011 4:35 am i'm only few month programer in perl, but... not better write perl like this ?
the kind of programmers that only learns enough to earn some money and have a job, but does not care about forums like this one, or learning anything new?
perl is way too cryptic for my purposes.
also note that i moved your filter (implemented using reject!
i'd like to add my 2p to the discussion.
http://tinyurl.com/24jou4 shows python as growing most in 2007.
for a similar reason something like cpan is a great factor in maintainability.
if there was no perl, biologists would be upto their a***s in c code or something even more horrible.
it made me think of rappers freestyling.starter october 20, 2007 5:53 pm hi, this is one of interesting articles where experienced developers shared their views on perl,python,ruby without many flames.
btw, excelent discussion you have here :)sandy december 31, 2008 10:57 pm hello friends, i am looking for perl indepth good tutorial.
that looks like such a "lazy compiler/interpreter writer" thing that one has to ask wtf?
('"', '').split("\t").values_at(27).include?("1") }phaldor i think all of you have missed a vital element to writing any program.....the customer.
the algorithm i chose was just the first one that came to  mind.
also in my previous post i forgot to mention list comprehensions for python as a really cool thing and -> came out => (which is also used in ruby) but for building hashes.
"1" }.collect { |r| r[skutitle], r[contactme], r[email] }.sort.each { |r| puts r.join("\t") }david ross this is an interesting document you have made.
leave that to the java peeps since they can't get enough widgetwhichproducesbsfactory.
if you put one statement in incorrect place, ofcourse wehave to debug.
obviously it depends on what you're trying to do, but for me, it has turned out to be a great feature.
s/\s+//g is perfectly readable.
i simply like expressive, clean languages.
that's why i like perl, it supports a variety of styles of thinking.
i think that in the decision to learn perl or python one should consider also how intensively s/he is going to use them.
it's just a matter of becoming familiar with the idioms; becoming fluent.
vlad january 2, 2009 9:41 am
i just don't find them terribly intuitive and am much more comfortable with lambda/map/filter.
sort contactrecords by skutitle.
perl, python, and ruby all have their strengths.
use constant email => 17; use constant contactme => 27; use constant skutitle => 34; my @recs = (); while (<>) { s/"//g; my @rec = split /\t/; push @recs, [@rec[skutitle, contactme, email]] if $rec[contactme]; } for (sort { $a->[0] cmp $b->[0] } @recs) { print join("\t", @$_), "\n" }michael fair enough.
good programmers are rarely impressed with the newest hype or fad, and good programmers can write good code in any language.
i'd like to dwell on that for a moment.
i could make sense of my python scripts even after weeks i wrote them.
- i had the same problem (as i also came from perl to ruby and couldn't figure this one out right away).
if you find regular expressions difficult, break them down in smaller pieces using qr//.wow january 24, 2008 6:11 pm what an amazing thread.
while java also has lots of standard libraries, java tends to be a lower level language (more lines of code to look through), and many of the libraries appear to be written to fulfill some spec rather than to accomplish common tasks more easily (whereas cpan modules tend to be written to be used by mere mortals).rtfa.net »
and perl well... see http://tinyurl.com/yob2nmjaph february 6, 2008 3:47 pm contrary to /.'s post of jan 25, i don't code in a given language just cuz i know it.
in conclusion, i will carry on with perl.
to ddber: i'm also a biologist, but feel comfortable (actually, couldn't more) with perl.
the way to improve your programming is not by learning the intracacies of a particular language, but by learning many different paradigms.
it is the hell where condemned programmers go to for their sins.
thus, the style is perhaps not canonical  python or perl, although since i’m new to ruby it’s probably not  canonical ruby either.
with proper commenting, all 3 language examples would be ideal.
if you have developers/maintainers who can't grasp the language, you've got much bigger problems waiting for you.
i want tutorial for job perspective or any one having personal notes and can share with me.....please send me buddy please friends help me, i don't even have enough money to buy books or to join any classes but i promise i'll pay you back once i got the job....
michael jm: i wanted to try out arrays, sorting, and filtering in the various languages.
it can do anything 4.
i've seen beautiful, clean, maintainable, performant perl code, and horrible, ugly, slow python/ruby code."
i decided to give it a go with perl for two good reasons 1) perl is the english of bioinformatics 2)
over the past few weeks i read thepython tutorial and the non-reference parts of programming ruby, however as of this afternoon i’d not written any python or ruby code yet.
and had it not been for the success of python and its influence to fix the ugliness of perl code.
and here’s the code: #!/usr/bin/perl -w use strict; my @records = (); foreach my $line ( <> ) { my @record = map {s/"//g; $_} split("\t", $line); push(@records, \@record); } my $email = 17; my $contactme = 27; my $skutitle = 34; my @contactrecords = (); foreach my $r ( @records ) { push(@contactrecords, [$$r[$skutitle], $$r[$contactme], $$r[$email]]); } @contactrecords = sort {$$a[0] cmp $$b[0]} @contactrecords; @contactrecords = grep($$_[1] eq "1", @contactrecords); foreach my $r ( @contactrecords ) { print join("\t", @$r), "\n"; } the punctuation and my’s make this harder to read than it should be.
i know well, i have to learn a fresh.
all developers receive those updates).
i would reccomend that you pick one and use it forever.
this appearance may be what makes some developers shy away from learning perl (some of my developers i still consider lazy mind).
i have toyed with ruby and python, and both, while "ok", just didn't do it for me.
for the input below "fred@1.com" 0 director of research "fred@3.com" 1 director of research "fred@4.com" 1 director of research "fred@5.com" 1 director of research "fred@2.com" 1 director of research i recommend this as a solution: #!/usr/bin/perl -w use strict; my @contactable_records; while ( ) { if (/\s/) { # check for blank lines my @fields; my %record; s/[\r\n\"]//g; @fields = split("\t",$_); ($record{email}, $record{contact_me}, $record{sku_title}) = ($fields[0], $fields[1], $fields[2]); push (@contactable_records, \%record) if ($record{contact_me} == 1); } } foreach my $record ( sort { $a->{email} cmp $b->{email} } @contactable_records ) { print "$record->{email} $record->{contact_me} $record->{sku_title}\n"; } you can certainly make a much shorter perl program than this, but you generally want something which makes sense when you look at it.
i don't know about you, but i'd rather juggle two sets of operators than have to convert my numberish strings to numbers explicitly.
as for classes, i like the fact that both languages make creating classes easy, but don't force it.
i realised early on in my career that i was no programmer (with fortran, pascal, c).
being widely used at google helps python, also microsoft support in ironpython and jython integration on java side of world make python in my opinion first choice if you haven't got scripting language into you programmer's toolbox yet.
the perl intro is a short introduction to perl and complete enough to get you started in the earnest.
the reason i found this is that i was asked to help with something in my company which may require file/text manipulation for a conversion of data from one system to another.
still, i've seen hundreds of thousands of java.lang.
i do this for them as i want them to get on and "develop" (using more traditional langs).
i realize that this particular example rather lends itself to a simple procedural approach, but as someone who uses python and java regularly, i would have done something very similar to bbum's solution except i would use a class rather than a dictionary or an array of arrays.
this is a huge leap forward for programming.
on the other hand, it doesn't take any additional effort to write code that can be future proofed against data that would otherwise break.
if i werejust writing this in perl, i might  have tried to avoid perl’s messy syntax for nested arrays and instead  used an array of strings.
lucky coincidence, some people in our department started a reading group of tisdall's "beginning perl for bioinformatics" which i promptly joined (good book by the way).
and i absolutely agree with david's point when he mentions python being very verbose, and the need to strike a balance between function point and comment density.
monday, november 25, 2002 i’m evaluating python and ruby as replacements for perl.
finally, you can't ship compiled code with ruby, but with python you can.
1 { printf "%s\t%s\n", $35, $18 }' | sort $ doit.sh okay, my apologies.
another point of view in choosing languages and environments is that "it's all about the api".
perhaps in that sense python scores better.
braces are useful to trap errors.
there are many languages, and there is no one "perfect" language.