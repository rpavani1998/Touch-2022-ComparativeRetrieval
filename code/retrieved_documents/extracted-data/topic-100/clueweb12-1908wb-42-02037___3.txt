elif "weasel" in list2: print  "we have a weasel!"
axes3d(fig) x, y, z = axes3d.get_test_data(0.05)
else: print "we have nothing!"
(r**2 -  1)**2) ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cm.jet)  ax.set_zlim3d(0, 1) ax.set_xlabel(r'$\phi_\mathrm{real}$')
#a simple list list1=[1,2,3,4] print list1 #a list of mismatched things list2=[1,2,"cat","dog",12.24356] print list2 #an empty list empty=[] print empty #we can add things to lists list1.append(5) print list1
axes3d(fig) x, y, z = axes3d.get_test_data(0.05) cset = ax.contour(x, y, z, 16, extend3d=true) ax.clabel(cset, fontsize=9, inline=1) plt.show() # by armin moser #courtesy of matplotlib examples: http://matplotlib.sourceforge.net/examples/index.html from mpl_toolkits.mplot3d import axes3d import matplotlib import numpy as np from matplotlib import cm from matplotlib import pyplot as plt step = 0.04 maxval = 1.0 fig = plt.figure() ax =
== 0: print 'fizz' elif i % 5
#this is the fizzbuzz test for i in range(16): if i % 3 == 0
5.0/12 print 5.0/12.0  #python supports big integers print 2**65 print 2**128 #and complex numbers  print 3+4j print 3+4j - 1+2j print (3+4j) -
basic function def mid(x,y): return(x+y)/2 print mid(0,10) print mid(0,11)
(1+2j) fizzbuzz #this is the fizzbuzz test for i in range(16): if i % 3 == 0
# create supporting points in polar coordinates r = np.linspace(0,1.25,50)
python for scientific computing and education python for scientific computing and education source code python for scientific computing and education tutorial visual with audio -  june 8, 2010 useful links matplotlib software carpentry: introductory material on python
== 0: print 'buzz' else: print i download zip file 2 download the python demo download zip file 4 interested in knowing what's going on?
ax.set_ylabel(r'$\phi_\mathrm{im}$')
print i data analysis
basic lists #a simple list list1=[1,2,3,4] print list1 #a list of mismatched things  list2=[1,2,"cat","dog",12.24356] print list2 #an empty list  empty=[] print empty #we can add things to lists list1.append(5) print list1  #lists are indexable print list1[1] #we can "slice" lists to get  subsequences print list1[2:4] print list1[:4] #we can even index from the end  of the list print list1[-1] print list1[-2:] #we can see if something is in a  list "dog" in list1 "dog" in list2 basic math #subtraction print 5-12 print 5.0-12.0 #divide two integers print 5/12  #divide two floating point numbers print 5/12.0 print
r*np.cos(p),r*np.sin(p)
#uncomment the "help(math)" below to see all the function in the math  module #help(math)
p = np.linspace(0,2*np.pi,50) r,p = np.meshgrid(r,p) # transform them to cartesian system x,y =
source code print "hello world" 3d contour from mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt  fig = plt.figure() ax = axes3d.
3d surface #courtesy of matplotlib examples:  http://matplotlib.sourceforge.net/examples/index.html from mpl_toolkits.mplot3d  import axes3d from matplotlib import cm import matplotlib.pyplot as plt import  numpy as np fig =
python for scientific computing and education tutorial visual with audio - june 8, 2010 scipy/numpy python(x,y) enthought python bootcamp matplotlib software carpentry: introductory material on python if you need help with a python problem, but don't know where to find the answer, maybe we can be of service.
# create supporting points in polar coordinates r  = np.linspace(0,1.25,50)
== 0: print 'buzz'  else:
y =  np.arange(-5, 5, 0.25) x, y = np.meshgrid(x, y) r = np.sqrt(x**2 + y**2)
contact us at python@hpc.uark.edu.
send an email to ci-info@listserv.uark.edu or subscribe to the rss feed.
lecture series »  python »
ax.set_xticks([]) plt.show()
y = np.arange(-5, 5, 0.25) x, y = np.meshgrid(x, y) r = np.sqrt(x**2 + y**2)
#divide two floating point numbers print 5/12.0 print 5.0/12 print 5.0/12.0 #python supports big integers print 2**65 print 2**128 #and complex numbers print 3+4j print 3+4j - 1+2j print (3+4j) - (1+2j)
if you need help with a python problem, but don't know where to find the  answer, maybe we can be of service.
z = np.sin(r) ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cm.jet) plt.show() list2=[1,2,"cat","dog"] if "goat" in list2: print "we have a goat!"
#lists are indexable print list1[1] #we can "slice" lists to get subsequences print list1[2:4] print list1[:4] #we can even index from the end of the list print list1[-1] print list1[-2:] #we can see if something is in a list "dog" in list1 "dog" in list2 #subtraction print 5-12 print 5.0-12.0 #divide two integers print 5/12
jbht 504 university of arkansas fayetteville, ar 72701 (479) 575-4590 ci-info@listserv.uark.edu copyright © 2011 all rights reserved - ci-train | rss feed powered by modx cms this work is licensed under a creative commons attribution-noncommercial-share alike 3.0 unported license design by os templates
p = np.linspace(0,2*np.pi,50) r,p = np.meshgrid(r,p) #  transform them to cartesian system x,y =
== 0: print 'fizzbuzz' elif i % 3
z =  np.sin(r) ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cm.jet) plt.show() basic conditionals list2=[1,2,"cat","dog"] if "goat" in list2:  print "we have a goat!"
elif "weasel" in list2: print "we have a weasel!"
ax.set_xticks([]) plt.show() #courtesy of matplotlib examples: http://matplotlib.sourceforge.net/examples/index.html from mpl_toolkits.mplot3d import axes3d from matplotlib import cm import matplotlib.pyplot as plt import numpy as np fig =
x = np.arange(-5, 5, 0.25)
def mid(x,y): return(x+y)/2 print mid(0,10) print mid(0,11) def mid(x,y): return(x+y)/2.0 print mid(0,10) print mid(0,11) import math print math.sin(3) from math import sin print sin(3) #uncomment the "help(math)" below to see all the function in the math module #help(math)
basic function 2 def mid(x,y): return(x+y)/2.0 print mid(0,10) print mid(0,11) basic import import math print math.sin(3) from math import sin print sin(3)
cset = ax.contour(x, y, z, 16, extend3d=true) ax.clabel(cset, fontsize=9,  inline=1) plt.show() 3d radial # by armin moser #courtesy of matplotlib examples:  http://matplotlib.sourceforge.net/examples/index.html from mpl_toolkits.mplot3d  import axes3d import matplotlib import numpy as np from matplotlib import cm  from matplotlib import pyplot as plt step = 0.04 maxval = 1.0 fig =  plt.figure() ax = axes3d(fig)
download zip file 1 print "hello world" from mpl_toolkits.mplot3d import axes3d import matplotlib.pyplot as plt fig = plt.figure() ax = axes3d.
ax.set_zlabel(r'$v(\phi)$')
(r**2 - 1)**2) ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cm.jet) ax.set_zlim3d(0, 1) ax.set_xlabel(r'$\phi_\mathrm{real}$') ax.set_ylabel(r'$\phi_\mathrm{im}$') ax.set_zlabel(r'$v(\phi)$')