a powerful but clear programming language, support for object-oriented programming, access to a wide base of libraries (built-in and external), easy access to code written in standard languages such as fortran, c, c++, and java, idl-like data access and image manipulation capabilities, easy access to gui facilities, open source and freely distributable, portable, large user base and good prospects for long term support.having such a capability in a scripting language would enable it to serve for more than just scripting iraf tasks; it would also be a language in which actual data analysis algorithms could be implemented directly.the popularity of idl in the astronomical community (shaw et al. 1999) has demonstrated that it is possible to write significant astronomical data analysis applications using an array-based interactive language.a suitably powerful cl could become the data analysis software language of first resort, one that both astronomers and programmers would consider using first and where writing applications in a traditional compiled language such as c, fortran or spp would be infrequently required.since we expect that the new cl will be used more by astronomers than by professional software developers, we need a language that is both quick to learn and comparatively easy to read and understand for those who cannot devote large amounts of time to becoming an expert with it.furthermore, the cl should be useful not only as a tool for astronomical data reduction, but also for many other tasks including accessing databases, the web, and text processing.we have found python to be both very powerful and productive.python is also better for writing object-oriented programs since it was designed to be an object-oriented language from the start--though one can write procedural programs just as easily.while there is existing functionality that allows much of this, we feel it is not quite mature enough to meet the expectations of most astronomers, particularly those who currently use idl.since there is a module for python that provides idl-like array manipulation, we expect to eventually combine the strengths of the iraf and idl environments into one system.we have provided a front end to the python interpreter that allows the use of iraf command mode syntax as well as standard mode syntax for interactive use.but there is an extension module (numeric) which does implement an efficient array-based functionality that can provide many of the features found in idl and matlab.an orphaned language presents the problem of providing support for the language and its libraries with limited resources and expertise.with the adoption of python, the primary technical challenge was reduced to being able to run iraf tasks with full functionality.to make tasks easy to use requires being able to interpret the iraf package structure from package cl scripts (and thus being able to determine what packages are available, what tasks are contained within, and where the executables are located).