xlwt allows you to format your spreadsheets on a cell-by-cell basis or by entire rows; it also allows you to add hyperlinks or even formulas.
organizing them on disk just isn’t cutting it.
in order to write data to an excel spreadsheet, first you have to initialize a workbook object and then add a worksheet object to that workbook.
for example, a list of strings is sorted by the first letter of each string.
i showed you how to read excel files with python.
(which of course would result in better-documented code).
you can optionally specify an image name (relative to the output file, see the documentation in the source code) to be embedded.
well, that makes more sense, and you can see the p value for the slope is 2.75e-5.
first, you need the packagevegan installed, which is fantastic for multivariate stats.
lm(x,y) ordination = rda(data) for much, much more see the online documentation for rpy, but hopefully i gave you enough to at least get started.
ax.bar(theta, radii, width=width, bottom=0.0) # step through bars (a list of rectangle objects) and # change color based on its height and set its alpha transparency # to 0.5 for r,bar in zip(radii, bars): bar.set_facecolor( cm.jet(r/10.)) bar.set_alpha(0.5) show() and the result: it’s very easy to make subplots that share an x-axis, so that when you pan and zoom on one axis, the others automatically pan and zoom as well.
it’s calledsphinx, and you can see what the documentation looks like by checking out the documentation for python itself (v.2.6 and 3.0).
bonus: i can zip everything up and send tiddlywiki + images to my advisor so he can browse and search them as well.
non-trivial example here’s an example of some data where the dates not formatted well for easy import into excel: 20 sep, 263, 1148, 0, 1, 0, 0, 1, 12.1, 13.9, 1+1, 19.9 20 sep, 263, 1118, 0, 1, 0, 360, 0, 14.1, 15.3, 1+1, 19.9 20 sep, 263, 1048, 0, 1, 0, 0, 0, 14.2, 15.1, 1+1, 19.9 20 sep, 263, 1018, 0, 1, 0, 360, 0, 14.2, 15.9, 1+1, 19.9 20 sep, 263, 0948, 0, 1, 0, 0, 0, 14.4, 15.3, 1+1, 19.9 the first column has the day and month separated by a space.
for example, a list of strings is sorted by the first letter of each string.
first, you’ll need to install the xlwt package by john machin.
overwriting cells worksheet objects, by default, give you a warning when you try to overwrite: sheet.write(0,0,'test') sheet.write(0,0,'oops') # returns error: # exception: attempt to overwrite cell:
the goal is to have a simple excel file where the first column is date, and the second column is temperature.
continue reading ‘interactive subplots: make all x-axes move together’ calculate sunrise and sunset with pyephem published on april 25, 2008 in python and python modules.
p = summary['coefficients'][1,2] redundancy analysis ok, say you have this data set to perform redundancy analysis (rda) on.
p = summary['coefficients'][1,2] ok, say you have this data set to perform redundancy analysis (rda) on.
save the ordination as a png print the variance explained by constrained and unconstrained axes as well as each rda axis.
see, it takes some digging around to get what you need, but now since i’ve done the work for you, you can now do linear regressions from python.
now that the sheet is created, it’s very easy to write data to it.
often-run analyses that you need r for can be wrapped in a class or module to encapsulate your data analysis needs, so you don’t need to clutter your code with it.
here’s a heavily commented script, rpy-demo.py, that will: load and format the data included in the script send the data to r perform an rda in r plot the ordination
let me know if you find bugs so i can fix them.
it assumes that you have the data saved as weather.data.example.
the key to this functionality is thesharex keyword argument, which is used when creating an axis.
my solution for now is to use a localtiddlywiki as the glue for my figures, since i can embed figures in tiddlers (the microcontent entries that are the bread and butter of tiddlywikis), and tag and search those entries.
it’s very easy to make subplots that share an x-axis, so that when you pan and zoom on one axis, the others automatically pan and zoom as well.
continue reading ‘minimal sphinx setup for autodocumenting python modules’ write excel files with python using xlwt published on september 20, 2009 in excel, other software and python.
if you have rpy installed and the vegan package installed, you should be able to just run this python script.
your docstrings end up looking so nice that sometimes it makes you want to write more of them!
my solution for now is to use a localtiddlywiki as the glue for my figures, since i can embed figures in tiddlers (the microcontent entries that are the bread and butter of tiddlywikis), and tag and search those entries.
in order to write data to an excel spreadsheet, first you have to initialize a workbook object and then add a worksheet object to that workbook.
once things are set up that way, it would be as easy as from myrstuff import lm, rda results =
in a previous post (which turned out to be pretty popular) i showed you how to read excel files with python.
codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 residual standard error: 0.9184 on 8 degrees of freedom multiple r-squared: 0.9009, adjusted r-squared: 0.8885 f-statistic: 72.7 on 1 and 8 df, p-value: 2.753e-05 the trick is to match output from the summary printout in r with the dictionary returned to python.
the sort() method of list objects in python is quite flexible.
the dictionary you get back may take some navigating.
your docstrings end up looking so nice that sometimes it makes you want to write more of them!
continue reading ‘use sphinx for documentation’ insert content into tiddlywikis with this python script published onapril 17, 2008 in python and tiddlywiki.
useful tidbits for using open source software in science here’s how to get a nice automatic documentation of your python code usingsphinx.
here’s a heavily commented script, rpy-demo.py, that will: if you have rpy installed and the vegan package installed, you should be able to just run this python script.
often-run analyses that you need r for can be wrapped in a class or module to encapsulate your data analysis needs, so you don’t need to clutter your code with it.
the goal is to have a simple excel file where the first column is date, and the second column is temperature.
rather than recap it all here, i encourage you to grab a copy of the source code, in which you can find the examples directory.
you can use this script from the command line using options, or import it into another script.
the data we’re interested in is in the 9th column (temperature).
organizing them on disk just isn’t cutting it.
well, that makes more sense, and you can see the p value for the slope is 2.75e-5.
some highlights from the examples directory in the source code: dates.py, which shows how to use the different date formats hyperlinks.py, which shows how to create hyperlinks ( hint: you need to use a formula) merged.py, which shows how to merge cells row_styles.py, which shows how to apply styles to entire rows.
by default, it sorts on the first thing in each item of the list, which is exactly what you would expect.
the dictionary you get back may take some navigating.
it assumes that you have the data saved asweather.data.example.
xlwt allows you to format your spreadsheets on a cell-by-cell basis or by entire rows; it also allows you to add hyperlinks or even formulas.
sphinx can automagically slurp in all your docstrings, format them nicely, and render them as html or pdf output.
polar bar plot in python published on july 20, 2008 in matplotlib, plotting and python.
by default, it sorts on the first thing in each item of the list, which is exactly what you would expect.
first, you need the packagevegan installed, which is fantastic for multivariate stats.
excel_date_fmt # weather data has no year, so assume it's the current year.
archive for the 'python' category minimal sphinx setup for autodocumenting python modules published onapril 14, 2010 in documentation and python.
continue reading ‘interactive subplots: make all x-axes move together’ pyephem (from the greek word ephemeris) is the way to calculate the positions of all sorts of astronomical bodies in python.
turns out python can’t convert everything perfectly, and a little more exploration is in order.
lm(x,y) ordination = rda(data) for much, much more see the online documentation for rpy, but hopefully i gave you enough to at least get started.
you can use this script from the command line using options, or import it into another script.
ax.bar(theta, radii, width=width, bottom=0.0) # step through bars (a list of rectangle objects) and # change color based on its height and set its alpha transparency # to 0.5 for r,bar in zip(radii, bars): bar.set_facecolor( cm.jet(r/10.)) bar.set_alpha(0.5) show() and the result: interactive subplots: make all x-axes move together published on may 3, 2008 in matplotlib, plotting and python.
rather than recap it all here, i encourage you to grab a copy of the source code, in which you can find the examples directory.
turns out python can’t convert everything perfectly, and a little more exploration is in order.
you can optionally specify an image name (relative to the output file, see the documentation in the source code) to be embedded.
workbook() sheet = wbk.add_sheet('temperatures') # set up a date format style to use in the # spreadsheet excel_date_fmt = 'm/d/yy
some highlights from the examples directory in the source code: dates.py, which shows how to use the different date formats hyperlinks.py, which shows how to create hyperlinks ( hint: you need to use a formula) merged.py, which shows how to merge cells row_styles.py, which shows how to apply styles to entire rows.
see, it takes some digging around to get what you need, but now since i’ve done the work for you, you can now do linear regressions from python.
worksheet objects, by default, give you a warning when you try to overwrite: sheet.write(0,0,'test') sheet.write(0,0,'oops') # returns error: # exception: attempt to overwrite cell:
bonus: i can zip everything up and send tiddlywiki + images to my advisor so he can browse and search them as well.
here’s an example of some data where the dates not formatted well for easy import into excel: 20 sep, 263, 1148, 0, 1, 0, 0, 1, 12.1, 13.9, 1+1, 19.9 20 sep, 263, 1118, 0, 1, 0, 360, 0, 14.1, 15.3, 1+1, 19.9 20 sep, 263, 1048, 0, 1, 0, 0, 0, 14.2, 15.1, 1+1, 19.9 20 sep, 263, 1018, 0, 1, 0, 360, 0, 14.2, 15.9, 1+1, 19.9 20 sep, 263, 0948, 0, 1, 0, 0, 0, 14.4, 15.3, 1+1, 19.9 the first column has the day and month separated by a space.
the key to this functionality is thesharex keyword argument, which is used when creating an axis.
codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 residual standard error: 0.9184 on 8 degrees of freedom multiple r-squared: 0.9009, adjusted r-squared: 0.8885 f-statistic: 72.7 on 1 and 8 df, p-value: 2.753e-05 the trick is to match output from the summary printout in r with the dictionary returned to python.
sphinx can automagically slurp in all your docstrings, format them nicely, and render them as html or pdf output.
(which of course would result in better-documented code).
pyephem (from the greek word ephemeris) is the way to calculate the positions of all sorts of astronomical bodies in python.
it’s calledsphinx, and you can see what the documentation looks like by checking out the documentation for python itself (v.2.6 and 3.0).