imperial is reviewing programming provision and there is a strong lobby for matlab within their department.
(in this context, it's worth noting that calling c and fortran from python is apparently much easier than doing so from idl.)
as scientists they need to be able to unpick the internals and be sure they trust them, but they'll also be lazy; once trusted,tools need to be simultaneously easy and extensible.
so if you really want idl, but wanted "my new toolset", (if we wrote it properly) you could call it from idl anyway.
of course, one might make arguments like those about other languages, and folks do, but mostly i get arguments about two particular languages: idl- which is obviously familiar to many (but far from all) of both our data suppliers and consumers, and java - particularly given the unidata toolsets, and because some of my software engineers complain about various (arcane) aspects of python.
my feeling is that the big advantage of python over matlab is the integration with all the other bits and pieces one wants as soon as a workflow gets sufficiently interesting (guis, databases, xml parsers, other people's libraries etc), and the easy extensibility.
python helps with the latter too: with documentation utilities vastly superior to anything available in the idl (and i suspect, matlab) space.
so, i'm still convinced that that the community should migrate away from idl to python, and the way to do that is to build a library that can be called from idl, but is in native python.
the other thing that i believe to be a killer reason for using python: proper support for unit testing: if we could inculcate testing into the scientific development workflow, i, for one, believe a lot of time would be saved in scientific coding.
there are also lots of web pages which provide information for folk migrating to python from idl (example).
so, i'm still convinced that that the community should migrate away from idl to python, and the way to do that is to build a library that can be called from idl, but is in native python.
ideally of course, one wants to develop toolsets that the community will start to own themselves, so that the ongoing maintenance and development doesn't become an unwelcome burden (even as we might invest ourselves in ongoing support, we want that support to be manageable, and even better, we might want collaborators to take some of that on too)!
(in this context, it's worth noting that calling c and fortran from python is apparently much easier than doing so from idl.)
some of those scientists are very familiar with idl - but my gut feeling is that those are also the very same ones, that, if they spent an afternoon familiarising themselves with python, would find they can go faster and further with python.
see also my article in nature today http://www.nature.com/news/2010/101013/full/467753a.html which doesn't mention python for reasons of space.
well, yes, it's relatively straightforward, but it's not a great language for maintaining code in, and it's commercial (and not cheap!).
physics: graduates who are more likely to go under the hood ...
(common feedback on why matlab was chosen indicated that one of the drivers was the relatively pain-free path from programming to getting decent graphics at the other end.)
however, most ordinary idl users are likely to be able to read python very easily - even if they have never seen python before: for a time we used to give candidates for jobs at the badc a bit of python code and ask them to explain what it did, and we only did that to folk whohadn't seen python before.
the other thing that i believe to be a killer reason for using python: proper support for unit testing: if we could inculcate testing into the scientific development workflow, i, for one, believe a lot of time would be saved in scientific coding.
ideally of course, one wants to develop toolsets that the community will start to own themselves, so that the ongoing maintenance and development doesn't become an unwelcome burden (even as we might invest ourselves in ongoing support, we want that support to be manageable, and even better, we might want collaborators to take some of that on too)!
in principle that means staff should be more flexible in what they can do (both in terms of their day jobs and in backing up others) without learning a plethora of languages.
oxford, on the other hand, is a notable exception where a wide number of languages are introduced in years 1 and 2.
if we look at this, we see that the common scripting languages (perl and python) are not that commonly used by our community (but active python usage is more prevalent than perl and we can ignore tcl/tk).
the idl community of use is rather limited in comparison to python - and, you can call python from idl anyway.
we obviously needed something a bit more complicated (in which case the more obscure python syntax might have got in the way), but as it was, what we learned from that exercise was mostly that "python is easy to read"!
java: it's not really a contender, it's simply not suitable as a general purpose language in our environment.
python helps with the latter too: with documentation utilities vastly superior to anything available in the idl (and i suspect, matlab) space.
i might even rest happier about many of the results in the literature.
well, clearly it's useful, and clearly folks will use it for a long time to come.
it's too verbose, it requires too much "expertise", and it's a nightmare to maintain.
excel and ms friends are common (but so is the influenza, and neither can do big data processing tasks).
most departments reported using a wide range of programming languages/packages (e.g fortran, c++, idl, matlab) depending on what was the predominant processing package in the research group/field, e.g. idl for astronomy, c++ for particle physics.
you can even use the ncar graphics library from python (viapyngl even if some are curmudgeonly about the interface).
overall, it appears that a ranking of programming language provision would be: c++ matlab python off the cuff comments from a member of the institute of physics asked if they had any insight into the provision of programming languages in a wider group of physics departments suggest these results aren't unique to the russell group departments (but also that python, having been off the radar, is increasing rapidly).
introduction for nearly a decade now, the badc has been mainly a python shop, even as much of, but not all, the nerc climate community has been exploiting idl.
what we find is that most of them offer programming courses to some level as an introduction to computational physics.
(common feedback on why matlab was chosen indicated that one of the drivers was the relatively pain-free path from programming to getting decent graphics at the other end.)
(many of those folks are going to have been physicists, which was why i started by looking at what physics courses have been up to.)
physics: graduates who are more likely to go under the hood ...
that person had not heard of idl (which is mostly used in research departments, and then mainly in astrophysics/solar-terrestrial/astronomy and atmospheric physics).
grads has usage comparable to r and python, but ferret isn't much in use in our community.
for a time we used to give candidates for jobs at the badc a bit of python code and ask them to explain what it did, and we only did that to folk whohadn't seen python before.
my suspicion is that those that don't look under the hood wont care, provided it's easy to use, and well documented.
context: university undergraduate teaching obviously most of the folks who use our data do so in postgraduate or other environments, and at least for ncas, most of those will have idl in the vicinity, if not on their desktop.
i appreciate that there may be some resistance to this, particularly from those scientists who like to look under the hood and understand and extend library functions.
the bottom line is that i think there are two players: python and matlab with and r and idl as also rans, and that for me, python is the clear winner - especially since with the right kind of library structure, users can mix and match between r, python and idl.
(gdal and its bindings are wonderful if your rasters are 2d. i'm admittedly behind on cdat raster compatibility.)
however, if using r libraries is important, we can do that from python ... and it's not a natural language for complex workflow development, so we'll park r in the "useful addendum to python" corner ...
so if you really want idl, but wanted "my new toolset", (if we wrote it properly) you could call it from idl anyway.
of the high level programming languages (fortran, java, c and friends), fortran is the team leader (as you might expect for our community).
for reading multidimensional rasters in scientific data formats (which is mainly what i do), i still prefer the unidata java tools.
i might even rest happier about many of the results in the literature.
the bottom line is that i think there are two players: python and matlab with and r and idl as also rans, and that for me, python is the clear winner - especially since with the right kind of library structure, users can mix and match between r, python and idl.
the motivation for that has been my contention that python is easy to learn (particularly on one's own using a book supplemented by the web) - and that's important when we are mostly hiring scientists who we want to code, not software engineers to do science, the python syntax is conducive to writing "easier to maintain" code (although obviously it's possible to write obscure code in python, the syntax, at least, promotes easier-to-read code).
i had thought that project was moribund but checking back it seems like it's active again.
obviously most of the folks who use our data do so in postgraduate or other environments, and at least for ncas, most of those will have idl in the vicinity, if not on their desktop.
if we look at this, we see that the common scripting languages (perl and python) are not that commonly used by our community (but active python usage is more prevalent than perl and we can ignore tcl/tk).
in principle that means staff should be more flexible in what they can
i appreciate that there may be some resistance to this, particularly from those scientists who like to look under the hood and understand and extend library functions.
do (both in terms of their day jobs and in backing up others) without learning a plethora of languages.
probably more importantly for my thesis, is that the well regarded software carpentry course which provides an introduction to things working scientists most need to know uses python.
my suspicion is that those that don't look under the hood wont care, provided it's easy to use, and well documented.
the idl community of use is rather limited in comparison to python - and, you can call python from idl anyway.
you can use r from python.
my feeling is that the big advantage of python over matlab is the integration with all the other bits and pieces one wants as soon as a workflow gets sufficiently interesting (guis, databases, xml parsers, other people's libraries etc), and the easy extensibility.
if we split all the responses into those from our "target" community (users who claimed to be atmospheric or climate related - roughly half of the total responses): we find broadly similar results, except that idl is marginally stronger than matlab (at least as far as the usage goes - even if there is still more folk who are aware of matlab).
excel and ms friends are common (but so is the influenza, and neither can do big data processing tasks).
of the high level programming languages (fortran, java, c and friends), fortran is the team leader (as you might expect for our community).
we've seen that i believe python is easy to learn, and that at least two uk departments have built their courses around it.
well, yes, it's relatively straightforward, but it's not a great language for maintaining code in, and it's commercial (and not cheap!).
the results that we could get in an afternoon are here: (key: red: integrated courses.
overall, it appears that a ranking of programming language provision would be: c++ matlab python off the cuff comments from a member of the institute of physics asked if they had any insight into the provision of programming languages in a wider group of physics departments suggest these results aren't unique to the russell group departments (but also that python, having been off the radar, is increasing rapidly).
given the importance of statistics to our field, and the fact that r is in relatively common usage and has anoutlet for publishing code we should also keep it in the mix.
some of those scientists are very familiar with idl - but my gut feeling is that those are also the very same ones, that, if they spent an afternoon familiarising themselves with python, would find they can go faster and further with python.
(many of those folks are going to have been physicists, which was why i started by looking at what physics courses have been up to.)
grads has usage comparable to r and python, but ferret isn't much in use in our community.
we obviously needed something a bit more complicated (in which case the more obscure python syntax might have got in the way), but as it was, what we learned from that exercise was mostly that "python is easy to read"!
i'm another dedicated pythonista - i've been using it for quite some time now, and it's my go-to tool for tackling virtually any programming challenge), mainly because it's so simple to bang out a cohesive, well-structured program in a short period of time.
that person had not heard of idl (which is mostly used in research departments, and then mainly in astrophysics/solar-terrestrial/astronomy and atmospheric physics).
nb: i will update this entry over time if folk give me useful feedback.
however, idl still only hits half the audience!!!
you can even use the ncar graphics library from python (viapyngl even if some are curmudgeonly about the interface).
the context is clearly that we have data producers and data consumers - who are not the same communities - and
the context is clearly that we have data producers and data consumers - who are not the same communities - and both of whom ideally would use the same toolset.
well, clearly it's useful, and clearly folks will use it for a long time to come.
there are also lots of web pages which provide information for folk migrating to python from idl (example).
given the importance of statistics to our field, and the fact that r is in relatively common usage and has anoutlet for publishing code we should also keep it in the mix.
both of whom ideally would use the same toolset.
however, if using r libraries is important, we can do that from python ... and it's not a natural language for complex workflow development, so we'll park r in the "useful addendum to python" corner ...
what we find is that most of them offer programming courses to some level as an introduction to computational physics.
we've seen that i believe python is easy to learn, and that at least two uk departments have built their courses around it.
as scientists they need to be able to unpick the internals and be sure they trust them, but they'll also be lazy; once trusted,tools need to be simultaneously easy and extensible.
most departments reported using a wide range of programming languages/packages (e.g fortran, c++, idl, matlab) depending on what was the predominant processing package in the research group/field, e.g. idl for astronomy, c++ for particle physics.
it's too verbose, it requires too much "expertise", and it's a nightmare to maintain.
probably more importantly for my thesis, is that the well regarded software carpentry course which provides an introduction to things working scientists most need to know uses python.
oxford, on the other hand, is a notable exception where a wide number of languages are introduced in years 1 and 2.
the motivation for that has been my contention that python is easy to learn (particularly on one's own using a book supplemented by the web) - and that's important when we are mostly hiring scientists who we want to code, not software engineers to do science, the python syntax is conducive to writing "easier to maintain" code (although obviously it's possible to write obscure code in python, the syntax, at least, promotes easier-to-read code).
java: it's not really a contender, it's simply not suitable as a general purpose language in our environment.
if we split all the responses into those from our "target" community (users who claimed to be atmospheric or climate related - roughly half of the total responses): we find broadly similar results, except that idl is marginally stronger than matlab (at least as far as the usage goes - even if there is still more folk who are aware of matlab).
i actually used jython for the first version of our ncwms software, but abandoned it in favour of "pure java" because of the difficulty of refactoring and maintaining a largish python codebase (too many runtime errors!).
imperial is reviewing programming provision and there is a strong lobby for matlab within their department.
of course, one might make arguments like those about other languages, and folks do, but mostly i get arguments about two particular languages: idl- which is obviously familiar to many (but far from all) of both our data suppliers and consumers, and java - particularly given the unidata toolsets, and because some of my software engineers complain about various (arcane) aspects of python.
