java and c are much faster.
in the post below, dr. darren wilkinson compares mcmc codes under four different languages of r, python, java, and c. he thinks: "r and python are slow, on account of their dynamic type systems, but are quick and easy to develop in.
often times, mcmc algorithms are run through millions of cycles and therefore it's natural to wonder what programming language should be chosen that includes good scientific library on generating random numbers as well as being fast enough to implement mcmc algorithm.
markov chain monte carlo (mcmc) is a powerful simulation technique for exploring posterior distributions that arise in bayesian statistics.
categories:categories:
this could be time efficient, as the debugging  and re-factoring can take place in the dynamic language where it is easier,  then just re-coded fairly directly into the statically typed language once the  code is working well.
that could be just me, but it could be a feature of mcmc algorithms in that the dynamic code runs too slowly to be amenable to quick and simple debugging.
actually, i haven’t found this to be time efficient for the development of mcmc codes.
the speed advantages of java and c can be important in the context of complex mcmc algorithms.
" to read the full article, please click here.
tweet submitted by sepehr akhavan on sat, 03/17/2012 -  13:08 markov chain monte carlo (mcmc) is a powerful simulation technique for  exploring posterior distributions that arise in bayesian statistics.
one possibility that is often put forward is to prototype in a  dynamic language like r or python and then port (the slow parts) to a  statically typed language later.
in order to do mcmc, you can either use some generic tools includingwinbugs and jags or you might want to write your own mcmc code in a programing language.
one possibility that is often put forward is to prototype in a dynamic language like r or python and then port (the slow parts) to a statically typed language later.
this could be time efficient, as the debugging and re-factoring can take place in the dynamic language where it is easier, then just re-coded fairly directly into the statically typed language once the code is working well.
actually, i haven’t found this to be time efficient  for the development of mcmc codes.
in order  to do mcmc, you can either use some generic tools includingwinbugs and jags or  you might want to write your own mcmc code in a programing language.
mcmc programming in r, python, java and c 3 votes 81 reads
the speed  advantages of java and c can be important in the context of complex mcmc  algorithms.
in the post below, dr. darren wilkinson compares mcmc codes under four  different languages of r, python, java, and c. he thinks: "r and python are slow, on account of their dynamic type systems, but  are quick and easy to develop in.
often times, mcmc algorithms are run through millions of cycles and  therefore it's natural to wonder what programming language should be chosen  that includes good scientific library on generating random numbers as well as  being fast enough to implement mcmc algorithm.
that could be just me, but it could be a  feature of mcmc algorithms in that the dynamic code runs too slowly to be  amenable to quick and simple debugging.