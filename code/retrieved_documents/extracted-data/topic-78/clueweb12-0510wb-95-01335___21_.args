it has been shown mathematically that no sorting algorithm based on comparing entire values can be faster than quicksort or merge sort by more than a constant factor.it exhibits similar performance characteristics as quicksort, but the computer science community again considers it a new sorting algorithm in its own right.by this argument one could show, for example, that none of selection sort, quicksort and radix sort can be similar to each other.20 similarly, quicksort is evidently different from mergesort because an unfortunate choice of pivot elements causes quicksort to assume a quadratically growing computing time whereas mergesort can be guaranteed to consume never more than time proportional to n log n. furthermore, one can argue that selection sort and insertion sort must be different algorithms since insertion sort can process a readily sorted input array in time linearly proportional to n whereas selection sort always requires time proportional to n2.in fact, association of the output of one algorithm with the input of another is the standard method of composing algorithms into larger algorithms and eventually into programmes, regardless of whether the association is accomplished through ordinary function calls, shared memory, a middleware of some sort, or a network connection and explicit encoding to a data exchange protocol.a computer scientist or software engineer can instantiate a readily generalised sorting algorithm to sort, for example, names of people in a few seconds of typing.the number of comparisons and array accesses however grows quadratically with n for all the elementary sorting algorithms discussed so far, and more sophisticated algorithms become faster.the similarity or distinction of two algorithms therefore assumes a dominant role when a patent infringement dispute or the issue of novelty or obviousness arises.this can be achieved by writing the code generic (abstract, parametric) so that aspects of the code can be changed without any deeper understanding of the algorithm itself.this domain has the virtue of being easy to describe, requires modest programming skills, and is rich with analogues in everyday life, yet sufficiently complex to be solved by a large number of different algorithms.in insertion sort the basic idea is to take the first value in the input array, insert it into the correct position in the output array, and repeat these steps for the remainder of the input array until no more input elements remain.a subtler change in output, for example the stability of sorting – whether the sorting algorithm preserves the relative order of equal values – can, however, be a distinguishing factor.according to computing folklore, selection and insertion sorts are the fastest sorting methods for array sizes up to around ten or twenty.introduction whether two algorithms - described abstractly in a document or employed concretely in, for example, a computer programme - are ‘the same’ or different from one another, may be a crucial determination in certain legal disputes.an alternative application of divide and conquer would be to perform no work in breaking up the array but instead perform a linear-time subarray merging when combining the sorted subarrays into the whole sorted array.computer scientists and software engineers may colloquially call two algorithms equivalent if they produce the same output for the same input, possibly with attention also to the required memory and computing times.