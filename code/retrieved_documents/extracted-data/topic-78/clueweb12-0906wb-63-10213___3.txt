however, with a comparison such as { substr($a, 0, 3) cmp substr($b, 0, 3) } stability might matter because elements that compare equal on the first 3 characters may be distinguished based on subsequent characters.
on the other hand, quicksort is often faster for small arrays, and on platforms with small memory caches that are much faster than main memory.
mergesort also takes advantage of pre-existing  order, so it would be favored for using sort to merge several sorted arrays.
on average, mergesort does  fewer comparisons than quicksort, so it may be better when complicated  comparison routines are used.
a stable sort means that for records that compare equal, the original input ordering is preserved.
-- haraldbongartz - 06 nov 2004 edit | attach  | print version | history: r2 < r1  | backlinks | view wiki text | edit wiki text  | more topic actions topic revision: r1 - 2005-04-28 -  17:32:42 -haraldbongartz perldoc
in perl versions 5.6 and earlier the quicksort algorithm was used to implement sort(), but in perl 5.8 a mergesort algorithm was also made available, mainly to guarantee worst case o(n log n) behaviour: the worst case of quicksort is o(n**2).
sort - perl pragma to control sort()
stability will matter only if elements that compare equal can be distinguished in some other way.
in perl 5.8 and later, quicksort defends against quadratic behaviour by shuffling large arrays before sorting.
- du bist auf dieser seite als wikiguest - log in or register - nutzerliste - home - forum - perldoc - wissensbasis und faq - community you are here: perldoc web>perldokumentliste >sort (2005-04-28) sort dokumentation zu perl 5.8.0 | download als pod |wie kann ich hier etwas ändern?
mergesort also takes advantage of pre-existing order, so it would be favored for using sort to merge several sorted arrays.
stability  will matter only if elements that compare equal can be distinguished in some  other way.
the best algorithm depends on many things.
mergesort is stable, quicksort is not.
you can force the choice of algorithm with this pragma, but this feels heavy-handed, so the subpragmas beginning with a _ may not persist beyond perl 5.8.
behaviour synopsis use sort 'stable'; # guarantee stability use sort '_quicksort'; # use a quicksort algorithm use sort '_mergesort'; # use a mergesort algorithm use sort '_qsort'; # alias for quicksort my $current = sort::current(); # identify prevailing algorithm description
- name - synopsis - description - caveats name sort - perl pragma to control sort()
in perl 5.8 and later, quicksort defends against  quadratic behaviour by shuffling large arrays before sorting.
that means that simple numerical and lexical sorts do not profit from stability, since equal elements are indistinguishable.
this pragma is not lexically scoped : its effect is global to the program it appears in.
this pragma is not lexically scoped : its effect is global to the  program it appears in.
this may change in future versions.
with the sort pragma you can control the behaviour of the builtin  sort() function.
in perl  5.8 and later, quicksort can be stabilized, but doing so will add overhead, so  it should only be done if it matters.
behaviour synopsis use sort 'stable'; # guarantee stability use sort '_quicksort'; # use a  quicksort algorithm use sort '_mergesort'; # use a mergesort algorithm use sort  '_qsort'; # alias for quicksort my $current = sort::current(); # identify  prevailing algorithm description
-- haraldbongartz - 06 nov 2004 edit | attach | print version | history: r2 rückmeldung.
a stable sort means that for records that compare equal, the original  input ordering is preserved.
in perl 5.8 and later, quicksort can be stabilized, but doing so will add overhead, so it should only be done if it matters.
that means that simple numerical and lexical sorts do not profit  from stability, since equal elements are indistinguishable.
with the sort pragma you can control the behaviour of the builtin sort() function.
in perl versions 5.6 and earlier the quicksort algorithm was used to  implement sort(), but in perl 5.8 a mergesort algorithm was also made  available, mainly to guarantee worst case o(n log n) behaviour: the worst case  of quicksort is o(n**2).
however, with a  comparison such as { substr($a, 0, 3) cmp substr($b, 0, 3) } stability might matter because elements that compare equal on the  first 3 characters may be distinguished based on subsequent characters.
on  the other hand, quicksort is often faster for small arrays, and on platforms  with small memory caches that are much faster than main memory.
you can force  the choice of algorithm with this pragma, but this feels heavy-handed, so the  subpragmas beginning with a_ may not persist beyond perl 5.8.
on average, mergesort does fewer comparisons than quicksort, so it may be better when complicated comparison routines are used.