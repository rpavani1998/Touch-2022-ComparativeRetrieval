the only even digit, 4, will come first.
this may cause new warn- ings when modules are being installed.
this shouldn’t be too difficult for module authors, however: perlio has been designed as a drop-in replacement (at the source code level) for the stdio interface.
you will need a thread library package installed.
eventually, the problem gets whittled down to one that fits in the cache, from which point it benefits from the increased memory speed.
· io::socket::inet failed to open the specified port if the service name was not known.
the only exception is that a "in" pre- fix is required to signify a unicode block when a block name conflicts with a script name.
this file is supposed to be used by hints file writers for architecture-wide changes (as opposed to config.over which is for site-wide changes).
according to perl- bench, this change has not affected the overall speed of perl.
· several debugger fixes: exit code now reflects the script exit code, condition "0" now treated correctly, the "d" command now checks line number, $.
·time::local::timelocal() does not handle fractional seconds any- more.
in future releases of perl the forms will become fatal errors so consider starting laundering now.
· chdir("") and chdir(undef) now give a deprecation warning because they cause a possible unintentional chdir to the home directory.
what this means is that in list context the func- tions will return only three values, not four.
it does not taint the result of floating point formats anymore, making the behaviour consistent with that of string interpolation.
alpha systems with old gccs fail several tests if you see op/pack, op/pat, op/regexp, or ext/storable tests failing in a linux/alpha or *bsd/alpha, it’s probably time to upgrade your gcc.
[561] · "our" variables of the same name declared in two sibling blocks resulted in bogus warnings about "redeclaration" of the variables.
in versions 5.000 through 5.003, the error was literal @example now requires backslash in versions 5.004_01 through 5.6.0, the error was in string, @example now must be written as \@example the idea here was to get people into the habit of writing "fred\@exam- ple.com" when they wanted a literal "@" sign, just as they have always written "give me back my \$5" when they wanted a literal "$" sign.
(for space considerations, the largest chinese encodings have been separated into their own cpan module, encode::hanextra, which encode will use if available).
( 3,1,4,1,5,9 ); a numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
as a stop-gap measure to avoid people from getting frus- trated at the mysterious results (core dumps, most often), it is for- bidden for now (you will get a fatal error even from an attempt).
· "b::concise", by stephen mccamant, is a new compiler backend for walking the perl syntax tree, printing concise info about ops.
· "xsubpp" now understands pod documentation embedded in the *.xs files.
[561] · "file::spec->tmpdir()" now prefers c:/temp over /tmp (works better when perl is running as service).
in "clone" you can do whatever you need to do, like for example handle the cloning of non-perl data, if necessary.
also, introduced @last_match_start and @last_match_end english aliases for "@-" and "@+".
· the c code has been made much more "gcc -wall" clean.
comparing with utf8 data does not magically upgrade non-utf8 data into utf8.
the main rationale was to have all core perlio layers to have all low- ercase names.
see test::more. · "test::simple", by michael schwern, has basic utilities for writing tests.
[561] · the regular expression captured submatches ($1, $2, ...) are now more consistently unset if the match fails, instead of leaving false data lying around in them.
· ambiguous range in the transliteration operator (like a-z-9) now gives a warning.
since perlio is a drop-in replacement for stdio at the source code level, this shouldn’t be that drastic a change.
in any case, the change will break existing code that relies on the current (ill-defined) semantics, so just avoid doing this in general.
also, introduced @last_match_start and @last_match_end english aliases for "@-" and "@+".
· in afs installations, one can configure the root of the afs to be somewhere else than the default/afs by using the configure parame- ter "-dafsroot=/some/where/else".
modules may fail to compile at all, or they may compile and work incorrectly.
[561] · printing quads (64-bit integers) with printf/sprintf now works without the q l ll prefixes (assuming you are on a quad-capable platform).
· windows · signal handling now works better than it used to.
support for unicode, iso-8859-1, and ascii are com- piled in to the module.
tained by arthur bergman, allows a class to define attribute han- dlers.
call- backs (naughtily) exiting with "next;" instead of "return;" now work.
the new interpreter threads ("ithreads" for short) implementation of multithreading, by arthur bergman, replaces the old "5.005 threads" implementation.
[561] · the autouse pragma didn’t work for multi::part::function::names. · caller() could cause core dumps in certain situations.
· the perl5opt environment variable (for passing command line argu- ments to perl) didn’t work for more than a single group of options.
· perlnewmod tells about writing and submitting a new module.
its semantics were never that clear and its implementation even less so.
if perl is configured with -duse64bitall, the successful result of the subtest 10 of lib/posix may arrive before the successful result of the subtest 9, which confuses the test harness so much that it thinks the subtest 9 failed.
each unquoted argument will be automatically quoted to protect whitespace, and any existing whitespace in the arguments will be preserved.
[561] · the following modules now work on windows: extutils::embed [561] io::pipe io::poll net::ping ·io::file::new_tmpfile() is no longer limited to 32767 invo- cations per-process.
"our" can now have an experimental optional attribute "unique" that affects how global variables are shared among multiple interpreters, see "our" in perlfunc.
in search::dict one can now have a pre-processing hook for the lines being searched.
iterative logical name translations are now limited to 10 itera- tions in imitation of show logical and other openvms facilities.
· using the /g modifier insplit() is meaningless and will cause a warning.
also the ext/posix/t/posix.t subtest #10 fails but it is skipped for now because the failure is apple’s fault, not perl’s (blocked signals are lost).
[561] · autovivification of symbolic references of special variables described in perlvar (as in "${$num}") was accidentally disabled.
one reason of this unfinishedness is its (currently) inherent unporta- bility: since both package names and subroutine names may need to be mapped to file and directory names, the unicode capability of the filesystem becomes important-- and there unfortunately aren’t portable answers.
safe signals perl used to be fragile in that signals arriving at inopportune moments could corrupt perl’s internal state.
this will create in perl/build/directory a tree of symbolic links pointing to files in /path/to/perl/source.
scripts are similar to (and superior to) unicodeblocks.
modulus of unsigned numbers now works (4063328477 % 65535 used to return 27406, instead of 27047).
each unquoted argument will be automatically quoted to protect whitespace, and any existing whitespace in the arguments will be preserved.
· large unsigned numbers (those above 2**31) could sometimes lose their unsignedness, causing bogus results in arithmetic operations.
because of the above error, parts of the converted headers will be invisible.
uts there are a few known test failures, see perluts (readme.uts).vos (stratus) when perl is built using the native build process on vos release 14.5.0 and gnu c++/gnu tools 2.0.1, all attempted tests either pass or result in todo (ignored) failures.
vms there should be no reported test failures with a default configuration, though there are a number of tests marked todo that point to areas needing further debugging and/or porting work.
[561] · autovivification of symbolic references of special variables described in perlvar (as in "${$num}") was accidentally disabled.
s/$from/$to/g; } }; 1; # in user’s code: use myfilter qr/red/ => ’green’; print "red\n"; # this code is filtered, will print "green\n" print "bored\n"; # this code is filtered, will print "bogreen\n" no myfilter; print "red\n"; # this code is not filtered, will print "red\n" · "file::temp", by tim jenness, allows one to create temporary files and directories in an easy, portable, and secure way.
the "system" function and backticks operator have improved func- tionality and better error handling.
installation and configuration improvements generic improvements · install now explains how you can configure perl to use 64-bit inte- gers even on non-64-bit platforms.
the pat, tr, and fold failures are genuine perl prob- lems caused by ebcdic (and in the pat and fold cases, combining that with unicode).
(this feature, like other new features that combine unicode and i/o, work only if you are using perlio, but that’s the default.)
building extensions can fail because of largefiles some extensions like mod_perl are known to have issues with âlarge- files’, a change brought by perl 5.6.0 in which file offsets default to 64 bits wide, where supported.
the story in more detail: suppose you want to serve yourself a lit- tle slice of pi.
these are not new failures--perl 5.005_0x has the same bugs, but didn’t have these tests.
in any case, suidperl should only be used by security experts who know exactly what they are doing and why they are using suidperl instead of some other solution such as sudo ( see http://www.courtesan.com/sudo/ ).
for example, if you really donâ€™t care about the order of even and odd digits, quicksort will run in o(n) time; it’s very good at sorting many repetitions of a small number of distinct elements.
[561] · use of $& could trigger a core dump under some situations.
· for developers interested in enhancing perl’s unicode capabilities: almost all the ucd files are included with the perl distribution in thelib/unicore subdirectory.
the perl header files no longer suppress common warnings from the microsoft visual c++ compiler.
but quicksort was rescued at the last moment because it is faster than mergesort on certain inputs and platforms.
(for space considerations, the largest chinese encodings have been separated into their own cpan module, encode::hanextra, which encode will use if available).
· "encode", originally by nick ing-simmons and now maintained by dan kogai, provides a mechanism to translate between different charac- ter encodings.
[561] · numeric conversions did not recognize changes in the string value properly in certain circumstances.
new unicode semantics (no more "use utf8", almost) previously in perl 5.6 to use unicode one would say "use utf8" and then the operations (like string concatenation) were unicode-aware in that lexical scope.
building microperl does not require even running configure; "make -f make- file.micro" should be enough.
this is admittedly not a clean solution, and the solution may not even work at all.
(utf-8 has not been made the default since there are many perl scripts out there that are using various national eight-bit character sets, which would be illegal in utf-8.)
this was found to be an inconvenient interface, and in perl 5.8 the unicode model has completely changed: now the "unicodeness" is bound to the data itself, and for most of the time "use utf8" is not needed at all.
installation and configuration improvements generic improvements · install now explains how you can configure perl to use 64-bit inte- gers even on non-64-bit platforms.
· building perl with -duseithreads or -duse5005threads now works under hp-ux 10.20 (previously it only worked under 10.30 or later).
this improve- ment is only available on vms v6.0 and later.
you won’t notice this for small arrays, but youwill notice it with larger arrays, and you may not live long enough for the sort to complete on arrays of a million elements.
the "waitpid" emulation has been improved.
[561] · the following modules now work on windows: extutils::embed [561] io::pipe io::poll net::ping ·io::file::new_tmpfile() is no longer limited to 32767 invo- cations per-process.
· unicos fixed various alignment problems that lead into core dumps either during build or later; no longer dies on math errors at runtime; now using full quad integers (64 bits), previously was using only 46 bit integers for speed.
unicos/mk · during configure, the test guessing which symbols your c compiler and preprocessor define... will probably fail with error messages like cc-20 cc: error file =
· end blocks are now run even if you exit/die in a begin block.
perlio allows "layers" to be "pushed" onto a file handle to alter the handle’s behaviour.
· ambiguous range in the transliteration operator (like a-z-9) now gives a warning.
· vac 5.0.0.0 may produce buggy code for perl
beware: microperl makes many assump- tions, some of which may be too bold; the resulting executable may crash or otherwise misbehave in wondrous ways.
(this was a problem for example if you were mixing data from i/o and unicode data: your output might have got magically encoded as utf-8.)
"pod2html" now produces xhtml 1.0. · "pod2html" now understands pod written using different line endings (pc-like crlf versus unix-like lf versus macclassic-like cr).
you can now install coderef handlers, ’default’, and ’ignore’ handlers, installing new handlers was not atomic.
any encoding supported by encode module is also available to the ":encoding()" layer if perlio is used.
perl now tries internally to use integer values in numeric conversions and basic arithmetics (+ - * /) if the arguments are integers, and tries also to keep the results stored internally as integers.
the "x" command has been extended so that "x n expr" dumps out the value ofexpr to a depth of at mostn levels.
· although "you shouldn’t do that", it was possible to write code that depends on perl’s hashed key order (data::dumper does this).
[561] · linux previously had problems related to sockaddrlen when usingaccept(), recvfrom() (in perl:recv()), getpeer- name(), and getsockname() .
since the new code is more correct (if you have two constants where the first one is a prefix of the second one, the first constantnever got defined), less lossy (it uses integers for integer constant, as opposed to the old code that used floating point numbers even for integer con- stants), and slightly faster, you might want to consider regenerat- ing your extension code (the new scheme makes regenerating easy).
if you configure with ithreads, ext/threads/t/libc.t will fail.
if you are building on a ufs partition, you will also probably see t/op/stat.t subtest #9 fail.
but the signal may take more time to get heard.
perlio is the default configuration because without it many new features of perl 5.8 cannot be used.
· math::complex handles inf, nan etc., better.
for example: open kid_ps, "-â”‚", "ps", "aux" or die $!; forks theps(1) command (without spawning a shell, as there are more than three arguments toopen()), and reads its standard output via the "kid_ps" filehandle.
also, $config{byteorder} is now computed dynamically--this is more robust with "fat binaries" where an executable image contains bina- ries for more than one binary platform, and when cross-compiling.
the readme file for general stuff.
not only is the current interface rather ugly, but the current implementation slows down normal array and hash use quite noticeably.
note that this means that some scripts that may have relied on earlier buggy behavior may no longer work correctly.
in other taint news, the "exec list" and "system list" have now been considered too risky (think "exec @argv": it can start any program with any arguments), and now the said forms cause a warning under lexical warnings.
this shouldn’t be too difficult for module authors, however: perlio has been designed as a drop-in replacement (at the source code level) for the stdio interface.
so the 5.8 quicksort scrambles large arrays before sorting them, as a statistical defence against quadratic behaviour.
mac os x please remember to set your environment variable lc_all to "c" (setenv lc_all c) before running "make test" to avoid a lot of warnings about the broken locales of mac os x.
eight- bit i/o streams (such as images or zip files), you need to explic- itlyopen() or binmode() with ":bytes" (see "open" in perlfunc and "binmode" in perlfunc), or you can just use "binmode(fh)" (nice for pre-5.8.0 backward compatibility).
constructs for code points less than 256: the "pp" are testing for unicode code points, not knowing about ebcdic.seen in perl 5.7 but gone now "time::piece" (previously known as "time::object") was removed because it was felt that it didn’t have enough value in it to be a core module.
· perliol documents the internals of perlio with layers.
the output is highly customisable.
(this feature, like other new features that combine unicode and i/o, work only if you are using perlio, but that’s the default.)
the regex compiler now maintains a structure that identifies nodes in the compiled bytecode with the corresponding syntactic features of the original regex expression.
· "i18n::langtags", by sean burke, has functions for dealing with rfc3066-style language tags.
after configure has finished, you can just say make all test and perl will be built and tested, all in perl/build/directory.
because of the unpredictability of tie-breaking order, and the quadratic worst-case behaviour, quicksort wasalmost replaced com- pletely with a stable mergesort.
· unadorned dump() will now give a warning suggesting to use explicit core::dump() if that’s what really is meant. ·
currently, there is no good solution for the problem, but configure now provides appropriate non- largefile ccflags, ldflags, libswanted, and libs in the %config hash (e.g., $config{ccflags_nolargefiles}) so the extensions that are having problems can try configuring themselves without the largefileness.
this enables the new behaviour for perl embedders.
because in effect storable does serial- isation of perl data structures, with it you can also clone deep, hierarchical datastructures.
· "xsubpp" now understands pod documentation embedded in the *.xs files.
(interesting only for extension writers and perl core hackers.)
this is known problem with cygwin, and a workaround is detailed in here: http://sources.red- hat.com/ml/cygwin/2001-12/msg00894.htmlcygwin ndbm tests fail on fat one can build but not install (or test the build of) the ndbm_file on fat filesystems.
if building perl with interpreter threads (ithreads), theget- grent(), getgrnam(), and getgrgid() functions cannot return the list of the group members due to a bug in the multithreaded support of unicos/mk.
depending on your platform, there are also other reasons why we decided to break binary compatibility, please read on.64-bit platforms and malloc if your pointers are 64 bits wide, the perl malloc is no longer being used because it does not work well with 8-byte pointers.
theartistic and copying files for copyright information.
· spurious syntax errors generated in certain situations, whenglob() caused file::glob to be loaded for the first time, have been fixed.
you can set the environment variable perl_test_net_ping to "1" (one) before running the perl test suite to enable all the net::ping tests.
one can have unicode in identifier names, but not in package/class or subroutine names.
[561] · file::find now has pre- and post-processing callbacks.
· the thread extension is now not built at all under ithreads ("con- figure -duseithreads") because it wouldn’t work anyway (the thread extension requires being configured with "-duse5005threads").note that the 5.005 threads are unsupported and deprecated: if you have code written for the old threads you should migrate it to the new ithreads model.
[561] · file::glob now supports "glob_limit" constant to limit the size of the returned list of filenames.
interpreter threads (ithreads) is the new thread model introduced in perl 5.6 but only available as an internal interface for extension writers (and for win32 perl for "fork()" emulation).
· "storable" gives persistence to perl data structures by allowing the storage and retrieval of perl data to and from files in a fast and compact binary format.
so, as you add more and more digits of pi, the order in which the sorted even and odd digits appear will change.
one such known spot are the "\p{}" and "\p{}" regu- lar expression constructs for code points less than 256: the "pp" are testing for unicode code points, not knowing about ebcdic.seen in perl 5.7 but gone now "time::piece" (previously known as "time::object") was removed because it was felt that it didn’t have enough value in it to be a core module.
· math::complex handles inf, nan etc., better.
if you configure with ithreads, ext/threads/t/libc.t will fail.
demonstrating the new encode module. · "pod2html" now allows specifying a cache directory.
the above failures are known as of 5.8.0 with native builds with long filenames, but there are a few more if running under dosemu because of limitations (and maybe bugs) of dosemu: t/comp/cpp...........................failed at test 3 t/op/inccode.........................(crash) and a few lib/extutils tests, and several hundred encode/t/aliases.t failures that work fine with long filenames.
[561] · "file::spec->tmpdir()" now prefers c:/temp over /tmp (works better when perl is running as service).
in some setups the former has been known to spuriously also try to run "make install".
· all regular expression compilation error messages are now hopefully easier to understand both because the error message now comes before the failed regex and because the point of failure is now clearly marked by a "{bar}" has been deprecated for a while.
therestricted hashes interface is expected to be the replacement interface (see hash::util).
· "storable" gives persistence to perl data structures by allowing the storage and retrieval of perl data to and from files in a fast and compact binary format.
[561] · duping socket handles with open(f, ">&mysock") now works under windows 9x.
· better unc path handling under ithreads.
· "i18n::langinfo" can be used to query locale information.
in case you are still using solaris 2.5 (aka sunos 5.5), you may expe- rience failures (the test core dumping) in lib/locale.t.
"h2xs" uses the new extutils::constant module which will affect newly created extensions that define constants.
· end blocks are now run even if you exit/die in a begin block.
· the builtindump() now gives an optional warning "dump() better written as core::dump()", meaning that by default "dump(...)" is resolved as the builtindump() which dumps core and aborts, not as (possibly) user-defined "sub dump".
package mypack; use attribute::handlers; sub wolf :attr(scalar) { print "howl!\n" } # later, in some package using or inheriting from mypack... my mypack $fluffy : wolf; # the attribute handler wolf will be called both variables and routines can have attribute handlers.
this feature helps in writing internation-
· "perlio::via::quotedprint", by elizabeth mattijsen, is an example of a "perlio::via" class: use perlio::via::quotedprint; open($fh,">:via(quotedprint)",$path); this will automatically convert everything output to $fh to quoted-printable.
· non-blocking waits for child processes (or pseudo-pro- cesses) are supported via "waitpid($pid, &posix::wnohang)".
it also serves as an example of a loadable perlio layer.
extension dynamic in vms the socket extension is now dynamically loaded instead of being stati- cally built in.
a mmap layer may be available if platform supports it (mostly unixes).
a mmap layer may be available if platform supports it (mostly unixes).
also, usually the system mallocs on such platforms are much better optimized for such large memory models than the perl malloc.
· "perlio::scalar", by nick ing-simmons, provides the implementation of io to "in memory" perl scalars as discussed above.
more appropriate mechanisms for selecting the imple- mentation exist, but they wouldn’t have arrived in time to save quicksort.
the leading "_" is a reminder that these subpragmas may not survive beyond 5.8.
you can enable/disable them with "use/no warnings ’file::find’;".
perl_get_sv you may get errors like ’undefined symbol "perl_get_sv"’ or "can’t resolve symbol ’perl_get_sv’", or the symbol may be "perl_sv_2pv".
just by saying use switch; you have "switch" and "case" available in perl.
· "b::concise", by stephen mccamant, is a new compiler backend for walking the perl syntax tree, printing concise info about ops.
they are now magnitudes faster, and they support various bignum libraries such as gmp and pari as their backends.
· if your file system supports symbolic links, you can build perl outside of the source directory by mkdir perl/build/directory cd perl/build/directory sh /path/to/perl/source/configure -dmksymlinks ...
as a part of the ithreads implementation perl will also use any neces- sary and detectable reentrant libc interfaces.
we suggest upgrading to at least vac version 5.0.1.0, that has been known to compile perl correctly.
core enhancements unicode overhaul unicode in general should be now much more usable than in perl 5.6.0 (or even in 5.6.1).
modules may fail to compile at all, or they may compile and work incorrectly.
· windows · signal handling now works better than it used to.
perl5db.t was also added to test the changes, and as a placeholder for further tests.
for example: open kid_ps, "-â", "ps", "aux" or die $!; forks theps(1) command (without spawning a shell, as there are more than three arguments toopen()), and reads its standard output via the "kid_ps" filehandle.
utf-16 and ucs-2 encoded perl files should now be read cor- rectly.
support for unicode, iso-8859-1, and ascii are com- piled in to the module.
this seems to be a compiler error since if compiled with gcc no core dump ensues, and no failures have been seen on the said test on any other platform.
(this happens because the test scripts from under t/lib have been moved to be closer to the library/extension they are testing.)
package mypack; use attribute::handlers; sub wolf :attr(scalar) { print "howl!\n" } # later, in some package using or inheriting from mypack... my mypack $fluffy : wolf; # the attribute handler wolf will be called both variables and routines can have attribute handlers.
this means that additional warnings may now show up when compiling xs code. ·
· if your file system supports symbolic links, you can build perl outside of the source directory by mkdir perl/build/directory cd perl/build/directory sh /path/to/perl/source/configure -dmksymlinks ...
· file handles can be marked as accepting perl’s internal encoding of unicode (utf-8 or utf-ebcdic depending on platform) by a pseudo layer ":utf8" : open($fh,">:utf8","uni.txt")
· several debugger fixes: exit code now reflects the script exit code, condition "0" now treated correctly, the "d" command now checks line number, $.
· the tr///c and tr///u features have been removed and will not return; the interface was a mistake.
for very small lists this may result in slightly slower sorting times, but in general the speedup should be at least 20%.
in "clone" you can do whatever you need to do, like for example handle the cloning of non-perl data, if necessary.
[561] · numeric conversions did not recognize changes in the string value properly in certain circumstances.
[561] ·wait(), waitpid(), and backticks now return the correct exit status under windows 9x.
the enhanced version has also been backported to earlier releases of perl and submitted to cpan so that the earlier releases can enjoy the fixes.
gccs prior to 2.95.3 are definitely not good enough, and gcc 3.1 may be even better.
this probably means that you are trying to use an older shared perl library (or extensions linked with such) with perl 5.8.0 executable.
· in addition to config.over, a new override file, config.arch, is available.
call- backs (naughtily) exiting with "next;" instead of "return;" now work.
as a part of the ithreads implementation perl will also use any neces- sary and detectable reentrant libc interfaces.
the "system" function and backticks operator have improved func- tionality and better error handling.
self-tying of scalars and io thingies works.ext/threads/t/libc
failed tests 128-130 op/pack...............................failed tests 25-5625 op/pow................................ op/taint..............................# msgsnd failed ../ext/io/lib/io/t/io_poll............failed tests 3-4 ../ext/ipc/sysv/ipcsysv...............failed tests 2, 5-6 ../ext/ipc/sysv/t/msg.................failed tests 2, 4-6 ../ext/
a version of net::ping::external is avail- able in cpan.
the above failures are known as of 5.8.0 with native builds with long filenames, but there are a few more if running under dosemu because of limitations (and maybe bugs) of dosemu: t/comp/cpp...........................failed at test 3 t/op/inccode.........................(crash) and a few lib/extutils tests, and several hundred encode/t/aliases.t failures that work fine with long filenames.
· generating illegal unicode code points such as u+fffe, or the utf-16 surrogates, now also generates an optional warn- ing. · "isalnum", "isalpha", and "isword" now match titlecase.
on linux plat- forms the /bin/mail program had an undocumented feature which when com- bined with suidperl gave access to a root shell, resulting in a serious compromise instead of reporting the exploit attempt.
xml::parser not working use xml::parser 2.31 or later.z/os (os/390) z/os has rather many test failures but the situation is actually much better than it was in 5.6.0; it’s just that so many new modules and tests have been added.
the "x" command has been extended so that "x n expr" dumps out the value ofexpr to a depth of at mostn levels.
· gcc needs to closely track the operating system release to avoid build problems.
the following tests are known to fail on os/2 (for clarity only the failures are shown, not the full error messages): ../lib/extutils/t/mkbootstrap.t 1 256 18 1 5.56% 8 ../lib/extutils/t/packlist.t 1 256 34 1 2.94% 17 ../lib/extutils/t/basic.t 1 256 17 1 5.88% 14 lib/os2_process.t 2 512 227 2 0.88% 174 209 lib/os2_process_kid.t 227 2 0.88% 174 209 lib/rx_cmprt.t 255 65280 18 3 16.67% 16-18op/sprintf tests 91, 129, and 130 the op/sprintf tests 91, 129, and 130 are known to fail on some plat- forms.
the existing behaviour when localising tied arrays and hashes is wrong, and will be changed in a future release, so do not rely on the existing behaviour.
a new optional location for perl libraries, otherlibdirs, is avail- able.
quicksort has a worst case run time that can grow like n**2, so-called quadratic behaviour, and it can hap- pen on patterns that may well arise in normal use.
this didn’t do anything useful, as the sort was not performed.
these will get installed as perljp perlko perlcn perltw · the documentation for the posix-bc platform is called "bs2000", to avoid confusion with the perl posix module.
the following tests may fail intermittently because of timing problems, for example if the system is heavily loaded.
· localised tied variables no longer leak memory use tie::hash; tie my %tied_hash => ’tie::stdhash’; ... # used to leak memory every time local() was called; # in a loop, this added up.
ieee-format floating point default on openvms alpha perl now uses ieee format (t_float) as the default internal floating point format on openvms alpha, potentially breaking binary compatibil- ity with external libraries or existing data.
[561] and -dr options to trace tokenising and to add reference counts to displaying vari- ables, respectively.
this seems to be a compiler error since if compiled with gcc no core dump ensues, and no failures have been seen on the said test on any other platform.
· universal::isa no longer caches methods incorrectly.
[561] · the regular expression captured submatches ($1, $2, ...) are now more consistently unset if the match fails, instead of leaving false data lying around in them.
· the "utf8::" name space (as in the pragma) provides various perl- callable functions to provide low level access to perl’s internal unicode representation.
(basically what happens is that com- peting threads can corrupt shared global state, one good example being regular expression engine’s state.)timing problems
this is caused by a bug in the awk utility of unicos/mk.
many of the new tests are of course introduced by the new modules, but still in general perl is now more thoroughly tested.
this is caused by darwin’s ufs not sup- porting inode change time.
this didn’t do anything useful, as the sort was not performed.
(previously perl always preferred floating point numbers in its math.)arrays now always interpolate into double-quoted strings [561] in double-quoted strings, arrays now interpolate, no matter what.
because of the above error, parts of the converted headers will be invisible.
(it is in fact a full implementation of sed in perl: you can use the sed functionality by using the "psed" utility.)
this means that for example instead of "do format()" you must write "do &format()".
· in addition to config.over, a new override file, config.arch, is available.
in search::dict one can now have a pre-processing hook for the lines being searched.
this is only meant as a temporary debugging aid while securing the code of old legacy applications.
· if you have gcc 3, there is a make target called "perl.gcov" for creating a gcoved perl executable for cov- erage analysis.
the story in more detail: suppose you want to serve yourself a lit- tle slice of pi.
· gcc needs to closely track the operating system release to avoid build problems.
the magic constants (e.g. ’p’) have been macrofied (e.g. "perl_magic_tied") for better source code readability and maintain- ability.
you can ignore the error, but it does cause a slight problem: you cannot fully benefit from the h2ph utility (see h2ph) that can be used to convert c headers to perl libraries, mainly used to be able to access from perl the constants defined using c preprocessor, cpp.
lib/ftmp-security tests warn â€â €™system possibly insecureâ€â €™ don’t panic.
in case you are still using solaris 2.5 (aka sunos 5.5), you may expe- rience failures (the test core dumping) in lib/locale.t.
for tests 129 and 130, the failing platforms do not comply with the ansi c standard: lines 19ff on page 134 of ansi x3.159 1989, to be exact.
note that some of the net::ping tests are disabled when running under the perl distribution since one cannot assume one or more of the following: enabled echo port at localhost, full internet con- nectivity, or sympathetic firewalls.
restricted hashes a restricted hash is restricted to a certain set of keys, no keys out- side the set can be added.
the "fields" pragma interface will remain available.
(this happens because the test scripts from under t/lib have been moved to be closer to the library/extension they are testing.)
· "encode", originally by nick ing-simmons and now maintained by dan kogai, provides a mechanism to translate between different charac- ter encodings.
also the long doubles support in aix should be better now.
these failures are unlikely to get fixed as 5.005-style threads are considered fundamentally broken.
the prototypes are now checked better at compile-time for invalid syntax.
· perlpodspec is a more formal specification of the pod format, mainly of interest for writers of pod applications, not to people writing in pod.
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )irix fails ext/list/util/t/shuffle.t or digest::md5 irix with mipspro 7.3.1.2m or 7.3.1.3m compiler may fail the list::util test ext/list/util/t/shuffle.t by dumping core.
also the long doubles support in aix should be better now.
(interesting only for extension writers and perl core hackers.)
nothing gets installed, but the code is worth study- ing for extension writers.
· fix password routines which in some shadow password platforms (e.g. hp-ux) caused getpwent() to return every other entry.
on a really fast machine you can hope to finish the suite in about 6-8 minutes (wall- clock time).
the byteorder was only sizeof(long) bytes long (1234 or 4321), but now it is correctly sizeof(iv) bytes long, (12345678 or 87654321).
perl_get_sv you probably have an old pre-perl-5.8.0 installation (or parts of one) in /library/
· spurious syntax errors generated in certain situations, whenglob() caused file::glob to be loaded for the first time, have been fixed.
this file is supposed to be used by hints file writers for architecture-wide changes (as opposed to config.over which is for site-wide changes).
[561] and -dr options to trace tokenising and to add reference counts to displaying vari- ables, respectively.
this is caused by a bug in the awk utility of unicos/mk.
no more cor- rupt internal state since the current operation is always finished first,
with these, you can implement rather advanced parsing algorithms.
"clone" will be executed once for every package that has it defined or inherited.
(subroutine and "our" variables still get attributes applied at compile-time.)
[561] · "pack() / unpack()" can now group template letters with "()" and then apply repetition/count modifiers on the groups.
· "unicode::collate", by sadahiro tomoyuki, implements the uca (uni- code collation algorithm) for sorting unicode strings.
it seems that for some reason "make install" doesn’t always completely overwrite the files in /library/perl.
· "digest", frontend module for calculating digests (checksums), from gisle aas, has been added.
unicode in package/class and subroutine names does not work one can have unicode in identifier names, but not in package/class or subroutine names.
in future releases of perl the forms will become fatal errors so consider starting laundering now.
· the "exec list" and "system list" operations now produce warnings on tainted data and in some future release they will produce fatal errors.
if you are building on a ufs partition, you will also probably see t/op/stat.t subtest #9 fail.
the obsolete chat2 library that should never have been allowed to escape the laboratory has been decommissioned.
[561+] · "filter::util::call", by paul marquess, provides you with the framework to writesource filters in perl.
· caller() could cause core dumps in certain situations.
· in sys::syslog there is now a failover mechanism that will go through alternative connection mechanisms until the message is suc- cessfully logged.
irix numerous compilation flag and hint enhancements; accidental mixing of 32-bit and 64-bit libraries (a doomed attempt) made much harder.
mergesort has worst case o(n log n) behaviour, the best value attainable.
if you find what you think is a bug, you might check the articles recently posted to the comp.lang.perl.misc newsgroup and the perl bug database at http://bugs.perl.org/ .
· generating illegal unicode code points such as u+fffe, or the utf-16 surrogates, now also generates an optional warn- ing. · "isalnum", "isalpha", and "isword" now match titlecase.
in general, scripts are more inclusive, but not universally so.
it also sends the bug report to perl.org, not perl.com. · "perlcc" has been rewritten and its user interface (that is, com- mand line) is much more like that of the unix c compiler, cc.
use of "/c" in substitutions, even with "/g", elicits "use of /c modifier is meaningless in s///".
see test::more. · "test::simple", by michael schwern, has basic utilities for writing tests.
your bug report, along with the output of "perl -v", will be sent off to perlbug@perl.org to be analysed by the perl porting team.
· "memoize" can make your functions faster by trading space for time, from mark-jason dominus.
perl installation leaves libnet unconfigured; uselibnetcfg to con- figure it.
· "do" followed by a bareword now ensures that this bareword isn’t a keyword (to avoid a bug where "do q(foo.pl)" tried to call a sub- routine called "q").
quicksort was rescued by implementing a sort pragma to control aspects of the sort.
· if tr/// is just counting characters, it doesn’t attempt to modify its target.
[561] · the perl parser has been stress tested using both random input and markov chain input and the few found crashes and lockups have been fixed.
the default on vax (d_float) has not changed.
· "mime::quotedprint", by gisle aas, allows you to encode data in quoted-printable encoding, as defined in rfc 2045 -mime
if that doesn’t help, you may have to try removing all the .bundle files from beneath /library/perl, and again "make install"-ing.
· "i18n::langinfo" can be used to query locale information.
the problem was caused by perl trying to report a suspected security exploit attempt using an external program, /bin/mail.
the obsolete chat2 library that should never have been allowed to escape the laboratory has been decommissioned.
failure of thread (5.005-style) tests note that support for 5.005-style threading is deprecated, experimental and practically unsupported.
· file handles can be opened to "in memory" files held in perl scalars via: open($fh,’>’, \$variable) â”‚â”‚ ... ·
· data::dumper now has an option to dump code references using b::deparse.
in particular,caller() now returns a subroutine name of "(unknown)" for subroutines that have been removed from the symbol table.
in particular,caller() now returns a subroutine name of "(unknown)" for subroutines that have been removed from the symbol table.
this is admittedly not a clean solution, and the solution may not even work at all.
not only is the current interface rather ugly, but the current implementation slows down normal array and hash use quite noticeably.
[561] selected bug fixes numerous memory leaks and uninitialized memory accesses have been hunted down.
the main rationale was to have thread modules to obey normal naming, "thread::" (the "threads" and "threads::shared" themselves are more pragma-like, they affect compile-time, so they stay lowercase).
· vac 5.0.0.0 may produce buggy code for perl
perlio is the default configuration because without it many new features of perl 5.8 cannot be used.
in 5.8.0 · better unicode support · new io implementation · new thread implementation · better numeric accuracy · safe signals · many new modules · more extensive regression testing incompatible changes binary incompatibility perl 5.8 is not binary compatible with earlier releases of perl.
· data::dumper now has an option to sort hashes.
the method is also exportable as a sockatmark() function.
(subroutine and "our" variables still get attributes applied at compile-time.)
the original files are left unaffected.
· if you have gcc 3, there is a make target called "perl.gcov" for creating a gcoved perl executable for cov- erage analysis.
extutils::makemaker now uses file::spec internally, which hopefully leads to better portability.
· universal::isa no longer caches methods incorrectly.
if you don’t have /bin/mail, or if you have ’safe setuid scripts’, or if suidperl is not installed, you are safe.
the leading "_" is a reminder that these subpragmas may not survive beyond 5.8.
this may or may not be a problem with ancient tcp/ip stacks of vms: we do not know since we weren’t able to test perl in such configurations.
the quicksort divide and conquer strategy works well on platforms with relatively small, very fast, caches.
[561] ·wait(), waitpid(), and backticks now return the correct exit status under windows 9x.
with ithreads, when a new thread is created, all perl data is cloned, however non-perl data cannot be cloned automatically.
localising tied arrays and hashes is broken local %tied_array; doesn’t work as one would expect: the old value is restored incor- rectly.
· in sdbm_file on dosish platforms, some keys went missing because of lack of support for files with "holes".
you can set the environment variable perl_test_net_ping to "1" (one) before running the perl test suite to enable all the net::ping tests.
attributes for "my" variables now handled at run-time the "my expr : attrs" syntax now applies variable attributes at run-time.
[561] · zero entries were missing from the unicode classes such as "isdigit".
we suggest upgrading to at least vac version 5.0.1.0, that has been known to compile perl correctly.
(this was a problem for example if you were mixing data from i/o and unicode data: your output might have got magically encoded as utf-8.)
as of november 2001 the only known vulnerable platform is linux, most likely all linux distributions.
in 5.8.0 · better unicode support · new io implementation · new thread implementation · better numeric accuracy · safe signals · many new modules · more extensive regression testing incompatible changes binary incompatibility perl 5.8 is not binary compatible with earlier releases of perl.
understanding of numbers in general a lot of fixing has happened in the area of perl’s under- standing of numbers, both integer and floating point.
most importantly, anonymous subs used to leak quite a bit.
one reason of this unfinishedness is its (currently) inherent unporta- bility: since both package names and subroutine names may need to be mapped to file and directory names, the unicode capability of the filesystem becomes important-- and there unfortunately aren’t portable answers.
this improves the portability of system(@args) by avoiding the need for win- dows "cmd" shell specific quoting in perl programs.
stable means that ties are broken to preserve the original order of appearance in the input array.
in other words: you just have to recompile your modules containing xs code, sorry about that.
it points at some prob- lems with the signedness handling of the c compiler, as do the 64bitint, arith, and pow failures.
the comparison block is now run in scalar context, and the argu- ments to be sorted are always provided list context.
· non-blocking waits for child processes (or pseudo-pro- cesses) are supported via "waitpid($pid, &posix::wnohang)".
s/$from/$to/g; } }; 1; # in user’s code: use myfilter qr/red/ => ’green’; print "red\n"; # this code is filtered, will print "green\n" print "bored\n"; # this code is filtered, will print "bogreen\n" no myfilter; print "red\n"; # this code is not filtered, will print "red\n" · "file::temp", by tim jenness, allows one to create temporary files and directories in an easy, portable, and secure way.
the warnings issued by file::find now belong to their own category.
· in sdbm_file on dosish platforms, some keys went missing because of lack of support for files with "holes".
[561] · perl5opt with embedded spaces didn’t work.
· our() variables will not cause bogus "variable will not stay shared" warnings.
this was caused by perl’s using the operating system libraries in a situation where the result of the string to number conversion is undefined: now perl consistently handles such strings as zero in numeric contexts.
hash values output from the algorithm on a hash of all 3-char printable ascii keys comes much closer to pass- ing the diehard random number generation tests.
for example, "system("nmake /nologo", @args)" will now attempt to run the file "nmake /nologo" and will fail when such a file isn’t found.
for (1..5) { $_++ } works without complaint.
· perl has been tested with the gnu pth userlevel thread package ( http://www.gnu.org/software/pth/pth.html ).
core enhancements unicode overhaul unicode in general should be now much more usable than in perl 5.6.0 (or even in 5.6.1).
also individual keys can be restricted so that the key cannot be deleted and the value cannot be changed.
the failures in dumper.t and downgrade.t are problems in the tests, those in io_unix and sprintf are problems in the uss (udp sockets and printf formats).
· perlpodspec is a more formal specification of the pod format, mainly of interest for writers of pod applications, not to people writing in pod.
the prototypes are now checked better at compile-time for invalid syntax.
· carp now has better interface documentation, and the @carp_not interface has been added to get optional control over where errors are reported independently of @isa, by ben tilly.
(perlu- nicode is more of a detailed reference and background information) · perlutil explains the command line utilities packaged with the perl distribution.
no longer gets corrupted, and all debugger output now goes correctly to the socket if remoteport is set.
unicode can be used in hash keys, unicode in regu- lar expressions should work now, unicode in tr/// should work now, uni- code in i/o should work now.
[561] · "our" variables of the same name declared in two sibling blocks resulted in bogus warnings about "redeclaration" of the variables.
the socketpair tests are known to be unhappy in sco 3.2v5.0.4: ext/socket/socketpair.t...............failed tests 15-45solaris 2.5
[561+] · the new bignum, bigint, and bigrat pragmas, by tels, implement transparent bignum support (using the math::bigint, math::bigfloat, and math::bigrat backends).
the difference between scripts and blocks is that scripts are the glyphs used by a language or a group of languages, while the blocks are more artificial groupings of (mostly) 256 charac- ters based on the unicode numbering.
hash values output from the algorithm on a hash of all 3-char printable ascii keys comes much closer to pass- ing the diehard random number generation tests.
[561] · attributes (such as :shared) didn’t work withour().
building microperl does not require even running configure; "make -f make- file.micro" should be enough.
note that the new semantics doesn’t work with the attribute::handlers module (as of version 0.76).socket extension dynamic in vms the socket extension is now dynamically loaded instead of being stati- cally built in.
there is a new "kill" implementation based on "sys$sigprc" that allows older vms systems (pre-7.0) to use "kill" to send signals rather than simply force exit.
iterative logical name translations are now limited to 10 itera- tions in imitation of show logical and other openvms facilities.
some memory-hungry perl applications like the pdl don’t work well with perl’s malloc.
in versions 5.004_01 through 5.6.0, the error was in string, @example now must be written as \@example the idea here was to get people into the habit of writing "fred\@exam- ple.com" when they wanted a literal "@" sign, just as they have always written "give me back my \$5" when they wanted a literal "$" sign.
· "mime::quotedprint", by gisle aas, allows you to encode data in quoted-printable encoding, as defined in rfc 2045 -mime
locales may fail the locale test 117 in freebsd.
perl_get_sv you may get errors like ’undefined symbol "perl_get_sv"’ or "can’t resolve symbol ’perl_get_sv’", or the symbol may be "perl_sv_2pv".
most of the rest point at problems with sysv ipc.term::readkey not working on win32 use term::readkey 2.20 or later.
after configure has finished, you can just say make all test and perl will be built and tested, all in perl/build/directory.
note that the above of course is extremely disruptive for anything using the /usr/local/bin/perl.
this means that for example instead of "do format()" you must write "do &format()".
gccs prior to 2.95.3 are definitely not good enough, and gcc 3.1 may be even better.
· building perl with -duseithreads or -duse5005threads now works under hp-ux 10.20 (previously it only worked under 10.30 or later).
note that some of the net::ping tests are disabled when running under the perl distribution since one cannot assume one or more of the following: enabled echo port at localhost, full internet con- nectivity, or sympathetic firewalls.
the quicksort divide and conquer strategy works well on platforms with relatively small, very fast, caches.
it broke at some point during the ithreads work and we could not find amiga experts to unbreak the prob- lems.
· configure "-s" can now run non-interactively.
[561] file access tests now use current process privileges rather than the user’s default privileges, which could sometimes result in a mismatch between reported access and actual access.
trying to use unicode characters on an i/o stream without marking the stream’s encoding (usingopen() or binmode()) will cause "wide character" warnings.
· previously dynix/ptx had problems in its configure probe for non- blocking i/o. · epoc epoc now better supported.
it can now deparse almost all of the standard test suite (so that the tests still succeed).
scripts are similar to (and superior to) unicodeblocks.
· all regular expression compilation error messages are now hopefully easier to understand both because the error message now comes before the failed regex and because the point of failure is now clearly marked by a "{bar}" has been deprecated for a while.
[561] · "pack() / unpack()" can now group template letters with "()" and then apply repetition/count modifiers on the groups.
it is primarily used by "h2xs" to enhance portability of xs modules between different ver- sions of perl.
its semantics were never that clear and its implementation even less so.
in any case, suidperl should only be used by security experts who know exactly what they are doing and why they are using suidperl instead of some other solution such as sudo ( see http://www.courtesan.com/sudo/ ).
what this means is that in list context the func- tions will return only three values, not four.
the install file for how to build perl.
· unicos fixed various alignment problems that lead into core dumps either during build or later; no longer dies on math errors at runtime; now using full quad integers (64 bits), previously was using only 46 bit integers for speed.
[561] ·sort() is also fully reentrant, in the sense that the sort function can itself callsort().
· "tie::refhash::nestable", by edward avis, allows storing hash ref- erences (unlike the standard tie::refhash)
this is caused by the characters \xff (y with diaeresis) and \xbe (y with diaeresis) not behaving correctly when being matched case-insensi- tively.
just by saying use switch; you have "switch" and "case" available in perl.
it also has been made more portable.
anonymous temporary files are available without need to ’use file- handle’ or other module via open($fh,"+>", undef) ââ ...
restricted hashes a restricted hash is restricted to a certain set of keys, no keys out- side the set can be added.
· the english module can now be used without the infamous performance hit by saying use english ’-no_match_vars’; (assuming, of course, that you don’t need the troublesome variables $â€˜, $&, or $’.)
mergesort has worst case o(n log n) behaviour, the best value attainable.
the readme file for general stuff.
eventually, the problem gets whittled down to one that fits in the cache, from which point it benefits from the increased memory speed.
it does not taint the result of floating point formats anymore, making the behaviour consistent with that of string interpolation.
· the thread extension is now not built at all under ithreads ("con- figure -duseithreads") because it wouldn’t work anyway (the thread extension requires being configured with "-duse5005threads").note that the 5.005 threads are unsupported and deprecated: if you have code written for the old threads you should migrate it to the new ithreads model.
you can move the old perl shared library out of the way like this: cd /library/perl/darwin/core mv libperl.dylib libperlold.dylib and then reissue "make install".
use of "/c" in substitutions, even with "/g", elicits "use of /c modifier is meaningless in s///".
in any case, the change will break existing code that relies on the current (ill-defined) semantics, so just avoid doing this in general.
so you really might pre- fer native builds and long filenames.
· in afs installations, one can configure the root of the afs to be somewhere else than the default/afs by using the configure parame- ter "-dafsroot=/some/where/else".
quicksort has a worst case run time that can grow like n**2, so-called quadratic behaviour, and it can hap- pen on patterns that may well arise in normal use.
note that the above of course is extremely disruptive for anything using the /usr/local/bin/perl.
there is a new "kill" implementation based on "sys$sigprc" that allows older vms systems (pre-7.0) to use "kill" to send signals rather than simply force exit.
this is harmless; it is caused by thegetnetbyaddr() and getnet- byaddr_r() having slightly different types for their first argu- ment.
cygwin "unable to remap" for example when building the tk extension for cygwin, you may get an error message saying "unable to remap".
· in aix 4.2, perl extensions that use c++ functions that use statics may have problems in that the statics are not getting initialized.
note that the new semantics doesn’t work with the attribute::handlers module (as of version 0.76).socket
also, $config{byteorder} is now computed dynamically--this is more robust with "fat binaries" where an executable image contains bina- ries for more than one binary platform, and when cross-compiling.
depending on your platform, there are also other reasons why we decided to break binary compatibility, please read on.64-bit platforms and malloc if your pointers are 64 bits wide, the perl malloc is no longer being used because it does not work well with 8-byte pointers.
· perlclib documents the internal replacements for standard c library functions.
because of the unpredictability of tie-breaking order, and the quadratic worst-case behaviour, quicksort wasalmost replaced com- pletely with a stable mergesort.
this was found to be an inconvenient interface, and in perl 5.8 the unicode model has completely changed: now the "unicodeness" is bound to the data itself, and for most of the time "use utf8" is not needed at all.
· lexicals ii: lexicals leaked at file scope into subroutines that were declared before the lexicals.
in general, scripts are more inclusive, but not universally so.
it is the little brother of "-t": instead of dying on taint violations, lexical warnings are given.
the cure is to drop optimization level (configure -doptimize=-o2).
xml::parser not working use xml::parser 2.31 or later.z/os (os/390) z/os has rather many test failures but the situation is actually much better than it was in 5.6.0; it’s just that so many new modules and tests have been added.
· "perlio::scalar", by nick ing-simmons, provides the implementation of io to "in memory" perl scalars as discussed above.
[561] · zero entries were missing from the unicode classes such as "isdigit".
the exploit attempt reporting feature has been completely removed from perl 5.8.0 (and the maintenance release 5.6.1, and it was removed also from all the perl 5.7 releases), so that particular vulnerability isn’t there anymore.
the information is attached to the new "offsets" member of the "struct regexp".
it also serves as an example of a loadable perlio layer.
some memory-hungry perl applications like the pdl don’t work well with perl’s malloc.
some platforms that used to use gcvt may now resort to the slower sprintf.
for example, while the script "latin" includes all the latin characters and their various diacritic-adorned versions, it does not include the various punctuation or digits (since they are not solely "latin").
when perl is built using the native build process on vos release 14.5.0 and gnu c++/gnu tools 2.0.1, all attempted tests either pass or result in todo (ignored) failures.
that is a literal undef, not an undefined value.ithreads the new interpreter threads ("ithreads" for short) implementation of multithreading, by arthur bergman, replaces the old "5.005 threads" implementation.
miscellaneous changes · autoload is now lvaluable, meaning that you can add the :lvalue attribute to autoload subroutines and you can assign to the autoload return value.
the previous behaviour of ignoring them by default and warning if requested was unacceptable since it, in a way, falsely promised that the features could be used.
it can be used for example for vendor add-ons without dis- turbing perl’s own library directories.
many test suite tests still fail and the co-existence of unicode and ebcdic isn’t quite settled, but the situation is much better than with perl 5.6.
· file handles can be marked as accepting perl’s internal encoding of unicode (utf-8 or utf-ebcdic depending on platform) by a pseudo layer ":utf8" : open($fh,">:utf8","uni.txt"); note for ebcdic users: the pseudo layer ":utf8" is erroneously named for you since it’s not utf-8 what you will be getting but instead utf-ebcdic.
· the regex compiler now maintains a structure that identifies nodes in the compiled bytecode with the corresponding syntactic features of the original regex expression.
the enhanced version has also been backported to earlier releases of perl and submitted to cpan so that the earlier releases can enjoy the fixes.
· aix should now work better with gcc, threads, and 64-bitness.
the behavior in earlier versions of perl 5 was that arrays would interpo- late into strings if the array had been mentioned before the string was compiled, and otherwise perl would raise a fatal compile-time error.
now perl postpones handling of signals until it’s safe (between opcodes).
· the builtindump() now gives an optional warning "dump() better written as core::dump()", meaning that by default "dump(...)" is resolved as the builtindump() which dumps core and aborts, not as (possibly) user-defined "sub dump".
if you intend to run only on fat (or if using anydbm_file on fat), run configure with the -ui_ndbm and -ui_dbm options to prevent ndbm_file and odbm_file being built.
· perlclib documents the internal replacements for standard c library functions.
all thread tests of perl now work, but not without adding someyield()s to the tests, so while pth (and other userlevel thread implementations) can be considered to be "working" with perl ithreads, keep in mind the possible non-preemptability of the underlying thread implementa- tion.
with ithreads, when a new thread is created, all perl data is cloned, however non-perl data cannot be cloned automatically.
the information is attached to the new "offsets" member of the "struct regexp".
handlers can be specific to type (scalar, array, hash, or code), or specific to the exact compilation phase (begin, check, init, or end).
as of november 2001 the only known vulnerable platform is linux, most likely all linux distributions.
the main rationale was to have all core perlio layers to have all low- ercase names.
on the other hand, perl will now execute code such as "system("c:/program files/myapp/foo.exe", @args)" correctly.
· if building threaded perl, you may get compilation warning from pp_sys.c: "pp_sys.c", line 4651.39: 1506-280 (w) function argument assignment between types "unsigned char*" and "const void*" is not allowed.
this probably means that you are trying to use an older shared perl library (or extensions linked with such) with perl 5.8.0 executable.
· if you have cpan access (either network or a local copy such as a cd-rom) you can during specify extra modules to configure to build and install with perl using the -dextras=... option.
the difference between scripts and blocks is that scripts are the glyphs used by a language or a group of languages, while the blocks are more artificial groupings of (mostly) 256 charac- ters based on the unicode numbering.
[561] · linux previously had problems related to sockaddrlen when usingaccept(), recvfrom() (in perl:recv()), getpeer- name(), and getsockname() .
( http://www.freebsd.org/cgi/query-pr.cgi?pr=34308 )irix fails ext/list/util/t/shuffle.t or digest::md5 irix with mipspro 7.3.1.2m or 7.3.1.3m compiler may fail the list::util test ext/list/util/t/shuffle.t by dumping core.
the documentation for the wince platform is called perlce (readme.ce in the source code kit), to avoid confusion with the perlwin32 documentation on 8.3-restricted filesystems.
· because perlio is now the default on most platforms, "-perlio" doesn’t get appended to the $config{archname} (also known as $^o) anymore.
unicos/mk · during configure, the test guessing which symbols your c compiler and preprocessor define... will probably fail with error messages like cc-20 cc: error file =
· malformed unicode encodings (utf-8 and utf-16) cause a lot of warn- ings, as does trying to use utf-16 surrogates (which are unimple- mented).
the re engine found in perl 5.6.0 accidentally pessimised certain kinds of simple pattern matches.
many test suite tests still fail and the co-existence of unicode and ebcdic isn’t quite settled, but the situation is much better than with perl 5.6.
it also correctly changes directories when chasing symbolic links.
mac os classic compilation of the standard perl distribution in mac os classic should now work if you have the metrowerks development environment and the missing mac-specific toolkit bits.
note that breaking out from potentially blocking operations should still work, though.
still spotty though mostly working, unicode support still has problem spots on ebcdic platforms.
pl are now checked for sanity much more carefully than before.
if this test fails, it indicates that your libc (c library) is not threadsafe.
· allow a read-only string on the left-hand side of a non-modifying tr///. · if "stderr" is tied, warnings caused by "warn" and "die" now cor- rectly pass to it.
now perl postpones handling of signals until it’s safe (between opcodes).
· "memoize" can make your functions faster by trading space for time, from mark-jason dominus.
the worst bug (now fixed) was that a pid of -1 would cause a wildcard search of all processes on the system.
· if building perl with interpreter threads (ithreads), theget- grent(), getgrnam(), and getgrgid() functions cannot return the list of the group members due to a bug in the multithreaded support of unicos/mk.
this means that they will be more robust and hopefully faster.
getnet- byaddr_r() having slightly different types for their first argu- ment.
note that after this perl really does assume that everything is utf-8: for example if some input handle is not, perl will probably very soon complain about the input data like this "malformed utf-8 ..." since any old eight-bit data is not legal utf-8.
see threads::shared. · "tie::file", by mark-jason dominus, associates a perl array with the lines of a file.
it can now deparse almost all of the standard test suite (so that the tests still succeed).
· data::dumper now has an option to dump code references using b::deparse.
perlio is now the default · io is now by default done via perlio rather than system’s "stdio".
· previously dynix/ptx had problems in its configure probe for non- blocking i/o. · epoc epoc now better supported.
· devel::peek now has an interface for the perl memory statistics (this works only if you are using perl’s malloc, and if you have compiled with debugging).
· the shell module now has an oo interface.
if you don’t have /bin/mail, or if you have ’safe setuid scripts’, or if suidperl is not installed, you are safe.
· io::socket::inet now supports a value of zero for "localport" (usu- ally meaning that the operating system will make one up.)
the following tests are known to fail on os/2 (for clarity only the failures are shown, not the full error messages): ../lib/extutils/t/mkbootstrap.t 1 256 18 1 5.56% 8 ../lib/extutils/t/packlist.t 1 256 34 1 2.94% 17 ../lib/extutils/t/basic.t 1 256 17 1 5.88% 14 lib/os2_process.t 2 512 227 2 0.88% 174 209 lib/os2_process_kid.t 227 2 0.88% 174 209 lib/rx_cmprt.t 255 65280 18 3 16.67% 16-18op/sprintf tests 91, 129, and 130 the op/sprintf tests 91, 129, and 130 are known to fail on some plat- forms.
[561] ·readline() on files opened in "slurp" mode could return an extra "" (blank line) at the end in certain situations.
i/o streams (such as images or zip files), you need to explic- itlyopen() or binmode() with ":bytes" (see "open" in perlfunc and "binmode" in perlfunc), or you can just use "binmode(fh)" (nice for pre-5.8.0 backward compatibility).
· "enc2xs" is a tool for people adding their own encodings to the encode module.
localising tied arrays and hashes is broken local %tied_array; doesn’t work as one would expect: the old value is restored incor- rectly.
sion writers for generating xs code to import c header constants.
· class::struct can now define the classes in compile time.
(in tru64, it is preferable to use the bundled c compiler.)amigaos perl 5.8.0 doesn’t build in amigaos.
· the "exec list" and "system list" operations now produce warnings on tainted data and in some future release they will produce fatal errors.
failed tests 128-130 op/pack...............................failed tests 25-5625 op/pow................................ op/taint..............................# msgsnd failed ../ext/io/lib/io/t/io_poll............failed tests 3-4 ../ext/ipc/sysv/ipcsysv...............failed tests 2, 5-6 ../ext/ipc/sysv/t/msg.................failed tests 2, 4-6 ../ext/
also individual keys can be restricted so that the key cannot be deleted and the value cannot be changed.
(it is in fact a full implementation of sed in perl: you can use the sed functionality by using the "psed" utility.)
[561] · duping socket handles with open(f, ">&mysock") now works under windows 9x.
"clone" will be executed once for every package that has it defined or inherited.
installperl now outputs everything to stderr.
internally, the execution of end blocks is now controlled by pl_exit_flags & perl_exit_destruct_end.
this change may have surprising side effects because signals no longer interrupt perl instantly.
pl are now checked for sanity much more carefully than before.
if perl is configured with -duse64bitall, the successful result of the subtest 10 of lib/posix may arrive before the successful result of the subtest 9, which confuses the test harness so much that it thinks the subtest 9 failed.
· although "you shouldn’t do that", it was possible to write code that depends on perl’s hashed key order (data::dumper does this).
nothing gets installed, but the code is worth study- ing for extension writers.
interpreter threads (ithreads) is the new thread model introduced in perl 5.6 but only available as an internal interface for extension writers (and for win32 perl for "fork()" emulation).
for tests 129 and 130, the failing platforms do not comply with the ansi c standard: lines 19ff on page 134 of ansi x3.159 1989, to be exact.
the debugger has a new "dumpdepth" option to control the maximum depth to which nested structures are dumped.
· "pod2html" now understands pod written using different line endings (pc-like crlf versus unix-like lf versus macclassic-like cr).
· file handles can be opened to "in memory" files held in perl scalars via: open($fh,’>’, \$variable) ââ ... ·
read the ’make test’ section of install instead.libwww-perl (lwp) fails base/date #51 use libwww-perl 5.65 or later.
see threads::shared. · "tie::file", by mark-jason dominus, associates a perl array with the lines of a file.
the obsolete method of making a special (e.g., debugging) flavor of perl by saying make libperl=libperld.a has been removed.
read the ’make test’ section of install instead.libwww-perl (lwp) fails base/date #51 use libwww-perl 5.65 or later.
· perliol documents the internals of perlio with layers.
(bsd_glob() does still sort platform natively, ascii or ebcdic, unless glob_alphasort is specified.)
it is now implemented using a windows message loop, and is there- fore less prone to random crashes.
[561] ·warnings::enabled() now reports the state of $^w correctly if the caller isn’t using lexical warnings.
the behavior in earlier versions of perl 5 was that arrays would interpo- late into strings if the array had been mentioned before the string was compiled, and otherwise perl would raise a fatal compile-time error.
the op/pack failure ("cannot compress negative numbers at op/pack.t line 126") is serious but as of yet unsolved.
these will get installed as perljp perlko perlcn perltw · the documentation for the posix-bc platform is called "bs2000", to avoid confusion with the perl posix module.
(they used to be aliases for d/f, but you never knew that.)glob() now returns filenames in alphabetical order the list of filenames fromglob() (or ) is now by default sorted alphabetically to be csh-compliant (which is what happened before in most unix platforms).
cert and vari- ous vendors and distributors have been alerted about the vulnerability.
since there are not that many amiga devel- opers available, we could not get this fixed and tested in time for 5.8.0.
the only exception is that a "in" pre- fix is required to signify a unicode block when a block name conflicts with a script name.
(utf-8 has not been made the default since there are many perl scripts out there that are using various national eight-bit character sets, which would be illegal in utf-8.)
for very small lists this may result in slightly slower sorting times, but in general the speedup should be at least 20%.
you can see the correct behaviour by replacing the 1..5 with 1, 2, 3, 4, 5.mod_perl 1.26 doesnâ€â€™t build with threaded perl use mod_perl 1.27 or higher.
(basically what happens is that com- peting threads can corrupt shared global state, one good example being regular expression engine’s state.)timing problems the following tests may fail intermittently because of timing problems, for example if the system is heavily loaded.
note that this means that some scripts that may have relied on earlier buggy behavior may no longer work correctly.
the documentation for the wince platform is called perlce (readme.ce in the source code kit), to avoid confusion with the perlwin32 documentation on 8.3-restricted filesystems.
this implementation also allows later systems to call "kill" from within a signal handler.
beware: microperl makes many assump- tions, some of which may be too bold; the resulting executable may crash or otherwise misbehave in wondrous ways.
in other words: you just have to recompile your modules containing xs code, sorry about that.
· net::ping has been considerably enhanced by rob brown: multihoming is now supported, win32 functionality is better, there is now time measuring functionality (optionally high-resolution using time::hires), and there is now "external" protocol which uses net::ping::external module which runs your external ping utility and parses the output.
in other taint news, the "exec list" and "system list" have now been considered too risky (think "exec @argv": it can start any program with any arguments), and now the said forms cause a warning under lexical warnings.
· perl 5.6.0 could emit spurious warnings about redefinition ofdl_error() when statically building extensions into perl.
· in aix 4.2, perl extensions that use c++ functions that use statics may have problems in that the statics are not getting initialized.
cert and vari- ous vendors and distributors have been alerted about the vulnerability.
now xsubs can have attributes just like subs.
see tie::file. · "tie::memoize", by ilya zakharevich, provides on-demand loaded hashes.
(they used to be aliases for d/f, but you never knew that.)glob() now returns filenames in alphabetical order the list of filenames fromglob() (or ) is now by default sorted alphabetically to be csh-compliant (which is what happened before in most unix platforms).
with the quicksort algorithm used to implement perl 5.6 and earlier, the order of ties is left up to the sort.
performance enhancements · map() could get pathologically slow when the result list it gener- ates is larger than the source list.
the major reason for the discontinuity is the new io architecture called perlio.
[561] · the perl parser has been stress tested using both random input and markov chain input and the few found crashes and lockups have been fixed.
the previous behaviour of ignoring them by default and warning if requested was unacceptable since it, in a way, falsely promised that the features could be used.
utf-16 and ucs-2 encoded perl files should now be read cor- rectly.
· if tr/// is just counting characters, it doesn’t attempt to modify its target.
the aix c compiler vac version 5.0.0.0 may produce buggy code, resulting in a few random tests failing when run as part of "make test", but when the failing tests are run by hand, they succeed.
be sure to trim your bug down to a tiny but sufficient test case.
· fix password routines which in some shadow password platforms (e.g. hp-ux) caused getpwent() to return every other entry.
perl will now first finish whatever it was doing, like finishing an internal operation (like sort()) or an exter- nal operation (like an i/o operation), and only then look at any arrived signals (and before starting the next operation).
· perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spuri- ous warnings.
· localised tied variables no longer leak memory use tie::hash; tie my %tied_hash => ’tie::stdhash’; ... # used to leak memory every time local() was called; # in a loop, this added up.
this enables the new behaviour for perl embedders.
this change may have surprising side effects because signals no longer interrupt perl instantly.
installation (or build) on ntfs works fine.
on a really fast machine you can hope to finish the suite in about 6-8 minutes (wall- clock time).
installperl now outputs everything to stderr.
you can move the old perl shared library out of the way like this: cd /library/perl/darwin/core mv libperl.dylib libperlold.dylib and then reissue "make install".
perl now tries internally to use integer values in numeric conversions and basic arithmetics (+ - * /) if the arguments are integers, and tries also to keep the results stored internally as integers.
also, usually the system mallocs on such platforms are much better optimized for such large memory models than the perl malloc.
[561] · attributes (such as :shared) didn’t work withour().
similarly, building the digest::md5 extension has been known to fail with "*** termination code 139 (bu21)".
understanding of numbers in general a lot of fixing has happened in the area of perl’s under- standing of numbers, both integer and floating point.
the tainting of %env elements via "keys" or "values" was previously unimplemented.
· the perl5opt environment variable (for passing command line argu- ments to perl) didn’t work for more than a single group of options.
· io::socket::inet now supports a value of zero for "localport" (usu- ally meaning that the operating system will make one up.)
· perlnewmod tells about writing and submitting a new module.
it is now implemented using a windows message loop, and is there- fore less prone to random crashes.
· self-ties of arrays and hashes are not supported and fatal errors will happen even at an attempt to do so.
· "perlio::via::quotedprint", by elizabeth mattijsen, is an example of a "perlio::via" class: use perlio::via::quotedprint; open($fh,">:via(quotedprint)",$path); this will automatically convert everything output to $fh to quoted-printable.
it points at some prob- lems with the signedness handling of the c compiler, as do the 64bitint, arith, and pow failures.
this is caused by the characters \xff (y with diaeresis) and \xbe (y with diaeresis) not behaving correctly when being matched case-insensi- tively.
· attributes::reftype() now works on tied arguments.
perlio allows "layers" to be "pushed" onto a file handle to alter the handle’s behaviour.
eastern asian perl users are now welcomed in their own languages: readme.jp (japanese), readme.ko (korean), readme.cn (simplified chi- nese) and readme.tw (traditional chinese), which are written in normal pod but encoded in euc-jp, euc-kr, euc-cn and big5.
[561] · current directory entries in %env are now correctly propa- gated to child processes.
the main rationale was to have thread modules to obey normal naming, "thread::" (the "threads" and "threads::shared" themselves are more pragma-like, they affect compile-time, so they stay lowercase).
[561] · can nowsend() from all threads, not just the first one.
[561+] · the new bignum, bigint, and bigrat pragmas, by tels, implement transparent bignum support (using the math::bigint, math::bigfloat, and math::bigrat backends).
a failure (think chdir(some_ function()) can lead into unintended chdir() to the home directory, therefore this behaviour is deprecated.
[561] · perl5opt with embedded spaces didn’t work.
and, for sufficiently large slices of pi, the quicksort algorithm in perl 5.8 won’t return the same results even if reinvoked with the same input.
perl will now first finish whatever it was doing, like finishing an internal operation (like sort()) or an exter- nal operation (like an i/o operation), and only then look at any arrived signals (and before starting the next operation).
perl 5.8 unfortunately does not build anymore on amigaos; this broke accidentally at some point.
in particular binmode(fh) - and hence ":raw" - will now turn off both crlf and utf-8 translation and remove other lay- ers (e.g. :encoding()) which would modify byte stream.
[561+] · "filter::util::call", by paul marquess, provides you with the framework to writesource filters in perl.
many of the new tests are of course introduced by the new modules, but still in general perl is now more thoroughly tested.
· configure "-s" can now run non-interactively.
most of the rest point at problems with sysv ipc.term::readkey not working on win32 use term::readkey 2.20 or later.
\$bar[1]" will assign "undef" to $bar[1] (assuming that it didn’t exist before), but for tied/magical arrays and hashes such autovivification does not happen because there is currently no way to catch the reference creation.
it broke at some point during the ithreads work and we could not find amiga experts to unbreak the prob- lems.
· the test module has been significantly enhanced.
but quicksort was rescued at the last moment because it is faster than mergesort on certain inputs and platforms.
the following tests fail on 5.8.0 perl in beos personal 5.03: t/op/lfs............................failed at test 17 t/op/magic..........................failed at test 24 ext/fcntl/t/syslfs..................failed at test 17 ext/file/glob/t/basic...............failed at test 3 ext/posix/t/sigaction...............failed at test 13 ext/posix/t/waitpid.................failed at test 1 see perlbeos (readme.beos) for more details.
suggestions for new shiny examples welcome but the main issue is that the examples need to be documented, tested and (most impor- tantly) maintained.
turning off "clrfness" is no longer enough to make a stream truly binary.
the aix c compiler vac version 5.0.0.0 may produce buggy code, resulting in a few random tests failing when run as part of "make test", but when the failing tests are run by hand, they succeed.
· "time::hires", by douglas e. wegscheid, provides high resolution timing (ualarm, usleep, and gettimeofday).
· "time::hires", by douglas e. wegscheid, provides high resolution timing (ualarm, usleep, and gettimeofday).
suggestions for new shiny examples welcome but the main issue is that the examples need to be documented, tested and (most impor- tantly) maintained.
you will now need an explicit untie to destroy a self-tied glob.
miscellaneous changes · autoload is now lvaluable, meaning that you can add the :lvalue attribute to autoload subroutines and you can assign to the autoload return value.
· z/os (formerly known as os/390, formerly known as mvs oe) now has support for dynamic loading.
· "unicode::ucd" offers a querying interface to the unicode character database.
· io::socket now has anatmark() method, which returns true if the socket is positioned at the out-of-band mark.
[561] · utime now supports "utime undef, undef, @files" to change the file timestamps to the current time.
so the 5.8 quicksort scrambles large arrays before sorting them, as a statistical defence against quadratic behaviour.
internally, the execution of end blocks is now controlled by pl_exit_flags & perl_exit_destruct_end.
· "hash::util" is the interface to the newrestricted hashes feature.
· the debugger can now show lexical variables if you have the cpan module padwalker installed. ·
· chdir("") and chdir(undef) now give a deprecation warning because they cause a possible unintentional chdir to the home directory.
this results hopefully in more accurate numbers.
· perl has been tested with the gnu pth userlevel thread package ( http://www.gnu.org/software/pth/pth.html ).
also the ext/posix/t/posix.t subtest #10 fails but it is skipped for now because the failure is apple’s fault, not perl’s (blocked signals are lost).
perlio is now the default · io is now by default done via perlio rather than system’s "stdio".
[561] · current directory entries in %env are now correctly propa- gated to child processes.
[561] · use of $& could trigger a core dump under some situations.
compiling with gcc still not recommended because buggy code results, even with gcc 2.95.2.
the performance has been improved for common scenarios.
· if your environment variables (lc_all, lc_ctype, lang) look like you want to use utf-8 (any of the the variables match "/utf-?8/i"), your stdin, stdout, stderr handles and the default open layer (see open) are marked as utf-8.
· if you have cpan access (either network or a local copy such as a cd-rom) you can during specify extra modules to configure to build and install with perl using the -dextras=... option.
· "threads::shared", by arthur bergman, allows data sharing for interpreter threads.
· thewin32::setchildshowwindow() builtin can be used to con- trol the visibility of windows created by child processes.
with these, you can implement rather advanced parsing algorithms.
[561+] · right-hand side magic (gmagic) could in many cases such as string concatenation be invoked too many times.
any encoding supported by encode module is also available to the ":encoding()" layer if perlio is used.
tie/file/t/31_autodefer.t 255 65280 65 32 49.23% 34-65 ../lib/autouse.t 10 1 10.00% 4 op/flip.t 15 1 6.67% 15 these failures are unlikely to get fixed as 5.005-style threads are considered fundamentally broken.
this is known problem with cygwin, and a workaround is detailed in here: http://sources.red- hat.com/ml/cygwin/2001-12/msg00894.htmlcygwin ndbm tests fail on fat one can build but not install (or test the build of) the ndbm_file on fat filesystems.
additional bonuses are that the worst case behaviour ofsort() is now better (in computer science terms it now runs in time o(n log n), as opposed to quicksort’s theta(n**2) worst-case run time behaviour), and thatsort() is now stable (meaning that elements with identical keys will stay ordered as they were before the sort).
· the c code has been made much more "gcc -wall" clean.
alised software, and in general when the order of the parameters can vary.
on the other hand, perl will now execute code such as "system("c:/program files/myapp/foo.exe", @args)" correctly.
the op/pack failure ("cannot compress negative numbers at op/pack.t line 126") is serious but as of yet unsolved.
the debugger has a new "dumpdepth" option to control the maximum depth to which nested structures are dumped.
if your platform supportsfork(), you can use the list form of "open" for pipes.
this will create in perl/build/directory a tree of symbolic links pointing to files in /path/to/perl/source.
the existing behaviour when localising tied arrays and hashes is wrong, and will be changed in a future release, so do not rely on the existing behaviour.
· perl 5.6.0 parsed m/\x{ab}/ incorrectly, leading to spuri- ous warnings.
· "pack() / unpack()" can now process the perl internal numeric types: ivs, uvs, nvs-- and also long doubles, if supported by the platform.
stable means that ties are broken to preserve the original order of appearance in the input array.
[561] · regular expression debug output (whether through "use re ’debug’" or via "-dr") now looks better.
if this test fails, it indicates that your libc (c library) is not threadsafe.
quicksort was rescued by implementing a sort pragma to control aspects of the sort.
this results hopefully in more accurate numbers.
because in effect storable does serial- isation of perl data structures, with it you can also clone deep, hierarchical datastructures.
the major reason for the discontinuity is the new io architecture called perlio.
[561] ·warnings::enabled() now reports the state of $^w correctly if the caller isn’t using lexical warnings.
if that doesn’t help, you may have to try removing all the .bundle files from beneath /library/perl, and again "make install"-ing.
[561] ·readline() on files opened in "slurp" mode could return an extra "" (blank line) at the end in certain situations.
unicode can be used in hash keys, unicode in regu- lar expressions should work now, unicode in tr/// should work now, uni- code in i/o should work now.
safe signals perl used to be fragile in that signals arriving at inopportune moments could corrupt perl’s internal state.
· "tie::refhash::nestable", by edward avis, allows storing hash ref- erences (unlike the standard tie::refhash)
mac os x dyld undefined symbols if after installing perl 5.8.0 you are getting warnings about missing symbols, for example dyld: perl undefined symbols _perl_sv_2pv _
(in tru64, it is preferable to use the bundled c compiler.)amigaos perl 5.8.0 doesn’t build in amigaos.
if you intend to run only on fat (or if using anydbm_file on fat), run configure with the -ui_ndbm and -ui_dbm options to prevent ndbm_file and odbm_file being built.
in particu- lar, however, this allows variable attributes to be useful for "tie" interfaces, which was a deficiency of earlier releases.
[561] · "perlivp" is a new installation verification procedure utility for running any time after installing perl.
[561] · pos() did not return the correct value within s///ge in earlier versions.
"our" can now have an experimental optional attribute "unique" that affects how global variables are shared among multiple interpreters, see "our" in perlfunc.
the warnings issued by file::find now belong to their own category.
[561] · "perlivp" is a new installation verification procedure utility for running any time after installing perl.
on linux plat- forms the /bin/mail program had an undocumented feature which when com- bined with suidperl gave access to a root shell, resulting in a serious compromise instead of reporting the exploit attempt.
turning off "clrfness" is no longer enough to make a stream truly binary.
the re engine found in perl 5.6.0 accidentally pessimised certain kinds of simple pattern matches.
· for developers interested in enhancing perl’s unicode capabilities: almost all the ucd files are included with the perl distribution in thelib/unicore subdirectory.
· if building threaded perl, you may get compilation warning from pp_sys.c: "pp_sys.c", line 4651.39: 1506-280 (w) function argument assignment between types "unsigned char*" and "const void*" is not allowed.
[561] · mac os x (or darwin) should now be able to build perl even on hfs+ filesystems.
in multi-cpu boxes, there are some problems with the i/o buffering: some output may appear twice.
\$bar[1]" will assign "undef" to $bar[1] (assuming that it didn’t exist before), but for tied/magical arrays and hashes such autovivification does not happen because there is currently no way to catch the reference creation.
currently, there is no good solution for the problem, but configure now provides appropriate non- largefile ccflags, ldflags, libswanted, and libs in the %config hash (e.g., $config{ccflags_nolargefiles}) so the extensions that are having problems can try configuring themselves without the largefileness.
note that breaking out from potentially blocking operations should still work, though.
in newer aix releases, this has been solved by linking perl with the libc_r library, but unfortunately in aix 4.2 the said library has an obscure bug where the various functions related to time (such astime() and gettimeofday()) return broken values, and therefore in aix 4.2 perl is not linked against libc_r.
· lexicals ii: lexicals leaked at file scope into subroutines that were declared before the lexicals.
this may or may not be a problem with ancient tcp/ip stacks of vms: we do not know since we weren’t able to test perl in such configurations.
it will be called in the context of the new thread, so all modifications are made in the new area.
vms there should be no reported test failures with a default configuration, though there are a number of tests marked todo that point to areas needing further debugging and/or porting work.
perl_get_sv you probably have an old pre-perl-5.8.0 installation (or parts of one) in /library/
· warnings relating to the use interpreter threads and their shared data have been added.
the "plugins" are named as usual, for example "per- lio::via::quotedprint".
; note for ebcdic users: the pseudo layer ":utf8" is erroneously named for you since it’s not utf-8 what you will be getting but instead utf-ebcdic.
this did not work reliably in previous releases.
because of the large number of tests, running the regression suite will take considerably longer time than it used to: expect the suite to take up to 4-5 times longer to run than in perl 5.6.
[561] ·sort() is also fully reentrant, in the sense that the sort function can itself callsort().
they are now magnitudes faster, and they support various bignum libraries such as gmp and pari as their backends.
· lstat(filehandle) now gives a warning because the operation makes no sense.
this algorithm is reasonably fast while producing a much better spread of values than the old hashing algorithm (originally by chris torek, later tweaked by ilya zakharevich).
eastern asian perl users are now welcomed in their own languages: readme.jp (japanese), readme.ko (korean), readme.cn (simplified chi- nese) and readme.tw (traditional chinese), which are written in normal pod but encoded in euc-jp, euc-kr, euc-cn and big5.
·sort() arguments are now compiled in the right wantarray context (they were accidentally using the context of thesort() itself).
"h2xs" uses the new extutils::constant module which will affect newly created extensions that define constants.
this improves the portability of system(@args) by avoiding the need for win- dows "cmd" shell specific quoting in perl programs.
· the "utf8::" name space (as in the pragma) provides various perl- callable functions to provide low level access to perl’s internal unicode representation.
they provide the codes for various locale standards, such as "fr" for france, "usd" for us dollar, and "ja" for japanese.
mac os x dyld undefined symbols if after installing perl 5.8.0 you are getting warnings about missing symbols, for example dyld: perl undefined symbols _perl_sv_2pv _
the output is highly customisable.
note, however, that their prototype (as given by "prototype("core::chomp")" is undefined, because it cannot be expressed and therefore one cannot really write replacements to override these builtins.
these are not new failures--perl 5.005_0x has the same bugs, but didn’t have these tests.
note, however, that their prototype (as given by "prototype("core::chomp")" is undefined, because it cannot be expressed and therefore one cannot really write replacements to override these builtins.
more appropriate mechanisms for selecting the imple- mentation exist, but they wouldn’t have arrived in time to save quicksort.
· perlmodstyle is a style guide for writing modules.
new unicode semantics (no more "use utf8", almost) previously in perl 5.6 to use unicode one would say "use utf8" and then the operations (like string concatenation) were unicode-aware in that lexical scope.
( 3,1,4,1,5,9 ); a numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
see tie::file. · "tie::memoize", by ilya zakharevich, provides on-demand loaded hashes.
[561] · some "not a number" warnings introduced in 5.6.0 eliminated to be more compatible with 5.005.
they provide the codes for various locale standards, such as "fr" for france, "usd" for us dollar, and "ja" for japanese.
·sort() arguments are now compiled in the right wantarray context (they were accidentally using the context of thesort() itself).
· carp now has better interface documentation, and the @carp_not interface has been added to get optional control over where errors are reported independently of @isa, by ben tilly.
it will be called in the context of the new thread, so all modifications are made in the new area.
it also sends the bug report to perl.org, not perl.com. · "perlcc" has been rewritten and its user interface (that is, com- mand line) is much more like that of the unix c compiler, cc.
file handles can translate character encodings from/to perl’s internal unicode form on read/write via the ":encoding()" layer.
· data::dumper now has an option to sort hashes.
perl installation leaves libnet unconfigured; uselibnetcfg to con- figure it.
modifying $_ inside for(..) for (1..5) { $_++ } works without complaint.
pack/unpack d/f recycled the undocumented pack/unpack template letters d/f have been recycled for better use: now they stand for long double (if supported by the platform) and nv (perl internal floating point type).
· if your environment variables (lc_all, lc_ctype, lang) look like you want to use utf-8 (any of the the variables match "/utf-?8/i"), your stdin, stdout, stderr handles and the default open layer (see open) are marked as utf-8.
so, as you add more and more digits of pi, the order in which the sorted even and odd digits appear will change.
note that after this perl really does assume that everything is utf-8: for example if some input handle is not, perl will probably very soon complain about the input data like this "malformed utf-8 ..." since any old eight-bit data is not legal utf-8.
[561] selected bug fixes numerous memory leaks and uninitialized memory accesses have been hunted down.
for example, while the script "latin" includes all the latin characters and their various diacritic-adorned versions, it does not include the various punctuation or digits (since they are not solely "latin").
· trying to use unicode characters on an i/o stream without marking the stream’s encoding (usingopen() or binmode()) will cause "wide character" warnings.
compiling with gcc still not recommended because buggy code results, even with gcc 2.95.2.
attributes for "my" variables now handled at run-time the "my expr : attrs" syntax now applies variable attributes at run-time.
· "unicode::ucd" offers a querying interface to the unicode character database.
the byteorder was only sizeof(long) bytes long (1234 or 4321), but now it is correctly sizeof(iv) bytes long, (12345678 or 87654321).
this feature helps in writing internation- alised software, and in general when the order of the parameters can vary.
irix numerous compilation flag and hint enhancements; accidental mixing of 32-bit and 64-bit libraries (a doomed attempt) made much harder.
[561] · can nowsend() from all threads, not just the first one.
(eg by reading/proc/self/exe on linux,/proc/curproc/file on freebsd) · a new variable, "${^taint}", indicates whether taint mode is enabled.
in particu- lar, however, this allows variable attributes to be useful for "tie" interfaces, which was a deficiency of earlier releases.
since the new code is more correct (if you have two constants where the first one is a prefix of the second one, the first constantnever got defined), less lossy (it uses integers for integer constant, as opposed to the old code that used floating point numbers even for integer con- stants), and slightly faster, you might want to consider regenerat- ing your extension code (the new scheme makes regenerating easy).
(perlu- nicode is more of a detailed reference and background information) · perlutil explains the command line utilities packaged with the perl distribution.
· because perlio is now the default on most platforms, "-perlio" doesn’t get appended to the $config{archname} (also known as $^o) anymore.
therestricted hashes interface is expected to be the replacement interface (see hash::util).
the comparison block is now run in scalar context, and the argu- ments to be sorted are always provided list context.
this may cause new warn- ings when modules are being installed.
the default on vax (d_float) has not changed.
· lexical warnings now propagating correctly between scopes and into "eval "..."".
the exploit attempt reporting feature has been completely removed from perl 5.8.0 (and the maintenance release 5.6.1, and it was removed also from all the perl 5.7 releases), so that particular vulnerability isn’t there anymore.
you can ignore the error, but it does cause a slight problem: you cannot fully benefit from the h2ph utility (see h2ph) that can be used to convert c headers to perl libraries, mainly used to be able to access from perl the constants defined using c preprocessor, cpp.
since perlio is a drop-in replacement for stdio at the source code level, this shouldn’t be that drastic a change.
the socketpair tests are known to be unhappy in sco 3.2v5.0.4: ext/socket/socketpair.t...............failed tests 15-45solaris 2.5
if you find what you think is a bug, you might check the articles recently posted to the comp.lang.perl.misc newsgroup and the perl bug database at http://bugs.perl.org/ .
· in sys::syslog there is now a failover mechanism that will go through alternative connection mechanisms until the message is suc- cessfully logged.
· net::ping has been considerably enhanced by rob brown: multihoming is now supported, win32 functionality is better, there is now time measuring functionality (optionally high-resolution using time::hires), and there is now "external" protocol which uses net::ping::external module which runs your external ping utility and parses the output.
it seems that for some reason "make install" doesn’t always completely overwrite the files in /library/perl.
[561+] · right-hand side magic (gmagic) could in many cases such as string concatenation be invoked too many times.
it can be used for example for vendor add-ons without dis- turbing perl’s own library directories.
· file handles can translate character encodings from/to perl’s internal unicode form on read/write via the ":encoding()" layer.
the constant and embed are probably problems in the tests (since they test perl’s ability to build extensions, and that seems to be working reasonably well.)unicode
according to perl- bench, this change has not affected the overall speed of perl.
this means that additional warnings may now show up when compiling xs code. ·
· extutils::makemaker now uses file::spec internally, which hopefully leads to better portability.
self-tying of scalars and io thingies works.ext/threads/t/libc
g_float is still avail- able as a configuration option.
this implementation also allows later systems to call "kill" from within a signal handler.
alpha, potentially breaking binary compatibil- ity with external libraries or existing data.
you can enable/disable them with "use/no warnings ’file::find’;".
carp was sometimes affected by this problem.
this change will probably break backward compatibility with compiled mod- ules.
it is the little brother of "-t": instead of dying on taint violations, lexical warnings are given.
· autoloader can now be disabled with "no autoloader;".
additional bonuses are that the worst case behaviour ofsort() is now better (in computer science terms it now runs in time o(n log n), as opposed to quicksort’s theta(n**2) worst-case run time behaviour), and thatsort() is now stable (meaning that elements with identical keys will stay ordered as they were before the sort).
· a new optional location for perl libraries, otherlibdirs, is avail- able.
no longer gets corrupted, and all debugger output now goes correctly to the socket if remoteport is set.
your bug report, along with the output of "perl -v", will be sent off to perlbug@perl.org to be analysed by the perl porting team.
the performance has been improved for common scenarios.
mac os x please remember to set your environment variable lc_all to "c" (setenv lc_all c) before running "make test" to avoid a lot of warnings about the broken locales of mac os x.
· self-ties of arrays and hashes are not supported and fatal errors will happen even at an attempt to do so.
· io::socket::inet failed to open the specified port if the service name was not known.
performance enhancements · map() could get pathologically slow when the result list it gener- ates is larger than the source list.
[561] · utime now supports "utime undef, undef, @files" to change the file timestamps to the current time.
· "extutils::constant", by nicholas clark, is a new tool for exten- sion writers for generating xs code to import c header constants.
[561] · some "not a number" warnings introduced in 5.6.0 eliminated to be more compatible with 5.005.
· z/os (formerly known as os/390, formerly known as mvs oe) now has support for dynamic loading.
a failure (think chdir(some_ function()) can lead into unintended chdir() to the home directory, therefore this behaviour is deprecated.
· boms (byte order marks) at the beginning of perl files (scripts, modules) should now be transparently skipped.
[561] file access tests now use current process privileges rather than the user’s default privileges, which could sometimes result in a mismatch between reported access and actual access.
in multi-cpu boxes, there are some problems with the i/o buffering: some output may appear twice.
· unadorned dump() will now give a warning suggesting to use explicit core::dump() if that’s what really is meant.
(bsd_glob() does still sort platform natively, ascii or ebcdic, unless glob_alphasort is specified.)
similarly, building the digest::md5 extension has been known to fail with "*** termination code 139 (bu21)".
perl5db.t was also added to test the changes, and as a placeholder for further tests.
· better unc path handling under ithreads.
carp was sometimes affected by this problem.
· boms (byte order marks) at the beginning of perl files (scripts, modules) should now be transparently skipped.
alpha systems with old gccs fail several tests if you see op/pack, op/pat, op/regexp, or ext/storable tests failing in a linux/alpha or *bsd/alpha, it’s probably time to upgrade your gcc.
· autoloader can now be disabled with "no autoloader;".
the tainting of %env elements via "keys" or "values" was previously unimplemented.
anonymous temporary files are available without need to ’use file- handle’ or other module via open($fh,"+>", undef) â”‚â”‚ ...
· malformed unicode encodings (utf-8 and utf-16) cause a lot of warn- ings, as does trying to use utf-16 surrogates (which are unimple- mented).
if configure finds that gcc was built for a differ- ent operating system release than is running, it now gives a clearly visible warning that there may be trouble ahead.
it also correctly changes directories when chasing symbolic links.
· our() variables will not cause bogus "variable will not stay shared" warnings.
· "threads::shared", by arthur bergman, allows data sharing for interpreter threads.
cygwin "unable to remap" for example when building the tk extension for cygwin, you may get an error message saying "unable to remap".
the worst bug (now fixed) was that a pid of -1 would cause a wildcard search of all processes on the system.
· large unsigned numbers (those above 2**31) could sometimes lose their unsignedness, causing bogus results in arithmetic operations.
you won’t notice this for small arrays, but youwill notice it with larger arrays, and you may not live long enough for the sort to complete on arrays of a million elements.
· lstat(filehandle) now gives a warning because the operation makes no sense.
· perlmodstyle is a style guide for writing modules.
the magic constants (e.g. ’p’) have been macrofied (e.g. "perl_magic_tied") for better source code readability and maintain- ability.
· aix should now work better with gcc, threads, and 64-bitness.
the obsolete method of making a special (e.g., debugging) flavor of perl by saying make libperl=libperld.a has been removed.
test 91 is known to fail on qnx6 (nto), because "sprintf ’%e’,0" incor- rectly produces 0.000000e+0 instead of 0.000000e+00.
building extensions can fail because of largefiles some extensions like mod_perl are known to have issues with â€˜large- files’, a change brought by perl 5.6.0 in which file offsets default to 64 bits wide, where supported.
and, for sufficiently large slices of pi, the quicksort algorithm in perl 5.8 won’t return the same results even if reinvoked with the same input.
it converts pod data to formatted overstrike text.
[561] · mac os x (or darwin) should now be able to build perl even on hfs+ filesystems.
· the tr///c and tr///u features have been removed and will not return; the interface was a mistake.
the "fields" pragma interface will remain available.
test 91 is known to fail on qnx6 (nto), because "sprintf ’%e’,0" incor-
· perl 5.6.0 could emit spurious warnings about redefinition ofdl_error() when statically building extensions into perl.
(previously perl always preferred floating point numbers in its math.)arrays now always interpolate into double-quoted strings [561] in double-quoted strings, arrays now interpolate, no matter what.
you will need a thread library package installed.
· warnings relating to the use interpreter threads and their shared data have been added.
[561] · less stack reserved per thread so that more threads can run concurrently.
· io::socket now has anatmark() method, which returns true if the socket is positioned at the out-of-band mark.
if configure finds that gcc was built for a differ- ent operating system release than is running, it now gives a clearly visible warning that there may be trouble ahead.
modulus of unsigned numbers now works (4063328477 % 65535 used to return 27406, instead of 27047).
· the test module has been significantly enhanced.
pack/unpack d/f recycled the undocumented pack/unpack template letters d/f have been recycled for better use: now they stand for long double (if supported by the platform) and nv (perl internal floating point type).
comparing with utf8 data does not magically upgrade non-utf8 data into utf8.
it is primarily used by "h2xs" to enhance portability of xs modules between different ver- sions of perl.
· "unicode::collate", by sadahiro tomoyuki, implements the uca (uni- code collation algorithm) for sorting unicode strings.
for example, "system("nmake /nologo", @args)" will now attempt to run the file "nmake /nologo" and will fail when such a file isn’t found.
handlers, installing new handlers was not atomic.
· "do" followed by a bareword now ensures that this bareword isn’t a keyword (to avoid a bug where "do q(foo.pl)" tried to call a sub- routine called "q").
[561] · file::glob now supports "glob_limit" constant to limit the size of the returned list of filenames.
since there are not that many amiga devel- opers available, we could not get this fixed and tested in time for 5.8.0.
· the debugger can now show lexical variables if you have the cpan module padwalker installed. ·
the constant and embed are probably problems in the tests (since they test perl’s ability to build extensions, and that seems to be working reasonably well.)unicode support on ebcdic
· devel::peek now has an interface for the perl memory statistics (this works only if you are using perl’s malloc, and if you have compiled with debugging).
though mostly working, unicode support still has problem spots on ebcdic platforms.
this algorithm is reasonably fast while producing a much better spread of values than the old hashing algorithm (originally by chris torek, later tweaked by ilya zakharevich).
rupt internal state since the current operation is always finished first,
it also has been made more portable.
· "pack() / unpack()" can now process the perl internal numeric types: ivs, uvs, nvs-- and also long doubles, if supported by the platform.
the "plugins" are named as usual, for example "per- lio::via::quotedprint".
the following tests fail on 5.8.0 perl in beos personal 5.03: t/op/lfs............................failed at test 17 t/op/magic..........................failed at test 24 ext/fcntl/t/syslfs..................failed at test 17 ext/file/glob/t/basic...............failed at test 3 ext/posix/t/sigaction...............failed at test 13 ext/posix/t/waitpid.................failed at test 1 see perlbeos (readme.beos) for more details.
the perl header files no longer suppress common warnings from the microsoft visual c++ compiler.
perl 5.8 unfortunately does not build anymore on amigaos; this broke accidentally at some point.
as a stop-gap measure to avoid people from getting frus- trated at the mysterious results (core dumps, most often), it is for- bidden for now (you will get a fatal error even from an attempt).
the pat, tr, and fold failures are genuine perl prob- lems caused by ebcdic (and in the pat and fold cases, combining that with unicode).
· using the /g modifier insplit() is meaningless and will cause a warning.
this was caused by perl’s using the operating system libraries in a situation where the result of the string to number conversion is undefined: now perl consistently handles such strings as zero in numeric contexts.
lib/ftmp-security tests warn ââ system possibly insecureââ don’t panic.
all thread tests of perl now work, but not without adding someyield()s to the tests, so while pth (and other userlevel thread implementations) can be considered to be "working" with perl ithreads, keep in mind the possible non-preemptability of the underlying thread implementa- tion.
· thewin32::setchildshowwindow() builtin can be used to con- trol the visibility of windows created by child processes.
this is caused by darwin’s ufs not sup- porting inode change time.
· "enc2xs" is a tool for people adding their own encodings to the encode module.
the problem was caused by perl trying to report a suspected security exploit attempt using an external program, /bin/mail.
with the quicksort algorithm used to implement perl 5.6 and earlier, the order of ties is left up to the sort.
· mac os classic compilation of the standard perl distribution in mac os classic should now work if you have the metrowerks development environment and the missing mac-specific toolkit bits.
[561] · printing quads (64-bit integers) with printf/sprintf now works without the q l ll prefixes (assuming you are on a quad-capable platform).
if your platform supportsfork(), you can use the list form of "open" for pipes.
installation (or build) on ntfs works fine.
in some setups the former has been known to spuriously also try to run "make install".
this change will probably break backward compatibility with compiled mod- ules.
[561] · regular expression debug output (whether through "use re ’debug’" or via "-dr") now looks better.
· lexical warnings now propagating correctly between scopes and into "eval "..."".
[561] · less stack reserved per thread so that more threads can run concurrently.
in particular binmode(fh) - and hence ":raw" - will now turn off both crlf and utf-8 translation and remove other lay- ers (e.g. :encoding()) which would modify byte stream.
in newer aix releases, this has been solved by linking perl with the libc_r library, but unfortunately in aix 4.2 the said library has an obscure bug where the various functions related to time (such astime() and gettimeofday()) return broken values, and therefore in aix 4.2 perl is not linked against libc_r.
for example, if you really donât care about the order of even and odd digits, quicksort will run in o(n) time; it’s very good at sorting many repetitions of a small number of distinct elements.
because of the large number of tests, running the regression suite will take considerably longer time than it used to: expect the suite to take up to 4-5 times longer to run than in perl 5.6.
· the english module can now be used without the infamous performance hit by saying use english ’-no_match_vars’; (assuming, of course, that you don’t need the troublesome variables $â, $&, or $’.)
handlers can be specific to type (scalar, array, hash, or code), or specific to the exact compilation phase (begin, check, init, or end).
