if using sound to illustrate sorting is interesting, then it is only interesting because the algorithms themselves are interesting, and you are unable to see that without the idiotic noises, through no fault of your own.
i know i had my fair share of problems trying to learn and use them, and some of these visualizations do actually seem to help a bit in the "understanding" department.
even if learning sorting was a piece of cake, or at least not boring, for you, that doesn't mean that everyone else can do it just as easily.
i though i had a problem with my speakers playing the video because i didn't notice any new sounds :o sorting may be boring to implement repeatedly (tedium by definition), but i foundlearning the various standard sorting algorithms to be pretty interesting, and a great practical introduction to pointers.
one thing this seems to show me (at least the video does) the rate of completion - how much is sorted by each point in the process the algorithms seem to all do that a bit differently; some have most of the work completed in the beginning, some in the end.
when i listen to the sound of bubble sort all i hear is one of my college professors threatening to hunt me down and kill me in my sleep if i ever use it.
say, a list of a person's children, which will be less than 4 in 99% of cases and even the extreme cases aren't going to kill you.
i mean hey - i like 80's console-sounds as much as the next guy, but they're not really adding anything."
i also noticed that they have gnomesort, but not kdesort.
especially if you're building the lists incrementally, such as via an insertion sort (muc yep, i've seen optimized implementations of quicksort which drop down to bubble sort when there's only three or four elements in the current subdivision.
i dunno what it would look like, but when they run the sound algorithm on it, it would sound like some awesome song from guitar hero.
merge sort - traffic sound bubble sort - blowing bubble sound from bubble bobble insert sort - coin slot select sort - crain game sounds gnome sort - 7 dwarfs singing hi-ho, hi-ho at least that way you can associate sounds with different algorithm types and remember what they are.
it does not help me, and as used in tfa, it is even an annoying noise.
sure, anyone can probably very easily tell a badly broken engine (no sound, heavy thumps, clacking, croaking etc) from a working one - even after experiencing a working one only once.
[youtube.com] because as far as i can see, that one doesn't illustrate the sorting algorithm itself with sound.
if you find learning (and discovering) how to solve problems effectively and efficiently to be boring, then you're probably pursuing the wrong line of wor the authors should listen to franz schubert's symphony number 9.
ps: the one in the video could easily be optimized to go twice as fast and would beat some of the others if you did.
an anonymous reader writes "anyone who's ever taken a programming course or tried to learn how to code out of a book will have come across sorting algorithms.
the computers don't have to make noise but the audio engineer added the sound to keep the show from being dull.
i'm betting quicksort tastes just like snozzberry.
granted, an older compared visualization using midi (the one with the guitar notes) was better at doing this, but still.
the bubble sort one actually did sound kind of bubbly.
i notice different sorting processes are appropriate for different rl sorting situations.
the visuals could be helpful if played more slowly, but the sound?
a lot of them sound like something you'd hear at the beginning/end of some song from the 60s or 70s.
thankfully, someone has found a way to not onlymake sorting more interesting, but easier to remember and understand, too."
it's more efficient if you don't use std::vector.
nickname: password:public terminal 93 of 118 comments loaded twitter facebookdevelopers programming sorting nickname: password:public terminal the fine print: the following comments are owned by whoever posted them.
it's more efficient to select the largest and the smallest unsorted values on each pass - you halve the number of passes, and on each pass you do 50% more work, so overall it's a 25% improvement.
but that is all - you do not learn at all how an engine works from hearing it, nor can you omit the prior learning.
the program itself was keyed into the system via about 1000 throw switches.
no new comments can be posted.
an old boss of mine used to work on a large computer which was used to control the activities inside a sawmill.
then your profs are kinda dumb, there are plenty of times when its acceptable to use bubble sort....
it's more efficient if the vectors holds pointers instead of data.
the entire machine was devoid of silicon.
without javascript enabled, you might want toturn on classic discussion system in your preferences instead.
i never thought about what they might sound like either, but now that i know what they sound like i can't help but wonder what they might taste like.
free pint to the first person to find it.
sorting those lists via some o(n^2) sort is lower overhead than building up fancy data structures.
i also noticed that the selection sort wasn't as good as it could be.
heck, i started my bsee in '01 and i barely made the cutoff for playing around with quickbasic.
there was a dismissive comment recently modded down about being "easily amused" by the bleeps and bloops, well that may be so, but it sure adds flavor to the process.
for all you young whippersnappers: these sounds resemble the noises emanating from a series of c=64 games byjeff 'yak' minter [wikipedia.org], one of the better known software developers from the 80's.
we use our spatially accurate sense i was listening to some dance/trance music.
this was pretty " your boss taking months to "get used" to the sound is important here, and the fact that he was using it to diagnose problems, not for learning how the machine works conceptually.
we are not responsible for them in any way.
although you will need an orchestra to play it.
all sorting algorithms will benefit from the playing of popcorn.
sorting algorithms â€” boring until you add sound 118 posted by soulskill on friday august 20 2010, @12:18pm from the bloop-bleep-bloop dept.
++ actual code and performance analysis shouldn't be boring or "dry" to someone who aspires to be a computer scientist or specifically a programmer, especially not the first time they learn about it...
however, the structure isn't as visibly obvious as for merge sort.
anyway, the videos are still fun to watch.
anybody who did their first programming steps with quickbasic will remember that it came with a demo that did just this.
it was made up of several thousand magnetic reed relays to perform the logic.
the heap sort actually has intermediate structure.
parent share twitter facebook anybody who did their first programming steps with quickbasic fyi, remember that the freshman in high school right now were born in 1996.
i do not think the sound adds anything, myself.
plus tv shows, especially scifi ones, do this all the time.
i watched/listened as i sucked the bong, the visual patterns converging certainly enhance the sounds, in a satisfying way.
