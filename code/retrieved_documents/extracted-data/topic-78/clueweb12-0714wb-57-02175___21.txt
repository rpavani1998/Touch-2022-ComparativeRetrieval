if using sound to illustrate sorting is interesting, then it is only interesting because the algorithms themselves are interesting, and you are unable to see that without the idiotic noises, through no fault of your own.
share twitter facebook
and that's not uncommon.
i know i had my fair share of problems trying to learn and use them, and some of these visualizations do actually seem to help a bit in the "understanding" department.
even if learning sorting was a piece of cake, or at least not boring, for you, that doesn't mean that everyone else can do it just as easily.
there are plenty of circumstances where you may have a large number of short lists floating around.
then you'd have seen some intermediate structure there too.
can you be more specific? http://en.wikipedia.org/wiki/popcorn_(instrumental)
i though i had a problem with my speakers playing the video because i didn't notice any new sounds :o sorting may be boring to implement repeatedly (tedium by definition), but i foundlearning the various standard sorting algorithms to be pretty interesting, and a great practical introduction to pointers.
bubble, heap, merge — there's a long list of  methods for sorting data.
one thing this seems to show me (at least the video does) the rate of completion - how much is sorted by each point in the process the algorithms seem to all do that a bit differently; some have most of the work completed in the beginning, some in the end.
when i listen to the sound of bubble sort all i hear is one of my college professors threatening to hunt me down and kill me in my sleep if i ever use it.
say, a list of a person's children, which will be less than 4 in 99% of cases and even the extreme cases aren't going to kill you.
i mean hey - i like 80's console-sounds as much as the next guy, but they're not really adding anything."
i also noticed that they have gnomesort, but not kdesort.
and there's one final pass to make sure the data's in order.
especially if you're building the lists incrementally, such as via an insertion sort (muc yep, i've seen optimized implementations of quicksort which drop down to bubble sort when there's only three or four elements in the current subdivision.
i dunno what it would look like, but when they run the sound algorithm on it, it would sound like some awesome song from guitar hero.
parent share twitter facebook
merge sort - traffic sound bubble sort - blowing bubble sound from bubble bobble insert sort - coin slot select sort - crain game sounds gnome sort - 7 dwarfs singing hi-ho, hi-ho at least that way you can associate sounds with different algorithm types and remember what they are.
it does not help me, and as used in tfa, it is even an annoying noise.
sure, anyone can probably very easily tell a badly broken engine (no sound, heavy thumps, clacking, croaking etc) from a working one - even after experiencing a working one only once.
[youtube.com] because as far as i can see, that one doesn't illustrate the sorting algorithm itself with sound.
if you watch carefully you can see that it has two phases, the first much shorter than the second.
as someone who's been teaching this stuff for years, i've always handed out links to visualizations like this (even if they did lack the retro-hip sound eff well, given the new web 2.0 interface, it might depend on your browser (i never tried it on anything but firefox, so i don't know), not to mention that you can select between different interfaces, but if your slashdot interface looks remotely like mine, there should be three possibilities to reply:
if you find learning (and discovering) how to solve problems effectively and efficiently to be boring, then you're probably pursuing the wrong line of wor the authors should listen to franz schubert's symphony number 9.
ps: the one in the video could easily be optimized to go twice as fast and would beat some of the others if you did.
what would an xkcdsort look like?
sorting algorithms: boring until you add sound star wars fans look for love
an anonymous reader writes "anyone who's ever taken a  programming course or tried to learn how to code out of a book will have come  across sorting algorithms.
the computers don't have to make noise but the audio engineer added the sound to keep the show from being dull.
93 of 118 comments loaded twitter  facebook developers programming sorting ncsoft sued for making lineage ii 'too addictive' submission:
algorithms are interesting.
[youtube.com] that's strange.
"the lesser of two evils -- is evil."
i'm betting quicksort tastes just like snozzberry.
granted, an older compared visualization using midi (the one with the guitar notes) was better at doing this, but still.
the bubble sort one actually did sound kind of bubbly.
i notice different sorting processes are appropriate for different rl sorting situations.
nice vids but where are the llamas [wikipedia.org]?
then it hit me that (apparently)
the visuals could be helpful if played more slowly, but the sound?
sorting algorithms — boring until you add sound  more login sorting algorithms — boring until you add sound archived  discussion load all comments full  abbreviated  hidden
if it had showed quicksort (i can't understand why it didn't)
a lot of them sound like something you'd hear at the beginning/end of some song from the 60s or 70s.
mac os x. gah, meant mac os     function sorted(a) { for (var i = 0; i  a[++
thankfully, someone  has found a way to not onlymake sorting more interesting, but easier to  remember and understand, too."
it's more efficient if you don't use std::vector.
[wikipedia.org] you mean kind of like the start of the 60's "reflections" by the supremes?: http://www.youtube.com/watch?v=yuuerncq8gk
share twitter facebook the shear sort is one of my favorite sorts out there.
nickname: password:public terminal 93 of 118 comments loaded twitter facebookdevelopers programming sorting nickname: password:public terminal the fine print: the following comments are owned by whoever posted them.
disclaimer: i only watched the first three minutes.
though i was quite fond of the gorillas demo game... : ) do you mean this?
but i never thought about what they might sound like, and that makes them just a little more interesting.
it's more efficient to select the largest and the smallest unsorted values on each pass - you halve the number of passes, and on each pass you do 50% more work, so overall it's a 25% improvement.
but that is all - you do not learn at all how an engine works from hearing it, nor can you omit the prior learning.
how does this make the algorithm any more interesting, easier to understand, or easier to remember?
many people haven't seen the algorithms visualized like this before.
the program itself was keyed into the system via about 1000 throw switches.
no new comments can be posted.
i just hear my bong.
an old boss of mine used to work on a large computer which was used to control the activities inside a sawmill.
i]) return false; return true; } function sort_values() { if (!sorted(a)) {
there may be more comments in this discussion.
the first possibility has the advantage that it's always visible (provided that your browser supports it, also you probably have to have javascript enabled, and it might be invisible anyway if you are looking at t feel like i'm complaining about a poll with a missing option, but, honestly ....:(
i can imagine how various sorting operations work in my head
then your profs are kinda dumb, there are plenty of times when its acceptable to use bubble sort....
it's more efficient if the vectors holds pointers instead of data.
the entire machine was devoid of silicon.
just what we needed for the next generation of science fiction movies.
without javascript enabled, you might want toturn on classic discussion system in your preferences instead.
parent share twitter facebook the shear sort is one of my favorite sorts out there.
i never thought about what they might sound like either, but now that i know what they sound like i can't help but wonder what they might taste like.
free pint to the first person to find it.
suppose you are on an embedded device, and you know that your inputs will always be limited by some factor, bubble sort also has rather good cache performance
* (a.length + 1)), j = (math.random() * a.length), t; if (j >=
sorting those lists via some o(n^2) sort is lower overhead than building up fancy data structures.
i'm not a big fan of these sounds, but i like the idea.
it doesn't even matter if it matches the sorting.
programming is first and foremost about problem solving, regardless of whether you're creating a game or a spreadsheet, and sorting is a common problem.
there's a video on the internet somewhere.
i also noticed that the selection sort wasn't as good as it could be.
heck, i started my bsee in '01 and i barely made the cutoff for playing around with quickbasic.
there was a dismissive comment recently modded down about being "easily amused" by the bleeps and bloops, well that may be so, but it sure adds flavor to the process.
look, i am sorry to make this a "what has become of slashdot?"
for all you young whippersnappers: these sounds resemble the noises emanating from a series of c=64 games byjeff 'yak' minter [wikipedia.org], one of the better known software developers from the 80's.
in alderaan places this  discussion has been archived.
we use our spatially accurate sense i was listening to some dance/trance music.
this was pretty " your boss taking months to "get used" to the sound is important here, and the fact that he was using it to diagnose problems, not for learning how the machine works conceptually.
we are not responsible for them in any way.
although you will need an orchestra to play it.
some song from the 60s or 70s.
my initial reaction was "really?
all sorting algorithms will benefit from the playing of popcorn.
sorting algorithms — boring until you add sound 118 posted by soulskill on friday august 20 2010, @12:18pm from the bloop-bleep-bloop  dept.
i was looking for bogosort [wikipedia.org] myself, actually.
++ actual code and performance analysis shouldn't be boring or "dry" to someone who aspires to be a computer scientist or specifically a programmer, especially not the first time they learn about it...
however, the structure isn't as visibly obvious as for merge sort.
there may be many instances of the list, but each will be small.
anyway, the videos are still fun to watch.
anybody who did their first programming steps with quickbasic will remember that it came with a demo that did just this.
that only covers 20 years worth of music.
gusshare twitter facebook
it was made up of several thousand magnetic reed relays to perform the logic.
the heap sort actually has intermediate structure.
parent share twitter facebook anybody who did their first programming steps with quickbasic fyi, remember that the freshman in high school right now were born in 1996.
i do not think the sound adds anything, myself.
the subject matter is fairly dry.
plus tv shows, especially scifi ones, do this all the time.
share twitter facebook ditto ms basic 7(?) on the old 1985 amiga - included demos with sound.
i watched/listened as i sucked the bong, the visual patterns converging certainly enhance the sounds, in a satisfying way.
most seem to take one piece of data and plunk it right in order; the merge sort seems to be the only one with intermediate groupings.