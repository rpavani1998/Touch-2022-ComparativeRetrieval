this approach was tested with thetsp and the results show that the evolved algorithmic strategies are effective, exhibit a good generalization capability and are competitive with human designed variants.unless you know your input data has some special properties that you can take advantage of, the provided sort should be enough for your needs and probably is more efficiently implemented.this can be very useful in situations where we want to optimize code since it becomes easy to add the proper type declarations to the input arguments of an algorithm.common lisp provides thesort and stable-sort functions but these can have different algorithms implemented according to each implementation, which can make an application unportable if you rely on a specific type of sorting.in the same way a programmer shouldnâ€™t implement a sorting algorithm every time it needs to sort something, the programmer should also be aware of the limitations/advantages of the system sort.quicksort has a worst-case performance of o(n2) but it can be optimized in several ways so that it also gives an expected worst-case performance of o(nlgn).if one knows the properties of the data, it is possible to understand if the provided sort can or will pose a problem.as expected, most of the implementations use merge sort to implement stable-sort since it is a stable sort with average and worst-case performance of o(nlgn).the difference between the two is that the second function sorts in a way that guaranteesstability, i.e., two elements that are equal remain in the same position after sorting is completed.the only source file i could find with a sort implementation wassort.d and it looks like it contains an implementation of tree sort with a self-balanced binary tree, which also gives this algorithm an average and worst-case performance of o(nlgn).this exploration of the sorting algorithms used in the open source implementations was very educational and interesting to me.in ecl (and abcl) quicksort implements a partition scheme which deals better with duplicate elements (although is not the three-way partitioning) but it always picks as pivot the first element.moreover, we keep the algorithm in a single place, making it easier to maintain.the use of sort and stable-sort requires some care (see the section sort pitfalls) but lets focus on the algorithms and not on its usage.even if for most situations the standard functions are more than enough, thezsort library could be a useful complement.