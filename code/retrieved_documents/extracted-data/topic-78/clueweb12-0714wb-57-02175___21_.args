it's more efficient to select the largest and the smallest unsorted values on each pass - you halve the number of passes, and on each pass you do 50% more work, so overall it's a 25% improvement.sorting those lists via some o(n^2) sort is lower overhead than building up fancy data structures.it's more efficient if the vectors holds pointers instead of data.if using sound to illustrate sorting is interesting, then it is only interesting because the algorithms themselves are interesting, and you are unable to see that without the idiotic noises, through no fault of your own.one thing this seems to show me (at least the video does) the rate of completion - how much is sorted by each point in the process the algorithms seem to all do that a bit differently; some have most of the work completed in the beginning, some in the end.even if learning sorting was a piece of cake, or at least not boring, for you, that doesn't mean that everyone else can do it just as easily.an anonymous reader writes "anyone who's ever taken a programming course or tried to learn how to code out of a book will have come across sorting algorithms.especially if you're building the lists incrementally, such as via an insertion sort (muc yep, i've seen optimized implementations of quicksort which drop down to bubble sort when there's only three or four elements in the current subdivision.all sorting algorithms will benefit from the playing of popcorn.i know i had my fair share of problems trying to learn and use them, and some of these visualizations do actually seem to help a bit in the "understanding" department.the heap sort actually has intermediate structure.++ actual code and performance analysis shouldn't be boring or "dry" to someone who aspires to be a computer scientist or specifically a programmer, especially not the first time they learn about it...i notice different sorting processes are appropriate for different rl sorting situations.i though i had a problem with my speakers playing the video because i didn't notice any new sounds :o sorting may be boring to implement repeatedly (tedium by definition), but i foundlearning the various standard sorting algorithms to be pretty interesting, and a great practical introduction to pointers.but that is all - you do not learn at all how an engine works from hearing it, nor can you omit the prior learning.