a stable sort means that for records that compare equal, the original input ordering is preserved.
mergesort also takes advantage of pre-existing order, so it would be favored for usingsort() to merge several sorted arrays.
a stable sort means that for records that compare equal, the original input ordering is preserved.
mergesort also takes advantage of pre-existing order, so it would be favored for using sort() to merge several sorted arrays.
you can force the choice of algorithm with this pragma, but this feels heavy-handed, so the subpragmas beginning with a_ may not persist beyond perl 5.8.
note that no sort "_quicksort"; have exactly the same effect, leaving the choice of sort algorithm open.
on average, mergesort does fewer comparisons than quicksort, so it may be better when complicated comparison routines are used.
that means that simple numerical and lexical sorts do not profit from stability, since equal elements are indistinguishable.
however, with a comparison such as { substr($a, 0, 3) cmp substr($b, 0, 3) } stability might matter because elements that compare equal on the first 3 characters may be distinguished based on subsequent characters.
to get the best experience, please enable javascript or download a modern web browser such asinternet explorer 8, firefox, safari, or google chrome.
however, with a comparison such as - { substr($a, 0, 3) cmp substr($b, 0, 3) } stability might matter because elements that compare equal on the first 3 characters may be distinguished based on subsequent characters.
you can force the choice of algorithm with this pragma, but this feels heavy-handed, so the subpragmas beginning with a _ may not persist beyond perl 5.8.
that means the following will probably not do what you expect, becauseboth pragmas take effect at compile time, before either sort() happens.
reset to default options before selecting other subpragmas (in case somebody carelessly left them on) and after sorting, as a courtesy to others.
in perl 5.8 and later, quicksort can be stabilized, but doing so will add overhead, so it should only be done if it matters.
the default algorithm is mergesort, which will be stable even if you do not explicitly demand it.
that means the following will probably not do what you expect, becauseboth pragmas take effect at compile time, before either sort() happens.
on the other hand, quicksort is often faster for small arrays, and on arrays of a few distinct values, repeated many times.
that means that simple numerical and lexical sorts do not profit from stability, since equal elements are indistinguishable.
use the quoted argument form of eval() , not the block form, as in - eval { use sort "_quicksort" }; # wrong or the effect will still be at compile time.
you appear to have javascript disabled, or are running a non-javascript capable web browser.
"\n"; - @c = sort @d; - } - # prints: - # quicksort stable - # quicksort stable you can achieve the effect you probably wanted by using eval() to defer the pragmas until run time.
with the sort pragma you can control the behaviour of the builtinsort() function.
note that - no sort "_quicksort"; - no sort "_mergesort"; have exactly the same effect, leaving the choice of sort algorithm open.
on the other hand, quicksort is often faster for small arrays, and on arrays of a few distinct values, repeated many times.
in perl 5.8 and later, quicksort can be stabilized, but doing so will add overhead, so it should only be done if it matters.
thus, after no sort qw(_mergesort stable); a mergesort, which happens to be stable, will be employed anyway.
the default algorithm is mergesort, which will be stable even if you do not explicitly demand it.
with the sort pragma you can control the behaviour of the builtin sort() function.
thus, after - no sort qw(_mergesort stable); a mergesort, which happens to be stable, will be employed anyway.
on average, mergesort does fewer comparisons than quicksort, so it may be better when complicated comparison routines are used.