in short, an invention is not  patentable, for lack of novelty, if the claimed subject matter was disclosed  before the date of filing.
divide and conquer is a frequently used paradigm for deriving  algorithms.
the number of comparisons and array accesses however grows quadratically with n for all the elementary sorting algorithms discussed so far, and more sophisticated algorithms become faster.
35 see e.g. m lemley, “rational ignorance at the patent office” (2001) 95northwestern university law review 1-32, at 1-2, available at:http://papers.ssrn.com/sol3/ papers.cfm?abstract_id=261400, which provides, in part, a slightly divergent view concerning patents overall, and an ample list of references at footnote 1.
by the  same token, an evaluation is based on patent documents, witnesses, expert  witnesses, other admissible evidence, presentations of the parties involved etc as input, together with relevant legal rules for determination of an  infringement or related validity contest.
much effort has gone into the inquiry as to what belongs to these categories and what does not.27 another set of limitations upon the scope of the claims is found in the requirement of sufficient disclosure already mentioned above,28 which in practice often has the effect of reducing the scope of the patent application.
17 j marr, “foreseeability as a bar to the doctrine of equivalents” (20 may 2003), available at:http://ssrn.com/abstract=410027 (accessed 19 july 2010); w long, “united states doctrine of equivalents: where we now stand” (2007) available at: http://www.buildingipvalue.com/07us_can/p.127-130%20sutherland.pdf (accessed 19 july 2010).
24 o’reilly v morse 56 u.s.62 (1853), at 112-116.
of course, two algorithms can be considered merely trivial variations of each other even if their output would be different.
41 f lévêque and y ménière, the economics of patents and copyright, (berkeley electronic press, 2004), available at: http://www.bepress.com/leveque/ (accessed 19 july 2011), at 47.
for a good introduction to the  main concepts and comparison between the us and european systems shedding more  light on both see eg c nard, “history and architecture of the patent  system”bocconi
30 d motzkin, “a stable quicksort” (1981) 11 software  – practice and experience 607-611.
tech, project manager, aalto university; perttu virtanen, ph.d, llm, post-doctoral researcher, hiit, aalto university; eljas soisalon-soininen, ph.d, professor, aalto university; jukka kemppinen, ph.d, professor emeritus, multiple docent, aalto and turku university.
for example, inspecting the codes of selection sort, insertion sort,  bubblesort, and should we have presented them also quicksort and mergesort, one  would notice that the algorithms never arrive at a value in the middle of the  array without first traversing through adjacent places from either edge of the  array.
by breaking the compared values into parts, however, one can sort even faster.
the converse may not be true as it is often  implausible that the given algorithm can be the only one producing the same  output.
instead patents become more numerous and increasingly narrow in scope, provided that the demand for products and services produced induces the research and development efforts to this end.
insertion sort, as we presented it, is not stable whereas bubblesort  is.
in this paper, we have reviewed arguments that may be used in determining the similarity of algorithms, and compared the limits of novelty and particularly of non-obviousness required in granting patents.
the idea is to treat the keys as a sequence of units, for example characters.
this result is sometimes known as the “reverse  doctrine of equivalents”.17 3.
if one ignores “stableness” which will be discussed later, bubblesort and insertion sort can be derived from each other by sameness-preserving transformations, but they would be so elaborate and contrived that other arguments against their sameness (presented in this paper) would prevail.
as the output of the algorithm one might also regard the memory consumption and computing time.19
in such a case, the test could be  devised so that a part of the group searches the literature and the internet  for similar existing algorithms, and presents them to the remaining group along  with the algorithm of the inventor.
[2010] 79 nordiskt immateriellt rättskydd 1-13; see also references therein in footnote 40.
whether the broad scope of patentability and the proliferation of granted  patents is a good or bad thing, is a different question.
it exhibits similar performance characteristics as quicksort, but the computer science community again considers it a new sorting algorithm in its own right.
4 see cases: finisar v directv (2007-1023, 1024) (fed cir 2008); aristocrat technologies australia v international gaming technology (2007-1419) (fed cir 2008);
tech, project manager, aalto university; perttu  virtanen, ph.d, llm, post-doctoral researcher, hiit, aalto university; eljas  soisalon-soininen, ph.d, professor, aalto university; jukka kemppinen, ph.d,  professor emeritus, multiple docent, aalto and turku university.
44 see eg k beresford, patenting european software under the european  patent convention (london: sweet & maxwell, 2000), at 54 and the  examples therein.
with suitably declared variables, the actual algorithm is: for (i = 0; i =
the permissive approach to accepting broad claims has been partly  tested in the usa recently inbilski et al v kappos, under secretary of  commerce for intellectual property and director, patent and trade mark office, 561 us supreme court no. 08-964 (28 june 2010), hereafter ‘bilski  v kappos’ and its antecedent brethren re nuijten, 500 f.3d 1347 andre comiskey, 554 f.3d 967.
indiamond v diehr25 , for example, a case concerning a patented rubber curing method involving an arrhenius equation26 in algorithmic form, the us supreme court excluded from patent protectionlaws of nature, natural phenomena, and abstract ideas.
in a  word processor, for example, input is via the keyboard and mouse, and output is  the display.
it is also possible however that a device, even though it falls within the literal description of a claim of patent, to perform the same or a similar function as the patented device but in a way that is substantially different.
occasionally, the instructions in the patent specification might lead to  an educated guess as to the actual programme that can be projected from these  instructions.9
for example, to change the sorting algorithms output from ascending to descending order requires such a trivial variation in the code that no one would consider the modified code to implement a different algorithm.
31 http://en.wikipedia.org/wiki/sorting_algorithm and pages referred from there.
we have argued above that despite “trivial” and mechanical changes, either to theimplementation of the algorithm in a programming language or in theidea of the algorithm, the identity of the algorithm is retained.
some empirical evidence” (2009)epip conference paper, available at: http://www.epip.eu/conferences/epip04/files/moir_hazel.pdf (accessed 19 july 2011).
in the united states, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals do not constitute patentable "processes" as mentioned in gottschalk v benson, 409 u.s. 63, 71-72, 175 uspq 673, 676 (1972).
the law of copyright, patents and trademarks (st. paul, minnesota: thomson-west, 2003), at 393-394.
another one may well be that the searches for prior art are far less than optimal and result in the granting of overlapping patents, which is widely recognised as a problem.35 alternatively, one might ask whether computer scientists granted patents on early elementary sorting algorithms, such as selection and insertion sort, are distinct algorithms of a lower status than sorting algorithms developed later.
this lore is, however, to some extent inaccurate, as discussed in chapters 5 and 6.
if these experts can within, say, an  hour of discussion present solutions close to those of the inventor, then a  sufficient level of non-obviousness has clearly not been reached.
this moving to adjacent values and also the swapping of values can be  performed equally well on linked lists as on arrays: incrementing the indexes i  and j to the array x is replaced by following the next-fields in the linked  lists nodes; swapping values in two indexes is replaced by a handful of linked  list manipulation statements.
a subtler change in output, for example the  stability of sorting – whether the sorting algorithm preserves the  relative order of equal values – can, however, be a distinguishing  factor.
further, chapters 5 and 6 discuss the criteria for considering algorithms, and their variations and applications, as novel or non-obvious given the current state of the art.
the non-obviousness or inventive step in patenting is directly linked both to the existing knowledge made public in the field, and to the expertise of an average professional skilled in the relevant trade.33
in a sense, patent law gives the applicants a certain freedom of discretion to define the scope of their claimed invention, provided the mentioned exclusions do not apply, and the application is sufficiently disclosed.
if one ignores “stableness” which will be  discussed later, bubblesort and insertion sort can be derived from each other  by sameness-preserving transformations, but they would be so elaborate and  contrived that other arguments against their sameness (presented in this paper)  would prevail.
instructions to a word processor to read a file or save a file result in read and saved data that can be considered as additional inputs and outputs, respectively.
for (i = 0; i  x[j]) { tmp = x[i]; x[i] = x[j]; x[j] = tmp; }
by generalising the type the very same code (and  consequently the same algorithm) is able to sort integers, strings, names of  people, phone numbers, dates, addresses, etc.
the idea is to treat the keys as a sequence of units, for  example characters.
28 u.s. patent code § 112; additionally, in the us the “best mode requirement” also limits the spectre of the claims in this respect.
in software patenting, understood broadly, algorithms, data structures, protocols, software architectures and designs have in practice been granted patents.
this applies particularly in the software industry that has often been characterised, as mentioned above, as cumulative, incremental and competitive or co-petitive instead of relying on discrete inventions and stand-alone products building upon them.36
in bubblesort the idea is to swap the first value in the array with all  smaller values in the remainder of the array, and then repeat the same with the  rest of the array, etc.
in the patenting law context, the motivation to obtain the broadest  possible monopoly and the widest available protection for the invention is an  incentive to couch applications in terms that are as generic as possible.
in such a case, the test could be devised so that a part of the group searches the literature and the internet for similar existing algorithms, and presents them to the remaining group along with the algorithm of the inventor.
44 see eg k beresford, patenting european software under the european patent convention (london: sweet & maxwell, 2000), at 54 and the examples therein.
unfortunately problems are seldom sufficiently well-defined and  consequently there is rarely ever a chance for a group of experts to converge  upon a solution near to that of the inventor.
see also: m. lemleyet a: life after bilski [2011] 63 stanford law review 1315-1347.
consequently, there is no reason why the very same  sorting algorithm could not sort the appendix of references in a book, a row of  integers in lotto, or the chronological schedule of departing flights on the  airport.
the operating system that provides the file access  primitives to the word processor views the requests of the word processor in  reversed roles.
while bringing generality to an algorithm may involve varying levels of  innovation, the reverse process of specialisation (instantiation) of a given  generalised algorithm is usually considered trivial.
the  non-obviousness or inventive step in patenting is directly linked both to the  existing knowledge made public in the field, and to the expertise of an average  professional skilled in the relevant trade.33
one such way to implement insertion sort is given below: for (i = 0; i = 0 && x[j - 1] > v; j--) x[j] = x[j - 1]; x[j] = v; } for sake of completeness, and to facilitate further debate, we include a third elementary sorting method, bubblesort.
the basic idea is to find  the minimum value of the array, swap it with the first value in the array, and  repeat these steps for the remainder of the array, ie starting at the second  position, then third, etc until the whole array has been traversed.
see also:  m. lemleyet a: life after bilski [2011] 63 stanford law review 1315-1347.
when applied to sorting, this paradigm could be applied for example as  follows: choose a random value, the pivot, in the array to be sorted.
we then reserve one bucket for each distinct character and with one pass through the values to be sorted we can place all values which begin with character 'a' into the bucket for characters 'a', values which begin with 'b' to the bucket for 'b's, etc.
according to computing folklore, selection and insertion sorts are the  fastest sorting methods for array sizes up to around ten or twenty.
a similar process of abstraction of internal details can be used to create  amalgamates of sorting algorithms.
18 c hoare, "‘partition: algorithm 63,’ ‘quicksort:  algorithm 64,’ and ‘find:algorithm 65’”
© 2004-2008 university of edinburgh and contributors.
it has been shown mathematically that no sorting algorithm based on comparing entire values can be faster than quicksort or merge sort by more than a constant factor.
if the algorithm of the inventor is judged between themselves to be more similar to one of the prior algorithms than the existing algorithms, then the algorithm of the inventor would not be judged as sufficiently non-obvious.
rules in algorithms may refer to variables and the assignment of new values to them.
this was  such a significant variation that its description was published in a  peer-reviewed journal in 1981.30
the suspect invention is therefore, in principle, so far removed from the invention as disclosed in the patent that it is considered in law to be an entirely different thing.
later it has been reinvented several times, most notably by harold seward for general purpose computers in 1954, and eventually it was dubbed radix sort.
if, having regard  to the state of the art, it is not obvious to a person skilled in the  art.”
a similar process of abstraction of internal details can be used to create amalgamates of sorting algorithms.
the large problem is recursively broken up into two or more  subproblems until they become easily solvable and then the solved subproblems  are combined into a solution to the original problem.
5 see note 4 above and eg s
intellectual property law, (oxford: oup, 2009), at 333; r schechter and j thomas,schechter and thomas’ intellectual property:
programming languages are frequently  accompanied by standardlibraries which may provide tens of additional  data structures and the internet and scientific literature can be consulted for  thousands more.
the suspect invention is therefore, in principle, so far removed from the  invention as disclosed in the patent that it is considered in law to be an  entirely different thing.
this paper has presented a number of arguments that a computer scientist  might use to argue that two given algorithms37 are two different algorithms or  such trivial variations of the same algorithm that the variation falls below  expected competence of a contemporary software engineer or computer scientist.
this is of course a very rough sketch of the general idea, since these  are some of the core concepts of patentability.
algorithms may employ variousdata structures in order to manage larger amounts of data than can be expressed in a fixed number of variables.
in this paper, we have reviewed arguments that may be used in determining  the similarity of algorithms, and compared the limits of novelty and  particularly of non-obviousness required in granting patents.
this unfortunate overloading of the term must, however, not be confused with the consideration of equivalence of claims and description deriving from the algorithm in the software patenting context.
© 2004-2008 university of edinburgh and  contributors.
thisfata morgana of patentable  subject-matter is arguably a major point of confusion12 in the field of  intellectual property at the turn of the millennium, together with the  protection of “databases”, particularly in the eu.13
sameness in functionality computer scientists and software engineers may colloquially call two  algorithms equivalent if they produce the same output for the same input,  possibly with attention also to the required memory and computing times.
occasionally, the instructions in the patent specification might lead to an educated guess as to the actual programme that can be projected from these instructions.9
while such designs can have significant practical value, such amalgamate algorithms are rarely considered non-obvious.
27 of latest developments in the usa, see bilski v kappos at note 10 above and,prometheus laboratories , inc v mayo collaborative services and mayo clinic rochestercafc 17 december 2010, 2008-1403.
3 prior art or ‘state of the art’ in patent law, in the main  constitutes all information that has been made available to the public in any  form before a given date that may be relevant to a claim of novelty in the  first instance, and subsequently to the existence of an inventive step.
the invention is similar enough that a skilled professional would render it
by the same token, pursuant to § 103 (a) of the u.s. patent code: a patent may not be obtained though the invention is not identically disclosed or described as set forth in section 102 of this title, if the differences between the subject matter sought to be patented and the prior art are such that the subject matter as a whole would have been obvious at the time the invention was made to a person having ordinary skill in the art to which said subject matter pertains… these two factors should ideally return the appraisal of the merits back to the computer scientists and their skill in the first instance.
it must also consider the contemporary sophisticated practices of software engineers and computer scientists who develop and implement algorithms as part of the establishment ofprior art.
sameness through abstraction of application writing software can be a very laborious task.
the outer limits of the scope of patentability, relevant in the software and algorithm context, come from general exclusions to patentability, provided by article 52(2) and (3) in the european patent convention (epc).
should the difference nevertheless exist, one of the reasons for the discrepancy lies in that algorithms are34 patented when they are embedded in a particular application in a certain field.
this extension to the literal infringement of the patent is  limited to trivial or insignificant changes, just as the set of  sameness-preserving transformations discussed in this section.
a moderately dexterous person can compare these two  algorithms in practice on a suit of playing cards; while the difference in  ideas may seem trivial, in computer science these two algorithms are considered  two different algorithms.
41 f lévêque and y ménière, the economics of  patents and copyright, (berkeley electronic press, 2004), available at:  http://www.bepress.com/leveque/ (accessed 19 july 2011), at 47.
see eg j duffy: “ the death of google’s patents?” (2008) available at http://www.patentlyo.com/patent/ 2008/07/the-death-of-go.html (accessed 19 july 2011); c harkins, “throwing judge bryson’s curveball: a pro patent view of process claims as patent-eligible subject matter” (2008)
we can provide justifications for some of these arguments, but in many cases they merely encode what we - as practitioners and educators in computer science and software engineering - consider to be obvious to a person having ordinary skill in the art.
another one may well be that the searches for  prior art are far less than optimal and result in the granting of overlapping  patents, which is widely recognised as a problem.35 alternatively, one might ask whether computer scientists granted patents on  early elementary sorting algorithms, such as selection and insertion sort, are  distinct algorithms of a lower status than sorting algorithms developed later.
as the importance of the courts and particularly  that of cafc42 is widely recognised in the determination of actual patent  scope, the language of the claim has been allowed to prevail at a high level of  abstraction when the software invention has been disclosed.
42 see for example, r thomas, “debugging software patents:  increasing innovation and reducing uncertainty in the judicial design of  optimal software patent law” (2008), to be published in santa clara  computer and high technology law journal.
obvious.16 sameness-preserving transformations can be compared with the doctrine of  equivalents in patent law and ipr management parlance.
the first such claim involved essentially a cryptographic communications system comprising any communications channel with means of encoding and decoding for word signals but thede facto limitations on scope arose from the specific - and famous - encoding and decoding method.
as with a hand of playing cards, the input and output arrays can be made to occupy the same physical array.
the main focus of this paper is that the algorithms underlying computer programmes are the focal point of discourse on patentability of computer software.
as we shall see in this section, there is, however, a surprisingly low limit to how far such reasoning can go.
3 prior art or ‘state of the art’ in patent law, in the main constitutes all information that has been made available to the public in any form before a given date that may be relevant to a claim of novelty in the first instance, and subsequently to the existence of an inventive step.
ip summer transatlantic academy paper (25th june  2007); on a good account of the obviousness, see j duffy, “inventing  invention: a case study of legal innovation” (2007) 86texas law review , available at: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1087067##  (accessed 19 july 2011).
for an illustrative example of how a court performs the decision making, seemicrosoft corp v i4i limited partnership et al, u.s. supreme court, june 9, 2011, no 10-290, and earlier district and appeals court decisions.
even if a claim as literally read includes the  impugned thing, claims are limited by construction to cover the invention  disclosed in the patent and to exclude a thing which is different from the  disclosed invention.
a classic  example, and an illustration as to how inventions build on each other, is the  following amalgam of inventive applications of previously known algorithms from  computer science: the use of discrete fourier transform21 for efficient  multiplication of large integers,22 in modular exponentiation, and to construct  a public-key cryptography protocol.23
2 algorithms, by themselves, are not usually regarded as patentable “as such” but only when reduced to practical applications in the form of a computer programme.
as a particular u.s. instance of this, see eg r merges, “software and patent scope:
writing software can be a very laborious task.
this approach may also backfire, however: the classic u.s. supreme court case ofo’reilly v morse24 dating back to 1850s provides a good example of this.
the rules may contain mathematical or logical operations, repetition, procession to another rule, or temporary performance of another set of rules; they allow access to the internal state of the algorithm, takinginput and producing output.
in the european epo/epc settings, in spite of the “as such” exclusion from patentability regarding software, the number of epo issued software patents in 2002 was some 30,000.43 while some software patents concern only particular instances of a computer programme or its subroutines embracing the practical implementation of the underlying idea protected by a patent, the system has allowed claims to cover a broader area of application.44 the sheer statistics show that the similarity appraisal and the methodology used has remarkable practical significance.
the supreme court found the claim to be too broad,  drawing a parallel with the case of a patent of a mere principle, and thus  inadmissible.
in such a case, the  invention, even though not the same as the prior art, lacks an inventive step.
in bubblesort the idea is to swap the first value in the array with all smaller values in the remainder of the array, and then repeat the same with the rest of the array, etc.
in the context of the consideration of similarity of computer algorithms, a matter that has perhaps obfuscated the patentability discourse within the legal spheres deserves attention.
an infringing device,  process or other embodiment of invention that does not fall within the literal  scope of a patent claim may nevertheless be considered equivalent to the  claimed invention.
in the united states, a claim consisting solely  of simple manipulations of abstract concepts, numbers, or signals do not constitute patentable "processes" as mentioned in gottschalk v  benson, 409 u.s. 63, 71-72, 175 uspq 673, 676 (1972).
next, for all buckets containing a  nontrivial number of elements we recursively perform the same sorting procedure  again but now place the values into subbuckets according the second letter,  then the third etc.
the arrhenius equation is a simple and markedly accurate formula for the  temperature dependence of the rate constant, and consequently to the rate of a  chemical reaction.
analysing the number of operations would show that the number of  operations depends linearly on the product of the number of values and on the  number of characters that form the (longest) value.
repeat the above two steps recursively to the subarrays until they contain at most one element (or as an optimisation, until selection or insertion sort becomes an efficient sorting algorithm for the subarrays).
the converse may not be true as it is often implausible that the given algorithm can be the only one producing the same output.
86texas law review , available at: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1087067## (accessed 19 july 2011).
35 see e.g. m lemley, “rational ignorance at the patent  office” (2001) 95northwestern university law review 1-32, at 1-2, available at:http://papers.ssrn.com/
in current speech it means more generally any sequence of simple actions entailed in the performance of some more complex task.
this argument would also be used to argue that there are a few variants  of radix sort mentioned in section 6 that could be considered different  algorithms.
this legal typology has to compared with software development where one step in the process is also specification, the task of precisely describing the software to be written, preceded by domain analysis and then succeeded by creation of software architecture referring to abstract representation of the system, implementation in the form of coding and writing the requisite documentation, and testing and debugging the programme.
by comparison, in the american context, exceptions to patentability evolved as a result of case law and are still found therein.
some of these are classics in computer science that are included in  all university-level curricula of computer science and software engineering.15
this legal typology has to  compared with software development where one step in the process is also  specification, the task of precisely describing the software to be written,  preceded by domain analysis and then succeeded by creation of software  architecture referring to abstract representation of the system, implementation  in the form of coding and writing the requisite documentation, and testing and  debugging the programme.
introduction whether two algorithms - described abstractly in a document or employed  concretely in, for example, a computer programme - are ‘the same’  or different from one another, may be a crucial determination in certain legal  disputes.
the correct subject-matter10 is the underlying algorithms or sometimes even logical designs 11 that may cover tens of different types of software as eventually implemented in a given computer programme.
in subsequent chapters we will address individual arguments, and some  non-arguments, that could be presented in support of the sameness or  distinctness of two given computer algorithms.
exempli gratia, a patent search directed at over seventy authors  referred to as inventors of new sorting algorithms,31 found that no one had  filed a patent on the ideas they had published, either through academic  channels or on the internet.32 this suggests the limit of non-obviousness in  patenting and the (academic and computer science related) treatment of two  algorithms as the same are not identical issues.
we readily admit that we do not know whether sorting, or “producing a totally ordered multiset”, as a mathematician might call it, would be a mathematical algorithm in the eyes of the us supreme court as ingottschalk v benson, see note 1 above.
see l bently and b shermann.
by article 56 epc, “an  invention shall be considered as involving an inventive step
by this argument one could show, for example, that none  of selection sort, quicksort and radix sort can be similar to each other.20  similarly, quicksort is evidently different from mergesort because an  unfortunate choice of pivot elements causes quicksort to assume a quadratically  growing computing time whereas mergesort can be guaranteed to consume never  more than time proportional to n log n. furthermore, one can argue that  selection sort and insertion sort must be different algorithms since insertion  sort can process a readily sorted input array in time linearly proportional to  n whereas selection sort always requires time proportional to n2.
in the european epo/epc settings, in spite of the “as such”  exclusion from patentability regarding software, the number of epo issued  software patents in 2002 was some 30,000.43 while some software patents concern  only particular instances of a computer programme or its subroutines embracing  the practical implementation of the underlying idea protected by a patent, the  system has allowed claims to cover a broader area of application.44 the sheer  statistics show that the similarity appraisal and the methodology used has  remarkable practical significance.
such disputes will range from trade secret thefts or copyright  violations to the determination of the scope of a patent,1 which is the legal  focus of the current paper.2 the court responsible for such a decision must  find a balance between protection of the intellectual property rights of the  claimant on the one hand, and avoidance of a false judgment against the  innocent respondent on the other.
rules in algorithms may refer to variables and the assignment of new  values to them.
by the same token, pursuant to § 103 (a) of the u.s. patent  code: a patent may not be obtained though the invention is not identically  disclosed or described as set forth in section 102 of this title, if the  differences between the subject matter sought to be patented and the prior art  are such that the subject matter as a whole would have been obvious at the time  the invention was made to a person having ordinary skill in the art to which  said subject matter pertains… these two factors should ideally return the appraisal of the merits back to  the computer scientists and their skill in the first instance.
in sorting algorithms two aspects would immediately be generalised by any competent programmer: the type ofvalues to be sorted and the code that performs the comparison.
this might be true simply because as the field became more thoroughly  researched (and taught), the general level of competence rose.
ideally one would like to devise a psychometric test in which a handful of  reputedly competent software engineers and computer scientists and the inventor  are given the same problem to be solved.
see eg j duffy: “ the death of google’s patents?” (2008) available at  http://www.patentlyo.com/patent/ 2008/07/the-death-of-go.html (accessed 19 july  2011); c harkins, “throwing judge bryson’s curveball: a pro patent  view of process claims as patent-eligible subject matter” (2008)
if (x[j] = 1; i--) { max =
providing powerful (yet understandable and safe) methods of abstraction and generality is in fact one of the major driving research questions in programming language design.
recall that the basic idea of selection sort (on arrays) is to find the minimum value of the array, swap it with the first value in the array, and repeat these steps for the remainder of the array, etc.
these bar from patentabilityas such discoveries, scientific theories and mathematical methods, aesthetic creations, schemes, rules and methods for performing mental acts, playing games or doing business, and programmes for computers and presentations of information.
this subtle change  from partitioning when breaking up to merging when combining leads changes the  resulting algorithm from quicksort to merge sort.
later it has been  reinvented several times, most notably by harold seward for general purpose  computers in 1954, and eventually it was dubbed radix sort.
consequently, the next question that arises is whether the criterion of  non-obviousness as understood among software engineers and computer scientists  is different from that applied by patent engineers and managers who determine  the ideas that enter the patenting process.
move all  values smaller than the pivot to the beginning of the array and all values  larger than the pivot to the end of the array.
after the execution of the legal “algorithm” a judgment is passed.39 these descriptions are, of course, incomplete and provided here as a rough outline of the relevant procedures.
this applies to europe, where article 52 of the 1973 european patent conventionexpressis verbis mentions that computer programmes are only non-patentable to the extent that an attempt is made to patent a computer programmeas such.
6 d. burk-m. lemley : the patent crisis and how the courts can solve it, university of chicago press, chicago 83-85; 7
these views meet in the  practice of patenting and related litigation.
the first such claim involved essentially a cryptographic  communications system comprising any communications channel with means of  encoding and decoding for word signals but thede facto limitations on  scope arose from the specific - and famous - encoding and decoding method.
this result is sometimes known as the “reverse doctrine of equivalents”.17
by comparison, in the american context, exceptions to patentability evolved  as a result of case law and are still found therein.
for example, to change the  sorting algorithms output from ascending to descending order requires such a  trivial variation in the code that no one would consider the modified code to  implement a different algorithm.
whereas mathematicians store an unbound number n values in a variable indexed through subscripting x1, x2, ..., xn, a software engineer writing c or java would use an array x[0], x[1], …, x[n-1].
it makes reference to all the  sorting algorithms presented in this paper, and provides an overview of what  should at minimum be considered ‘ordinary skill in the art’.
in the context of patenting, the patentable  subject-matter is habitually referred to as the computer programme or, more  generically as software.
this can be achieved by writing the code generic (abstract, parametric) so that aspects of the code can be changed without any deeper understanding of the algorithm itself.
in quicksort the linear-time array partitioning work is performed when breaking up the problem into smaller subproblems and no work needs to be done when combining the solved subproblems into a sorted original array.
these bar  from patentabilityas such discoveries, scientific theories and  mathematical methods, aesthetic creations, schemes, rules and methods for  performing mental acts, playing games or doing business, and programmes for  computers and presentations of information.
it makes reference to all the sorting algorithms presented in this paper, and provides an overview of what should at minimum be considered ‘ordinary skill in the art’.
in such a case, the invention, even though not the same as the prior art, lacks an inventive step.
15 t cormen, c leiserson, r rivest and c stein, introduction to  algorithms (massachusetts institute for technology press, 2009), now in its  third edition, is probably the most popular and most commonly cited  introductory book on the theme of algorithms.
this is roughly the underlying idea of quicksort, invented in 1960.18 it turns out that the two first steps, also called partitioning of the array, can be performed in time linearly proportional to the size of the (sub)array.
3 the term “algorithm” has several historical uses, including the arabic system of numeration and the art of calculation.
in mathematics, the fourier transform converts a cyclic function to its frequency and phase components.
see a schönhage and v strassen, "schnelle multiplikation großer zahlen", (1971) 7
arrays are all we need to deliver the message in this presentation, but typical programming languages may contain such data structuring mechanisms as records, objects (as in object-oriented programming) and in some cases linked lists or associative arrays indexed by arbitrary values instead of mere integers.
while at the infancy and  pioneer stages of an industry one sees patents with broad scope, patenting does  not taper off later.
instructions to a word processor to read a file or save a file  result in read and saved data that can be considered as additional inputs and  outputs, respectively.
our first sorting algorithm is selection sort.
alsolizardtech v earth resource mapping inc 424 f.3d 1336 (fed cir 2005).
in practice, the demarcation between the two is less clear, see eg r ballardini, “scope of protection for the functional elements of software, in search of new ip regimes” (2010)ipr university center 27-62 available at:http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1599607 (accessed 19 july 2011).
in short, an invention is not patentable, for lack of novelty, if the claimed subject matter was disclosed before the date of filing.
this can  be achieved by writing the code generic (abstract, parametric) so that  aspects of the code can be changed without any deeper understanding of the  algorithm itself.
in a word processor, for example, input is via the keyboard and mouse, and output is the display.
intellectual property law, (oxford:  oup, 2009), at 488-506; an interesting study from australian standpoint is h  moir, “how high is the inventive step?:
indiamond v diehr25 , for example, a case concerning a patented rubber curing method  involving an arrhenius equation26 in algorithmic form, the us supreme  court excluded from patent protectionlaws of nature, natural phenomena, and  abstract ideas.
this might be true simply because as the field became more thoroughly researched (and taught), the general level of competence rose.
arguments in considering the similarity of algorithms in patenting kenneth oksanen, perttu virtanen, eljas soisalon-soininen, jukka  kemppinen* cite as: k oksanen, p virtanen, e  soisalon-soininen, j kemppinen, "arguments in considering the similarity  of algorithms in patenting", (2011) 8:2scripted 138,  http://www.law.ed.ac.uk/ahrc/script-ed/vol8-2/oksanen.asp download  options doi: 10.2966/scrip.
thisfata morgana of patentable subject-matter is arguably a major point of confusion12 in the field of intellectual property at the turn of the millennium, together with the protection of “databases”, particularly in the eu.13
in the case of quicksort, a doubly linked list  will be needed, but consequently quicksort can also be made stable.
34 or rather should be provided the doctrine on tying the invention to the  concrete application prevails also in practice.
according to computing folklore, selection and insertion sorts are the fastest sorting methods for array sizes up to around ten or twenty.
a moderately dexterous person can compare these two algorithms in practice on a suit of playing cards; while the difference in ideas may seem trivial, in computer science these two algorithms are considered two different algorithms.
sameness through abstraction of internal details
unfortunately problems are seldom sufficiently well-defined and consequently there is rarely ever a chance for a group of experts to converge upon a solution near to that of the inventor.
competent programmers  therefore try to avoid duplicate work by writing easily reusable code.
for an illustrative example of how a court performs the decision making,  seemicrosoft corp v i4i limited partnership et al, u.s. supreme court,  june 9, 2011, no 10-290, and earlier district and appeals court decisions.
they provide little or no guidance onhow the software in question could be written or should be implemented.
for example, if the recursive application of  quicksort is abstracted to a subroutine which reverts to insertion sort if the  array to be sorted is shorter than, say, twenty elements, we have derived an  eighth sorting algorithm by reusing two of the seven sorting algorithms already  presented in this paper.
in patent law and practice, the similarity of objects has a bearing on two  important premises for patentability: novelty and the existence of an inventive  step, or in other words, non-obviousness.
in the patenting law context, the motivation to obtain the broadest possible monopoly and the widest available protection for the invention is an incentive to couch applications in terms that are as generic as possible.
the operating system that provides the file access primitives to the word processor views the requests of the word processor in reversed roles.
analogously, radix sort is frequently modified, for example, by changing the order of traversing the characters in the keys and the method of implementing “buckets”, but these modified radix sorts are still usually recognised as notable variations rather than entirely new sorting algorithms.
this approach may also backfire, however: the classic u.s. supreme court  case ofo’reilly v morse24 dating back to 1850s provides a good  example of this.
on various forms of ip protection available for software, see eg g  mowery: “intellectual property protection in the u.s. software  industry” in: w cohen and s merill (eds),patents in knowledge-based  economy (washington, d.c.: national academy press, 2003) at 7-5.
the discovery of applicability of the algorithm and various preparatory and  subsequent steps could easily however result in a non-obvious idea.
for example, inspecting the codes of selection sort, insertion sort, bubblesort, and should we have presented them also quicksort and mergesort, one would notice that the algorithms never arrive at a value in the middle of the array without first traversing through adjacent places from either edge of the array.
algorithms may employ variousdata structures in order to  manage larger amounts of data than can be expressed in a fixed number of  variables.
this lore is,  however, to some extent inaccurate, as discussed in chapters 5 and 6.
an  example of a broad patent can be found in the well-known u.s. grant to the  above mentioned rsa public key encryption algorithm, claimed in altogether 40  claims.
in the second alternative, the judiciary makes the final decision.
18 c hoare, "‘partition: algorithm 63,’ ‘quicksort: algorithm 64,’ and ‘find:algorithm 65’”
the basic idea is to find the minimum value of the array, swap it with the first value in the array, and repeat these steps for the remainder of the array, ie starting at the second position, then third, etc until the whole array has been traversed.
yet the computer science community still  regards it as variation of quicksort rather than a new sorting algorithm.
in insertion sort the basic idea is to take the first value in the input array, insert it into the correct position in the output array, and repeat these steps for the remainder of the input array until no more input elements remain.
as we shall see in this section, there is, however, a surprisingly  low limit to how far such reasoning can go.
7j  marshall rev intell prop l 701; the references to cases are found in the  articles.
we will use as our running example the domain of sorting an array of values into ascending order.14
this moving to adjacent values and also the swapping of values can be performed equally well on linked lists as on arrays: incrementing the indexes i and j to the array x is replaced by following the next-fields in the linked lists nodes; swapping values in two indexes is replaced by a handful of linked list manipulation statements.
lindholm, “marking the software patent  beast” (2005); also available athttp://ssrn.com/abstract=642123 (accessed  19 july 2011), 18; j cohen and m lemley, “patent scope and innovation in  the software industry”
input and output to the algorithm must be considered very loosely.
assuming the  physical devices were readily available, s/he will regard the sorting of a deck  of cards or a herd of cattle according to weight as equally obvious, void of  any inventive step.
also available at ssrn: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1126450 (accessed 19 july 2011), at 4.
insertion sort, as we presented it, is not stable whereas bubblesort is.
arrays are all we need to deliver the  message in this presentation, but typical programming languages may contain  such data structuring mechanisms as records, objects (as in object-oriented  programming) and in some cases linked lists or associative arrays indexed by  arbitrary values instead of mere integers.
yet, as selection sort is usually described in the computer science literature, little doubt of that should exist.
for a good introduction to the main concepts and comparison between the us and european systems shedding more light on both see eg c nard, “history and architecture of the patent system”bocconi ip summer transatlantic academy paper (25th june 2007); on a good account of the obviousness, see j duffy, “inventing invention: a case study of legal innovation” (2007)
this argument would also be used to argue that there are a few variants of radix sort mentioned in section 6 that could be considered different algorithms.
j; tmp = x[max]; x[max] = x[i]; x[i] = tmp; } a software engineer comparing this to the original code, especially the  structure of their iterations, may wish the comfort of more than a few seconds  to verify that these codes indeed perform the same thing and do so essentially  by employing the same algorithm.
28 u.s. patent code § 112; additionally, in the us the “best  mode requirement” also limits the spectre of the claims in this respect.
we do not claim wikipedia to be the most authoritative source, but it is either more extensive or more up-to-date than the printed alternatives.
the supreme court  had earlier remanded the case to the federal circuit to reconsider the case  “in light of bilski”and the federal circuit redecided the case; the  supreme court granted petition for a writ of certiorari again on jun 20 2011,  no. 10-1150 and the case issub judice.
the number  of comparisons and array accesses however grows quadratically with n for all  the elementary sorting algorithms discussed so far, and more sophisticated  algorithms become faster.
in the original eighth patent claim one samuel morse claimed any use of electromagnetism for printing intelligible signs, characters, or  letters at a distance.
the equation is coined after swedish chemist svante  arrhenius, who provided a physical justification and interpretation for the  formula in 1889.
ideally one would like to devise a psychometric test in which a handful of reputedly competent software engineers and computer scientists and the inventor are given the same problem to be solved.
for more detailed treatment of the inventive step and non-obviousness,  see e.g. l bently and b shermann.
in practice, the demarcation between the two is less clear, see  eg r ballardini, “scope of protection for the functional elements of  software, in search of new ip regimes” (2010)ipr university center 27-62 available at:http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1599607  (accessed 19 july 2011).
even if there is no anticipation and the invention is novel, the invention is not patentable if an imaginary person, having ordinary skill in the art, would know how to solve the problem to which the invention is directed, by using the same mechanism.
the rules may contain  mathematical or logical operations, repetition, procession to another rule, or  temporary performance of another set of rules; they allow access to the  internal state of the algorithm, takinginput and producing output.
the final sorted array is obtained by concatenating all the buckets.
27 of latest developments in the usa, see bilski v kappos at note 10 above and,prometheus laboratories , inc v mayo collaborative services and  mayo clinic rochestercafc 17 december 2010, 2008-1403.
in some cases, forms of abstraction may require deeper modification than occurs through changes to a few lexical items in the code that implement the algorithm.
varying the comparison function not only corresponds to the change in type, but can also counter for whether the resulting order is ascending or descending, whether certain characters (such as 'u' and 'ü') should be treated as equal, or whether parts of the value should be ignored.
the large problem is recursively broken up into two or more subproblems until they become easily solvable and then the solved subproblems are combined into a solution to the original problem.
they then judge which algorithms are most similar to one another.
it is perhaps useful  first to discern what is actually happening, instead of proceeding on the basis  of the perceived patent protection of computer programmes.
with suitably declared variables, the actual algorithm is: for (i = 0; i = i; j--) if (x[j] = 1; i--) { max =
9 thus, in principle, when an algorithm is implemented in a computer programme, the actual programme, whether in source or object code, together with supporting documentation, is protected by the copyright, while the functional idea of the algorithm underlying the programme remains in the realm of patent law.
3 the term “algorithm” has several historical uses,  including the arabic system of numeration and the art of calculation.
as a particular u.s. instance of this, see eg r  merges, “software and patent scope:
yet arguments for non-equivalence (in the computer science sense) can in some cases be useful in arguing dissimilarity of the algorithms.
7j marshall rev intell prop l 701; the references to cases are found in the articles.
an infringing device, process or other embodiment of invention that does not fall within the literal scope of a patent claim may nevertheless be considered equivalent to the claimed invention.
they provide little or no guidance onhow the software in  question could be written or should be implemented.
the law of copyright, patents and trademarks (st.  paul, minnesota: thomson-west, 2003), at 393-394.
in fact, association of the output of one algorithm with the  input of another is the standard method of composing algorithms into larger  algorithms and eventually into programmes, regardless of whether the  association is accomplished through ordinary function calls, shared memory, a  middleware of some sort, or a network connection and explicit encoding to a  data exchange protocol.
by article 56 epc, “an invention shall be considered as involving an inventive step if, having regard to the state of the art, it is not obvious to a person skilled in the art.”
the invention is similar enough that a skilled professional would render it obvious.16 sameness-preserving transformations can be compared with the doctrine of equivalents in patent law and ipr management parlance.
a report from the middle innings” (2007) 85texas law review 1628-31, at 1652.
analogously, radix sort is frequently modified, for example, by changing the  order of traversing the characters in the keys and the method of implementing  “buckets”, but these modified radix sorts are still usually  recognised as notable variations rather than entirely new sorting algorithms.
in  current speech it means more generally any sequence of simple actions entailed  in the performance of some more complex task.
quicksort, by default, is not stable, whereas merge sort can be.
hollerith founded the tabulating machine company in 1911,  which merged with some other companies in 1924 to form ibm.
competent programmers therefore try to avoid duplicate work by writing easily reusable code.
2 algorithms, by themselves, are not usually regarded as patentable  “as such” but only when reduced to practical applications in the  form of a computer programme.
these  parameters are brought to bear with the application of the patent-granting or  rejecting “algorithm”, the legal code with inherent elasticity that  establishes the rules governing the appraisal.
[2001] 89california law review 1-58, 24.
unfortunately, and as one would expect, no waterproof method exists for testing  this.
providing powerful (yet understandable and safe) methods of  abstraction and generality is in fact one of the major driving  research questions in programming language design.
[2010] 79 nordiskt immateriellt  rättskydd 1-13; see also references therein in footnote 40.
although there is a current tendency to move away from generic patent claims 4 that exacerbate the problem of insufficient disclosure acknowledged in the usa,5 there remains a wealth of granted patents that disclose in broad terms the functions of a piece of software, but divulge only generically the means to this end.
even if there is no anticipation and the invention  is novel, the invention is not patentable if an imaginary person, having  ordinary skill in the art, would know how to solve the problem to which the  invention is directed, by using the same mechanism.
for example, if the recursive application of quicksort is abstracted to a subroutine which reverts to insertion sort if the array to be sorted is shorter than, say, twenty elements, we have derived an eighth sorting algorithm by reusing two of the seven sorting algorithms already presented in this paper.
when applied to sorting, this paradigm could be applied for example as follows: choose a random value, the pivot, in the array to be sorted.
the permissive approach to accepting broad claims has been partly tested in the usa recently inbilski et al v kappos, under secretary of commerce for intellectual property and director, patent and trade mark office, 561 us supreme court no. 08-964 (28 june 2010), hereafter ‘bilski v kappos’ and its antecedent brethren re nuijten, 500 f.3d 1347 andre comiskey, 554 f.3d 967.
should the  difference nevertheless exist, one of the reasons for the discrepancy lies in  that algorithms are34 patented when they are embedded in a particular  application in a certain field.
we do not claim wikipedia to be the most authoritative source, but it is  either more extensive or more up-to-date than the printed alternatives.
23 u.s. patent no. 4,405,829
in computing, an algorithm more specifically definesa set of precise rules for performing a recursive computation for solving a problem in a finite number of steps.
as mentioned above, short recourse to u.s. practice implies that there has been a trend to employ a relatively high standard of non-obviousness, while the patents that are granted are entitled to broad protection.40 while reliable statistics are not easy to come by, the higher standard has already facilitated more than 100,000 u.s. software patents in 2002.41 the breadth of scope has its own interesting tale to tell.
people also have  a natural tendency to limit the number of items to learn and remember, and  hence tend to cluster or abstract more diverse items into one group as the  number of items increases.
an example of a broad patent can be found in the well-known u.s. grant to the above mentioned rsa public key encryption algorithm, claimed in altogether 40 claims.
therefore a lucky choice of pivot values will lead  to a computational requirement of n + 2*(n/2)
as a near exception, professor michael s paterson et al have  filed the u.s. patent 6,185,220 on a method for laying out sorting networks on  vlsi, but it is unclear whether the actual sorting networks are covered by the  patent.
if (x[j] > x[max]) max =
next, for all buckets containing a nontrivial number of elements we recursively perform the same sorting procedure again but now place the values into subbuckets according the second letter, then the third etc.
this was such a significant variation that its description was published in a peer-reviewed journal in 1981.30 yet the computer science community still regards it as variation of quicksort rather than a new sorting algorithm.
for the sake of argument, however, it may be proposed that the finding of a new algorithm as described in the example above parallels the finding of non-obviousness in the patenting field.
13 see e.g. p virtanen, evolution, practice and theory of european database ip law, (lappeenranta: acta universitatis lappeenrantensis, 2008); p samuelson; j reichman and p samuelson: “intellectual property rights in data?”
the equation is coined after swedish chemist svante arrhenius, who provided a physical justification and interpretation for the formula in 1889.
“cryptographic communications system  and method” (20 september 1983), filed december 1977.
the supreme court had earlier remanded the case to the federal circuit to reconsider the case “in light of bilski”and the federal circuit redecided the case; the supreme court granted petition for a writ of certiorari again on jun 20 2011, no. 10-1150 and the case issub judice.
i; for (j = i - 1; j >= 0; j--)
this work is licensed  under acreative commons licence.
unfortunately, and as one would expect, no waterproof method exists for testing this.
yet arguments for non-equivalence  (in the computer science sense) can in some cases be useful in arguing  dissimilarity of the algorithms.
42 see for example, r thomas, “debugging software patents: increasing innovation and reducing uncertainty in the judicial design of optimal software patent law” (2008), to be published in santa clara computer and high technology law journal.
this subtle change from partitioning when breaking up to merging when combining leads changes the resulting algorithm from quicksort to merge sort.
a subtler change in output, for example the stability of sorting – whether the sorting algorithm preserves the relative order of equal values – can, however, be a distinguishing factor.
if the algorithm of the inventor is judged between  themselves to be more similar to one of the prior algorithms than the existing  algorithms, then the algorithm of the inventor would not be judged as  sufficiently non-obvious.
in insertion sort the  basic idea is to take the first value in the input array, insert it into the  correct position in the output array, and repeat these steps for the remainder  of the input array until no more input elements remain.
the broad scope  for patenting software currently implies that not only computer programmes but  also the underlying algorithms may be patented, and this makes the discourse  noteworthy.
this has also been suggested by a chin “computational complexity  and the scope of software patents” (1998) 39jurimetrics journal 17-28.
a  variation of it was patented for the punched card sorting machines of herman  hollerith in 1889.
36 r merges and r nelson, “on the complex economies of patent  scope” (1990) 90columbia law review 839, at ii and iii. 37
in fact, association of the output of one algorithm with the input of another is the standard method of composing algorithms into larger algorithms and eventually into programmes, regardless of whether the association is accomplished through ordinary function calls, shared memory, a middleware of some sort, or a network connection and explicit encoding to a data exchange protocol.
we start with the perspective of a computer scientist, and then compare this with the extant legal concepts and a short outline of the relevant legal doctrine.
“designing optimal software patents”, in: r hahn (ed),intellectual property rights in frontier industries; software and biotechnology (aei press, 2005), chapter 4.
on logical designs, see egsun java enterprise system deployment planning white paper at: http://download.oracle.com/docs/cd/e19263-01/817-5759/log_architect.html 11 for different models and stages of software engineering and development , see e.g. “software process models”, available at http://www.the-software-experts.de/e_dta-sw-process.htm (accessed 19 july 2011).
a classic example, and an illustration as to how inventions build on each other, is the following amalgam of inventive applications of previously known algorithms from computer science: the use of discrete fourier transform21 for efficient multiplication of large integers,22 in modular exponentiation, and to construct a public-key cryptography protocol.23
it is perhaps useful first to discern what is actually happening, instead of proceeding on the basis of the perceived patent protection of computer programmes.
this has also been suggested by a chin “computational complexity and the scope of software patents” (1998) 39jurimetrics journal 17-28.
as mentioned above, short recourse to u.s. practice implies that there has  been a trend to employ a relatively high standard of non-obviousness, while the  patents that are granted are entitled to broad protection.40 while reliable  statistics are not easy to come by, the higher standard has already facilitated  more than 100,000 u.s. software patents in 2002.41 the breadth of scope has its  own interesting tale to tell.
as the output of the algorithm one might also regard the memory consumption  and computing time.19
dissimilarity in the underlying idea we have argued above that despite “trivial” and mechanical  changes, either to theimplementation of the algorithm in a programming  language or in theidea of the algorithm, the identity of the algorithm  is retained.
it is also possible however that a device, even though it falls within the  literal description of a claim of patent, to perform the same or a similar  function as the patented device but in a way that is substantially different.
in sorting algorithms two aspects would immediately be generalised by any  competent programmer: the type ofvalues to be sorted and the code that  performs the comparison.
one may further ask whether the same should apply  with equal strength to the process of accepting patent applications.
we then reserve one bucket for each distinct character and  with one pass through the values to be sorted we can place all values which  begin with character 'a' into the bucket for characters 'a', values which begin  with 'b' to the bucket for 'b's, etc.
in subsequent chapters we will address individual arguments, and some non-arguments, that could be presented in support of the sameness or distinctness of two given computer algorithms.
a computer scientist or software engineer can instantiate a readily generalised sorting algorithm to sort, for example, names of people in a few seconds of typing.
sol3/  papers.cfm?abstract_id=261400, which provides, in part, a slightly divergent  view concerning patents overall, and an ample list of references at footnote 1.
a variation of it was patented for the punched card sorting machines of herman hollerith in 1889.
in the context of the consideration of similarity of computer algorithms, a  matter that has perhaps obfuscated the patentability discourse within the legal  spheres deserves attention.
during the patent prosecution phase, a patent examiner first compares and evaluates, on the basis of his or her experience, the patent application and its specification38 with the description, claims and references together with the information available from the supporting databases and arguments brought forward by the inventor and patent agent or attorney.
sameness-preserving transformations we will use as our running example the domain of sorting an array of values  into ascending order.14
as with a hand of playing cards, the input and output arrays can be made to  occupy the same physical array.
a recipe for baking a cake, which involves a sequence of steps (adding ingredients, mixing, and heating), for example, constitutes an algorithm.
this is of course a very rough sketch of the general idea, since these are some of the core concepts of patentability.
scripted (2006) 3 scripted (2007) 4
in computing, an algorithm more specifically  definesa set of precise rules for performing a recursive computation for  solving a problem in a finite number of steps.
since n  multiplications require time proportional to n and dft and inverse dft require  time proportional to n log n, this results in an efficient algorithm for  multiplying large polynomials and integers.
in quicksort the linear-time array partitioning work is performed when  breaking up the problem into smaller subproblems and no work needs to be done  when combining the solved subproblems into a sorted original array.
the oldest known data structure is thearray.
12 see eg p virtanen, “the emperor’s new clothes: determining  thesubject-matter of software patents”
these parameters are brought to bear with the application of the patent-granting or rejecting “algorithm”, the legal code with inherent elasticity that establishes the rules governing the appraisal.
programming languages are frequently accompanied by standardlibraries which may provide tens of additional data structures and the internet and scientific literature can be consulted for thousands more.
for sufficiently large n this is less than the  quadratic computing time required by the elementary sorting methods.
a report from the middle  innings” (2007) 85texas law review 1628-31, at 1652.
that was an  informal and arguably incomplete description of selection sort; its  implementation in a programming language provides a more formal description.
this sorting algorithm has been used by postal services for ages.
as a near exception, professor michael s paterson et al have filed the u.s. patent 6,185,220 on a method for laying out sorting networks on vlsi, but it is unclear whether the actual sorting networks are covered by the patent.
computer science, software engineering and law have slightly different perspectives, inherent to each respective paradigm, on the patentability of software and of underlying algorithms.
the outer limits of the scope of patentability, relevant in the software  and algorithm context, come from general exclusions to patentability, provided  by article 52(2) and (3) in the european patent convention (epc).
computer science, software engineering and law have slightly  different perspectives, inherent to each respective paradigm, on the  patentability of software and of underlying algorithms.
we have attempted to present the two standpoints, and illustrate the possible differences with a view to increasing the understanding of the interplay between the two.
in a sense,  patent law gives the applicants a certain freedom of discretion to define the  scope of their claimed invention, provided the mentioned exclusions do not  apply, and the application is sufficiently disclosed.
this applies to europe, where article 52 of the 1973 european patent  conventionexpressis verbis mentions that computer programmes are only  non-patentable to the extent that an attempt is made to patent a computer  programmeas such.
for the sake of argument,  however, it may be proposed that the finding of a new algorithm as described in  the example above parallels the finding of non-obviousness in the patenting  field.
30 d motzkin, “a stable quicksort” (1981) 11 software – practice and experience 607-611.
in software patenting, understood broadly, algorithms, data structures,  protocols, software architectures and designs have in practice been granted  patents.
17 j marr, “foreseeability as a bar to the doctrine of  equivalents” (20 may 2003), available at:http://ssrn.com/abstract=410027  (accessed 19 july 2010); w long, “united states doctrine of equivalents:  where we now stand” (2007) available at: http://www.buildingipvalue.com/07us_can/p.127-130%20sutherland.pdf (accessed 19  july 2010).
in the context of patenting, the patentable subject-matter is habitually referred to as the computer programme or, more generically as software.
therefore a lucky choice of pivot values will lead to a computational requirement of n + 2*(n/2) + 4*(n/4)
it exhibits similar  performance characteristics as quicksort, but the computer science community  again considers it a new sorting algorithm in its own right.
a computer scientist or  software engineer can instantiate a readily generalised sorting algorithm to  sort, for example, names of people in a few seconds of typing.
n log2 n comparisons or swaps.
at the level of language, the epc speaks only of patent application  including then,inter alia, the description and claims together with  possible drawings, eg uk and u.s. law uses word specification to cover the same  aspects.
further,  chapters 5 and 6 discuss the criteria for considering algorithms, and their  variations and applications, as novel or non-obvious given the current state of  the art.
j; tmp = x[max]; x[max] = x[i]; x[i] = tmp; } a software engineer comparing this to the original code, especially the structure of their iterations, may wish the comfort of more than a few seconds to verify that these codes indeed perform the same thing and do so essentially by employing the same algorithm.
flowcharts and detailed  descriptions of the patented programmes, let alone source code or object code,  are often absent.6 the protectable subject-matter may not therefore be the computer programme  or its subroutines, as sometimes implied by statutes7 and academic literature.
the claim inmorse29 was also rendered void on this basis.
please click on the link to read the terms and  conditions.
it must also consider the contemporary  sophisticated practices of software engineers and computer scientists who  develop and implement algorithms as part of the establishment ofprior art.
whereas  mathematicians store an unbound number n values in a variable indexed through  subscripting x1, x2, ..., xn, a software engineer writing c or java would use  an array x[0], x[1], …, x[n-1].
these views meet in the practice of patenting and related litigation.
by the same token, an evaluation is based on patent documents, witnesses, expert witnesses, other admissible evidence, presentations of the parties involved etc as input, together with relevant legal rules for determination of an infringement or related validity contest.
this also concludes our exposure  to source code.
during the patent prosecution phase, a patent examiner first  compares and evaluates, on the basis of his or her experience, the patent  application and its specification38 with the description, claims and references  together with the information available from the supporting databases and  arguments brought forward by the inventor and patent agent or attorney.
consequently, the next question that arises is whether the criterion of non-obviousness as understood among software engineers and computer scientists is different from that applied by patent engineers and managers who determine the ideas that enter the patenting process.
notice the subtlety: we changed the search from the selection of the correct value to a search for the correct place to insert.
the similarity or distinction of two algorithms therefore assumes a dominant role when a patent infringement dispute or the issue of novelty or obviousness arises.
whether the broad scope of patentability and the proliferation of granted patents is a good or bad thing, is a different question.
we start with the perspective of a computer scientist, and then compare this  with the extant legal concepts and a short outline of the relevant legal  doctrine.
if the n points given to the dft are coefficients of polynomials or digits of large integers, then the pairwise product of the transformed points corresponds to the multiplication of the polynomials or integers.
13 see e.g. p virtanen, evolution, practice and theory of european  database ip law, (lappeenranta: acta universitatis lappeenrantensis, 2008);  p samuelson; j reichman and p samuelson: “intellectual property rights in  data?”
25 diamond v diehr, 450 u.s. 175 (1981), at iii; the case cites numerous other cases and the discourse has not abated ever since, the current usscbilski v kappos case evincing this.
scripted enter your email address: delivered by feedburner kenneth oksanen, perttu virtanen, eljas soisalon-soininen, jukka kemppinen* download options whether two algorithms - described abstractly in a document or employed concretely in, for example, a computer programme - are ‘the same’ or different from one another, may be a crucial determination in certain legal disputes.
by this argument one could show, for example, that none of selection sort, quicksort and radix sort can be similar to each other.20 similarly, quicksort is evidently different from mergesort because an unfortunate choice of pivot elements causes quicksort to assume a quadratically growing computing time whereas mergesort can be guaranteed to consume never more than time proportional to n log n. furthermore, one can argue that selection sort and insertion sort must be different algorithms since insertion sort can process a readily sorted input array in time linearly proportional to n whereas selection sort always requires time proportional to n2.
in its abstract formulation, the sorting operates through a series of arithmetic operations that are mathematical but the sorting algorithm can subsequently beapplied to many different ordering tasks, starting from alphabetic ordering and proceeding to numerous everyday and professional or industrial sorting operations in which the underlying mathematical principle is more distant from the relevant, concrete task such as sorting letters in mail, scheduling flights, or indexing a book.
one such way to implement insertion sort is  given below: for (i = 0; i = 0 &&  x[j - 1] > v; j--) x[j] = x[j - 1]; x[j] = v; } for sake of completeness, and to facilitate further debate, we include a  third elementary sorting method, bubblesort.
the discovery of applicability of the algorithm and various preparatory and subsequent steps could easily however result in a non-obvious idea.
this  unfortunate overloading of the term must, however, not be confused with the  consideration of equivalence of claims and description deriving from the  algorithm in the software patenting context.
hollerith founded the tabulating machine company in 1911, which merged with some other companies in 1924 to form ibm.
recall that the basic idea of selection sort (on arrays) is to find the  minimum value of the array, swap it with the first value in the array, and  repeat these steps for the remainder of the array, etc.
in the case of quicksort, a doubly linked list will be needed, but consequently quicksort can also be made stable.
43 see note 41 above.
we can provide justifications  for some of these arguments, but in many cases they merely encode what we - as  practitioners and educators in computer science and software engineering -  consider to be obvious to a person having ordinary skill in the art.
even if a claim as literally read includes the impugned thing, claims are limited by construction to cover the invention disclosed in the patent and to exclude a thing which is different from the disclosed invention.
rather, the core of the patentable invention often8 consists of algorithms,  understood broadly, along with their practical implementation couched (to  obtain the grant and maximum protection) in terms of ‘systems’,  ‘methods’, ‘devices’, ‘products’ and the  like.
while bringing generality to an algorithm may involve varying levels of innovation, the reverse process of specialisation (instantiation) of a given generalised algorithm is usually considered trivial.
this domain has the virtue of being easy to describe,  requires modest programming skills, and is rich with analogues in everyday  life, yet sufficiently complex to be solved by a large number of different  algorithms.
this domain has the virtue of being easy to describe, requires modest programming skills, and is rich with analogues in everyday life, yet sufficiently complex to be solved by a large number of different algorithms.
29 see note 24 above, at 117-121.
this extension to the literal infringement of the patent is limited to trivial or insignificant changes, just as the set of sameness-preserving transformations discussed in this section.
while such designs can have significant practical  value, such amalgamate algorithms are rarely considered non-obvious.
the supreme court found the claim to be too broad, drawing a parallel with the case of a patent of a mere principle, and thus inadmissible.
36 r merges and r nelson, “on the complex economies of patent scope” (1990) 90columbia law review 839, at ii and iii. 37
in patent law and practice, the similarity of objects has a bearing on two important premises for patentability: novelty and the existence of an inventive step, or in other words, non-obviousness.
although there is a current tendency to move away from generic patent claims 4 that exacerbate the problem of insufficient disclosure acknowledged in the  usa,5 there remains a wealth of granted patents that disclose in broad terms  the functions of a piece of software, but divulge only generically the means to  this end.
the main focus of  this paper is that the algorithms underlying computer programmes are the focal  point of discourse on patentability of computer software.
also available at ssrn: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1126450 (accessed 19 july  2011), at 4.
on various forms of ip protection available for software, see eg g mowery: “intellectual property protection in the u.s. software industry” in: w cohen and s merill (eds),patents in knowledge-based economy (washington, d.c.: national academy press, 2003) at 7-5.
the fast fourier transform (fft) is an algorithm for computing the dft in time proportional to n log n. such an algorithm was apparently first discovered by the famous mathematician carl friedrich gauss in 1805, but usually it is attributed to j cooley and j tukey, "an algorithm for the machine calculation of complex fourier series" (1965) 19mathematics of computation 297–301.
after the execution of the legal  “algorithm” a judgment is passed.39 these descriptions are, of  course, incomplete and provided here as a rough outline of the relevant  procedures.
exempli gratia, a patent search directed at over seventy authors referred to as inventors of new sorting algorithms,31 found that no one had filed a patent on the ideas they had published, either through academic channels or on the internet.32 this suggests the limit of non-obviousness in patenting and the (academic and computer science related) treatment of two algorithms as the same are not identical issues.
by breaking the compared values into parts, however, one can  sort even faster.
lindholm, “marking the software patent beast” (2005); also available athttp://ssrn.com/abstract=642123 (accessed 19 july 2011), 18; j cohen and m lemley, “patent scope and innovation in the software industry”
the similarity or  distinction of two algorithms therefore assumes a dominant role when a patent  infringement dispute or the issue of novelty or obviousness arises.
notice the subtlety: we  changed the search from the selection of the correct value to a search for the  correct place to insert.
it has been shown mathematically that no sorting algorithm based on  comparing entire values can be faster than quicksort or merge sort by more than  a constant factor.
31  http://en.wikipedia.org/wiki/sorting_algorithm and pages referred from  there.
i; for (j = i - 1; j >= 0; j--)  if (x[j] > x[max]) max =
analysing the number of operations would show that the number of operations depends linearly on the product of the number of values and on the number of characters that form the (longest) value.
12 see eg p virtanen, “the emperor’s new clothes: determining thesubject-matter of software patents”
this is presented in the setting of general purpose computers.
much effort has gone into the inquiry as to what belongs to  these categories and what does not.27 another set of limitations upon the scope of the claims is found in the  requirement of sufficient disclosure already mentioned above,28 which in  practice often has the effect of reducing the scope of the patent application.
if these experts can within, say, an hour of discussion present solutions close to those of the inventor, then a sufficient level of non-obviousness has clearly not been reached.
9 thus, in principle, when an algorithm is implemented in a computer  programme, the actual programme, whether in source or object code, together  with supporting documentation, is protected by the copyright, while the  functional idea of the algorithm underlying the programme remains in the realm  of patent law.
a positive answer to the above question would raise a contradiction.
this applies  particularly in the software industry that has often been characterised, as  mentioned above, as cumulative, incremental and competitive or co-petitive  instead of relying on discrete inventions and stand-alone products building  upon them.36 7.
as the importance of the courts and particularly that of cafc42 is widely recognised in the determination of actual patent scope, the language of the claim has been allowed to prevail at a high level of abstraction when the software invention has been disclosed.
the final sorted array is obtained by concatenating all the  buckets.
varying the comparison function  not only corresponds to the change in type, but can also counter for whether  the resulting order is ascending or descending, whether certain characters  (such as 'u' and 'ü') should be treated as equal, or whether parts of the  value should be ignored.
the fast fourier  transform (fft) is an algorithm for computing the dft in time proportional to n  log n. such an algorithm was apparently first discovered by the famous  mathematician carl friedrich gauss in 1805, but usually it is attributed to j  cooley and j tukey, "an algorithm for the machine calculation of complex  fourier series" (1965) 19mathematics of computation 297–301.
intellectual property law, (oxford:  oup, 2009), at 333; r schechter and j thomas,schechter and thomas’ intellectual property:
25 diamond v diehr, 450 u.s. 175 (1981), at iii; the case cites  numerous other cases and the discourse has not abated ever since, the current  usscbilski v kappos case evincing this.
by generalising the type the very same code (and consequently the same algorithm) is able to sort integers, strings, names of people, phone numbers, dates, addresses, etc.
this paper has presented a number of arguments that a computer scientist might use to argue that two given algorithms37 are two different algorithms or such trivial variations of the same algorithm that the variation falls below expected competence of a contemporary software engineer or computer scientist.
some empirical evidence”  (2009)epip conference paper, available at:  http://www.epip.eu/conferences/epip04/files/moir_hazel.pdf (accessed 19 july  2011).
“cryptographic communications system and method” (20 september 1983), filed december 1977.
at the level of language, the epc speaks only of patent application including then,inter alia, the description and claims together with possible drawings, eg uk and u.s. law uses word specification to cover the same aspects.
n log2  n comparisons or swaps.
repeat the above two steps  recursively to the subarrays until they contain at most one element (or as an  optimisation, until selection or insertion sort becomes an efficient sorting  algorithm for the subarrays).
this is roughly the underlying idea of quicksort,  invented in 1960.18 it turns out that the two first steps, also called  partitioning of the array, can be performed in time linearly proportional to  the size of the (sub)array.
for more detailed treatment of the inventive step and non-obviousness, see e.g. l bently and b shermann.
in mathematics, the fourier transform converts a cyclic function to its  frequency and phase components.
15 t cormen, c leiserson, r rivest and c stein, introduction to algorithms (massachusetts institute for technology press, 2009), now in its third edition, is probably the most popular and most commonly cited introductory book on the theme of algorithms.
we have attempted to present the  two standpoints, and illustrate the possible differences with a view to  increasing the understanding of the interplay between the two.
the practice in patenting is slightly different.
it is possible that a patent application may be drawn narrowly  enough that it crystallises into an actual computer programme, and such  applications do exist.
a recipe for baking a cake, which  involves a sequence of steps (adding ingredients, mixing, and heating), for  example, constitutes an algorithm.
people also have a natural tendency to limit the number of items to learn and remember, and hence tend to cluster or abstract more diverse items into one group as the number of items increases.
consequently, there is no reason why the very same sorting algorithm could not sort the appendix of references in a book, a row of integers in lotto, or the chronological schedule of departing flights on the airport.
[1997] 50vanderbildt law review 51-166.
that was an informal and arguably incomplete description of selection sort; its implementation in a programming language provides a more formal description.
34 or rather should be provided the doctrine on tying the invention to the concrete application prevails also in practice.
rather, the core of the patentable invention often8 consists of algorithms, understood broadly, along with their practical implementation couched (to obtain the grant and maximum protection) in terms of ‘systems’, ‘methods’, ‘devices’, ‘products’ and the like.
intellectual property law, (oxford: oup, 2009), at 488-506; an interesting study from australian standpoint is h moir, “how high is the inventive step?:
flowcharts and detailed descriptions of the patented programmes, let alone source code or object code, are often absent.6 the protectable subject-matter may not therefore be the computer programme or its subroutines, as sometimes implied by statutes7 and academic literature.
the correct  subject-matter10 is the underlying algorithms or sometimes even logical designs 11 that may cover tens of different types of software as eventually implemented  in a given computer programme.
we readily admit that we do not know whether sorting, or  “producing a totally ordered multiset”, as a mathematician might  call it, would be a mathematical algorithm in the eyes of the us supreme court  as ingottschalk v benson, see note 1 above.
in the original eighth patent claim one samuel morse claimed any use of electromagnetism for printing intelligible signs, characters, or letters at a distance.
yet, as selection sort is usually described in  the computer science literature, little doubt of that should exist.
if the n points given to the dft are coefficients of polynomials or  digits of large integers, then the pairwise product of the transformed points  corresponds to the multiplication of the polynomials or integers.
march 29-31, 2009 university of edinburgh (2004) 1
this also concludes our exposure to source code.
080211.138 © kenneth oksanen, perttu virtanen,  eljas soisalon-soininen, jukka kemppinen 2011.
such disputes will range from trade secret thefts or copyright violations to the determination of the scope of a patent,1 which is the legal focus of the current paper.2 the court responsible for such a decision must find a balance between protection of the intellectual property rights of the claimant on the one hand, and avoidance of a false judgment against the innocent respondent on the other.
most programmes, however, are not protected directly.
of course, two algorithms can be considered merely trivial variations of  each other even if their output would be different.
they then judge which algorithms are most  similar to one another.
move all values smaller than the pivot to the beginning of the array and all values larger than the pivot to the end of the array.
“designing optimal software patents”,  in: r hahn (ed),intellectual property rights in frontier industries;  software and biotechnology (aei press, 2005), chapter 4.
the use of psychometric tests in the appraisal of patentability of an algorithm and/or the implementing computer programme, or the validity of an existing software patent, must be evaluated against the backdrop of whatever is in current use.
one may further ask whether the same should apply with equal strength to the process of accepting patent applications.
see a schönhage and v  strassen, "schnelle multiplikation großer zahlen", (1971) 7
current issue | upcoming issue | archived issues | submission guidelines | author | artist | book reviewer books for review | editorial board | cover gallery | announcements | useful links | sponsors | conference governance of new technologies: the transformation of medicine, information technology and intellectual property an international interdisciplinary conference hosted by scripted.
on logical designs, see egsun java enterprise system deployment  planning white paper at:  http://download.oracle.com/docs/cd/e19263-01/817-5759/log_architect.html 11 for different models and stages of software engineering and development , see e.g. “software process models”, available at http://www.the-software-experts.de/e_dta-sw-process.htm (accessed 19 july 2011).
*kenneth oksanen, lic.
an alternative application of divide and conquer would be to perform no work in breaking up the array but instead perform a linear-time subarray merging when combining the sorted subarrays into the whole sorted array.
the broad scope for patenting software currently implies that not only computer programmes but also the underlying algorithms may be patented, and this makes the discourse noteworthy.
communications of the acm (1961) 4(7), 321-322.
while at the infancy and pioneer stages of an industry one sees patents with broad scope, patenting does not taper off later.
40 d burk and m lemley.
for sufficiently large n this is less than the quadratic computing time required by the elementary sorting methods.
the use of psychometric tests in the appraisal of patentability of an  algorithm and/or the implementing computer programme, or the validity of an  existing software patent, must be evaluated against the backdrop of whatever is  in current use.
an  alternative application of divide and conquer would be to perform no work in  breaking up the array but instead perform a linear-time subarray merging when  combining the sorted subarrays into the whole sorted array.
since n multiplications require time proportional to n and dft and inverse dft require time proportional to n log n, this results in an efficient algorithm for multiplying large polynomials and integers.
the discrete fourier transform (dft) performs the same on a finite number n sampled points of the function.
divide and conquer is a frequently used paradigm for deriving algorithms.
computer scientists and software engineers may colloquially call two algorithms equivalent if they produce the same output for the same input, possibly with attention also to the required memory and computing times.
assuming the physical devices were readily available, s/he will regard the sorting of a deck of cards or a herd of cattle according to weight as equally obvious, void of any inventive step.
the discrete fourier transform (dft) performs  the same on a finite number n sampled points of the function.
in its abstract formulation,  the sorting operates through a series of arithmetic operations that are  mathematical but the sorting algorithm can subsequently beapplied to  many different ordering tasks, starting from alphabetic ordering and proceeding  to numerous everyday and professional or industrial sorting operations in which  the underlying mathematical principle is more distant from the relevant,  concrete task such as sorting letters in mail, scheduling flights, or indexing  a book.
some of these are classics in computer science that are included in all university-level curricula of computer science and software engineering.15
it is possible that a patent application may be drawn narrowly enough that it crystallises into an actual computer programme, and such applications do exist.
in some cases, forms of abstraction may require deeper modification than  occurs through changes to a few lexical items in the code that implement the  algorithm.
instead patents become more numerous and increasingly  narrow in scope, provided that the demand for products and services produced  induces the research and development efforts to this end.
the arrhenius equation is a simple and markedly accurate formula for the temperature dependence of the rate constant, and consequently to the rate of a chemical reaction.