dbg it would be jdk/build/*-debug the variant builds leave results in a completely separate outputdir.
if mistakes are rampant within the code, then i must find them.
i had a preliminary interview with the head architect which went extremely well, and i was called in a few days later for an interview with the other three guys on the architecture team.
i than used the '--traceback' option to "hg" which told me that the error was in keepalive.py:/share/software/openjdk> hg --traceback
kelly might, but i suspect there's a lot of built-up cruft from over the years that they'd like to start paring down.
my gut instinct tells me that the rich client app would be more secure, but only because using the binary rpc/messaging toolkit obfuscates the wire traffic enough to dissuade the 'casual' attacker, not because it's inherently more secure.
other enemies are not to be tolerated at any level: apathy, sloth, or ignorance are all too common among developer teams.
my guess is that this is also conflating the differences between "features" and "releases", since they aren't always one and the same, and that not all "features" will be ones mandated by the customer (making #6 somewhat irrelevant).
now in order to say that software evolves, you'd have to accept that your development process goes something like this: developer opens a file at random, positions the cursor at random, punches a few keys at random.
demanding this of your developers means they are forced to educate themselves, and forced to raise their own awareness of the changing world.
those who do would be seeking evidence to support a position that is equally untenable, that unit-testing is somehow "wrong" or unnecessary.
giving users a good, solid user experience.
node.js feels like an attempt to reinvent the app server, but if you look back far enough you see that the app server itself was reinvented once (in the java world) in spring and other lightweight frameworks, and before that by people who actually thought to write their own web servers in straight java.
at other places, the architect (or "architect team") was a group of developers who had to be promoted (usually due to longevity) with no clear promotion path available to them other than management.
the reason for our declaration of impotent implementation, of course, was, as this post states so well, a zen-like celebration of our inadequacies: to be a great programmer, you must admit that you are a terrible programmer.
see, the software itself doesn't evolve randomly, but the users' interactions with the software do.
new platforms and whizbangs are targeted.
since (as many past attendees will tell you) my slides are generally not the focus of my presentations, i realized that my slide-building needs are pretty modest.
in particular, i want: so far, this is pretty simple stuff.
thus, do i swear by, and encourage others to similarly adopt, the oath of the conscientious programmer: i swear to fulfill, to the best of my ability and judgment, this covenant: i will respect the hard-won scientific gains of those programmers and researchers in whose steps i walk, and gladly share such knowledge as is mine with those who are to follow.
hold brown-bag lunches once a week to talk about new technologies, and their poential impact on the team or company or project.
although michael's personal experience stems mostly from the java space, the lessons and stories he offers up are equally relevant to java, .net, c++, ruby, php, and any other language or platform you can imagine.
it's basically relying on articles on popular websites and magazines to do your thinking for you.
thus, it’s actually pretty reasonable to imagine a simple f# driver that opens the xml file, parses it, and uses what it finds there to drive the creation of slides.
my job... - ... is to test this tool -- ... is to show you enough android to make you dangerous --- ... because i can't exhaustively cover the entire platform in just one conference session
as people and problems that stand in your way, who represent what you loathe, oppositions to react against, they are a source of energy.
this enemy won't ever try to storm your cubicles and kill you or try to hold you for ransom, but a lot of the strategies that greene talks about aren't so much about how to kill people, but how to think strategically, which is, to my mind, something we all of us have to do more of.
even if i misremember that number, and it is off by an order of magnitude--7 bugs instead of 70--the implication remains clear:simple usage cannot reveal all bugs.
more people die every day from automobile accidents than from terrorism.
i love this format--it helps cut through the b/s and get to the point.
therefore, i will seek the best support i can find in helping me find the mistakes in my code."
(update: kelly mentions, "be careful putting cygwin before vs2003 in the path, cygwin has a link.exe and so does vs2003, you need the one from vs2003.")
it's not at all uncommon to walk into a microsoft developers' office and see multiple cpus (under desks, in corners, laptops, and so on) and monitors all over the room.
i will show you the (barebones) tools ----- ...
don't avoid these people, for they offer you opportunities to better yourself and your understanding.
but now she had to rule, and as she continued down her obstinate, all-in style of "radicalism" politics, she seemed to gain more enemies than any one politician could hold off.
note that certain paths may be reported as warnings and yet the buld will still succeed, that's ok, as far as i can tell.
(i thought about doing it in schema, but this seemed geekier... and easier, given all the angle-brackets xsd would require. )
by the way, if you're not receiving crypto-gram via email or rss, you are seriously at risk of writing insecure apps.
note that i'm behind a firewall, but mercurial correctly picked up my http proxy from the "http_proxy" environment variable!
in the latter, the battle has just begun, and the market remains firmly in the hands of the ipod, but let it not be forgotten that microsoft is not one to retreat quickly from a battle.
plus, yes, it’s nice to draw a regular bimonthly paycheck and benefits after being an independent for a decade or so.
like all .net languages, f# can drive office just as easily as c# can.
every developer gets his own office.
if i cannot write code that has no mistakes, then i must assume that mistakes are rampant within the code.
the opinions expressed herein are my own personal opinions and do not represent my employer's view in any way.
keep a sharp eye out, so that once spotted, they can be identified, analyzed, and handled.
it could affect a lot of organizations and users.' "... anyone using the java runtime environment or java development kit is at risk.
in fact, i’m doing an average of 10 or so talks at the nfjs shows alone.
despite the distance--the falklands were almost diametrically opposite the globe from the british home islands, off the tip of south america--thatcher never hesitated, dispatching the british armed forces to respond to the incursion with deadly force, and the argentinians were beaten.
now it may just so happen that the result of the mutation is beneficial to the reproductive success of the organism, meaning we’d expect to see creatures with such a trait outperform others without it.
software is endless battle and conflict, and you cannot develop effectively unless you can identify the enemies of your project.
i, ted neward, so solemnly swear.
even fatigue is an enemy: microsoft buildings have video game consoles, foosball tables, bean bag chairs, and more tools of relaxational activities to help the developer take a break when necessary, so that they can resume the fight refreshed.
and like so many software security problems, programmers need to understand the security implications of their work so they can mitigate the risks they face.
in so doing, we harm our own soul—and this is one of the reasons why we shouldn’t return nastiness with more of the same.
as a first cut, i want to work from a format like the following:  busy java developer's guide|to android:basics this is the abstract for a sample talk.
there's some environment variables that tell the build script where to find things, and we have to point out those things, like compiler location and such.
i will take that help in the form of unit tests that i force myself (and others around me force myself) to write.
the feature's impact on capacity is well-understood.
the attack is possible because web browsers don't protect javascript the same way they protect html; if a web application transfers confidential data using messages written in javascript, in some cases the messages can be read by an attacker.
(specfically, sun builds a tool just to see if the code compiles; if it fails to compile, chances are you forgot to set this flag.
feeling wronged or victimized is equally futile.
thus, one of the first places to start is with an f# type that does this precise workflow: type pptgenerator(inputpptfilename : string)
my responsibility includes these related problems, if i am to care adequately for those who are technologically impaired.
were i to offer my own, it would be like so: writing a book is like having a child.
i'm pretty sure it's the first type of attack that specifically targets ajax code.
this approach will be no different: i want a class that will open a “template” ppt, modify the heck out of it, and save it as the new ppt.
enum q { no, bad, little, flakey, untouchable }; enum technology { c, c++, java, c#, c++/cli, vb 6, vb 7, vb 8, fortran, cobol, smalltalk, lisp, ... }; problem: { } returning requirement:} returning requirement: - legacy codebase ( 1> years old, 1000> lines) - no tests - test data - knowledge transfer from the original development team - environment to run the application in.
- it has passed unit, functional, integration, stress, longevity, load, and resilience testing.
although the world is more competitive than ever, outward aggression is discouraged, so people have learned to go underground, to attack unpredictably and craftily. ...
frankly, if i were mr. tung's editor, this drivel would never have been published.
note that the "build" directory is completely built from scratch, so if you get a partial build and want to start over from scratch, just "rd /s build" from the jdk7 directory.
first i thought i got something wrong during the installation of the forest extension.
hell, i'd even bet that on september 11, 2001, more people died from automobile accidents that day than from the twin towers attack.
if it's a successful build, you'll have "stuff" in the c:\prg\openjdk\jdk7\build directory, corresponding to the kind of build you kicked off; for a "fastdebug" build, for example, there'll be a "windows-i586-fastdebug" directory in which you'll find a "j2sdk-image" directory in which thereshould be a complete jdk environment.
any vulnerability that can somehow strike across every jvm ever written (according to the article above) must be some kinda doozy.
i will remember that i do not create a report, or a data entry screen, but tools for human beings, whose problems may affect the person's family and economic stability.
it may seem incongruous to draw parallels between war and software development, because in war there is an obvious "enemy", an obvious target for our aggression and intentions and strategies and tactics.
in a four-man team, this means that each developer will have a month in which to find something new to discover, analyze, discuss and present.
greene notes further, there are always hostile people and destructive relationships.
and microsoft management itself has declared war on its enemies, time and again, looking to eliminate any and all opposition the successful release of software.
and this knowledge is not about how to be more forceful in getting what we want or defending ourselves but rather how to be more rational and strategic when it comes to conflict, channeling our aggressive impulses instead of denying or repressing them.
but before i immediately dive into creating slides, one of the things i want my slide decks to have is a common look-and-feel to them; in some cases, powerpoint gurus will start talking about “themes”, but i’ve found it vastly easier to simply start from an empty ppt deck that has some “slide masters” set up with the layouts, fonts, colors, and so on, that i want.
we delivered early, within budget, the client got what he wanted, and we got a few million dollars worth of work out of it.
to be honest, i get this sense that across the entire industry right now, there’s a sort of malaise, a general sort of “bah, nothing really all that new is going on anymore”.
do what's right for them, even if it's not the easy thing to do, even when they don't think they need it (such as the incapcitated friend in the quiz), and you can never go wrong.
we can neither reject the necessitary of unit testing any more than we can the beneficence of static analysis tools; each is, in its own way, incomplete in its ability to prove code correct, at least in current incarnations.
having to know the business, the technology at a high and low level of detail, keeping your hands in the code, and watching the horizon for new developments in industry, is a pretty good way to burn out any free time you might have thought you'd have.
i will actively seek to avoid problems that are time-locked, for i know that software written today will still be running long after i was told it would be replaced.
you get angry: this is yourbaby they are attacking.
it's amibtious, but as the ancient american indian proverb is said to state,if you aim your arrow at the sun, it will fly higher and father than if you aim it at the ground.
there are those who outwardly play the team game, who act very friendly and agreeable, but who sabotage us behind the scenes, ues the group to promote their own agenda.
[.] abort: error: name or service not known that was not amusing.
$openjdkpath/jdk7/jdk/make/jdk_generic_profile.sh # need gnu make in front of cygwin's; this is the only practical way to do it # path=$openjdkpath/bin:$path export path # let people know this is an openjdk-savvy prompt # export ps1='openjdk:\[\e]0;\w\a\]\[\e[32m\]\u@${computername}:\[\e[33m\]\w\[\e[0m\]\n\$ '
it turns out, however, that the "enemy" in software development is far more nebulous and amorphous, that of "failure", which can be just as tenacious and subversive.
i’m even more tickled that i was instrumental in bringing steven “doc” list in, to bring his agile experience and perspective to our projects nationwide.
naturally, i invite comment and debate; in fact, i'd really encourage it, because i'm not going to promise that these are 100%-polished ideas or concepts, at least as how they apply to software.
(naturally, developers must be given time to do this research; anecdotally, giving them friday afternoons to do this experimentation and research, when energy and interest in the work week is already typically at an ebb, works well.)
at least this is one area where microsoft is (maybe) putting the fatted sacred cow to the butcher’s knife, with their metro ui moves in windows 8… but only up to a point.
the effect of this on the strength of the unit-testing argument cannot be understated--if the quality of dynamic-language-authored code rests on the exercise of that code under constrained circumstances in order to prove its correctness, then we have a major problem facing us, because the interleaving of execution paths that define concurrency bugs remain beyond the ability of most (arguably all) languages and/or platforms to control.
given that it’s (mostly) an xml document, it’s not that hard to imagine the xml parsing parts of it.
i figured, in the grand traditions of “itch-scratching”, to try and solve it.
the authors show that many popular ajax programming frameworks do nothing to prevent javascript hijacking.
enemies give us something against which to measure ourselves, to use as a foil against which to better ourselves.
they decided "well, let's just try and fit that feature in; it shouldn't cause too many problems if it goes out only 70% tested... if it breaks, we'll deal with it then."
neudesic is a microsoft partner (as a matter of fact, as i understand it we were microsoft’s partner of the year not too long ago), with several different technology practices, including a mobile practice, a user experience practice, a connected systems practice, and a custom application development practice, among others.
(update: kelly mentions, "i suspect the reason you are having the compiler_version problem is that the makefiles are trying to run cl.exe to get the version, and if the path/lib/include env variables are not setup right, cl.exe fails.
- deployment instructions for the release are defined and do not include a "point of no return".
papers at the time attributed the explosion to sabotage work by spain, despite the fact that no cause or proof of sabotage was ever produced, leading the us to declare war on the spanish, seize several spanish colonies (including the phillipines in the pacific, which would turn out to be important to us pacific naval interests during world war two), and in general pronouce anything spanish to be "enemies of the state" and all that.
by the way, this conundrum can be genericized pretty easily using generics/templates: (i thought about doing it in schema, but this seemed geekier... and easier, given all the angle-brackets xsd would require. )
many of you have undoubtedly noticed that my blogging has dropped off precipitously over the last half-year.
in other words, as microsoft's clr architect rico mariani put it, a good architecture should enable developers to "fall into the pit of success", where if you just (to quote the proverbial surfer) "go with the flow", you make decisions that lead to all of those good qualities we just discussed.
do not wait for the enemies of your project to show themselves, either--actively seek them out and crush them.
as the book is out in the world, you feel a sense of pride an joy at it.
and, in the end, that's the point of "spiritualize your warfare": trying to continuously enhance yourself.
i thought to myself, no damn it – i’m going to push it to see where this guys argument goes, so i said “i can take any best practice you can think of, and by changing the context, i can render that best practice a worst practice”.
it thus follows that concurrent code cannot be effectively unit tested, and thus the premise that dynamic-language-authored code can be proven correct by simple use of unit tests is flawed.
swing has been in use since 1998, has had close to a decade of debugging driven by actual field use, and (despite what personal misgivings the average java programmer may have about building a "rich client" application instead of a browser-based one) can legitimately call itself a successful library in widespread use.
personally, i think these five points are points that every developer should also advocate and life their life by, since, quite honestly, i think we as an industry do a pretty poor job on all five points.
avoiding him simply avoids an opportunity for you to learn from him and to better your arguments and approaches.
"we will not ship code that fails to pass any unit test" is another clear goal, but must be paired with something that avoids the natural "well, then, we'll not write any unit tests, and we'll have met that goal!" response.
in short, it's recognizing that the users are part of the system, too, part of the organism that makes up this bizaare and wonderful world we live in, and their input is often exactly that: random.
if you started programming after the turn of the milennium, i don’t know if you’re going to be able to follow the trend of this post—not out of any serious deficiency on your part, hardly that.
those of you who’ve seen me present at conferences probably won’t be surprised by this, but i do a lot of conference talks.
not surprisingly, he didn’t have a lot to say to me after that.
the discussions around programming languages remind me of the discussions around c++.
everything he did from then on was measured against pompey, to put him in a stronger position to meet his enemy.
it will have those features they need to get their job done(and be specific here), and we will accept no excuse otherwise." one of the world's most successful software companies, microsoft is no stranger to the polarity strategy.
- the fastest builds have been when the sources and the bootdir are on local disk.
developer then recompiles and sees what happens, hoping for the staggering luck that the resulting change actually does improve the software, and everybody loves it, so they buy it, and you'd expect to see more of it.
to be honest, i get this sense that across the entire industry right now, there’s a sort of malaise, a general sort of “bah, nothing really all that new is going on anymore”.
and if anybody stands up at this point and says, "hey, wait a minute, that's a pretty tall order for anybody to fill!", then you start to get an idea of why architects do, frequently, get paid more than developers do.
of more significance is the type of thinking it can engender.
some enemies--ignorance, apathy, sloth--are not easily defeated, nor once defeated will they remain so.
they can either benefit from the project, or they can be removed from the battlefield entirely.
if there is an ideal to aim for, it should be that of the strategic warrior, the man or woman who manages difficult situations and people through deft and intelligent maneuver.
- it compiles in the automated build from a clean checkout.
without trying to paint a paranoid picture, this "dynamic of war" frequently infects software development teams and organizations; developers vs. management, developers vs. system adminstrators, developers vs. dbas, even developers vs. architects or developers vs. developers.
sometimes management's decision to "go agile" is based not to try and deliver software more successfully, but to simply take the latest "fad" and throw it into the mix, such that when it fails, management can say, "but we followed industry best practices, it clearly can't bemanagement at fault."
but it may also be within my power to kill a project, for the company's greater good; this awesome responsibility must be faced with great humbleness and awareness of my own frailty.
interestingly enough, i find this attitude curiously incomplete: if we assume that we make mistakes, and that we therefore require unit tests to prove to ourselves (and, by comfortable side effect, the world around us) that the code is correct, would we not also benefit from the automated--and in some ways far more comprehensive--checking that a static-analysis tool can provide?
others, more difficult to spot, play subtle games of passive aggression, offering help that never comes, instilling guilt as a secret weapon.
the bigger the opponent, the greater your reward, even in defeat, for if you lose, you have opportunities to analyze the results and discover how and why you lost, then correct your strategy for the next time.
above all, i must not play at god, and remain open to others' ideas or opinions.
the reason for that is multifold, ranging from the usual “i just don’t seem to have the time for it” rationale, up through the realization that i have a couple of regular (paid) columns (one with code magazine, one with msdn) that consume a lot of my ideas that would otherwise go into the blog.
from the back cover: every website project is really an enterprise integration project: the stakes are high and the projects complex.
the discussions around programming languages remind me of the discussions around c++.
javascript on the server end is not new, folks.
the samurai of japan had no guage of their excellence unless they challenged the best swordsmen they could find.
but my guess is that javascript hijacking won't be solved so easily, because programmers don't understand the security implications of their work and won't prevent the attacks.
demand perfection in the surrounding artifacts of the project: the help files, the user documentation, the graphics used for buttons and backdrops and menus.
recognizing that sysadmins have historically been blindsided by projects that essentially ignoredtheir needs (such as a need to know that the system is still running, or the need to be able to easily add users, change security policies, or diagnose failures quickly at 3am in the morning) means that we as developers can either treat them as enemies to be overcome, or win them as friends by incorporating their needs into the project.
and as much as this is going to probably just throw fat on the fire, all the excitement around javascript as a language reminds me of the excitement about ruby as a language.
that means i need all the help i can get--human-centric or otherwise--to make sure that my code is correct.
avoidance of conflict becomes a habit, and you lose the taste for battle.
clearly we violate #1 when we're not careful with security measures in the code; too many programmers (and projects) fail to realize that "better" in #2 is from the customers' perspective, not our own; too many programmers look down on anyone who's not technical in some way, or even those who disagree with them, thus violating #3; too many consultants i've met (thankfully none i can call "friends") will take any excuse to overbill a client (#4); and so on, and so on, and so on.
in the overwhelming majority of cases, mutations are detrimental, and they don't stick around for long (since there are many, many more ways of being dead than alive).
remoting, or some kind of messaging system like jms or msmq) weighed against an ajax app, compared on security holes.
this is, without a doubt, the most accurate quote ever about the "fun" of writing a book: writing a book is an adventure.
for some reason, google doesn't yield much by way of results, and i'vegot to believe there's better webdav support out there than what i'm finding.
(and yes, those answers are there for each of those languages/platforms; the test is not whether such answers exist, but how they map intoyour existing infrastructure.)
enemies also give you a standard against which to judge yourself.
i asked about this on the build-dev list, and kelly responded with a great email about the build process, specifically about launching "sub" makes within the system: due to history, a build directly from the jdk/make directories uses a default outputdir of jdk/build/* but if fastdebug=true, it's jdk/build/*-fastdebug, or if a plain debug build with just variant=
"i am human, therefore i make mistakes.
to adapt this to software, instead of simply talking about the hopeless situation in which you find yourself--your company has no interest in agile, your team is just too "inexperienced" to tackle the kinds of projects you are being given, and so on--externalize it.
node.js feels like an attempt to reinvent the app server, but if you look back far enough you see that the app server itself was reinvented once (in the java world) in spring and other lightweight frameworks, and before that by people who actually thought to write their own web servers in straight java.
as if that wasn't enough, check out these "sky-is-falling" quotes: " 'it’s a pretty significant weakness, which will have a considerable impact if the exploit codes come to fruition quickly.
enemies are not evil, and should not be seen as something to avoid.
your first task as a strategist is to widen your concept of the enemy, to include in that group those who are working against you, thwarting you, even in subtle ways.
irefuse to allow that to happen again.
user interfaces—specifically, guis—were another force for a while, until guis got to the point where they were so common and so deeply rooted in their chosen pasts (the single-button of the mac, the menubar-per-window of windows, etc) that they left themselves so little room for maneuver.
if you're a commercial vendor and you send me a license to go with it, i'll post that, too, with some code and explanation on how i'm using it, though i doubt it's going to be all that different from how anybody else would use it.
conduct code reviews religiously, during active development (rather that at the end as a token gesture), with no eye towards criticizing the author of the code, but the code itself.
it's the first book i've ever seen that addresses the issues of building software that's production-friendly and sysadmin-approachable.
in years past, there has always seemed to be something deeper, something more exciting and more innovative that drives the industry in strange ways.
you whimper, "don't make me do this, just cancel the contract."
they do not have to have all the answers to the technology, and in fact, if the technology is sufficiently large or interesting, they can spend the next month investigating a new element or new use of the technology.
and note that i’m deliberately targeting powerpoint with this tool, since that’s what i use, but there’s nothing offhand that prevents somebody from writing a tool to drive apple’s keynote (presumably using applescript and/or apple events) or openoffice (using their java sdk).
./build_shell.sh cd jdk7 make sanity it will churn, think, text will go flying by, and you will (hopefully) see "sanity check passed".
the presence of a well-established competitor in a particular field is no barrier to entry; microsoft has routinely entered fields with dominant competitors and come out ahead in the end.
because the conferences i speak to are all more or less ok with powerpoint (or pdf, which is easy to generate from ppt) format, that’s what i’m using.
demanding a ratio of unit-test-lines-to-lines ratio is a good start: "we will have three lines of unit test code per line of code" now offers a measurable, identifiable enemy that can be stared in the face.
you have this idea, this burning sensation in your heart, that justhas to get out into the world.
if i make mistakes, then i cannot assume that i will write code that has no mistakes.
poor charles nutter, who was new to the tour, didn't get the whispered-down-the-line instruction, and tried valiantly to recover the panel's apparent collective discard of dignity--"hi, i'm charles, and i write ruby code"--to no avail.
"... the problem is compounded by the slim chance of an enterprise patching java runtime vulnerabilities.
as a software development lead (or architect, or technical lead, or project manager, or agile coach, or whatever), you need to learn how to spot these enemies to your project, identify them clearly, and make it clear that you see them as an enemy that will not be tolerated.
while traveling not too long ago, i saw a great piece on ethics, and wished i'd kept the silly magazine (i couldn't remember which one) because it was just a really good summation of how to live the ethical life.
this "architect team" then lays down "corporate standards", usually based on "industry standards", with little to no feedback as to the applicability of their standards to the problems faced by the developers underneath them.
" 'delivery of exploits in this manner is attractive to attackers because even though the browser may be fully patched, some people neglect to also patch programs invoked by browsers to render specific types of content.' "... the bugs threaten pretty much every modern device. " '...
for the indianapolis colts of last year, each victory was hollow unless they could beat their arch-rivals, the new england patriots.
sloth in the documentation or tests.
simply saying "we need to have better quality code" is too amorphous and too vague.
hell, even a new approach to data access might stir some excitement.
in politics, business, even the arts, we face opponents who will do almost anything to gain an edge.
a good architecture will also facilitate interoperability across applications, ensure a good code quality, ensure good maintainability, provide for future extensibility, and so on.
the people i’m working with are great, top-notch technology experts and just some of the nicest people i’ve met.
in fact, on a panel this weekend in dallas, fellow nfjs'er david bock attributed the rise of interest in dynamic languages to the growth of the unit-testing meme, since faith in the quality of code authored in a dynamic language can only follow if the code has been rigorously tested, since we have no tool checking the syntactic or semantic correctness before it is executed.
i will apply, for the benefit of the customer, all measures [that] are required, avoiding those twin traps of gold-plating and computing nihilism.
but, of course, in the long-standing tradition of these predictions, i also need to put my spectacles on (i did turn 40 last year, after all) and have a look at how well i didin this same activity twelve months ago.
for starters, shane, kudos to you for sticking to your guns, and for figuring out really quickly that this was clearly not a place you wanted to work--a lot of developers have a mentality that says that they need the company more than the company needs them, sort of a "job at any price" mindset.
folks, that is sensationalist journalism at its best.
for now i'm not messing with it; if you discover that you need it, the build readme has links.
have conversations on the subject, to understand her reluctance and opposition, and build a small dsl to show her the benefits of doing so.
a lot of these concepts and ideas are just generally good practices, but a fair amount of them actually apply pretty directly to software development (whether you call it "agile" or not).
now, i have no problems with the media reporting security vulnerabilities; in fact, i encourage it (as any security professional should), because consumers and administrators can only take action to protect against vulnerabilities when we know about them.
this is asking a lot of an architecture, granted.
it seems to me that our discipline could use something similar.
learn to smoke out your obstacles, to spot them by the signs and patterns that reveal hostility and opposition to your success.
but an architecture is also intended to be restrictive, in that it should channel software developers in a direction that leads to all of these successes, and away from potential decisions that would lead to prolems later.
trying to subvert the company into expanding our technology practices into the java (and ruby/rails) space.
specifically, type "make help" to see the list of targets.
the one i want is "make fastdebug_build" or "make debug_build" (so i have debug symbols and can go spelunking).
to do that, they cite "best practices" established by "industry experts" as a cover for making decisions of their own, because nobody ever gets fired for choosing what industry "best practices" dictate.
fellow nfjs'ers stuart halloway and justin gehtland have founded a consultancy firm, relevance, that sets a high bar as a corporate cultural standard: 100% test coverage of their code.
duh, john… everyone knows that software changes.
then, all of a sudden, it's done, it's out, it's on the shelf, and you take photos and show it off to all the friends, neighbors and family, who look at you a little sympathetically, and don't mention how awful you really look in that photo.
this is where you'll spend a fair amount of time, because getting this right can be ugly.
then the reviews come in on amazon.
fowler talks about architecture being irrelevant in an agile project, but i disagree with that notion pretty fundamentally: an architect is the captain of the ship, making the decisions that cross multiple areas of concern (navigation, engineering, and so on), taking final responsibility for the overall health of the ship and its crew (project and its members), able to step into any station to perform those duties as the need arises (write code for any part of the project should they lose a member).
i will respect the privacy of my customers, for their problems are not disclosed to me that the world may know.
if i do not violate this oath, may i enjoy life and art, respected while i live and remembered with affection thereafter.
maybe i'm getting negative in my old age, but it just seems to me that there's too much shouting and posturing going on (*cough* fleury *cough*) and not enough focus on the people to whom we are ultimately beholden: our customers.
but most of all, the main reason i’m finding it harder these days to blog is that as of july of this year, i have joined forces withneudesic, llc, as a full-time employee, working as an architectural consultant for them.
in fact, although i will not speak for them, many of the apostles of unittestitarianism in fact indirectly support this belief, arguing that unit tests do not obviate the need for a quality-analysis phase after a development iteration, because correct unit tests cannot imply completely correct code.
user interfaces—specifically, guis—were another force for a while, until guis got to the point where they were so common and so deeply rooted in their chosen pasts (the single-button of the mac, the menubar-per-window of windows, etc) that they left themselves so little room for maneuver.
i will remember that i remain a member of society, both our own and of the one surrounding all of us, with special obligations to all my fellow human beings, those sound of mind and body as well as the clueless.
hopefully people find it useful, but even if you don't think it's going to help, it'll help me internalize the elements i want to through the process just for my own use.
at the end of the day, the fact remains that i write shitty code.
not because it's not important--too many software features are added with no positive result--but because it's too hard to measure the revenue a particular program, much less a particular softwarefeature, is generating.
it is generating revenue.
on the xp project i worked on, it was entirely appropriate.
in years past, there has always seemed to be something deeper, something more exciting and more innovative that drives the industry in strange ways.
inevitably, when somebody at a conference says the word, "best practice", listeners' minds turn off, their pens turn on, and they dutifully enscribe this bit of knowledge into their projects at home, without considering the applicability to their project or corporate culture .
in this case, however, yellow journalism meets the web in two recent "it magazine" pieces that have come to my attention:this one, which blasts sun for not rolling out updates in a more timely fashion to its consumers, despite the many issues that constant update rollouts pose for those same consumers, but more flagrantly,this one, which states that google researchers have found a vulnerability in the java runtime environment that "threatens the security of all platforms, browsers, and even mobile devices".
(i don't have the statistics to verify that, but i imagine it's fairly easy to find out; right or wrong, kudos to whomever takes the ten or fifteen minutes to research it and send it to me for posting here.)
for most, this isn't just a bunch of words they recite as entry criteria, this is something they firmly believe and adhere to, almost religiously.
we may, but if we do, we harm the other person.
granted, all of these answers notwithstanding, there's a large number of "architects" out there whose principal goal is to simply remain employed.
there are so many terrible web sites out there with issues such as - too much content / too clutteredhttp://jdj.sys-con.com/ - too heavy for the many folks still on dial-up - inconsistent labeling- etc.
if you started programming after the turn of the milennium, i don’t know if you’re going to be able to follow the trend of this post—not out of any serious deficiency on your part, hardly that.
architecture is intended to be facilitative, of course, in that a good architecture should enable developers to build applications quickly and easily, without having to spend significant amounts of time re-inventing similar infrastructure across multiple projects.
wherever possible, avoid enemies that are large and hard to pinpoint.
more troubling and complex, however, are the battles we face with those who are supposedly on our side.
the culture may deny this reality and promote a gentler picture, but we know it and feel it, in our battle scars.
which is probably why it's so important to have the on-site customer, as per agile development's recommendation, because you never know when randomness will strike and make your life better/faster/easier.
i don't know the complete history as to why this was done this way, but my tendency is to try and get us back to a single default outputdir for all the repositories.
you’ll notice the xinclude namespace declaration in the top-level element; its purpose there is pretty straightforward, demonstrated in the “credentials” slide a few lines later, so that not only can i modify the “credentials” slide that appears in all my decks, but also do a bit of slide-deck reuse, using slides to describe concepts that apply to multiple decks (like a set of slides describing functional concepts for talks on f#, scala,clojure or others).
had i the power, i would create a world where all people are free to practice whatever religious beliefs they hold, but clearly if those religious beliefs involve human sacrifice, then it's of dubious belief that my actions made the world "better".
sometimes the users are not as committed to the project as we might hope, and at times, the users are even contradictory to one another, as each seeks to promote their own agenda within the project.
rather than interpret, i'll just quote (with permission) the e-mail and respond afterwards hi ted, i had a job interview last friday which i wanted to share with you.
you make plans to find large men with italian names and track down that reviewer.
the deadline approaches, the sheer horror of what's left to be done paralyzes you.
feeling guilty is pointless; it is not your fault you have enemies.
the interesting part of this is the other part of this, the powerpoint automation used to drive the generation of the slides.
an up-front enemy is rare now and is actually a blessing.
in the end, i think what shane ran into was an "architect" with an agenda and an alpha-geek complex.
it took joe frazier to make muhammad ali a truly great boxer.
neal ford has reported that thoughtworks makes similar statements, though it's my understanding that clients sometimes put accidental obstacles in their way of achieving said goal.
enemies force on you a sense of realism and humility.
articles were sensationalist, highly incorrect or unvalidated, seeking to draw at the emotional strings the readers would fear or want pulled.
frank, i freely admit that i'm going to steal this idea from you, so i hope you're watching trackbacks or blog links or whatever.
the fact that they’re principally a .net shop may lead some to conclude that this is my farewell letter to the java community, but in fact the opposite is the case.
for some companies i've worked for, the "architect" was as you describe yourself, someone whose hands were dirty with code, acting as technical lead, developer, sometimes-project-manager, and always focused on customer/business value as well as technical details.
well, this is a dangerous question, in that you're asking it of one who considers himself an architect and technologist, so take this with the usual grain of salt.
among the jet-setting ruby crowd, this means a near-slavish devotion to unit tests.
enemies give us options and purpose.
but 80% of typical project lifecyle cost can occur in production--not in development.
i get e-mail from blog readers, and this one--literally--stopped me in my tracks as i was reading.
these are enemies that, given enough time and inattention, will drag the project down into the tar pits of potential failure.
his book, then, suggests that we need to face this reality and learn how to deal with it: what we need are not impossible and inhuman ideals of peace and cooperation to live up to, and the confusion that brings us, but rather practical knowledge on how to deal with conflict and the daily battles we face.
fine--instead of trying to talk them into it, take the radical approach,do a project in an agile fashion (even without upper management's knowledge if necessary), and show them the results.
put names to them, make them clearly visible to all involved.
if i were given the editor's job tomorrow, i'd thank mr. tung for his efforts and send him over to a competitor's publication.
then, in 1982, argentina attacked the british falkland islands in the south atlantic.
but because i make mistakes, then i must also assume that i make mistakes trying to identify the mistakes in the code.
note that i set the compiler_version flag to tell the build script which compiler i'm using--if that's not set, the build fails pretty quickly, complaining that "compiler_version" cannot be empty.
then tell me whether you think it's funny--or just sad--that there will not only be a real winner to this contest, but that the tsa will, in all likelihood, react the way bruce predicts, particularly when the major news outlets report the story and it joins the list of fears the public already receives on a daily basis.
and then there are those programmers i've met who are "optimizing" from the very get-go, because they work to avoid network round-trips, or write sql statements that don't need later optimization, simply because they got it right the first time (where "right" means "correct"and "fast").
oh, well, one mistake can't make that much difference.
the legends of microsoft developers putting in 80-plus hours a week on a project are somewhat true, but not because microsoft management expects it of them, but because developers have been willing to put that kind of time into the project in order to succeed.
until all of these are true, the feature is just unfinished inventory.
consider this, for example; greene suggests "six fundamental ideals you should aim for in transforming yourself into a strategic warrior in daily life": granted, it's not a complete 1-to-1 match, but there's a lot that the average developer can learn from the likes of sun-tzu, macarthur, julies caesar, genghis khan, miyamoto musashi, erwin rommel, or carl von clausewitz.
but the output by default will go to jdk/build/* and a different directory if variant=dbg or fastdebug=true.
the company as a whole as declared war on its enemies in a variety of fields, and with few exceptions, has won in almost every conflict.
note that i call into jdk_generic_profile.sh to do some more setup work; this gets all the msvs2003 stuff into the path as well.
case in point: system administrators frequently find themselves at odds with developers, because the developer seeks (by nature) to change the system, and sysadmins seek (by nature) to keep everything status quo.
with the coming new year, i think one of my upcoming responsibilities will be to blog more, so don’t be too surprised if you start to see more activity on a more regular basis here.
thatcher's approach polarized the population, seizing the attention, attracting the undecided and winning a sizable victory.
note that openjdk must be set, or the build process thinks this is a commercial build, and an early sanity-check to see what version of freetype is running will fail.
as time goes on, i'll hopefully find the time to blog about how to find various little things in the jdk and make source-modifications to prove that they work, and use that as a springboard from which to let you start hacking on the jdk.
then, on deployment, the "architecture team" took a look, pronounced the system to be incompatible with their "official standards", andforced new development of a working product.
don't assume the script above is perfect--i'm still testing it, and will update this entry as necessary as i find bugs in it.
this should help having to go through the whole process for incremental updates.
now, before the crowd starts getting out their torches and pitchforks to have a good old-fashioned lynching, hear me out.
as a result, scala's syntax--at a first glance--looks remarkably similar in places to ruby's, yet the scala compiler is still fully type-safe, ensuring that accidental coercion doesn't yield confusion.
he refused to consider somebody with a competing point of view, because god forbid somebody show himnot to be the expert he's hoodwinked everybody else at work to think he is.
i was stunned to hear first hand, how divorced from the business this “architect” was.
web 2.0 doesn't make sites better by itself - it provides powerful technologies but it's no silver bullet.
for reasons of easy parsing, i want to start with an xml format, but keep the verbosity to a minimum; in other words, i’m ok with xml so long as it merely reflects the structure of the slide deck, and doesn’t create a significant overhead in creating the text for the slides.
at first, it is wonderful and exciting and full of potential.
may i always act so as to preserve the finest traditions of my calling and may i long experience the joy of the thanks and praise from those who seek my help.
frank kelly posted some good ideas on his entry, "java: are we worrying about the wrong things?", but more interestingly, he suggested (implicitly) a new format for weighing in on trends and such, his "important/not-so-important" style.
refrigerators on every floor, stocked with sodas of every variety, water, juices, anything that the thirsty developer could need, all free for the taking.
he has to be familiar with the problem domain, the technology involved, and keep an eye out on new technologies that might make the project easier or answer new customers' feature requests.
as discriminatory as this is going to sound, this one is for the old-timers.
"we will have 100% code coverage in our unit tests" is a clearly-defined goal, and anything that prevents that goal from being reached will be clearly visible.
well, friends, another year has come and gone, and it's time for me to put my crystal ball into place and see what the upcoming year has for us.
obstacles are subtle and evasive, sometimes appearing to be strengths and not distractions.
instead of internalizing a bad situation, externalize it and face your enemy.
at least this is one area where microsoft is (maybe) putting the fatted sacred cow to the butcher’s knife, with their metro ui moves in windows 8… but only up to a point.
(source: winston churchill) keep that in mind, all you who are considering authoring as a career or career supplement.
btw, anybody who finds one and wants credit for it, i'll be happy to post here.
- jdk_import_path must refer to a compatible build, not all past promoted builds or previous release jdk builds will work.
i will not be ashamed to say "i know not," nor will i fail to call in my colleagues when the skills of another are needed for a system's development, nor will i hold in lower estimation those colleagues who ask of my opinions or skills.
when asked why i'd recommend this, the response was pretty simple: "because i believe that there's more parallels to what we do in military history than in constructing buildings.
but i also have to accept the possibility that my unit tests themselves may be flawed, and that therefore other tools--which do not suffer from my inherent human capacity to forget or brush off--are a powerful and necessary component of my toolbox.
so i enabled the debugging output in keepalive.py and realized, that the first two connections to hg.openjdk.java.net where made trough the proxy, while the third one (the first that actually fetches files), wants to go directly to hg.openjdk.java.net, which badly fails:/share/software/openjdk> hg fclone http://hg.openjdk.java.net/jdk7/jdk7/ jdk7 keepalive.py - creating new connection to proxy:8080 (1078835788) keepalive.py - status: 200, ok keepalive.py - re-using connection to proxy:8080 (1078835788) keepalive.py - status: 200, ok
scala, for example, makes heavy use of type-inferencing to reduce the burden of type declarations by the programmer, requiring such declarations only when the inferencing yields ambiguity.
the system we build for them this year will be amazing.
when this top level makefile runs the jdk/make makefiles, it passes in a alt_outputdir to refer to this top level build result area because it's default outputdir is not the same place.
in other words, the fact that it worked (and could easily be turned to interoperate with their soap-based standard, of which there were zero existing services) was in no way going to stand as an impediment to their enforcement of the corporate standard.
he didn’t like that very much, but i thought, ‘bugger him, i know i’m right’.
your team, if they hold these qualities, must be shown that there is no tolerance for them.
before long, you're dragging your feet, you can't seem to muster the energy to do anything, just get this thing done.
once he defeated pompey, however, caesar lost his way, and eventually fell because he viewed himself as a god and above all other men.
this doesn't mean always treat them openly hostile--sometimes the worst enemies can be turned into the best friends, if you can identify what drives them to the position that they take, and work to meet their needs.
the problems occur, of course, in the interpretation and execution.
it made me wish there was a "developer skill" setting i could throw on the compiler/ide, something that would pick up the following keystrokes... for (int x = 10; x > 0; x--) ... and immediately pop clippy up (yes, the annoying paperclip from office) who then says, "it looks like you're doing a decrementing loop count as a premature optimization--would you like me to help you out?" and promptly rewrites the code as... // quit being stupid, stupid!
life as an outsider can be hard, but she knew that if she tried to blend in, she could easily be replaced.
if memory serves, brian's presentation noted that when run over the swing code base, findbugs discovered 70-something concurrency errors that remained in the code base, some since jdk 1.2.in close to a decade of use, 70-something concurrency bugs had been neither fixed nor found.
a friend of mine on the nfjs tour, brian sletten, tells a story of how he consulted on a project, implementing the (powerful) 1060 netkernel toolkit at the core of the system, to resounding success.
there are some projects, no matter how mature or immature, that i simply don't want any developer on the team to "optimize", because i know what their optimizations will be like: trying to avoid method calls because "they're expensive", trying to avoid allocating objects because "it's more work for the gc", and completely ignoring network traversals because they just don't realize the cost of going across the wire (or else they think it really can't be allthat bad).
i will remember that there is humanity to programming as well as science, and that warmth, sympathy, and understanding will far outweigh the programmer's editor or the vendor's tool.
like so many of these sorts of vulnerabilities, preventing the class of attacks is easy.
it was for a “solutions architect” role with a large airline here in new zealand.
for example, when the publication ofprofessional f# 2.0 went final, i found myself going through slide decks trying to update all the “credentials” slides to reflect the new publication date (and title, since it changed toprofessional f# 2.0 fairly late in the game), and frankly, it’s becoming something of a pain in the ass.
interviews aren't supposed to be the place where candidates grovel and say whatever the company wants them to hear--an interview is supposed to be a vetting process for both sides.
bin/ alt_msvcrt_dll_path - directory containing mscvrt.dll msvcrt_dll_path=c:/windows/system32 warning: slash_java does not exist, try make sanity warning: cacerts_file does not exist, try make sanity --- notes --- - all builds use same output directory unless overridden with alt_outputdir=, changing from product to fastdebug you may want to use the clean target first.
the last phase is that just as you are about to be reconciled to your servitude, you kill the monster, and fling him out to the public.
when building the jdk, you may want to build bits "underneath" the top-level directory, but doing this is a tad tricky.
as the opposite poles of a magnet create motion, your enemies--your opposites--can fill you with purpose and direction.
no quote, no vague description of how the vulnerability can be exploited, not even a link to the original report from google's security team.
javascript on the server end is not new, folks.
and as much as this is going to probably just throw fat on the fire, all the excitement around javascript as a language reminds me of the excitement about ruby as a language.
the customer has accepted the feature.