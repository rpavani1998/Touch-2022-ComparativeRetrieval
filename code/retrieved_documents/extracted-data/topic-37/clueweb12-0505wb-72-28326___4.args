this code is nothing you can’t find in petzold, so i won’t reproduce it here.
next, you copy your vertex data verbatim from yourvertices array.
directx will now draw the texture, but you have to tell it what texture to draw.
drawing triangles (d3d2.cpp) triangles have a few interesting properties that make them attractive to 3d programming.
your vertex buffer is useless without filling it with meaningful data: myvertex *v; pstreamdata->lock(0, 0, (byte**)&v, 0); for(int ii = 0; ii unlock(); this isn’t that complicated.
you could also use the settexturestagestate to add different features like mip mapping and bump mapping, but you will just use the default values for now.
you can take this approach to the extreme by specifying many indices in another array, and passing the index array to a function, such as drawindexedprimitive, which will draw a large part of the model at once.
directx will now draw the texture, but you have to tell it what texture to draw.
this shell can be used with all the sample demos i will work with in this article, so i separated it from the rest of the code.
if you now run the program, you should get a window that is filled green.
for both opengl and direct3d, you can specify all the vertices of a model in a huge array.
add the code to copy tu and tv into the vertex array (between your lock and unlock methods).
buildmatrices will build and activate your three matrices as described above.
microsoft does include a vc6 workspace to build these, but you may run into difficulties if you have other sdks installed (platform sdk, previous dx media, etc.).
directx graphics perhaps the most glaring change to directx is the lack of directdraw.
the projection matrix will scale the world to make it look as if it has depth.
it is possible for a video to play while an idirect3ddevice8 interface is running, so it doesn’t seem like you need to query for a directdraw interface.
it is no surprise that playback of video files also falls under this category, and game developers can now use this api with ease to add fmv to their games.
the view transformations will move the world into view space.
then you pass the aspect ratio (most monitors are 4:3), and values representing our near and far clip plane.
since dx8 is so different, i won’t spend a lot of time talking about what has changed.
direct3d comes with a high level library called d3dx.
pixel shaders operate on pixels and can do all kinds of texture blending, noise generation, or anything else you can think of.
it’s a bit more work, but it is also more scalable.
since dx8 is so different, i won’t spend a lot of time talking about what has changed.
as an example, i used to write short opengl applications in under 500 lines.
using the above code, you would need to draw 12 triangles, each with three vertices, for a total of 36 vertices in your vertex array.
initdirect3d and drawscene are functions that you will change as we go on, so be sure to experiment with them.
you can’t do this until you first call the getadapterdisplaymode method to get some needed information: d3ddisplaymode d3ddm; pid3d->getadapterdisplaymode(d3dadapter_default, &d3ddm); this will get the parameters of the current display mode.
d3dcreate_software_vertexprocessing specifies the type of vertex processing.
it would be better if you could just list each vertex once and index into this array.
you can use this to build a d3dpresent_parameters structure: pid3d->getadapterdisplaymode(d3dadapter_default, &d3ddm); d3dpresent_parameters present; d3dpresent_parameters describes information such as the format of a display’s surfaces, the type of swapping mechanism, and whether the app is windowed or full screen.
you pass in the structure that you built above, and you are returned the idirect3ddevice8 interface.
using the above code, you would need to draw 12 triangles, each with three vertices, for a total of 36 vertices in your vertex array.
2d programming is not dead even with the removal of directdraw.
in between the beginscene and endscene calls in the drawscene function, insert this: int num_elems = sizeof(vertices) / sizeof(vertices[0]); pid3ddevice->drawprimitive(d3dpt_trianglelist, 0, num_elems / 3); d3dpt_trianglelist will command direct3d to draw discrete triangles, with each vertex specified individually.
it is possible for a video to play while an idirect3ddevice8 interface is running, so it doesn’t seem like you need to query for a directdraw interface.
in the upcoming examples, we will use triangles to build a cube.
i’d love to hear what people have to say.
you can fill the z-buffer, the back buffer, or the stencil buffer.
it’s a bit more work, but it is also more scalable.
the d3dx library does all the menial work for us.
pixel shaders operate on pixels and can do all kinds of texture blending, noise generation, or anything else you can think of.
you could pass d3dfmt_index32, but a cube does not need that many indices.
to define your vertex format, direct3d introduces the concept of a flexible vertex format (fvf).
if the method returns d3derr_notavailable, then you passed in valid parameters, but the device does not support them.
initdirect3d and drawscene are functions that you will change as we go on, so be sure to experiment with them.
the microsoft documentation has some errors in it, so use it as a guideline rather than a rule.
d3dadapter_default tells direct3d to use the primary monitor.
i suspect that dx transforms, another component of directx media, has remained unchanged, and can be used from the old directx media 6.1 sdk.
in dx8, the base classes are moved to the samples folder, and no .libs are included.
i used to be an opengl die hard, but with all the improvements, there is little reason not to use direct3d in your games.
d3dcreate_software_vertexprocessing specifies the type of vertex processing.
after working with dx8 for a few days, you will wish other dx8 apis worked like it.
since playback of video is the primary reason why a game developer would use directshow, we’ll do some code that does just that a little bit later.
as an example, i used to write short opengl applications in under 500 lines.
this article will get you started programming graphics and video using dx8.
in the upcoming examples, we will use triangles to build a cube.
setvertexshader tells direct3d to use the same format that was specified in the createvertexbuffer call above.
microsoft made no attempt to make it readable, and may result in write-only code (code that even you can’t read after you have written it), if you are not careful.
i suspect that dx transforms, another component of directx media, has remained unchanged, and can be used from the old directx media 6.1 sdk.
they are simply included to simplify and unify the code base.
the exact semantics of how to use this information is slightly different between opengl and direct3d. drawing discrete triangles would use this information raw and define each triangle separately.
beginscene and endscene don’t do anything in this example, but we will be using them in future versions.
d3ddevtype_hal, hwnd, d3dcreate_software_vertexprocessing, &present, &pid3ddevice); the next parameter, d3ddevtype_hal, tells direct3d to use the hal for display purposes.
the examples were built and tested with directx 8.
as you may recall, dx8 has removed directdraw.
information is slightly different between opengl and direct3d. drawing discrete triangles would use this information raw and define each triangle separately.
you can have up to eight stages of textures, but for now, you will just use the one.
d3dfmt_index16 is the only new flag.
video playback the microsoft engineers added the directshow api to the main directx runtime.
add the code to copy tu and tv into the vertex array (between your lock and unlock methods).
the d3dx library is very slick, containing apis to create everything from sprites, to fonts, to textures.
texturing is just one of those things that adds so much visual bang for the buck, that is would be ludicrous not to add it.
you will want to use hardware vertex processing if you want hardware assisted t & l.
in the example program, your model coordinates are already transformed to world coordinates, so you could just leave this code as is.
direct3d comes with a high level library called d3dx.
dx8 is huge, so i won’t cover it all here.
full screen is not tough at all.
if you now run the program, you should get a window that is filled green.
put all drawing code here hr = pid3ddevice->endscene(); // flip back buffer to front hr = pid3ddevice->present(null, null, null, null); } while(0); return hr; this code is pretty simple, if you look beyond all the error handling.
you can now create an idirect3ddevice8 interface: pid3d->createdevice(d3dadapter_default, &present, &pid3ddevice); this function has six parameters, but luckily, none of them are complex.
you could pass d3dfmt_index32, but a cube does not need that many indices.
the world transformation will move the cube into world coordinates.
in dx8, the base classes are moved to the samples folder, and no .libs are included.
there is an interface, iddrawexclmodevideo, that is supposed to coordinate between directshow and exclusive mode apps, but it requires a directdraw surface.
in this example, surface copying is used instead of page flipping because the app is windowed.
the rest of dx8 looks old in comparison.
you can now add the code to draw a triangle.
sinceindices is defined as words and since a word is 16 bits in windows, you pass d3dfmt_index16.
sinceindices is defined as words and since a word is 16 bits in windows, you pass d3dfmt_index16.
the world transformation will move the cube into world coordinates.
a fresh start gaiiden developing a mobile application with flash video game localisation - a tricky game comparing shadow mapping techniques with shadow explorer new incentives and a whole new platform from the intel appup developer program autodesk previews a games production solution 3d in photoshop:
directx 8 (dx8) really shows its maturity.
however, when drawing a model, vertices are shared between triangles, so storing all three vertices for each triangle would be inefficient.
null, d3dclear_target | d3dclear_zbuffer, d3dcolor_rgba(0,63,0,0), 1.0, 0); since you will be doing some transformations to your vertices, you can go ahead and remove the extra rhw parameter from your myvertex structure.
you pass in the structure that you built above, and you are returned the idirect3ddevice8 interface.
microsoft made no attempt to make it readable, and may result in write-only code (code that even you can’t read after you have written it), if you are not careful.
indexed triangles (d3d3.cpp) in the above code, you told directx to draw straight from the vertex array.
other flags are the same as before; d3dusage_writeonly because you only write to the buffer, d3dpool_default to use the default memory configuration, and a pointer to receive the interface.
calling getadaptercount on the idirect3d interface will return the count of adapters in the system.
the second parameter to lock is supposed to be the count of bytes to lock, but sending 0 (which is undocumented) locks the whole buffer.
you can change position, color, texture coordinate, or any other property of a vertex.
it is important that our back buffer and our primary buffer match in these properties.
full screen graphics okay, windowed programs are great, but most games run full screen.
matrix operations are very clean (especially with d3dx), and it is far easier to work with than opengl.
using d3dx is an easy way to jump-start your development.
the back buffer is set to match the surface of the current video mode.
you can exit the example by pressing alt+f4.
in previous versions of directx media, the directshow libraries (the "base classes") included source code as well as the .libs needed to link.
the projection matrix will scale the world to make it look as if it has depth.
after working with dx8 for a few days, you will wish other dx8 apis worked like it.
surfaces have properties like resolution and color depth.
the d3dx library does all the menial work for us.
enabling the z-buffer is fairly easy.
when textures and video files were needed, files from the sdk were used.
however, even though directshow has many improvements, it remains the buggiest portion of dx8 due to its complexity.
drawing triangles (d3d2.cpp) triangles have a few interesting properties that make them attractive to 3d programming.
this awkward scenario is a big oversight of the directx developers.
the present function will cycle to the next back buffer.
filters can be added and removed while a filter graph is running.
after you build each matrix, you call settransform, passing the matrix itself and the type of matrix it is.
microsoft’s new shader language looks more like assembly language than it looks like renderman or quake 3’s shader language.
since chroma keying has been removed, the only way to do transparency is with alpha blending.
here you are using the d3dx library to build an idirect3dtexture8 interface.
there are various other flags that you could pass here to specify how your vertex array would be used, but you can go ahead and trust direct3d to do the right thing for now.
however, the preferred way to do 2d graphics is with simple textures.
you also pass the minimum vertex index used (zero in this case), the number of indices used (three), the index number to start on (zero), and the number of triangles to render (one).
we also set the refresh rate and the presentation speed, which is how often to page flip.
conclusion directx 8 graphics are awesome.
microsoft does include a vc6 workspace to build these, but you may run into difficulties if you have other sdks installed (platform sdk, previous dx media, etc.).
matrix operations are very clean (especially with d3dx), and it is far easier to work with than opengl.
if the method returns d3derr_notavailable, then you passed in valid parameters, but the device does not support them.
for a full screen application, you need to make this a top-level window.
clear will flood fill the buffers you specify.
full screen is not tough at all.
the second parameter to lock is supposed to be the count of bytes to lock, but sending 0 (which is undocumented) locks the whole buffer.
it is no surprise that playback of video files also falls under this category, and game developers can now use this api with ease to add fmv to their games.
using matrices and extra texture coordinates (d3d5.cpp) it is time to build our cube.
the inheritance graph is very simple: one of the coolest features is the addition of a shader language.
d3dpt_trianglelist, 0, sizeof(indices) / sizeof(indices[0]), 0, sizeof(indices) / sizeof(indices[0]) / 3); if all goes well, this program should produce the exact same output as the last one.
you can now add the code to draw a triangle.
lock returns a pointer to where you can write your vertex data.
then you pass the aspect ratio (most monitors are 4:3), and values representing our near and far clip plane.
i used to be an opengl die hard, but with all the improvements, there is little reason not to use direct3d in your games.
you can use a secondary monitor by specifying the number of the monitor you wish to use.
to make things simple, each of the demos will share the same basic application.
another oddity is that the directshow libraries needed to play video must be built by hand.
using matrices and extra texture coordinates (d3d5.cpp) it is time to build our cube.
in your code, start your buildmatrices function with: d3dxmatrix matrix; d3dxmatrixrotationy(&matrix, timegettime() / 1000.0f); pid3ddevice->settransform(d3dts_world, &matrix); this setup will rotate the cube about the y-axis.
calling getadaptercount on the idirect3d interface will return the count of adapters in the system.
you can continue to copy if you wish.
the result should be a spinning textured cube.
lock returns a pointer to where you can write your vertex data.
you can have up to eight stages of textures, but for now, you will just use the one.
to define your vertex format, direct3d introduces the concept of a flexible vertex format (fvf).
you can continue to copy if you wish.
here you are using the d3dx library to build an idirect3dtexture8 interface.
luckily for us, doing this in dx8 is painless.
the back buffer now requires a height and width.
we’ll write some code shortly that will let you hitting the ground running.
sometimes it is nice to start with a clean sheet of paper.
for our first exercise, i want to just get something on the screen.
in your code, start your buildmatrices function with: d3dxmatrix matrix; this setup will rotate the cube about the y-axis.
format; in this example, surface copying is used instead of page flipping because the app is windowed.
for our first exercise, i want to just get something on the screen.
this awkward scenario is a big oversight of the directx developers.
graphics is just plain awesome.
the nicest part about this method is that it automatically creates all your needed back buffers and depth buffers.
setstreamsource tells direct3d to use pstreamdata as the active vertex array, and gives the size of each element.
in this example, you want to fill the back buffer with the color green.
since the app won’t read from these vertices, you pass in d3dusage_writeonly.
this is only an issue if you are using a multi-monitor system.
there is an interface, iddrawexclmodevideo, that is supposed to coordinate between directshow and exclusive mode apps, but it requires a directdraw surface.
as you may recall, dx8 has removed directdraw.
first you pass the size of the buffer in bytes.
fullscreen_presentationinterval = d3dpresent_interval_immediate; here we see that we change the swap effect to flip so that we are page flipping instead of copying the back buffer.
remove the values from your vertices array, and the reference between your lock and unlock calls.
if everything worked okay, we can start writing code to draw triangles, the primitive that is the heart of game programming.
d3dfvf_diffuse tells direct3d that you will specify a color for each of the vertices.
indexed triangles (d3d3.cpp) in the above code, you told directx to draw straight from the vertex array.
for both opengl and direct3d, you can specify all the vertices of a model in a huge array.
directx 8 (dx8) really shows its maturity.
while i can make jokes about microsoft starting over eight times when it comes to directx, the latest version of directx is microsoft’s freshest start since drawprimitive came into style.
now, with dx8, my opengl and direct3d applications look almost identical.
this shell can be used with all the sample demos i will work with in this article, so i separated it from the rest of the code.
lastly, in your drawscene function, you must modify the clear method to clear the z-buffer in addition to the back buffer: pid3ddevice->clear(0, 1.0, 0); you add the flag d3dclear_zbuffer to enable z-buffer clearing, and you pass 1.0 as the fill value for the z-buffer.
idirect3d is the first interface that you need to instantiate.
in between the beginscene and endscene calls in the drawscene function, insert this: int num_elems = sizeof(vertices) / sizeof(vertices[0]); d3dpt_trianglelist will command direct3d to draw discrete triangles, with each vertex specified individually.
you can’t do this until you first call the getadapterdisplaymode method to get some needed information: d3ddisplaymode d3ddm; this will get the parameters of the current display mode.
there are various other flags that you could pass here to specify how your vertex array would be used, but you can go ahead and trust direct3d to do the right thing for now.
your vertex buffer is useless without filling it with meaningful data: myvertex *v; this isn’t that complicated.
another oddity is that the directshow libraries needed to play video must be built by hand.
however, even though directshow has many improvements, it remains the buggiest portion of dx8 due to its complexity.
for a full screen application, you need to make this a top-level window.
setstreamsource tells direct3d to use pstreamdata as the active vertex array, and gives the size of each element.
lastly, in your drawscene function, you must modify the clear method to clear the z-buffer in addition to the back buffer: pid3ddevice->clear(0, you add the flag d3dclear_zbuffer to enable z-buffer clearing, and you pass 1.0 as the fill value for the z-buffer.
the rest of directx would do well to follow its lead, especially directshow.
true; this tells directx to use a 16 bit z-buffer.
buildmatrices will build and activate your three matrices as described above.
we also set the refresh rate and the presentation speed, which is how often to page flip.
directx graphics perhaps the most glaring change to directx is the lack of directdraw.
you can use a secondary monitor by specifying the number of the monitor you wish to use.
the back buffer will be displayed and we can now draw on the front buffer (actually, since we not doing page flipping, we are actually still drawing on the back buffer, but the concept is the same).
the d3dx library is very slick, containing apis to create everything from sprites, to fonts, to textures.
remove the values from your vertices array, and the reference between your lock and unlock calls.
the next parameter, d3ddevtype_hal, tells direct3d to use the hal for display purposes.
shaders one could write a book on shaders and barely scratch the surface of their power.
setvertexshader tells direct3d to use the same format that was specified in the createvertexbuffer call above.
vertex shaders, of course, operate on vertices.
next, you copy your vertex data verbatim from yourvertices array.
comments show more » | view all recent resources» directx 8 graphics and video:
this code is nothing you can’t find in petzold, so i won’t reproduce it here.
you could also use the settexturestagestate to add different features like mip mapping and bump mapping, but you will just use the default values for now.
clipping is automatically enabled, as is backface culling.
it is important that our back buffer and our primary buffer match in these properties.
the advantage to this is that now developers can take advantage of this api without having to install a separate runtime.
now, with dx8, my opengl and direct3d applications look almost identical.
we’ll write some code shortly that will let you hitting the ground running.
the most glaring problem with directx graphics is its lack of an existing extension mechanism, like opengl’s glgetstring.
video playback the microsoft engineers added the directshow api to the main directx runtime.
dx8 does have a sprite interface in its d3dx library.
clear will flood fill the buffers you specify.
you will want to use hardware vertex processing if you want hardware assisted t & l.
it would be better if you could just list each vertex once and index into this array.
d3dpresent_parameters present; here we see that we change the swap effect to flip so that we are page flipping instead of copying the back buffer.
using d3dx is an easy way to jump-start your development.
you can now create an idirect3ddevice8 interface: pid3d->createdevice(d3dadapter_default, this function has six parameters, but luckily, none of them are complex.
the back buffer will be displayed and we can now draw on the front buffer (actually, since we not doing page flipping, we are actually still drawing on the back buffer, but the concept is the same).
however, when drawing a model, vertices are shared between triangles, so storing all three vertices for each triangle would be inefficient.
the view transformations will move the world into view space.
directdraw is dead, replaced completely by direct3d. direct3d is super-streamlined, and contains many new features.
fullscreen_presentationinterval = d3dpresent_interval_immediate; the back buffer now requires a height and width.
this code is pretty simple, if you look beyond all the error handling.
after you build each matrix, you call settransform, passing the matrix itself and the type of matrix it is.
they are simply included to simplify and unify the code base.
okay, windowed programs are great, but most games run full screen.
directdraw is dead, replaced completely by direct3d. direct3d is super-streamlined, and contains many new features.
the nicest part about this method is that it automatically creates all your needed back buffers and depth buffers.
you can change position, color, texture coordinate, or any other property of a vertex.
okay, we can start writing code to draw triangles, the primitive that is the heart of game programming.
; pid3ddevice->settransform(d3dts_world, &matrix); in the example program, your model coordinates are already transformed to world coordinates, so you could just leave this code as is.
shaders one could write a book on shaders and barely scratch the surface of their power.
you can take this approach to the extreme by specifying many indices in another array, and passing the index array to a function, such as drawindexedprimitive, which will draw a large part of the model at once.
since the app won’t read from these vertices, you pass in d3dusage_writeonly.
the back buffer is set to match the surface of the current video mode.
take note that not all the demos will use all the interfaces.
since playback of video is the primary reason why a game developer would use directshow, we’ll do some code that does just that a little bit later.
directx graphics is just plain awesome.
a beefy 3d program may specify coordinates for position, transformed coordinates, color, several texture coordinates, and possibly other information.
to make things simple, each of the demos will share the same basic application.
this is great for all kinds of procedural effects.
true; this tells directx to use a 16 bit z-buffer.
luckily for us, doing this in dx8 is painless.
the rest of directx would do well to follow its lead, especially directshow.
they can get expensive if they are complex.
the most glaring problem with directx graphics is its lack of an existing extension mechanism, like opengl’s glgetstring.
a pair of calls will tell direct3d about your fvf and set your vertex array as your active vertex array (you can have multiple vertex arrays).
other flags are the same as before; d3dusage_writeonly because you only write to the buffer, d3dpool_default to use the default memory configuration, and a pointer to receive the interface.
a beefy 3d program may specify coordinates for position, transformed coordinates, color, several texture coordinates, and possibly other information.
take note that not all the demos will use all the interfaces.
texturing is just one of those things that adds so much visual bang for the buck, that is would be ludicrous not to add it.
format; d3dpresent_parameters describes information such as the format of a display’s surfaces, the type of swapping mechanism, and whether the app is windowed or full screen.
while i can make jokes about microsoft starting over eight times when it comes to directx, the latest version of directx is microsoft’s freshest start since drawprimitive came into style.
if all goes well, this program should produce the exact same output as the last one.
the inheritance graph is very simple: one of the coolest features is the addition of a shader language.
enabling the z-buffer is fairly easy.
when textures and video files were needed, files from the sdk were used.
microsoft’s new shader language looks more like assembly language than it looks like renderman or quake 3’s shader language.
pstreamdata->lock(0, 0, (byte**)&v, 0); for(int ii = 0; ii unlock(); a pair of calls will tell direct3d about your fvf and set your vertex array as your active vertex array (you can have multiple vertex arrays).
shutdowndirect3d simply releases all these interfaces.
the microsoft documentation has some errors in it, so use it as a guideline rather than a rule.
since chroma keying has been removed, the only way to do transparency is with alpha blending.
you also pass the minimum vertex index used (zero in this case), the number of indices used (three), the index number to start on (zero), and the number of triangles to render (one).
you can trust direct3d again, and pass d3dpool_default.
in previous versions of directx media, the directshow libraries (the "base classes") included source code as well as the .libs needed to link.
the advantage to this is that now developers can take advantage of this api without having to install a separate runtime.
2d programming is not dead even with the removal of directdraw.
d3dfvf_diffuse tells direct3d that you will specify a color for each of the vertices.
