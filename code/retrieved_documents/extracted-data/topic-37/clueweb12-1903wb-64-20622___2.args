data is distributed using ip multicasting on supported networks, and through small "proxy servers" on networks that don't support it.
fahrenheit will introduce a new low-level rendering api, fll, which will replace direct3d, but will sit next to opengl which will continue to be developed.
having abstract primitive objects such as spheres of course makes it possible to vary the detail level in the tesselation.
scripts are distributed along with the objects themselves, and execute on all clients.
in my experience it takes an artist many months to truly master a 3d engine and many artist with less experience often create data that cannot be used in a 3d engine, because of engine limitations.
the plan is to use sub-division surfaces technology for this in verse, thus making it possible to render any object smoothly.
the most interesting aspect of the 3d engines are the communities who modify and extend games.
due to the value of a 3d engine in the games market, licensing a commercial 3d game engine has become too expensive for people who are interested in other applications less profitable than games.
data is distributed using ip multicasting on supported networks, and through small "proxy servers" on networks that don't support it.
but the difference is that in a game engine, the engine designer designs everything to fit with his/her 3d engine, but in the case of writing a 3d engine for verse one have to apply to the verse standard.
the dive/tcl execution environment for each script is not distributed with the code, so global variables, although being global in each interpreter, are not seen by clients on other machines.
these libraries are tightly bound to the sgi's own irix hardware, and thus not very portable.
this problem has its origin in the way 3d engines are designed, with most of the focus around effective rendering, and very little attention to usability.
performer is fairly big; the main library (libpf) contains roughly 35 classes (datatypes) with hundreds of operations.
in this text we will take a look at some of the other 3d systems that are available, and how they differ from verse.
the plan is to use sub-division surfaces technology for this in verse, thus making it possible to render any object smoothly.
as another example of performer's rather massive size and complexity, consider the pfearthsky class, which is used to create atmospheric effects from a six-layered sky model.
direct3d enjoys great support from pc graphics hardware manufacturers, but is only available on microsoft operating systems, i.e., windows 95/98/(nt/2000).
a lot of engines have features like physics, networking and ui.
open inventor another of silicon graphics's technologies, open inventor is a a full cross-platform 3d development system.
we will for our development probably use opengl, because of its wide availability on multiple platforms, its high performance and ease of use, and the fact that is supports hardware acceleration of not just the rasterization but also some of the geometry processing (on good hardware, that is:).
the dive/tcl execution environment for each script is not distributed with the code, so global variables, although being global in each interpreter, are not seen by clients on other machines.
much time has been spent to make shore that the verse data set gives the 3d engine programer freedom to program any way they see fit, but at the same time open for optimizations.
the verse geometry data does not support ready-made primitives like inventor does: everything is built from triangles (and the occasional quad).
the apis free the programmer from the burden of learning how to program individual hardware devices on a very low (register) level, and let him/her concentrate on the application.
the apis free the programmer from the burden of learning how to program individual hardware devices on a very low (register) level, and let him/her
low-level 3d rendering apis lowlevel 3d rendering apis exist to give programmers a standardized hardware-independent way of rendering 3d graphics.
so we hope to see rendering engines using more than one of the above mentioned 3d apis.
unlike iris performer, open inventor is less tightly bound to silicon graphics, and is available on non-sgi platforms, including common end-user operating systems such as various versions of microsoft windows and macos.
when the first client connects to the world, it reads the world description from the disk file.
this of course limits the programer some what but on the other hand they will have the benefit of being compatible whit other things written for the verse standard, such as tools, servlets networking and so on.
at the same time, it is perhaps somewhat more flexible.
if a 3d artists or programers learns how the verse standard works, they can produce things that will be compatible whit future features in 3d engines and servlets.
at the top level, fahrenheit features a large model api (flm) as an extension to the fsg.
there is no loss of expressive power, since all inventor objects are converted to triangles sooner or later in the rendering process.
other problems with 3d engines are that they are rarely ported to other platforms than "wintel", and that they are fairly closed in terms of engine source code and tool availability.
dive/tcl also includes procedures for manipulating dive geometry, generating events, some of the key differences between what sics have made in dive and what we plan with verse are: security while dive is designed as a platform for mostly academical use, the goal of verse is to be able to use it as a general-purpose 3d distribution framework.
open inventor is a toolkit for developing interactive 3d applications, so it could probably be used to implement something along the lines of verse, if you added the required networking code and used a binary file format.
data in dive is arranged intoobjects, and the objects are formed into a hierarchical structure.
the file format includes numerous primitive shapes (cones, cubes, cylinders, spheres, facesets, linesets, nurbs, and several others) which are useful for quickly creating simple forms.
for example, while dive is tied to dive/tcl, c, and java, verse is essentially language-neutral.
making them persistent without reducing the degree of "distributedness" achieved by the peer-to-peer model is very difficult.
sgi makes the execution-only environment (called aneoe) available for free, but we want users of verse to be able to develop new browsing software with an absolute minimum of commercial software.
iris performer quoting silicon graphics' own overview, irix performer is "high-performance 3d rendering toolkit for developers of real-time, multiprocessed, interactive graphics applications for the sgi(tm) product line".
there are non-commercial 3d engines available too, but they are rarely used because of the lack of documentation and tools needed to create data for them.
a lot of people in the games industry think licensing is great, since it makes it possible to focus on the game content rather than the technology, and it also makes it possible to drive down the amount of money, staff and time needed to finish a game.
preemtive multitasking code executing from a verse code node will need to be preemptively scheduled, since we can't trust users to write nice cooperative code.
there is no loss of expressive power, since all inventor objects are converted to triangles sooner or later in the rendering process.
in my experience it takes an artist many months to truly master a 3d engine and many artist with less experience often create data that cannot be used in a 3d engine, because of engine limitations.
even though most modern 3d engines are written on top of a 3d api like opengl, glide or direct3d, they are considered to be very advanced, and therefore many game developers choose to license engines from other companies rather than developing their own engine.
often, the api is accelerated (partly or in whole) by being implemented in dedicated 3d hardware.
the format is hierarchical, and very similar to vrml (not surprising, since the initial vrml format was created by basically stripping down open inventor and simplifying it).
open inventor open inventor includes a standard file format for 3d data.
such data cannot be edited by hand, it needs special tools in order to be manipulated, so the storing the data in a human-readable file format is of limited interest.
a lot of people in the games industry think licensing is great, since it makes it possible to focus on the game content rather than the technology, and it also makes it possible to drive down the amount of money, staff and time needed to finish a game.
making them persistent without reducing the degree of "distributedness" achieved by the peer-to-peer model is very difficult.
performer is fairly big; the main library ( libpf) contains roughly 35 classes (datatypes) with hundreds of operations.
often, the api is accelerated (partly or in whole) by being implemented in dedicated 3d hardware.
template graphics software, makers of open inventor for a variety of non-sgi platforms.
dive worlds are not persistent: they only exist as long as at least one client is connected.
dive objects are scriptable in a dialect of tcl called dive/tcl.
this problem has its origin in the way 3d engines are designed, with most of the focus around effective rendering, and very little attention to usability.
open inventor includes a standard file format for 3d data.
dive is truly distributed, in that it is based on a peer-to-peer networking model: there is no concept of a central server through which everything must pass.
if a 3d artists or programers learns how the verse standard works, they can produce things that will be compatible whit future features in 3d engines and servlets.
these libraries are tightly bound to the sgi's own irix hardware, and thus not very portable.
even though most modern 3d engines are written on top of a 3d api like opengl, glide or direct3d, they are considered to be very advanced, and therefore many game developers choose to license engines from other companies rather than developing their own engine.
the most interesting aspect of the 3d engines are the communities who modify and extend games.
low-level 3d rendering apis lowlevel 3d rendering apis exist to give programmers a standardized hardware-independent way of rendering 3d graphics.
iris performer quoting silicon graphics' own overview, irix performer is "high-performance 3d rendering toolkit for developers of real-time, multiprocessed, interactive graphics applications for the sgi(tm) product line".
perfomer uses either opengl or (the older) iris gl as its lower-level rendering graphics library.
open inventor is a toolkit for developing interactive 3d applications, so it could probably be used to implement something along the lines of verse, if you added the required networking code and used a binary file format.
dive on the other hand is completely without such restrictions.
but the difference is that in a game engine, the engine designer designs everything to fit with his/her 3d engine, but in the case of writing a 3d engine for verse one have to apply to the verse standard.
at the top level, fahrenheit features a large model api (flm) as an extension to the fsg.
to make verse complete, we will need to write a 3d engine that will make use the verse api and the verse data structure.
to distribute data from tcl scripts, explicit use of dive properties.
for the gaming industry this is a new way to prolong the life time of games, since once you have finished a game you can download extensions and levels from the internet.
the world is then maintained by update messages sent between clients, to communicate changes.
it has even gone so far that you can today download better editors and tutorials for a game like quake 2 than for a "industry standard" like vrml.
microsoft will let fahrenheit's flm layer replace its planned directmodel api.
as another example of performer's rather massive size and complexity, consider thepfearthsky class, which is used to create atmospheric effects from a six-layered sky model.
however, open inventor is, like iris performer, not a free software product.
a lot of engines have features like physics, networking and ui.
due to the value of a 3d engine in the games market, licensing a commercial 3d game engine has become too expensive for people who are interested in other applications less profitable than games.
the format is hierarchical, and very similar to vrml (not surprising, since the initial vrml format was created by basically stripping down open inventor and simplifying it).
such data cannot be edited by hand, it needs special tools in order to be manipulated, so the storing the data in a human-readable file format is of limited interest.
it includes support for building hierarchical scenes of 3d objects, light sources, etc.
there are non-commercial 3d engines available too, but they are rarely used because of the lack of documentation and tools needed to create data for them.
the verse geometry data does not support ready-made primitives like inventor does: everything is built from triangles (and the occasional quad).
on top of fll there will be a scene graph layer, termed fsg (fahrenheit scene graph), which is said to be the most significant part of fahrenheit.
this of course limits the programer some what but on the other hand they will have the benefit of being compatible whit other things written for the verse standard, such as tools, servlets networking and so on.
we will for our development probably use opengl, because of its wide availability on multiple platforms, its high performance and ease of use, and the fact that is supports hardware acceleration of not just the rasterization but also some of the geometry processing (on good hardware, that is:).
we feel that using an ascii text format for storing 3d data, while very handy for small scenes, doesn't work for large amounts of data.
verse is not bound to a specific api or not even to the basic technique of drawing 3d, but could be ray-traced, scanlined, or even rendered with voxels.
fahrenheit will introduce a new low-level rendering api, fll, which will replace direct3d, but will sit next to opengl which will continue to be developed.
dive world descriptions can be stored on disk in text files.
inventor also includes an event model for interactive scenes, animation objects, postscript printing, and object picking.
microsoft will let fahrenheit's flm layer replace its planned directmodel api.
so we hope to see rendering engines using more than one of the above mentioned 3d apis.
when the first client connects to the world, it reads the world description from the disk file.
the dive/tcl language allows procedures to be bound to dive events and timers, thus making it possible for the code to run when something "interesting" happens in the world.
this simplifies implementing security policies, and makes world persistance easier to achieve.
however, open inventor is, like iris performer, not a free software product.
it has even gone so far that you can today download better editors and tutorials for a game like quake 2 than for a "industry standard" like vrml.
having abstract primitive objects such as spheres of course makes it possible to vary the detail level in the tesselation.
scripts are distributed along with the objects themselves, and execute on all clients.
in this text we will take a look at some of the other 3d systems that are available, and how they differ from verse.
on the other hand, achieving this language-neutrality requires implementing interpreters for all wanted languages...
other problems with 3d engines are that they are rarely ported to other platforms than "wintel", and that they are fairly closed in terms of engine source code and tool availability.
this is an ascii (text) format, which makes it easy to edit using ordinary text editing software.
much time has been spent to make shore that the verse data set gives the 3d engine programer freedom to program any way they see fit, but at the same time open for optimizations.
to make verse complete, we will need to write a 3d engine that will make use the verse api and the verse data structure.
perfomer uses either opengl or (the older) iris gl as its lower-level rendering graphics library.
data in dive is arranged intoobjects, and the objects are formed into a hierarchical structure.
we see a clear advantage in limiting the geometry moduling to just simple triangles and quads, since that lessens the burden on implementors of renderers for the system a great deal.
the world is then maintained by update messages sent between clients, to communicate changes.
we feel that using an ascii text format for storing 3d data, while very handy for small scenes, doesn't work for large amounts of data.
the dive/tcl language allows procedures to be bound to dive events and timers, thus making it possible for the code to run when something "interesting" happens in the world.
verse is not bound to a specific api or not even to the basic technique of drawing 3d, but could be ray-traced, scanlined, or even rendered with voxels.
l i n k s dive is truly distributed, in that it is based on a peer-to-peer networking model: there is no concept of a central server through which everything must pass.
the file format includes numerous primitive shapes (cones, cubes, cylinders, spheres, facesets, linesets, nurbs, and several others) which are useful for quickly creating simple forms.
dive worlds are not persistent: they only exist as long as at least one client is connected.
to distribute data from tcl scripts, explicit use of dive properties.
centralized server unlike dive, which uses peer-to-peer networking, verse is designed to use a standard client/server network architecture.
performer is a toolkit for building single-machine applications only: the classes to not deal with distribution of 3d data and interactive events over a network.
on top of fll there will be a scene graph layer, termed fsg (fahrenheit scene graph), which is said to be the most significant part of fahrenheit.
we see a clear advantage in limiting the geometry moduling to just simple triangles and quads, since that lessens the burden on implementors of renderers for the system a great deal.
performer is a toolkit for building single-machine applications only: the classes to not deal with distribution of 3d data and interactive events over a network.
for the gaming industry this is a new way to prolong the life time of games, since once you have finished a game you can download extensions and levels from the internet.
sgi makes the execution-only environment (called aneoe) available for free, but we want users of verse to be able to develop new browsing software with an absolute minimum of commercial software.
it is not alright for any connected client to do anything to any object at any time.
this is an ascii (text) format, which makes it easy to edit using ordinary text editing software.