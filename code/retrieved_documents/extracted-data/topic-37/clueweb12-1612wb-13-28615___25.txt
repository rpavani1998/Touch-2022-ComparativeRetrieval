gxgetdisplayproperties() returns a structure containing the properties of the display, including bits per pixel, width, height, x pitch, and y pitch.
in fact, they're almost  identical to their windows-only brethren, visual c++ 6.0 and visual basic 6.0.
if you don't need to throw pixels at the screen at the highest speed possible, and you want very good speed without worrying about what new platforms are coming out and whether or not gapi will support them, you should look at the win32 dibsection api.
if you need a form-based data-collector or something to perform field calculations for you, it's ideal.
for one, you're compiling for a processor that simply doesn't exist in the pocketpc world.
using createdibsection(), you can create a buffer of memory that's shared between the application and video driver.
a significant chunk of the win32 api functions (around 90%  of 'em, actually) aren't there.
as you can see, the pocketpc machines are all more expensive than the palms, but the capabilities of the pocketpc's are disproportionately greater.
quakeppc source code and binaries are available here .
so don't  type: messagebox (hwnd, "this is my first ce app", "hello  world", mb_ok); you'll just upset your compiler.
the rich text editor is not available while html is enabled.
as you may have already figured out, though, there is one  chief disadvantage to this approach -- speed.
the second method is to develop for the on-screen pocketpc emulator.
back in the days of windows 3.1, there were only two different ways to handle bitmaps, ddb's and dib's.
a dib's memory is owned by your application, but drawing the bitmap to the screen requires the video driver to convert the bitmap to screen format, which makes displaying them much slower than ddb's.
since embedded visual basic produces programs that are interpreted by the pocketpc's rather rudimentary vbscript interpreter, embedded visual basic isn't really suitable for games.
they are very fast to display but have one gigantic drawback -- you  can't change the bits once you've created the bitmap.
you can ignore unicode no longer
most pocketpc developers quickly find that they need to work between the  two different methods to develop a pocketpc game.
after initializing gapi with gxopendisplay(), you can call gxbegindraw() to get a pointer to the framebuffer.
the file will be compiled, linked, and sent over to the device.
dibsections are weird birds.
all of the  pocketpc functions that take strings are expecting unicode strings.
finally, the emulator only runs on windows nt or windows 2000 for reasons that will be clear later.
don't despair, though.
there are some facts, though, that you might not know. . .
gxgetdefaultkeys() returns a struct containing the standard key-values that pocketpc supports, so you can easily check to see if a key is down.
excel running on an h/pc the market for handheld pc's based on windows ce unfortunately is in decline.
copying the app to the on-screen emulator and running is almost instantaneous.
simply choose the processor that your device has and press the  "make" button just as if you were making a standard windows  application.
jimmy's windows ce software www.pocketgamer.org ziosoft your name: or sign in html mode is enabled.
every year a  new version comes out with new capabilities, some of which supercede existing  capabilities.
- at the time of this writing, demand for compaq's ipaq handheld has outstripped supply for nine months - pocketpc is much more capable than palm for a decent gaming experience - pocketpc has been gaining market share what is windows ce and what is pocketpc? background unlike microsoft's previous efforts at rom-able windows, windows ce is a ground-up rewrite.
the dibsection api and ceanim
the menubar shrank and moved to the bottom.
also, the emulator takes on the capabilities of the compiling machine, so you'll likely be developing your app on a 24-bit screen even though there are no pocketpc's with 24-bit screens.
the first is by compiling your  game for a connected device, then uploading, running, and debugging the game  over the connection (usually serial).
the biggest difference is that they do not generate native x86 windows  applications.
just be prepared, when developing a pocketpc app, to hunt for updated versions of some of your favorite api functions.
another problem with gapi is that direct framebuffer access precludes all of the nice window commands.
what it wants to see is: messagebox (hwnd, text("this is my first ce app"),  text("hello world"), mb_ok); the text-macro simply converts a string at compile-time to unicode  format.
several  console games were ported using wing, likeearthworm jim and a few  other scrolling platform-games.
on the whole, it's much more more extensive  and high-level than gapi.
since embedded visual basic produces  programs that are interpreted by the pocketpc's rather rudimentary vbscript  interpreter, embedded visual basic isn't really suitable for games.
several console games were ported using wing, likeearthworm jim and a few other scrolling platform-games.
comments show more » | view all recent resources» 0 pocketpc: an introduction
by john hattan | published feb 28 2001 10:51 am in mobile development - article - comments (0) - revisions (4) - related stuff (25) windows ce is a monstrous mess, and it's frighteningly difficult to use microsoft is going to dump it palm has the market all sewn up
in fact, the api functions that aren't part of the kernel, window, and gdi modules of windows probably aren't there.
thankfully, though, you don't have to worry about what processor for which you're writing.
let's concentrate on the  embedded visual c++.
biplane ace for palm how do you  program for pocketpc?
operating systems are evolutionary things.
jump to content search advanced - search section: - google - articles - forums - members - help files - developer journals - gallery - calendar - downloads - resources - store - classifieds - tracker - home - for beginners - technical - game programming - general programming - graphics programming and theory - directx and xna - opengl - multiplayer and network programming - artificial intelligence - math and physics - mobile & console development - apis and tools - creative - game design - writing for games - music and sound - visual arts - gallery - business - breaking into the industry - business & law - production & management - community - forums - developer journals
examine a variable in memory, and visual c++ will get the value and show it to you on your main screen.
press the "run" button, and your app will pop up on the device's screen.
every year a new version comes out with new capabilities, some of which supercede existing capabilities.
the principal advantage to this approach is speed.
if this all looks great, and you're chomping at the bit to convert your large-scale directdraw-based isometric rpg title to the pocketpc, there's something you need to know.
in the latter days of windows 3.1, microsoft created the much-maligned wing. wing added a third bitmap type that combined the best of both worlds.
there are some technologies that'll ease the  pain of losing directx. gapi gapi,  formally gamex, is a technology that ms licensed that allows direct framebuffer  access for games in a reasonably portable way.
it's up to the hardware maker how the video memory is organized.
pressing the "run" button will then run your app in the on-screen windows ce emulator.
the wing api survived into windows 95  as the dibsection api, and it still exists today.
both doom and quake 1 have  been ported to pocketpc, and you can use them to develop your own projects.
let's dispense early  on with visual basic for games, though.
drawtext() was better than textout(), so  drawtext() got to stay.
here's a comparison of some of the best of the pocketpc offerings compared with the best color palm titles.
despite the technical superiority of hardware like the casio e-100 series, the palm-size pc platform was savaged by critics for being overcomplicated and clumsy to use.
while it may look more or less like plain old windows , it is a completely different animal from windows 3.x, windows 9x, and windows nt.
thankfully, though, an intrepid  hacker wrote a gapi dll that indeed works on the emulator.
pocketpc: an introduction gaiiden 3 jun 17 2011 11:23 am pocketpc:
the h/pc 2000 desktop the only major difference is that the applications don't live in nice little overlapping panes.
the doom and quake engines direct3d and opengl don't exist for pocketpc, but you're not out of luck if you're looking for 3d that fits in your pocket.
while some extensions like winsock are still around (supporting ir communication, cool eh?), many of the latter-day add-ons to windows are nowhere to be found.
hence, windows ce was written to work with for alternative processors with very low power consumption, like the strongarm, sh3/sh4, and mips.
jimmyark 2 on pocketpc karate master for palm race fever for palm biplane ace for palm how do you program for pocketpc?
hey, where's globalalloc?
while compiling the file and  sending it over to the device happens at a reasonable speed, debugging is  downright glacial.
after dumping the dead wood, the designers went through the list of similar, yet redundant functions.
the os makers, though, often must leave antiquated function calls  in place to keep from breaking old apps.
developing an app for the on-screen emulator will make you feel right at home if you're used to developing standard windows apps under visual c++ 6.0.
first off, it's propriatary.
a dib's memory is owned by your application, but drawing the bitmap to  the screen requires the video driver to convert the bitmap to screen format,  which makes displaying them much slower than ddb's.
the terms of id's licenses are available here.
articles - » technical - » mobile development - » article: pocketpc: an introduction partners - - mark community read - - forums - members - developer journals - gallery - downloads - resources - store - classifieds - tracker - mark all as read - help copyright © 1999-2012 gamedev.
since the screen is so small, apps automatically grow to the size of the screen, and the title and menubars are combined.
since there weren't going to be any  old ce apps, the designers went through the win32 api with a fine-toothed comb  to prune it down to its bare essentials -- a library that would still allow you  to create powerful apps, but without supporting a lot of antiquated function  calls.
if a particular device has some picadillos germaine to  its processor, you won't see them when it runs on the emulator.
the second method is the device independent  bitmap.
if you want to change the bits, you need to create a new bitmap, which make it far less than optimal for displaying frames of animation.
it's  easy to develop for them.
not only are there some very capable developer tools for pocketpc, they're available for a song.
rather than make processor-emulators for the various processors out there, ms simply built a version of windows ce that runs on an x86 processor.
hence, if you're looking foraddatom() or getwindowword(), you won't find them.
while gapi's strengths are that it is very simple and does the job it sets out to do, it has a couple of weaknesses.
finally, gapi doesn't  run on the emulator, which gets rid of some of the advantages of developing  on-screen as mentioned in the previous article.
game technologies while directx isn't there, you're not completely out of luck.
the package includes embedded visual c++, embedded visual basic, and emulators for the platforms mentioned above.
the  engines for both doom and quake are both freely available and use the gnu  public license, so you can freely use them in your own projects -- even  commercial ones!
for the bulk of development, the on-screen emulator is the way to go.
it took very good advantage of color.
there's a sound class that can play multiple sounds at once so you don't have to cripple the sounds in your game.
the c++ compiler cross-compiles to the aforementioned processors, while embedded visual basic produces files that are interpreted by a vbscript-style interpreter on the target device.
on the whole, it's much more more extensive and high-level than gapi.
as you may have already figured out, though, there is one chief disadvantage to this approach -- speed.
the pocketpc api is different from the win32 api sorry to throw a bucket of cold water on your plans, but if you have grand designs on simply recompiling your code and having it work, it's not going to happen that easily.
using the on-screen emulator, you can run an application under the debugger and it will run just as quickly as if you were debugging a native windows application.
from time to time, though, you'll need to compile on the device so you can ensure that the graphics look right, the game is playing at a reasonable speed, and no bugs are creeping in that aren't showing up on the emulator.
there are some technologies that'll ease the pain of losing directx. gapi gapi, formally gamex, is a technology that ms licensed that allows direct framebuffer access for games in a reasonably portable way.
while the whole of the win32 api isn't there, there's enough to get around.
this goes for every hard-coded string in your application, from window-class-names to filenames you pass to the file-handling commands.
ddb's (device dependent  bitmaps) are owned by the video driver and are in whatever format
you'll probably want to save debugging on the device as a last resort to fix bugs that don't show up under the next method -- compiling for the pocketpc emulator.
it's certainly worth a  look.
set a breakpoint in your code, and the code will stop when it gets to that point.
copying the app to the on-screen emulator and running is  almost instantaneous.
embedded visual c++ works through ms's activesync software, which is the software used to connect your pocketpc to your computer to exchange data with your address book and calendar.
just kiss the venerable old char * goodbye.
the pocketpc api is different from the win32 api sorry to throw a bucket of cold water on your plans, but if you have grand  designs on simply recompiling your code and having it work, it's not going to  happen that easily.
this article is going to explore what exactly is windows ce, what this pocketpc thing is, some of the technical aspects that make it the finest platform for handheld gaming available today, and how to get started developing for one.
both doom and quake 1 have been ported to pocketpc, and you can use them to develop your own projects.
tha palm's horrible four-horizontal-keys layout.
net llc gamedev.net™, the gamedev.net logo, and gdnet™ are trademarks of gamedev.net, llc navigation - home - features - community - resources - careers customer service - gdnet+ subscriptions - job advertising - terms of service - privacy policy company info - about us - advertise on gamedev.net - contact us sign in - need an account?
simply choose the processor that your device has and press the "make" button just as if you were making a standard windows application.
while this sounds complicated, it's  actually quite simple.
a significant chunk of the win32 api functions (around 90% of 'em, actually) aren't there.
this time, it actually works.
in the latter  days of windows 3.1, microsoft created the much-maligned wing. wing added a  third bitmap type that combined the best of both worlds.
doomce source is availablehere.
making a truly tiny machine based on a pentium-class processor just wouldn't be practical, because even though there are low-power pentium-class processors for laptops, shrinking a pentium machine to the size of a deck of cards and still getting reasonable battery life just wasn't going to happen.
best of all, though, is that it addresses a problem caused by the loss of directsound -- wave mixing.
windows ce running on a p/pc about a year ago, microsoft released a new version of the windows ce interface, redubbed "pocketpc".
ddb's (device dependent bitmaps) are owned by the video driver and are in whatever format the driver prefers.
examine a variable in memory, and visual c++ will get the value and  show it to you on your main screen.
you can change the bits as necessary and blit the buffer to the screen very quickly using the standard old bitblt() command.
and there are a few technologies that will help you develop games  that rival what you see on the desktop.
comments - peter molyneux: how to get a job in games devel... feb 24 2012 11:17 am | 0
gxgetdisplayproperties() returns a structure containing the  properties of the display, including bits per pixel, width, height, x pitch,  and y pitch.
- gdnet+ subscriptions - gallery - books - calendar - store - classifieds - job offers - contractors for hire - contract projects - hobbyist projects - marketplace watched content new content - articles - » technical - » mobile development - » article: pocketpc: an introduction categories (see all) - technical - game programming - general programming - graphics programming and theory - directx and xna - opengl - multiplayer and network programming - artificial intelligence - math and physics - mobile development - apis and tools - creative - game design - music and sound - visual arts - business - event coverage - breaking into the industry - business and law - interviews - production and management recent resources - autodesk media summit 2012
while this sounds complicated, it's actually quite simple.
developing a mobile application with flash video game localisation - a tricky game comparing shadow mapping techniques with shadow explorer new incentives and a whole new platform from the intel appup developer program autodesk previews a games production solution 3d in photoshop: the ultimate guide for creative professionals getting your app on intel appup: porting "ancient frog" why appup?
let's concentrate on the embedded visual c++.
windows ce programming windows ce essential windows ce application programming windows ce 3.0 application programming discussion groups an active mailing list on yahoogroups is windowsce-dev hpc.net has a windows ce developer's mailing-list with over 1500 members!
there  are unicode equivalents for all of your favorite string-handling functions, so  don't get too upset.
just be prepared, when developing a  pocketpc app, to hunt for updated versions of some of your favorite api  functions.
rather than make  processor-emulators for the various processors out there, ms simply built a  version of windows ce that runs on an x86 processor.
in addition to framebuffer access, gapi gives you a relatively platform-neutral way of accessing the pocketpc's controls.
they are very fast to display but have one gigantic drawback -- you can't change the bits once you've created the bitmap.
gxgetdefaultkeys() returns a struct  containing the standard key-values that pocketpc supports, so you can easily  check to see if a key is down.
it's without-a-doubt the fastest way to throw pixels on the screen, but it's got a couple of drawbacks.
comments - how we built an ios game on pc feb 23 2012 07:07 pm | 3 comments - 3d animation techniques with xna game studio 4.0 feb 23 2012 02:40 pm | 0
conclusion pocketpc's are cool.
something else you're going to have to get used to is text-handling.
tha palm's  horrible four-horizontal-keys layout.
furthermore, your emulated app will likely be running much  faster emulated than on the device, so you won't get a good feel for how your  game plays if you develop solely for the emulator.
after dumping the dead wood, the designers went through the  list of similar, yet redundant functions.
there a couple of game-related technologies  available that will help you ease the pain of working for the platform.
also, the  emulator takes on the capabilities of the compiling machine, so you'll likely  be developing your app on a 24-bit screen even though there are no pocketpc's  with 24-bit screens.
it leverages the dibsection api to the hilt to provide all kinds of animation  effects, including sprite animation, alpha blending, dirty rectangle  management, and palette management.
if you  have windows 95/98/me, you're stuck with developing on the connected device.
the biggest difference is that they do not generate native x86 windows applications.
while the whole of the win32 api isn't there, there's enough to  get around.
drawtext() was better than textout(), so drawtext() got to stay.
if this all looks great, and you're chomping at the bit to convert your  large-scale directdraw-based isometric rpg title to the pocketpc, there's  something you need to know.
numbers, though, can only give you part of the story.
it's a great way to get your app up and running quickly, and debugging is a breeze.
if you  don't need to throw pixels at the screen at the highest speed possible, and you  want very good speed without worrying about what new platforms are coming out  and whether or not gapi will support them, you should look at the win32  dibsection api.
and there are a few technologies that will help you develop games that rival what you see on the desktop.
in addition to graphics, ceanim includes a  library of common data structures and memory management functions.
device processor ram screen sound price *casio e-125150 mhz vr412232 mb320x240 16-bit color16-bit stereo, 44 khz, mp3$482compaq ipaq 3650206 mhz intel strongarm32 mb320x240 12-bit color16-bit stereo, 44 khz, mp3$482compaq ipaq 3100206 mhz intel strongarm32 mb320x240 4-bit grayscale16-bit stereo, 44 khz, mp3$350hp jornada 548133 mhz hitachi sh-332 mb320x240 12-bit color16-bit stereo, 44 khz, mp3$450hp jornada 545133 mhz hitachi sh-316 mb320x240 12-bit color16-bit stereo, 44 khz, mp3$400palm iiic20 mhz motorola dragonball8 mb160x160 8-bit colormonophonic tone generator (beep)$282palm viix20 mhz motorola
the start menu was moved to a little icon in the corner.
direct3d, directdraw, directinput, directplay, and opengl pocketpc doesn't support them.
calling it an emulator, though, is a bit of a misnomer.
you could modify the  bits directly, and you could display them to the screen quickly.
the os makers, though, often must leave antiquated function calls in place to keep from breaking old apps.
most pocketpc developers quickly find that they need to work between the two different methods to develop a pocketpc game.
finally, gapi doesn't run on the emulator, which gets rid of some of the advantages of developing on-screen as mentioned in the previous article.
since there weren't going to be any old ce apps, the designers went through the win32 api with a fine-toothed comb to prune it down to its bare essentials -- a library that would still allow you to create powerful apps, but without supporting a lot of antiquated function calls.
all of the pocketpc functions that take strings are expecting unicode strings.
apr 18 2012 02:19 pm | 0
the second method is the device independent bitmap.
while  some extensions like winsock are still around (supporting ir communication,  cool eh?), many of the latter-day add-ons to windows are nowhere to be found.
in response to the instant success of the palm computing platforms, microsoft introduced the palm-size pc.
this goes for every hard-coded string in your application, from  window-class-names to filenames you pass to the file-handling commands.
this is important because while some handhelds like the casio and the ipaq have nice little direction-pads, some like the new hp pocketpc decided to clone
comments - getting started with audacity feb 24 2012 10:04 pm | 0
furthermore, your emulated app will likely be running much faster emulated than on the device, so you won't get a good feel for how your game plays if you develop solely for the emulator.
thankfully, switching between one approach and another is as simple as choosing the target processor on the toolbar and recompiling.
it's been around since windows 95, and it works.
critics, on the whole, have been warm to the changes, finding the interface faster and easier to use.
thankfully, though, an intrepid hacker wrote a gapi dll that indeed works on the emulator.
developing an app for the on-screen emulator will make  you feel right at home if you're used to developing standard windows apps under  visual c++ 6.0.
there are plenty of disadvantages, though, to this approach.
you'll probably  want to save debugging on the device as a last resort to fix bugs that don't  show up under the next method -- compiling for the pocketpc emulator.
using createdibsection(), you  can create a buffer of memory that's shared between the application and video  driver.
microsoft has several active newsgroups for ce/pocketpc development microsoft.public.win32.programmer.ce microsoft.public.pocketpc.developer microsoft.public.windowsce.app.development hardware sites pocketpc.com compaq's ipaq hp's jornada casio's e-100 series games (be sure to check out your competition)
if you need  a form-based data-collector or something to perform field calculations for you,  it's ideal.
best of all,  though, is that it addresses a problem caused by the loss of directsound --  wave mixing.
another problem with gapi is that direct framebuffer access  precludes all of the nice window commands.
pocketquake on the ipaq zio golf on pocketpc (landscape mode)
if your pocketpc is connected via activesync, you've done all that's necessary to develop for your device.
the standard windows interface, while it worked well on larger screens, was tight on handhelds and was downright difficult on a small 240x320 screen.
you could modify the bits directly, and you could display them to the screen quickly.
calling it  an emulator, though, is a bit of a misnomer.
for the most part, if there existed  several functions that did a similar job, they just kept the one or two that  could best cover the capabilities of the rest.
while compiling the file and sending it over to the device happens at a reasonable speed, debugging is downright glacial.
you may lose some formatting when you deselect html mode and switch back to the rich text editor.
like the handheld pc, it started out with several vendors, many of which bailed after low sales, like uniden and philips.
there a couple of game-related technologies available that will help you ease the pain of working for the platform.
after initializing gapi with  gxopendisplay(), you can call gxbegindraw() to get a pointer to the  framebuffer.
in addition to framebuffer access, gapi gives you a relatively  platform-neutral way of accessing the pocketpc's controls.
you can purchase microsoft's embedded visual tools 3.0 cd from microsoft  for only the cost of shipping and handling.
let's dispense early on with visual basic for games, though.
to compile for the emulator, you set the target processor as the x86 ce emulator, press the "make" button, and embedded visual c++ will generate a windows ce app that runs on the x86 processor.
so don't type: messagebox (hwnd, "this is my first ce app", "hello world", mb_ok); you'll just upset your compiler.
compare revision date title editor 4
the designers of ce decided early on to focus on portability and small size in the design of ce, and it shows.
what it wants to see is: messagebox (hwnd, text("this is my first ce app"), text("hello world"), mb_ok); the text-macro simply converts a string at compile-time to unicode format.
set a breakpoint in your code, and the code will stop when it gets to  that point.
there are unicode equivalents for all of your favorite string-handling functions, so don't get too upset.
the pitch values specify the distance between pixel values in the  buffer, because a framebuffer is not necessarily a 240x320 array of 16-bit  values.
- username - password i've forgotten my password - remember me this is not recommended for shared computers - sign in anonymously don't add me to the active users list
the development tools are robust and very inexpensive.
not only are  there some very capable developer tools for pocketpc, they're available for a  song.
the c++ compiler cross-compiles to the aforementioned processors,  while embedded visual basic produces files that are interpreted by a  vbscript-style interpreter on the target device.
back in the days of windows 3.1, there were only  two different ways to handle bitmaps, ddb's and dib's.
much like microsoft's unsuccessful plans for windows nt running on every desktop platform, you can write to a standard windows api and get your application to work on all ce processors with a simple recompile.
if you want to change the  bits, you need to create a new bitmap, which make it far less than optimal for  displaying frames of animation.
using the on-screen emulator, you can run an application under the  debugger and it will run just as quickly as if you were debugging a native  windows application.
embedded visual c++ works through ms's activesync  software, which is the software used to connect your pocketpc to your computer  to exchange data with your address book and calendar.
for the most part, if there existed several functions that did a similar job, they just kept the one or two that could best cover the capabilities of the rest.
createfont() is gone, but  createfontindirect() is still there.
best of all, microsoft finally made available the baby-office apps that had previously only been available on the handheld pc's.
you can purchase microsoft's embedded visual tools 3.0 cd from microsoft for only the cost of shipping and handling.
the development tools are robust and very  inexpensive.
since unicode is the way of the world, and supporting both ansi and unicode would take up more space than necessary, ansi strings got the boot.
an introduction gaiiden 2 jun 17 2011 11:21 am pocketpc: an introduction gaiiden 1
devices while windows ce is not locked into any particular form-factor and is capable of running on anything from embedded microcontrollers to cell-phones, two main form-factors have become predominant, the handheld pc and the pocketpc.
download it atftp://www.randomly.c.../ceanim_src.zip.
for the bulk of development,  the on-screen emulator is the way to go.
it looks and acts very similarly to the windows you've come to know and tolerate.
if you want to draw a line, some  text, or stretch a bitmap, you're on your own.
how the compiler works there are two ways to develop an app for pocketpc, and you will very likely be using both methods interchangeably.
if you have windows 95/98/me, you're stuck with developing on the connected device.
if you've been reading the trade articles of the past few years, this is probably the impression you got from microsoft's handheld entries.
since  unicode is the way of the world, and supporting both ansi and unicode would  take up more space than necessary, ansi strings got the boot.
while there are gapi dll's available for casio,  compaq, and hp, there aren't any such dll's available for other models or  form-factors, and you're beholden to microsoft if any new pocketpc models come  out.
game technologies while directx isn't there,  you're not completely out of luck.
if a particular device has some picadillos germaine to its processor, you won't see them when it runs on the emulator.
also shown are a couple of popular palm devices for comparison.
hence,moveto() and lineto() are  gone, butpolyline() is still there.
finally, the emulator only  runs on windows nt or windows 2000 for reasons that will be clear later.
there's a sound class that can play multiple sounds at once so you  don't have to cripple the sounds in your game.
while gapi's strengths are that it is  very simple and does the job it sets out to do, it has a couple of weaknesses.
pressing the "run" button will then  run your app in the on-screen windows ce emulator.
it's without-a-doubt the fastest  way to throw pixels on the screen, but it's got a couple of drawbacks.
the pitch values specify the distance between pixel values in the buffer, because a framebuffer is not necessarily a 240x320 array of 16-bit values.
if anything, check  out the author's ce offerings at the web address above to see the kind of  things you can do.
there are plenty of disadvantages, though, to this  approach.
ceanim is an extensive class library for windows ce by random software (www.randomly.com).
the new pocketpc interface capabilities the best way to show the capabilities of the respective devices is to show them side-by-side.
it's easy to develop for them.
it leverages the dibsection api to the hilt to provide all kinds of animation effects, including sprite animation, alpha blending, dirty rectangle management, and palette management.
press the "run" button, and your app will pop up on the device's  screen.
while there are gapi dll's available for casio, compaq, and hp, there aren't any such dll's available for other models or form-factors, and you're beholden to microsoft if any new pocketpc models come out.
how the compiler works there are two ways to develop an app for pocketpc, and you will very likely be  using both methods interchangeably.
in fact, the api functions that aren't part  of the kernel, window, and gdi modules of windows probably aren't there.
the first is by compiling your game for a connected device, then uploading, running, and debugging the game over the connection (usually serial).
while internally it was basically the same windows ce as the earlier versions, the user-interface was retooled to work better on a tiny screen.
the tools are very mature and robust.
well, you're in luck.
the engines for both doom and quake are both freely available and use the gnu public license, so you can freely use them in your own projects -- even commercial ones!
while the platform started strongly a few years ago with high-quality offerings like the philips velo, hp jornada, sharp mobilon, and vadem clio, only the hp has survived until the release of ms's handheld pc 2000 software.
here is a table showing the capabilities of the most popular pocketpc devices on the market.
in addition to graphics, ceanim includes a library of common data structures and memory management functions.
it's certainly worth a look.
if anything, check out the author's ce offerings at the web address above to see the kind of things you can do.
for one, you're compiling for a processor that simply doesn't exist  in the pocketpc world.
the doom and quake engines direct3d and opengl don't exist for pocketpc, but you're not out of luck  if you're looking for 3d that fits in your pocket.
dragonball8 mb160x160 2-bit grayscalemonophonic tone generator (beep)$338* based on the lowest mysimon.com price at the time of writing
comments - using animated pieces in a board-based game wit... feb 24 2012 11:17 pm | 0
for games, though, it's just not there.
from time to time, though,  you'll need to compile on the device so you can ensure that the graphics look  right, the game is playing at a reasonable speed, and no bugs are creeping in  that aren't showing up on the emulator.
hence,moveto() and lineto() are gone, butpolyline() is still there.
if your pocketpc is  connected via activesync, you've done all that's necessary to develop for your  device.
this is important  because while some handhelds like the casio and the ipaq have nice little  direction-pads, some like the new hp pocketpc decided to clone
the game maker's companion interview with firelight technologies learning ios game programming real-time dynamic fur on the gpu a super simple method for creating infinite scenery a type-safe generic pointer a collection of examples of 64-bit errors in real programs - home - »
this version should look instantly familiar.
the device and embedded visual c++ are constantly having to  update each other as to the status of your running program.
in fact, they're almost identical to their windows-only brethren, visual c++ 6.0 and visual basic 6.0.
thankfully, switching between one  approach and another is as simple as choosing the target processor on the  toolbar and recompiling.
comments - producer consumer using double queues feb 22 2012 09:13 am | 0
jun 17 2011 11:06 am pocketpc: an introduction gaiiden
it's a great way to get your app up  and running quickly, and debugging is a breeze.
the wing api survived into windows 95 as the dibsection api, and it still exists today.
to compile for the  emulator, you set the target processor as the x86 ce emulator, press the  "make" button, and embedded visual c++ will generate a windows ce app  that runs on the x86 processor.
if you want to draw a line, some text, or stretch a bitmap, you're on your own.
pocketpc development resources compilers microsoft mobile device developer pocketc (a third-party c develpment environment that actually runs on the device) books inside microsoft
a quick review of the appup model
ceanim is an  extensive class library for windows ce by random software (www.randomly.com).
createfont() is gone, but createfontindirect() is still there.
the device and embedded visual c++ are constantly having to update each other as to the status of your running program.
the package includes embedded  visual c++, embedded visual basic, and emulators for the platforms mentioned  above.
hence, if you're looking foraddatom() or getwindowword(), you won't find  them.
here's what the baby version of excel looks like on the same machine.
you can change the bits as necessary and blit the buffer to the screen  very quickly using the standard old bitblt() command.
it's only ten function calls.