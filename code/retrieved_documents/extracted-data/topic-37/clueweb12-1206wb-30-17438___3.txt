in c++  certain paradigms are definitely harder to grasp than others.
it would be far better if they incorporated less stuff in less timeframes so new standards can be released more often.
this is a discussion on c++0x concepts fall within the general  discussions forums, part of the community boards category; in general,  direct3d is designed to be a 3d hardware interface.
opengl, on the other hand, is designed to be a 3d rendering system that may be hardware accelerated.
no different  from so many other professional areas, from accounting to scientific fields.
but hey, here it is...
the reason we have 'using' instead of 'typedef' is, i think, mainly one of grammar.
everything else  is just unnecessary fluff share 6,998 originally posted by brafil seems  like they have understood that they were making the language too complex.
of course, whenever there is a chance to simplify learning and usage one should take it.
one of concepts primary aim was  exactly to create the necessary groundwork that would help to considerably  improve current template diagnostics.
i'm not sure i understand this  argument very well.
however theconcept of concepts was  immediately understood.
so you want to do oop programming.
"simple" is often harder or impossible to achieve... should the alternative be no feature at all?
should we remove them to make the language easier to learn?
originally posted by brewbuck: reimplementing a large system in another language to get a 25% performance boost is nonsense.
i may be looking at concepts as easier simply because i understand better now what generic programming is under c++.
expert programmers should not have to suffer because newbies might have a difficult time grasping all concepts.
is there a single developer out there that knows the entire c# or java standard library?
like always using the new function definitions - looks more like pascal.
code:class a { a(int, float, std::string); }; class b { b(std::initializer_list); }; a a{1, 1, "hello"}; b b{1, 2, 3, 4, 5, 6, 7, 8, 9}; all the buzzt!
and it really  surprises me the whole debate around complexity vs. simplicity.
being that concepts was primarily aimed at library developers, does it really makes sense to ask "will joe coder use concepts"?
a hard to follow syntax is invariably going to be learned at  some point, the same goes for semantics.
i was hoping the new standard would be finalized soon because the longer it takes the longer we have to wait for it to appear in compilers.
why is this thread turning into "opengl vs direct3d"?
it's in my opinion a mistake to oversimplify or to aim for simplicity above all else.
cornedbee "there is not now, nor has there ever been, nor will there ever be, any programming language in which it is the least bit difficult to write bad code.
originally posted by brafil using instead of typedef.
however theconcept of concepts was immediately understood.
initializer lists can be heterogenous, and the compiler will interpret the elements as constructor arguments and do overload resolution.
i  have very personal opinions on that matter which probably aren't very popular.
maybe they'll include them later.
logical: using thisisgood = void (*)(int); //
i personally don't like the new function definition types nor the new typedef possibilities.
it does seem to me that, based on the article, there have been some significant missteps.
and i don't know who will  implement all this share posts 3,242 why is this thread turning into "opengl vs  direct3d"?
opengl, on the other hand, is designed to be a 3d rendering  system that may be hardware accelerated.
c++ is supposed to be a general purpose programming language, combining multiple paradigms.
and it really surprises me the whole debate around complexity vs. simplicity.
in my view, this alone makes concepts a  feature that reduces programming complexity already.
arcane: typedef void (*whyisthenamehere)(int); //
the feature set of direct3d  is derived from the ... linkback posts 1,036 in general, direct3d is designed to be a 3d hardware  interface.
can i be biased by the fact i was already  aware of generic programmingconcept and its advantages when i first  started reading about concepts?
and i don't know who will implement all this why is this thread turning into "opengl vs direct3d"?
and it's either heads or tails.
as i said, it's a grammar problem.
these two apis are fundamentally  designed under two separate modes of thought.
i have very personal opinions on that matter which probably aren't very popular.
fun: template  struct metafunction { using type = std::string; }; template <> struct metafunction { using type = std::vector; }; template  using stringtype = typename metafunction::type; stringtype this_is_a_std_string; stringtype this_is_a_char_vector;just another question: can you have mixed initalizer lists (std::initializer_list)?
one day, whe, he feels more comfortable with the  language and decides to step into more complex areas of software development.
" - flon's law why is this thread turning into "opengl vs direct3d"?
seems like they have understood that they were making the language too complex.
but hey,  here it is... c++ is already a complex language to learn and use .
this is a discussion on c++0x concepts fall within the general discussions forums, part of the community boards category; in general, direct3d is designed to be a 3d hardware interface.
but i love static_assert and many others.
but hard to track bugs or hard to understand compiler reports is going to  strain the coder a lot more.
the feature set of direct3d is derived from the feature set of what  hardware provides.
it's in my  opinion a mistake to oversimplify or to aim for simplicity above all else.
it leaves a foul taste in my mouth that politics and frivolous debate was the real issue.
templates are a very important part of c++!
joe coder  will use concepts yes.
i understand that they dropped them.
it is in my view acceptable that generic programming is accepted as being even harder.
originally posted by phantomotap "integration, especially with the library, was a very complex task, and uncovered many weaknesses, both of concepts themselves and of other language features, such as rvalue references.
it just seems, with concepts, c++ generic programming would  be made easier to teach and learn.
it should also be the understanding that some jobs simply aren't as easy as others.
but  i love static_assert and many others.
c++ is a  multi-paradigm programming language.
but it's a fact that it took me a long time to actually  soak in the concept of generic programming to start taking advantage of it  beyond simple function templating.
but hard to track bugs or hard to understand compiler reports is going to strain the coder a lot more.
and i liked  it because of that.
i'm not sure i understand this argument very well.
it just seems, with concepts, c++ generic programming would be made easier to teach and learn.
and you have to say... call it.
i know the internals of only one compiler, but i can tell that while it would be possible to modify it to parse this, it would lead to some very ugly code in the parser.
at any rate, i'm just looking forward to the "auto" keyword.
of course, whenever  there is a chance to simplify learning and usage one should take it.
so we should rather have called it c++1x.
code:using int = int; //
a hard to follow syntax is invariably going to be learned at some point, the same goes for semantics.
but this can't be the basis for deciding wether a feature is going to be implemented or not.
the feature set of direct3d is derived from the ...
c++ is a multi-paradigm programming language.
i forgot how easy it was to derail threads simply by mentioning those two words.
i think that would be nice.
there are so many things that are added,  and i doubt there will be a complete reference for c++0x -
i didn't really grasp that.
"simple" is often harder or impossible to achieve... should the  alternative be no feature at all?
finally, there's the admission that conceptually c++ templates are irreprehensible, but the theoretic basis on which they were implemented in c++ is weak.
especially if you then compare that tostroustrup article.
this has also a lot to do with the natural characteristic of c++ of being a modular programming language, which makes it easy to teach and learn.
よくきくがいい！わらわはてんさいだからね！ ^_^ i don't blame.
you declare template typedefs the same way you declare namespace aliases.
how about that: code:template  typedef getter = const type &(*)(void); template  typedef setter = void (*)(const type &); getter isactive; setter setactive;so, just typedef instead of using?
the language is made  harder for them and it will take a long while until all the new concepts,  semantics and syntax get buried in their brain.
just another question: can you have mixed initalizer lists (std::initializer_list)?
but the discussion was about concepts, right?
joe coder will use concepts yes.
now they're discussing a "nothrow" annotation that is actually part of the type system.
the way typedef works, i think it would be very hard to make template typedefs that don't look absolutely atrocious.
" - flon's law originally posted by brafil
quiet technologies... that make some noise.
the language is made harder for them and it will take a long while until all the new concepts, semantics and syntax get buried in their brain.
it would be cheaper to just get a computer which is 25% faster.
but inm my defense i'll say that i'm in fact a newcmmer to generic programming with no more than 1 year on my back and very little to show in terms of actual work.
this has far more repercussions than just  the admission we can use different tools for different jobs.
just a question: isn't it possible to add template typedefs?
in c++ certain paradigms are definitely harder to grasp than others.
what we have now is a syntax that is somewhat easy  to teach, semantics somewhat easy to learn, but the coder is left alone trying  to understand template related errors messages.
the "c" way is one of the things i truly like about c/c++.
it should also be  the understanding that some jobs simply aren't as easy as others.
it's my feeling  it is the latter.
i  understand that they dropped them.
can i be biased by the fact i was already aware of generic programmingconcept and its advantages when i first started reading about concepts?
so i'd give this 3rd point also some consideration.
so, just typedef instead of using?
there are so many things that are added, and i doubt there will be a complete reference for c++0x -
template: template  using specialvector =
the feature set of direct3d is derived from the feature set of what hardware provides.
making it easier and more powerful, even.
so, you want to do generic programming.
for a newcommer  going from procedural programming to oop is a big step.
but the  three aspects... 1.
anyway, i think concepts are a good idea, but not a great one.
and i liked it because of that.
but i don't know a better way of doing it.
the using keyword doesn't have as much grammatical cruft attached.
c++ is already a complex language to learn and use .
many concepts are great: constexpr, rvalue references, extern templates, initializer lists, auto variable, decltype, the new for-loops, thread_local, regexes, suffixes - a nice "toy" that can be both very fun and useful the things i would reconsider: nullptr - it's not very elegant imo.
just like he did a couple of years ago when he decided it was time to go oop  and tackle all the incredible complexity of this new paradigm in c++.
one of concepts primary aim was exactly to create the necessary groundwork that would help to considerably improve current template diagnostics.
we'll see in the future.
can we tell exactly what adds more to complexity?
it made a whole lot of sense to me.
i personally don't like the  new function definition types nor the new typedef possibilities.
arrogance breeds bad code
certainly adding new features to the language while keeping a close eye  on complexity is a good goal.
seems like they have understood that they  were making the language too complex.
but it's a fact that it took me a long time to actually soak in the concept of generic programming to start taking advantage of it beyond simple function templating.
but i don't see syntax or semantics complexity as such a big problem.
everything else is just unnecessary fluff originally posted by brafil seems like they have understood that they were making the language too complex.
it's my feeling it is the latter.
this has far more repercussions than just the admission we can use different tools for different jobs.
the fact that this is at the core of the decision to abandon concepts on c++0x, since even the implicit or explicit concept mapping discussion has its roots on that question, is very disheartening to me.
it's a matter of study.
the fact that the two apis have  become so similar in functionality shows how well hardware is converging into  user functionality[citation needed].
but the three aspects... 1.
being that concepts was primarily aimed at library developers, does it  really makes sense to ask "will joe coder use concepts"?
" o_o please don't tell me "r-value references" were dropped too!?
last edited by brafil; 07-25-2009 at 02:18 am.
comparison of opengl and direct3d -  wikipedia, the free encyclopedia share share on facebook twitter you know what date is on this coin? 1958.
c++0x concepts fall c++0x concepts fall
the current ones for  "normal" c++ are thick enough.
and i don't know who will implement all this i think you have a negative outlook.
at any  rate, i'm just looking forward to the "auto" keyword.
the current ones for "normal" c++ are thick enough.
よくきくがいい！わらわはてんさいだからね！ ^_^ originally posted by elysia i kinda agree.
よくきくがいい！わらわはてんさいだからね！ ^_^ originally posted by brafil the things i would reconsider: nullptr - it's not very elegant imo.
you can actually have a lot of fun with them.
"the internet treats censorship as damage and routes around it."
using instead of typedef.
but there's three aspects to concepts that i think make the whole "will joe coder want to use concepts" the wrong debate.
finally, there's the admission  that conceptually c++ templates are irreprehensible, but the theoretic basis on  which they were implemented in c++ is weak.
now, templates are difficult to master.
it is in my view acceptable  that generic programming is accepted as being even harder.
so i think it's a real shame they dropped concepts, but i am very positive about every other added feature.
this is particularly damaging to library developers who suffer the most.
it's been travelling  twenty two years to get here.
this has  also a lot to do with the natural characteristic of c++ of being a modular  programming language, which makes it easy to teach and learn.
but inm my defense i'll say that i'm in fact a newcmmer to generic  programming with no more than 1 year on my back and very little to show in  terms of actual work.
it was in the course of concept integration that they discovered that throwing move constructors (and moving is closely tied with rvalue refs) are completely unsafe - as with throwing destructors, if you have one, you simply cannot write exception-safe code.
but this  can't be the basis for deciding wether a feature is going to be implemented or  not.
what we have now is a syntax that is somewhat easy to teach, semantics somewhat easy to learn, but the coder is left alone trying to understand template related errors messages.
but then again, switching between languages often isn't good either.
originally posted by adak io.h certainly is included in some modern compilers.
the fact that this is at the core of the decision to abandon concepts  on c++0x, since even the implicit or explicit concept mapping discussion has  its roots on that question, is very disheartening to me.
i may be looking at concepts as  easier simply because i understand better now what generic programming is under  c++.
in my view, this alone makes concepts a feature that reduces programming complexity already.
i've played around with it (and i've implemented it) and i find it very intuitive.
it leaves a foul taste  in my mouth that politics and frivolous debate was the real issue.
you mean it's included as a crutch to help ancient programmers limp along without them having to relearn too much.
no different from so many other professional areas, from accounting to scientific fields.
the new typedefs and the new function definition types enhances the parts that c++ specializes in.
certainly adding new features to the language while keeping a close eye on complexity is a good goal.
it is no longer part of the standard for c, but it is nevertheless, included in the very latest pelles c versions.
what do you think are the problems of nullptr?
in general, direct3d is designed to be a 3d hardware interface.
hard to follow syntax and semantics, or weak error diagnostics?
but it was the interaction with concepts that pointed out that it's not safe, in general, to let rvalue references bind to lvalues.
however, std::initializer_list can only represent homogenous initializer lists.
last edited by mario f.; 07-24-2009 at 10:42 am.
these two apis are fundamentally designed under two separate modes of thought.
outside of your dos world, your header file is meaningless.
and in c++0x, also into classes, right?
it's been travelling twenty two years to get here.
learn the generic part.
it already takes a decade to figure out how to implement all this stuff since they meet so "often."
this is particularly damaging  to library developers who suffer the most.
in general, the new syntax is much nicer than the arcane c syntax.
i should not have used that as an example.
comparison of opengl and direct3d - wikipedia, the free encyclopedia you know what date is on this coin?
what i mean is that usually we strive to learn what it is we want to do and a language provides the facilities to do so.
originally posted by salem
" - flon's law originally posted by brafil why is this thread turning into "opengl vs direct3d"?
yeah, but anyone should agree it's not easy to design all that.
476 why is this thread turning into "opengl vs direct3d"?
but there's three aspects to concepts that i  think make the whole "will joe coder want to use concepts" the wrong  debate.
a feeling that herb sutter'srecent blog post makes even stronger.
i forgot how easy it  was to derail threads simply by mentioning those two words.
the alias declarations with 'using' can do that, yeah.
just like he did a couple of years ago when he decided it was time to go oop and tackle all the incredible complexity of this new paradigm in c++.
the only thing i didn't like was the added complexity for _compiler-writers_
and the possibility of misusing some concepts.
for a newcommer going from procedural programming to oop is a big step.
one day, whe, he feels more comfortable with the language and decides to step into more complex areas of software development.
the fact that the two apis have become so similar in functionality shows how well hardware is converging into user functionality[citation needed].
as far as i know, using is only used for copying data into namespaces.