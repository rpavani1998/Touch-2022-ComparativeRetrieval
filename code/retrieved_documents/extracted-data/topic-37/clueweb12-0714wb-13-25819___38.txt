its very active all the time :) disadvantages: - i started learning it 8 months ago and i remember that was sometimes similar problems(able to resolve) with exporting models from blender - for a browser games: there is possibility of applet, but it would be better to have webgl or webplayer
actually it have everything i need(skeletal/etc animations, efects(bloom, dof and many more), shaders, network, gui.... just everything) - every multithread actions can be easily synchronized -
no great work for the jmonkeyengine team!
i learnt to use it in a few minutes and the results are awesome :)
ok maybe it doesn't  have all the tools and features, but community is awesome, development of your  own game is fast and easy and anyone has the opportunity to improve the engine  and introduce its own ideas.
the community is very active and the code first rate.0 of 0 people found this review helpful.
based solution with just a little java knowledge and some experience with amateur game making software game maker, i tried to look for something more substantial - and that was what i stumbled upon.
-swing gui menu support ( this one is one of my favorites )
the engine runs very stable and the performance is good.
vertices are stored with one vertex  buffer per channel, not as interleaved data.
both are bsd licensed (afaik).
( andrew davison had tried to overcome the limitations with a 1 second taking background thread, man was that ugly... )
java compiles fast !!
not only is it easy but with all the features they provide, terrain generation, configurable renderers to produce fantastic effects, you can do almost anything with it.
i've been looking for a java engine for some time, but i've always been put off by poor demos, lack of documentation, and bad performance.
you can  easily learn by watching through the (mostly small samplecodes) and adapt them  to your own projects!
this engine is destined for great things.0 of 0 people found this review helpful.
that means that 3d games using an open java engine are in a pretty poor  state.
very active community
the design of the scene graph is taken from dave eberly's "wild magic" books -- version 2.
if your goal is just a good game engine, and you don't require java, run as  far away as you can -- it's not worth the time spent trying to understand how  limited this engine is.
you'll be better off wrapping something real, even if you have to write  your own jni bindings.
this is great news if you plan to do anything that you may only want to release pieces (or none) of.
also it includes every feature from jme and is developed actively.
and i gave up for a  while.
our modular framework is programmed entirely in java to make it easy for you to deploy 3d games to desktop, web, and mobile platforms.
anyone with at least basic java knowledge could easily use this - and after following the first few tutorials, make a small game.
the internal data structures in jme show no understanding of rendering hardware.
but to be honest: many people (including me) are not that good in 3d  programming to implement effects like real time shadows, per-pixel-lighting,  hdr etc.
but  i soon had to find out, that you could only go so far with its scripting  language and its c++ code, although probably very clean and good, just scared  the hell out of me...
the test package covers many real world game application needs: -game  state changes ( swing, menus, loader, ... )
the community surrounding jme is also fantastic, they're always willing to help and the response is almost immediate to any question you have.
some problems: 1) there is no way to get skinned animation into the engine.
proves that the "java is slow" idea is completely wrong!
number two i'm not sure about.
then i looked at xith3d, but that is mostly the same framework, just  faster... and still missing good collision detection ( afaik )
this is a very bad idea, as anyone who has done high performance
at least they should find new jobs in java programming, and/or engine design/coding etc.
if what you are looking for is high level tools then you want to look higher then jme.
thanks mojomonkey !!!
you can create the eiffel-tower out of it, but you  must do everything yourself.
to support instancing, they added a special "instancing node" which gets passed the regular mesh scene graph node.
this is  a very stable engine in development with the best, supportive community i have  ever come across.
but maybe this will change in future.
if your goal is just a good game engine, and you don't require java, run as far away as you can -- it's not worth the time spent trying to understand how limited this engine is.
if you are asking for new features there is no one who will implement that.
but after reading most of it i realized, he does a good job of overcoming  the limitations of java3d but not good enough for me... as java3d is really  "only" a scene graph framework written in java... and not a very fast  one...
if you are planning to create a commercial game, i would say that jme is definitely able to take the plunge, because it is fast, stable, offers a lot of features and also platform independent.
code is very scalable.
it is continuously developed and improved(noone want abandoned projects).
in the java gaming and xith forums i had always seen references to jme, but i never looked at the examples before... 3 month ago i did, and boy was i impressed !!!
it is currently being used by a number of commercial projects, both inside and outside of the game industry, that contribute valuable resources back to the project.
and  even some basic things, like matrices and quaternions, have bugs in them.
it is easier to use an engine, than to implement new graphical features or special effects.
the community which is left alone suggests you to implement missing features  yourself.
since then i  didn't see much innovations going on anymore.
this example shows that the implementation is made by people who haven't done scene graphs before, and there are lots more.
all in all, jme is a relatively easy to use engine made even simpler by the fantastic tutorials and user community; i would not hesitate recommend it, and the java language, to anyone looking to begin 3d game development.0 of 0 people found this review helpful.
hockey  challenge (active a few years ago?), no sign of it today.
this is the best you'll get if you want to develop with java.
i came to jme not very long ago at all as a relatively new java programmer (although i've been programming other languages for a fair while) and even though i've only been using it for less than a week i've already managed to get a simple game up and running based on the excellent tutorials available on the website.
originally, jme didn't even support instancing of meshes.
also the list of features is still growing!
jme is like a sandbox.
besides the support is good when it comes to easy problems, but again: if the difficulty gets higher, nobody can help you anymore.
no jme is very easy to use and learn.
the different inputhandler (they rock and one can learn alot about camera translation and rotation ) -3d audio -headless mode for servers -water and cloth effects -bump mapping -particles support and examples -terrain support with many very very good examples !!!
or prepare to spend significant effort to bring it up to snuff -- which probably is easier than starting your own from scratch, if that's the alternative.0 of 0 people found this review helpful.
lwjgl makes use of java native direct byte buffers to allow it to do all its work in c space rather then java heap and make the least number of calls across the boundaries.
most of all, the slow "collision detection" turned me off...
it is very good when you are starting from zero, because you have the feeling everything is under control.
although it hasn't got the best feature set (yet!), the engine is in very active development, and user code is always happily accepted, in the true spirit of open source!
everything is very intuitive and once you get the basic idea you rarely need too look up the tutorials again (tutorails are community driven and fairly good).
this example shows that the implementation is made by people  who haven't done scene graphs before, and there are lots more.
but if you are looking for something that will ease up your work in progress this engine does not offer the features.
the forum users go out of their way to help newbies (you can find the answer to almost any question about jme you could ask on the forums).
i would argue that jme have most needs covered and you have the advantage of having free state of the art ide's like netbeans and eclipse at your disposal plus the enourmous code repository of the java world itself.
but if you really want to create a  serious game project you need to create everything by yourself.
no damn good and getting better apr 10, 2008 at 01:54 by  cyberqat jme is a very solid scene graph engine built ontop of cas's lwjgl.
the feature set continues to grow at a frantic pace, and enhancements are committed to cvs daily.
jme has matured significantly since its previous releases.
do not for a minute believe the "java is too slow for games" myths!
testprojectedwater a try !!! )
sadly, there are much less sample codes for learning purpose than in jme which will make it harder for beginners.
the different  inputhandler (they rock and one can learn alot about camera translation and  rotation ) -3d audio
this engine is not good for: people who want a bleeding-edge game engine (this engine is free after all.. if you need it then you will have to pay) people who are proficient with c++ and have no knowledge of java.
torque is a complete game engine, not a scene graph engine.
the way everything is put together makes a lot of sense, and it seems like the engine is in active development.
it is currently being used by a number of commercial projects, both  inside and outside of the game industry, that contribute valuable resources  back to the project.
once a week i press "update" in my cvs client and voila..new updates and bug fixes downloaded..the creators are very dedicated for sure.
;) i've been using this engine for about 8 months - very intense.
of course this is not a game engine..you would have to code alot yourself..but by alot i mean 2-3 lines of code to get shadows, 2-3 lines of code to setup ligth etc.
but i soon had to find out, that you could only go so far with its scripting language and its c++ code, although probably very clean and good, just scared the hell out of me...
we can use ready to use classes or just make our own -
i have to bow down  and confess that i may have been wrong about java - it's just not likely to be  used for anything of consequence in gaming.
at least they should find new jobs in java  programming, and/or engine design/coding etc.
number one i know is being worked on right now.
sun microsystems have mis-managed java from the beginning.
obviously i started my own with 2d calls, then i wrote some quake3 mods,  then opengl, then i took a major leap and bought the torque engine from  garagegames.
number two i'm not sure  about.
(the multiverse people wrapping ogre3d come to mind as an alternative)
the jme community is very active and josh and  mark are very helpful, but it is very much an open source community that  operates on a traditional open source model.
i haven't been using jme for too long, but already i've got a lot more done than i expected, with models imported, terrain set up with custom shaders for water effects, and i'm almost ready to actually start putting the game itself together.
so, it may be true that jme is the best open engine that is out there for java.
:)0 of 0 people found this review helpful.
so grab this engine and start creating games.
in short, if you want to build your own game engine then jme is a great labor saving place to start.
the community which is left alone suggests you to implement missing features yourself.
( just give jmetest.effects.water.
fenggui is very good and  should get most game graphical user interfaces working.
the poster also mentioned  torque.
even if code is totally broken and doesn't do anything near what it's supposed to do, you'll be hard pressed to get a "oh, that's bad" out of them.
the learning curve is as good as it gets, due to the easy transition from simplegame to standardgame ( if you understand not to overwrite initsystem and forget to call the super implementation as i did at first... )
there are many tutorials, codesamples and an active and extremely supportive community.
the community likes patting itself on the back, but more importantly, it doesn't make any distinction between "good" or "bad."
i tried ogre before and jme is much like ogre, in many ways you can consider it ogre in java version, just easier.
again, as active as this team is, they will put cutting edge features in there just for the hell of it.
looking for books about java and gaming i found a great book from andrew davison ( killer game programming in java - http://fivedots.coe.psu.ac.th/~ad/jg/ )
the  result is light weight, fast and modern with all the productivity advantages of  java.
this is a much better engine then many i have seen, beating a  lot of them in performance(even faster then torque, i have run both on the same  computer), support, ease of use, and features.
thanks to all the monkeys !!!
this is due to sun distribution and support of jogl and the issues with webstart warnings or applet-sandbox restrictions.
no why i love jme and how i came to it
no jme is a very solid scene graph engine built ontop of cas's lwjgl.
no this engine is the only engine that's written in java, has alot of documentation and is worthy of your attention in my oppinion.
the community is always happy to help.
i just fell in love with it!
i think it is very good engine for beggineres well it is toooooooooooooooooooooooooooooo gooooooooooooooooooooooooooooddd.
the developers  apparently have a collada exporter script that they use internally, but have  not released.
i can say that its definitely the best engine for 3d graphics programming in java.
i look forward to see where this engine ends up, it's stable and capable now, but there is so much more on the horizon.0 of 0 people found this review helpful.
this engine is very good to start with if you have zero 3d programming  experience, because there are many tutorials of code samples which show you how  to get started with basic examples.
each tree in a forest would have its own multiple vertex buffers.
furthermore there are tons of sample  codes which show you the engine's features and graphics capabilites.
the other importers are all crappy.
but i also can't go without jogl for the previously mentioned reasons.
i can say that its definitely the best engine for 3d graphics  programming in java.
then i looked at xith3d, but that is mostly the same framework, just faster... and still missing good collision detection ( afaik )
advantages: - it is opensource, based on new bsd license.
both are not included in jme.
to be realistic: i call it dead.
vertices are stored with one vertex buffer per channel, not as interleaved data.
the engine is currently mono-threaded.
i realized what i really was looking for, was a modding framework, something like quake3 just not so fps/bsp-level orientated and with much less c code
again you might argue that it's not cutting edge, but if you want cutting edge prepare to pay !
0 of 0 people found this  review helpful.
it has an active and extremely supportive developer community, excellent getting started material, and a very straightforward api.
it has lots of features, good performance and the ease of developing in java!
going with the engine, and then a year later..game no longer works due to  deprecated api or some other java screw up.
advantages: great tutorials helpful and active community getting better each day disadvantages: the only disadvantage is that it might take a little bit of time to piece the tutorials together to form your first game - but the community is always there!
that means that 3d games using an open java engine are in a pretty poor state.
no last edited feb 25, 2012 at 21:48
meanwhile i always played with java and its 2d calls, as i love java.
man that was a fun time, that “framework” is really complete as the code comes from a real game ( starsiege tribes ), complete with ingame level editor, gui, 3d sound and prize winning network support ( now free ).
i realized what i really was looking for, was a modding framework,  something like quake3 just not so fps/bsp-level orientated and with much less c  code
no i have been a user of the jmonkeyengine (jme) for 9 months.
besides the support is good when it comes to easy problems, but again: if  the difficulty gets higher, nobody can help you anymore.
your imagination is the only  limit!
you can create the eiffel-tower out of it, but you must do everything yourself.
but, the guys behind  jme are i'm sure really competent.
if your looking for professional support, you also may want to look at  professional (costly) engines.
what really strikes me is the activity surrounding this engine..only other engine with an active community like this i can think of is ogre and maybe torque.
the tutorials are very good to understand, because they can be very short, due to the fact that jme is so powerful with so few lines...
so, it may be true that jme is the best open engine that is out there for  java.
since everything of course is coded in opengl behind the scenes, you dont see any slowness nowhere..and java being slow is a myth.
so java is capable of high performance 3d after all.
example, the engine , complete with about 200 classes or so, builds in about a minute !
i would like to recommend it to everybody that want to do a professional games.0 of 0 people found this review helpful.
jni is no automatic panacea crossing the jni boundaries  has costs.
this engine is very good to start with if you have zero 3d programming experience, because there are many tutorials of code samples which show you how to get started with basic examples.
but to be honest: many people (including me) are not that good in 3d programming to implement effects like real time shadows, per-pixel-lighting, hdr etc.
another poster suggested wrapping other c engines calls with jni java  wrappers.
in short, if you want to build your own game engine then jme is a great  labor saving place to start.
i think i can finally settle.
since then i didn't see much innovations going on anymore.
the flag rush tutorial especially stands out ( hehe, no wonder, as it comes very close to my battlezone clone project ).
and by  everything i mean everything.
also many features  are missing.
you want to as little of that as possible.
6) jmonkey is based on dave eberly's (old) scene-graph.
no after years of evolving jme said itself only up to 0.11, can't imagine how far will it go once it becomes 1.0.
they are 3rd  party libraries, however they are very compatible.
furthermore there are tons of sample codes which show you the engine's features and graphics capabilites.
no best 3d java engine feb 24, 2012 at 22:11 by inshadow i have been using this engine for hobby projects for more than 3 years,  since jme2.
then i tried irrlicht ( with its net plugin and delpi.
if you need to fix something, they  may give you some pointers to where to look, but if its important to you that  it be fixed now be ready to do it yourself.
if you are planning to create a commercial game, i would say that jme is  definitely able to take the plunge, because it is fast, stable, offers a lot of  features and also platform independent.
it is easy to use, it has a great community, it is stable and is pretty darn fast.
all in all i can recommend the engine for beginners, but for serious projects you might turn to another game engine.
the only two things i can say negatively about are: (1)
( just give  jmetest.effects.water.
the tutorials are very good to understand, because they can be very short,  due to the fact that jme is so powerful with so few lines...
(hope i'm wrong, really do) and with sun's mis-management, i wouldn't be surprised if they get a good thing going with the engine, and then a year later..game no longer works due to deprecated api or some other java screw up.
writing a skeletal animation package sounds much harder than converting lwjgl code to jogl (they are somewhat similar).
the flip side is that the code  quality is excellent to work with and there a great deal of satisfaction in  being able to contribute fixes or extensions back to the group.
also most people of the community seem to feel the same, since no one touches this editor and instead tries to create his own version of an editor.
naturally you are free to build your own engine but this gameengine is well documented, the biggest drawbacks of others the reason for me to work with java is mainly due to the decreased overhead a project brings.. skipping the "chores" you get from c++ (pointer assigning, garbage collection and not in the last place the crossplatform support) and focussing on what matters most, getting your game content done.
the flag rush  tutorial especially stands out ( hehe, no wonder, as it comes very close to my  battlezone clone project ).
if you do some playing with boxes and balls the fun is on your side, but if you try to create a physics-based charactermodel you will most likely not succeed or you will bite your teeth out to achieve that.
i did not only use the engine itself, but also the 3d gui ilibrary like fenggui and the jme physics library.
all in all i can recommend the engine for beginners, but for serious  projects you might turn to another game engine.
and since there is no developer anymore, nobody will care about it in decent time, maybe never ever.
i cannot claim to be good, as there is so much extensibility that it appeals to all levels.
it has some of the best water effects i have seen, and it is all very easy to use and completely functional.0 of 0 people found this review helpful.
the 3d object importers and exporters... -last but not least: my kids love the lisasimpson modell, so my wife lets me code ! :-)
fenggui is very good and should get most game graphical user interfaces working.
but i think the physics & fenggui are not be compatible  to that anymore.
both are very strong with great people who are willing to help.
each tree in a  forest would have its own multiple vertex buffers.
to support instancing, they  added a special "instancing node" which gets passed the regular mesh  scene graph node.
there are also some negative aspects as well which are: the community was left alone by the last active developers in autumn 2008.
the jme engine is by far the best scenegraph engine available in java.
a great community backing on the forums, have made this experience an enjoyable one.
this is a very stable engine in development with the best, supportive community i have ever come across.
there are also some negative aspects as well which are: the community  was left alone by the last active developers in autumn 2008.
the poster also mentioned torque.
no i love this engine, it has an active developer community and full support, jme is a easy and intuitive to learn.
and since there is no developer anymore, nobody  will care about it in decent time, maybe never ever.
, i definetly think this engine is going to be playing a major role in java game development in the near future, seeing as major game companies have picked it up for their own use including threerings, and ncsoft.0 of 0 people found this review helpful.
this is a very bad idea, as anyone who has done high performance java coding can tell you.
no this is by far the most active java based engine i've seen so far.
i will not claim that jme is perfect.
ok maybe it doesn't have all the tools and features, but community is awesome, development of your own game is fast and easy and anyone has the opportunity to improve the engine and introduce its own ideas.
it is easier to use an engine, than to implement new graphical  features or special effects.
but after reading most of it i realized, he does a good job of overcoming the limitations of java3d but not good enough for me... as java3d is really "only" a scene graph framework written in java... and not a very fast one...
it matured over years a lot and is now a really modern  engine, almost capable of standing aside the big ones.
your imagination is the only limit!1 of 1 people found this review helpful.
keep up the good work banana followers!!
the flip side is that the code quality is excellent to work with and there a great deal of satisfaction in being able to contribute fixes or extensions back to the group.
another poster suggested wrapping other c engines calls with jni java wrappers.
obviously i started my own with 2d calls, then i wrote some quake3 mods, then opengl, then i took a major leap and bought the torque engine from garagegames.
if you have no experience with creating games, then jme is definitely for you, it will hold you hand at the initial stages to get you to grips with everything; then the rest will be up to you.
advantages - free - rapid cross-platform development (including android) - has it's own ide (based on netbeans) - best and most explained tutorials i've ever seen - great community - only limit is your imagination!
no i started evaluating java engines about 6 months ago and you quickly realize that if you want anything close to complete out-of-the-box then there are two choices:
what i  found out is, that this engine has many features, is fast and very stable.
also many features are missing.
jni is no automatic panacea crossing the jni boundaries has costs.
however, where  dave has good implementation (even if i don't like his design), jme hasn't, and  it hasn't kept up to date with the many improvements that have happend in  versions 3 and 4.
1 of 1 people found this review helpful.
( andrew davison had tried to overcome the limitations with a 1 second taking  background thread, man was that ugly... )
and i gave up for a while.
in no time you'll be writing code to make that great idea of yours a reality.2 of 2 people found this review helpful.
:-) i again looked for news around java3d and found the very impressive  flyingguns...
no first of all, understand that my star-ratings are mainly in comparison with other java game engines/apis; not to say that jme couldn't stand its ground against those for other languages, mind you!
( free tip to garagegames to reign the world, reimplement the scripting language in java ! )
if your looking for professional support, you also may want to look at professional (costly) engines.
it will be a lot of hard work, but the finished result will be worth it, trust me!
no jme is a fantastic engine.
so after searching and trying out for so long ( i am speaking about 14 years here )
net which was even kind of cool... just very basic and not a complete gaming framework ), then ogre3d, then openscenegraph
3d games without animation are a tough sell.
you'll be better off wrapping something real, even if you have to write your own jni bindings.
the physics library  is also very good with a downside however.
jmonkeyengine brings rapid game development to a new level.
some of the things that were annoying about it (from before his last game engine design edition came out) are in jmonkey but they aren't huge deals and its still much more intuitive than the xith structure, which looks like it might get confusing with a very complex scene.
whenever i've wanted to do something, i've found there is a test class for it, which can be launched from a nice chooser, with decent source comments to let you know what is going on.
i  believe java should deliver clean, fast code to power feature rich engines and  games but just doesn't, even now, years after all the jme flurry and a decade  after the release of java itself - clearly not a good sign.
the physics library is also very good with a downside however.
( although pretty ok, if you look at flying guns )
but if you are  looking for something that will ease up your work in progress this engine does  not offer the features.
website: http://jmonkeyengine.com/ developer: kirill vainer, erlend sogge heggen, skye book, normen hansen, ruth kusterer, rémy bouquet, paul speed, brent owens and hundreds of collaborators.
if what you  are looking for is high level tools then you want to look higher then jme.
this is mostly a red-herring issue since assets dominate the download in any real game but
the choice between the two is going to be needs-dependent but some of my criterion, which i suspect are pretty common, are: 1)
anyone working with artists should know, but probably doesn't yet, just how important this is to making an easy tool chain.
well, check the showcase.
lwjgl makes use of java  native direct byte buffers to allow it to do all its work in c space rather  then java heap and make the least number of calls across the boundaries.
the engine is  currently mono-threaded.
the framework is not only powerful and feature rich but truly easy to use !
you can easily learn by watching through the (mostly small samplecodes) and adapt them to your own projects!
only xith has that right now but one is said to be on the way for jmonkey (not holding my breath tho).
no great engine oct 01, 2008 at 17:41 by jedimace1 proves that the "java is slow" idea is completely wrong!
and by everything i mean everything. there is not even a useful world editor around for the engine and if you ever tried to program a world editor, you will experience that it eats up a lot of time.
i did not only use the engine itself, but also the 3d gui ilibrary like  fenggui and the jme physics library.
it seems par for the course that they only support a single mesh, or a single texture, or no animation, or all three.
each separate subset of a mesh is stored as a totally separate mesh, with separate buffers.
-swing gui menu support ( this  one is one of my favorites )
i  tried it out some time ago and in fact many things are made easier
i've been using this engine for about 8 months - very intense.
i believe java should deliver clean, fast code to power feature rich engines and games but just doesn't, even now, years after all the jme flurry and a decade after the release of java itself - clearly not a good sign.
jmonkeyengine is a fitting answer if you want to make a game in java.
skeletal is also often a lot less painful for artists, a lot easier to update, and produces much smaller animation assets (which can be a huge part of a download if not done wisely).
the java docs are not always complete.
knowing that animation was going to be my performance bottleneck, i can't use vertex animation.
jme builds ontop of that solid, high speed implementation adding a very well designed and functional scene graph.
the design of the scene graph is taken from dave eberly's "wild  magic" books -- version 2.
there isn't much technical information that hasn't been said in the previous reviews that i could add so i'll simply add my experience using the engine.
xith supports vertex animation but jmonkey supports that and skeletal animation.
jme taught me everything i know, with the best and most explained tutorials i have seen.
the jme community is very active and josh and mark are very helpful, but it is very much an open source community that operates on a traditional open source model.
as for performance, i was honestly shocked by how well the engine holds up.
ray.0 of 0 people found this review helpful.
jun 12, 2007 at 00:56 by  paranoid hi fellow coders, i have a long background in testing 3d frameworks... ( who here hasn't :-) )
no i've been learning opengl and game programming for awhile, and jme has got to be the easiest to get started with engine i've ever used.
the documentation is far more comprehensive, the api has been partitioned into sensible functional sets to allow for smaller distributions, numerous stability and performance issues have been resolved.
jme is truly a hidden gem.
offering a plethora of great features matched with unparalleled support it is making java a real power in game development.
but i think the physics & fenggui are not be compatible to that anymore.
colors are expanded to 16 bytes.
however, where dave has good implementation (even if i don't like his design), jme hasn't, and it hasn't kept up to date with the many improvements that have happend in versions 3 and 4.
im sure it will be just as enjoyable as the rest.
no i would assume that the glowing reviews come from people who have either not used another game engine, or who are so desperate for anything java, that they're willing to put up with any crap, as long as they can (slowly) render a model to the screen.
i've used it, and it does not hold up to engines like ogre3d, or openscenegraph, or even torque game engine.
for my purposes, it came down to #3 vs #4.
features are ok by most standards..i would put this engine at about equal to ogre featurevise.
disadvantages - biggest problem i have had is importing models - game templates of varying popular genres would be beneficial i have tried many engines before, but jme is my final choise.
tech showcases of it  seem amateur, and unambitious (also a java pattern), and not to mention it's  based on java.
- engine is fully shader based(every material is based on material definition, which is based on shaders) - with wrapper for opengl(based on lwjgl) and perfect code give a good efficiency - very good community(everyone can help on the forum)
java  coding can tell you.
no decent engine jun 16, 2009 at 13:23 by guest
so i decided to give java3d a try, but boy was that painful
i'd really recommend having a look at the webstart demos, but bear in mind there are a lot more demos if you download the source from cvs (which is again pretty well organised, with a good tutorial on getting it set up).0 of 0 people found this review helpful.
jme  builds ontop of that solid, high speed implementation adding a very well  designed and functional scene graph.
it seems par for the course that  they only support a single mesh, or a single texture, or no animation, or all  three.
if you think java is slow..think again !
i've used it, and it does not hold up to engines like ogre3d, or  openscenegraph, or even torque game engine.
the test package covers many real world game application needs: -game state changes ( swing, menus, loader, ... )
it matured over years a lot and is now a really modern engine, almost capable of standing aside the big ones.
i've been using jme for over a year now and although some learning curves are pretty steep on any given platform as far as 3d engines is concerned (think quaternions), the vast majority is so transparent that you only need to know the basics to properly do things in jme.
combined with the helpful tutorials, the forum community makes this game development software one of the best in its category, even if this engine doesn't get the attention it deserves.
if you need to fix something, they may give you some pointers to where to look, but if its important to you that it be fixed now be ready to do it yourself.
no seems to follow the same'ol j3d pattern may 27, 2009 at  22:24 bytemporaryuser i am not so much reviewing this engine as pointing out the obvious.
tutorials abound and soon a book will be published explaining many technical aspects for the not-so-technical-inclined or the newcomers to the engine.
in the very competetive world of gameengines/rendering libraries jme has made its mark and cannot be ignored.0 of 0 people found this review helpful.
what i found out is, that this engine has many features, is fast and very stable.
i had chosen java for my next game project for portability and deployment reasons, but the performance of both the languange and the jme engine coupled with the speed at which they allow you to get your project off the ground should make the combination a prime choice for amatuer game developers everywhere, regardless of whether they need their games to be portable or not.
net which was even  kind of cool... just very basic and not a complete gaming framework ), then  ogre3d, then openscenegraph and then even some more things google spits out...
this is the best-architected scene-graph in the business, bar none, and a lot of commercial engines come from it (it is the mother of gamebryo, after all).
launched: jun 01, 2003 status: active supported platforms: windows, linux, mac os x, solaris, sunos, freebsd, browser-based, google android, other languages written in: java languages supported: java, ruby, python, javascript, php, tcl/tk, other graphics apis: opengl rating: (34 reviews) jmonkeyengine (jme) is a free development kit for programmers who want to create 3d games following modern technology standards.
(the multiverse people wrapping ogre3d come to mind as  an alternative)
i had never created a game, nor did i know any game development lingo, and only had brief java experience prior to this.
the developers apparently have a collada exporter script that they use internally, but have not released.
the best thing is that because the architecture makes sense, it doesn't seem to be much of a problem to just add features yourself.
this is a much better engine then many i have seen, beating a lot of them in performance(even faster then torque, i have run both on the same computer), support, ease of use, and features.
hopefully this will change too.
(hope i'm wrong, really do) and  with sun's mis-management, i wouldn't be surprised if they get a good thing
i really cannot recommend it.
not that i'm aware of a free java implementation of one of those existing... there seems to be a pretty active forum, with people working at adding interesting stuff - a good example is the blender exporter which does a good job of getting meshes from blender to jme.
i have to bow down and confess that i may have been wrong about java - it's just not likely to be used for anything of consequence in gaming.
even  if code is totally broken and doesn't do anything near what it's supposed to  do, you'll be hard pressed to get a "oh, that's bad" out of them.
this is the worst thing that can happen to an opensource engine and it did happen to jme.
this is the worst thing that can happen to an opensource engine and it did  happen to jme.
if you do some playing with boxes  and balls the fun is on your side, but if you try to create a physics-based  charactermodel you will most likely not succeed or you will bite your teeth out  to achieve that.
the community likes patting itself on the back, but more importantly, it  doesn't make any distinction between "good" or "bad."
another good thing about java..you don't have to wait for ages for typical c++ style compiling and linking.
people found this review helpful.
each separate subset of a mesh is  stored as a totally separate mesh, with separate buffers.
hopefully this will change too.0 of 0 people found this review helpful.
regular collda animations are not recognized by the importer.
looking for books about java and gaming i found a great book  from andrew davison ( killer game programming in java -  http://fivedots.coe.psu.ac.th/~ad/jg/ )
however, despite its occasional glitches, it is a fantastic engine!0 of 0 people found this review helpful.
and most important of all, the documentation is head and shoulders above that of any other open source java engine and the community has been amazingly helpful regarding the few problems i've had so far, with a browsing of the forums revealing this to be the rule rather than the exception.
it is very good when you are starting from zero,  because you have the feeling everything is under control.
in the java gaming and xith forums i had always seen references to jme, but  i never looked at the examples before... 3 month ago i did, and boy was i impressed !!!
3) a jogl implementation (instead of just lwjgl, which is also great) takes a lot of the sting out of distributing the final product; especially if its an applet or something.
so java is capable of high performance 3d  after all.
dave himself is up to version 4.
getting better each day disadvantages: the only disadvantage is that it might take a little  bit of time to piece the tutorials together to form your first game - but the  community is always there!
and also, the community is so consolidated that at first glance, the project was inactive, but once you know it, wow so many genius monkeys are hidden inside the cvs, weaving their dreams for the next generation virtual realism, in a programming language that has unparalled competitiveness.0 of 0 people found this review helpful.
none of the missing areas are showstoppers for me, but i think at the moment the engine might be better suited for people working on new ideas, rather than those who want a plug and play fps engine for example.
you can't go completely wrong with either but you might want to keep these things in mind.0 of 0 people found this review helpful.
the internal data structures in jme show no understanding of rendering  hardware.
if your wanting to create the game of your dreams, that has been a idea in the back of your head for a while, then look no further.
this engine is good for: people who want to develop games with java people who are new to the game development scene
its not in very wide use yet
yes no jme isn't all that feb 29, 2008 at 06:37 by mr_guy i would assume that the glowing reviews come from people who have either  not used another game engine, or who are so desperate for anything java, that  they're willing to put up with any crap, as long as they can (slowly) render a  model to the screen.
sadly, there are much less sample codes for learning purpose than in jme  which will make it harder for beginners.
2) both support collada assets.
it is cross-platform, and is constantly improved with up to date features, along with a big and growing community base on the forums, make it easy for anyone to start programming in it.
in fact there is a world editor which is called monkeyworld3d. i appreciate the effort of the team who created it, but the editor is slow, buggy and inconvenient to use.
no i have been using this engine for hobby projects for more than 3 years, since jme2.
i myself have still not delved into the world of creating my own shaders, but i cant wait!!!!
it is the best free source engine in java making easy powerful games with hight qaulty graphics and a form to help u it is the best.
in fact there is a world editor  which is called monkeyworld3d. i appreciate the effort of the team who created  it, but the editor is slow, buggy and inconvenient to use.
there is not even a useful world editor  around for the engine and if you ever tried to program a world editor, you will  experience that it eats up a lot of time.
but, the guys behind jme are i'm sure really competent.
and even some basic things, like matrices and quaternions, have bugs in them.
tech showcases of it seem amateur, and unambitious (also a java pattern), and not to mention it's based on java.
also most people of the community  seem to feel the same, since no one touches this editor and instead tries to  create his own version of an editor.
( free tip to garagegames to reign the world,  reimplement the scripting language in java ! )
it is important to understand what jme *isn't*.
:-) i again looked for news around java3d and found the very impressive flyingguns...
the result is light weight, fast and modern with all the productivity advantages of java.
i have come to appreciate how easy it is to program games using the jmonkeyengine!
jme has all the ingredients you will ever need to make your own game.
but if you really want to create a serious game project you need to create everything by yourself.
no hi fellow coders, i have a long background in testing 3d frameworks... ( who here hasn't :-) )
years later i stumbled across jake2 ( awesome java port of quake2 ) which started my fire again.
the last developer created  a new engine called "ardor3d" which shall be cleaner and better (and  of course it sounds much better than "monkeyengine" ;-) ) than jme.
0 of 0 people found this review helpful.
hockey challenge (active a few years ago?), no sign of it today.
- good sdk(give us editors for everything, like code, models, materials, scenes, animations and many more) - its good for small and big projects.
the learning curve is as good as it gets, due to the easy transition from  simplegame to standardgame ( if you understand not to overwrite initsystem and  forget to call the super implementation as i did at first... )
i tried it out some time ago and in fact many things are made easier
having used other engines in the past, i must say that this learning curve is remarkable and that i have never encountered a more conistantly well designed engine; although the tutorials are complete in their explanations, the commented code they provide is usually more than enough to get an understanding of what's going on, and how many engines can claim that?
no jme is the first engine i've really got interested in using, mainly because of the simple tutorials and the amazing support from the users!
there are others but as i will try to explain, this one is the best at the moment.
it has some of the best water  effects i have seen, and it is all very easy to use and completely functional.
it uses opengl which at the moment is equal to direct3d (directx).
the last developer created a new engine called "ardor3d" which shall be cleaner and better (and of course it sounds much better than "monkeyengine" ;-) ) than jme.
jmonkey seems easier to strip of the stuff you don't need.
;) 0 of 0  people found this review helpful.
it's not quite complete, but in very active development.
man that was a fun time, that “framework” is really complete as  the code comes from a real game ( starsiege tribes ), complete with ingame  level editor, gui, 3d sound and prize winning network support ( now free ).
and then even some more things google spits out...
or prepare to spend significant effort to bring it up  to snuff -- which probably is easier than starting your own from scratch, if  that's the alternative.
all you need is an idea, free time and an eagerness to learn.
little things just work as expected ( anyone who tried to get alt-tab to work with a fullscreen java 3d app knows what im talking about - oh and to get it fullscreen was painful to start with i recall... )
some areas are lacking at the moment, but there is a plan for future versions, which is great to see.
the community is very active and the code first  rate.
no i am not so much reviewing this engine as pointing out the obvious.
they are 3rd party libraries, however they are very compatible.
everything is very easy to code with tons of sample code to guide you.