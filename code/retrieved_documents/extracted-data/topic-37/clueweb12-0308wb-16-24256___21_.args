after testing an approach that would have a drastic effect on the api, requiring complete opengl application rewrites and not introducing any of the long awaited features modern gpus are capable of, the choice was made to give programmers what they are really waiting for.these developers were *not* looking forward to new features, but to a cleaner, saner api for working with current mainstream gpu's where they can be relatively sure of finding the fast (hardware-accelerated) path.the game developers in the working group for opengl have made it extremely clear that getting closer to current hardware capability (which means dx10 class hardware, as that is what is now available) should be the #1 priority, and this is the direction that has been taken for 3.0 - prioritizing integration of contemporary hardware capability above any sweeping api changes.i have been to siggraph2008 and expected some ingenious idea like inversing the api : inventing a new api (as you promised in the beginning in the forums) to be more generic and less of a fixed approach and to declare all fixed function s as extensions of opengl3.0, thus allowing quick wranglers to quickly adapt to the situation , changing almost nothing for vendors , yet introducing new concepts to the world which will show that indeed much effort was put here and will share the process with the users.if you have a specific rendering or hardware feature that you feel would prevent you from writing opengl 3.0 code, you should write it up in the opengl.org forum, since the 3.1 definition effort is already underway.trust me , real good and fine people are looking up to serving you as opengl is a great hope for all of us who believe in the power of free software,openness and community.instead of giving a new, flying colors, innovative api [i seem to get the impression many have expected] and lure new users inside, make everything faster and appealing.on the contrary : think of productive ways to have opengl offer more and be more attractive and associative than direct3d.this doesn't mean blocking off communication with the public as we're happy to discuss specific ideas or isv needs, but it would be off-policy for khronos members to post details or roadmaps relating exactly what will be in opengl 3.1 until it has reached a final or very-near-final state in the specification process.although i say this, i don't think opengl 3 is the right step: opengl 2.x with a good set of arb extensions is simpler and provides the same: opengl was designed to provide extensibility thru extensions, core should be minimal.anti spam: please enter the word you see in the image below: advanced search follow amdfirepro fireuser.com is a community resource for visualization, 3d, video and engineering professionals to learn about the latest acceleration and display technologies, discuss support issues, as well as influence the features and direction of the firegl and firepro accelerator line.and thus , we shall continue working with an api like dx10's which is new , innovative, and rocks, and opengl3.0 will be , once again , the proprietary of those who write cad programs and professional flight simulators , like former mpi (presagis today) and companies who relay on sgi to do their work, because , believe it or not , sgi (at least these days) is heaving a little trouble finding support for new revisions of opengl.but adding features to an api that no one who has a choice actually uses is just not going to impress.if run a opengl 2.x or 1.x app on a system with opengl 3 installed, this removes major problems in 3.x.what they did as of that moment, is that their labs sought the right api with their destination audience , they went to intel , nvidia, ati , and game companies and together they conceived a very nice api , who will, as i believe, undergo only minor changed to adapt itself to dx11 and later to dx12.