that makes 3d accessible to people who already know html, which is a large userbase.however i do think 3d canvas requires extra support for helping with loading models, textures ... and by helping with everything opengl does not do, it becomes a helper toolkit such as sdl and still allows some parts to be done directly if one chooses to do so.besides, a much higher-level api would make more sense, given the fact that it's going to be driven by a scripting language.remaining compatable with opengl makes sense since it allows the knowledge and familiarity many already have with opengl useful in their work in opera.as well, you should provide the same non-persistant graphics mode as an option that opengl uses, in many cases keeping a state of graphics on screen and automatically refreshing them is not desired."x3d is large and complex and (i expect) it will never be implemented natively in browsers" just use one of the existing open-source toolkits, or license code from one of the plugin makers.hard-coding models is fine for small objects, but as the objects grow it becomes more and more difficult to hard-code them in the script.if you're going to provide low-level 3d graphics without using opengl, you may as well write a browser which doesn't use javascript, but instead this scripting language you came up with on the back of an envelope.vista now requires drivers to run decently, osx uses opengl backend for quite some time and linux is running nicely with compiz fusion.also, opengl is the standard low-level 3d api.writing your own immediate-mode 3d api is like writing your own version of unicode.create3dmodel creates a 3dmodel object that can be built (by adding vertices and triangles) and rendered by the script.opengl apis could be mapped onto native calls in an os that does not support opengl.i believe collada should be encouraged as the standard way of importing models into canvas-3d (since it's decent, and fairly widely used, and well supported by modelling tools), but that should be done by external scripts that load the xml and call the api functions like addtriangle.dom3 load and save hard-coding models is fine for small objects, but as the objects grow it becomes more and more difficult to hard-code them in the script.