it doesn't restrict me in any way and i believe it might become a key factor for well-performing games written in java.by this i mean, there's a thriving community of developers who code to j3d and easily trade huge code packages because they all use j3d classes and can be tested and integrated with very little modifications if written well.if there's no room for a java-based console, then truly java is failing as the games platform of choice because it's the best place it could possibly be from a developer's perspective.java does have a longer history than .net and has proven itself in many more ways than .net has, such as the obvious platform independence.we've deliberately created a platform based around what we know the hardware and underlying o/s need to be for gaming: a display, some speakers, a few input devices - nothing more.one problem, due to the high level and ease of use, is that developers think they can make great 3d graphics projects and not know anything about 3d graphics.it's not likely to appreciably improve either productivity or code correctness.one of the architects of java 3d, he has also worked in the graphics research group at sun looking at advanced rendering techniques and programmable shading.if sun is seen to be behind opengl to the point where their own products utterly depended on it, you'd get the positive feedback loop required to ensure that both support each other and grow.a side effect of lwjgl is it enables us to deploy games with less licensing restrictions: i can natively compile my games for windows, which solves a bunch of other problems i won't go into here, and the demos come out under the magic 5mb download patience threshold.personally, i don't like the idea of j3d completely hiding details; of course, this isn't fully justified because i haven't done much with j3d, but i do strongly believe you should always be able to get as low level as necessary where games development is concerned and i've seen people struggle with j3d issues that they don't seem to be in control of.our students' laptops ran best under directx, and our classroom workstations under opengl.actively put major resources into the gaming space, gain the confidence of developers by being seen to do this, and start listening more keenly to suggestions and being a little more open about what's being done to address issues.ogl is so low level you have to have a bit better programming skill as well as more 3d knowledge to use it.c#/clr has none of the benefits of java (it's not cross platform, being yadc (yet another dialect of c) it's not likely to appreciably improve either productivity or code correctness.