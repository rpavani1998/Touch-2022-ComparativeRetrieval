opengl, on the other hand, is designed to be a 3d rendering system that may be hardware accelerated.this has also a lot to do with the natural characteristic of c++ of being a modular programming language, which makes it easy to teach and learn.this is particularly damaging to library developers who suffer the most.in general, direct3d is designed to be a 3d hardware interface.certainly adding new features to the language while keeping a close eye on complexity is a good goal.the fact that the two apis have become so similar in functionality shows how well hardware is converging into user functionality[citation needed].it just seems, with concepts, c++ generic programming would be made easier to teach and learn.in my view, this alone makes concepts a feature that reduces programming complexity already.the new typedefs and the new function definition types enhances the parts that c++ specializes in.this has far more repercussions than just the admission we can use different tools for different jobs.expert programmers should not have to suffer because newbies might have a difficult time grasping all concepts.finally, there's the admission that conceptually c++ templates are irreprehensible, but the theoretic basis on which they were implemented in c++ is weak.initializer lists can be heterogenous, and the compiler will interpret the elements as constructor arguments and do overload resolution.the feature set of direct3d is derived from the feature set of what hardware provides.it would be far better if they incorporated less stuff in less timeframes so new standards can be released more often.