i am also thinking about ... anonymous _ck_ writes: any chance of an updated labs preview of webgl ... chris by the way, why do we have to wait so long for any hardware ...
anonymous anonim writes: it would be nice to have working webgl on op ...
once you have the context in your script you can just call its  rendering functions.
after reading all of this you should know enough to create some cool 3d-canvas demos.
excors # wednesday, november 21, 2007 1:51:15 pm"just use one of the existing open-source toolkits, or license code from one of the plugin makers.
i'm looking forward to seeing all the cool demos people will make!
this build also includes an experimental addition to the canvas element, the 3d canvas.
-spm-mad # sunday, november 18, 2007 5:43:22 pmno, no, no, noooo x_x anonymous # sunday, november 18, 2007 11:20:06 pmanonymous writes: oh god, not another 3d rendering engine.
of course they are normalized.
this build also includes an  experimental addition to the canvas element, the 3d canvas.
remaining compatable with opengl makes sense since it allows the knowledge and familiarity many already have with opengl useful in their work in opera.
the canvas is only updated when endsceneis called.
i haven't written any d3d code, so i don't know.
below i will describe some techniques that can be used to make more advanced examples.
nonetheless 3d canvas is neat and worth releasing to see what people think about it and come up with it.
this function is much better suited for rendering large batches of triangles.
a great initiative tim, bring it on i say!
you start thinking: "who needs bidi, screw that", "who needs umlauts, screw that", "who needs hanzi, screw that", "who needs glyph placement, screw that", etc.
excors # monday, november 19, 2007 12:25:13 amthis doesn't overlap with collada.
also x3d is a higer level language than what the canvas3d plans to be (which imho, makes it easier for authors to create using x3d than canvas3d, just like html was easier than writing a program for sockets or tcp/ip).
if you want 3d and think about uses for it for some weeks, much more will have to be provided then triangles.
x3d is an open iso standard for interactive 3d on the web.
i am  responsible for, among other things, canvas (including the underlying vector  graphics library) and image decoding.
it creates a model, adds vertices and triangles for a cube and then renders it with different transforms.
so if you want to add a whole new dimension to a browser, do not worry about 400kb - choose a x3d profile and go with the standards.
mac and linux versions should be available soon.
an expose event for catching window expose events to trigger redraws would also be a good idea.
amanonymous writes: please, the web has suffered more then enough from projects that thought they could produce something more efficient by removing everything the author thought would not be needed - and than, by the time, with every content author finding the need of more complex features, the efficient engine becomes a monster of extensions and features not considered in the original concept.
default is "lessequal" attribute string blend; // "replace", "add", "srcalpha", "multiply".
anonymous # tuesday, december 4, 2007 5:26:29 pmpeter strømberg writes: as long as you can draw onto the canvas via javascript, the underlying 3d format is really not so important, and no doubt developers and vendors will quickly offer javascript based interpreters to show many different formats,
if you really do want to continue on this mysimple3dapi path to destruction, here's a list of glaring omissions: no matrices (the real killer), no shaders, no multitexturing, only euclidean rotations, only perspective transform, only four blend modes, only 2^n * 2^n textures.
anonymous # wednesday, december 26, 2007 5:10:32
canvas3dmodel  create3dmodel(); // collision detection string checkintersection(in float x, in  float y, in float z, in float radius, in canvas3dmodel model); // rendering  state attribute canvastexture texture; // current texture or null for no  texture, default is null attribute string color; // current color, default is  transparent black attribute float fov; // field of view of the scene in  degrees, default is 45 attribute float nearplane; // distance to the near  clipping plane, default is 0.1 attribute float farplane; // distance to the far  clipping plane, default is 100 attribute string ztest; // "none",  "less", "lessequal", "greater",  "greaterequal", "equal", "notequal".
when ie implements it also it will really take off.
you don't think that is worth 400kb?
excors # tuesday, december 18, 2007 7:47:11 pm
lightmapping lightmapping is one of the most famous lighting techniques.
" anonymous # tuesday, november 20, 2007 8:33:41 pmanonymous writes: the hard dependency on directx 9 makes me sad.
the files used for this example are the html file shown below and an image to use as the texture (operalogo.png in this case).
that makes 3d accessible to people who already know html, which is a large userbase.
i've been dealing with it for some time and so far i'm very satisfied with its uses.
drawtriangle draws a single triangle.
create3dmodelcreates a 3dmodelobject that can be built (by adding vertices and triangles) and rendered by the script.
the function returns the collision point as a string when a collision occurs (the point of deepest penetration is coosen as collision point).
lightmapping is one of the most famous lighting techniques.
most nearly all oss have some kind of opengl support, opengl has become the most cross platform 3d api in use and it makes sense to support that rather than create yet another incompatable 3d api like microsoft has done.
i've been trying to find a decent tutorial on the canvas element in opera and now i'll be able to check the true possibilities behind this feature.
cube.addvertex(-1, -1, 1, 0, 1); cube.addvertex(1, -1, 1, 1, 1);  cube.addvertex(-1, 1, -1, 1, 1); cube.addvertex(1, 1, -1, 0, 1);  cube.addvertex(-1, -1, -1, 1, 0); cube.addvertex(1, -1, -1, 0, 0);  cube.addtriangle(0,1,2); cube.addtriangle(2,1,3); cube.addtriangle(4,5,6);  cube.addtriangle(6,5,7); cube.addtriangle(0,4,2); cube.addtriangle(2,4,6);  cube.addtriangle(1,5,3); cube.addtriangle(3,5,7); cube.addtriangle(0,4,1);  cube.addtriangle(1,4,5); cube.addtriangle(2,6,3); cube.addtriangle(3,6,7);  setinterval(ontick, 10); } document.onload = onload();  more advanced techniques
but i must admit that i find the opera canvas implementation so much better than the mozilla one.
in this post i will describe the 3d context i added, which is available in the recently released opera labs build.
the current transformation matrix will transform all vertices rendered with the 3d canvas.
as well, if there is an opengl feature that i use and depend on, its nice to know it will be there and available.
what does that exactly mean?
however i do think 3d canvas requires extra support for helping with loading models, textures ... and by helping with everything opengl does not do, it becomes a helper toolkit such as sdl and still allows some parts to be done directly if one chooses to do so.
the main concept is that you work with 3d models.
it creates  a model, adds vertices and triangles for a cube and then renders it with  different transforms.
it is used in  many popular games, for example the quake series.
x3d (excors is already thinking about it :), collada, 3ds ascii, whatever.
if you do not think that it is worth it, do not create a beast by inventing one more "standard" - if 3d is not necessary, do not implement it at all.
get in touch  with us to share your creations.
leonardo alassialeoalassia # tuesday, july 22, 2008
(p.s.: consider me trolled rotten that browser developers have a comment board which abuses http status code 400 for "bad captcha".
when  it is, the rendered image is copied to the canvas.
jsyk, tim implemented 3d canvas 2-3 years ago and hasn't really had time to work on the api because, surprise, there was more important things to work on.
as well, you should provide the same non-persistant graphics mode as an option that opengl uses, in many cases keeping a state of graphics on screen and automatically refreshing them is not desired.
ami havn't read all the comments, i'm saving it for when i have some time on my hands but just wanted to answer this one. "but is it a big task to write opengl es bindings that are implemented on top of directx?
what has happened to the ideals of opera being a really fast and resource-friendly and hi-quality browser?
the light  value for each pixel is pre-calculated and stored in a texture.
bnolan@gmail.com excors # tuesday, november 27, 2007 1:14:39 amhttp://blog.vlad1.com/2007/11/26/canvas-3d-gl-power-web-style/ is mozilla's approach to this.
checkintersection is a simple sphere/model collision  detection function.
this kind of "hey guys look what i hacked up" is why firefox is such a festering pile of bodges.
besides, a much higher-level api would make more sense, given the fact that it's going to be driven by a scripting language.
render the scene to a texture and blit it upside down.
we wanted to have some form of collision detection available
this method will fail if the image object's dimensions are not powers of two (1, 2, 4, 8, 16, 32 etc.)
øyvind østlundnoteme # friday, december 28, 2007 2:33:00 pm@p01: mathieu 'p01' henrip01 # saturday, december 29, 2007 1:51:25 pmagreed but a render to texture ( or a similar operation ) is most likely necessary to blit the scene into a frame buffer in a format compatible with 2d canvas and the other graphic apis present in the browser.
# tuesday, july 22, 2008 9:18:28 pmups...
" mathieu 'p01' henrip01 # friday, december 28, 2007 1:47:50 pmnoteme: the left-handed vs right-handed is a non issue.
i think as a developer, not an end user, you don't update your drivers or assume anyone would spare time to download latest drivers.
so i would choose to do everything opengl doesn't do and some extra if needed but without hiding the opengl calls and extensions.
draw3dmodel renders a model previously created with create3dmodel to the canvas.
in the example above a plain textured cube, which was hard-coded in the  script, was rendered.
anonymous # saturday, may 10, 2008 1:55:47 amalessandro writes: this is a amazing feature !!!!
in order to view  the demos presented here you will need toget the opera labs build.
this function is much better suited for  rendering large batches of triangles.
the collision detection  has some bugs in this build, and i would recomend that you do not use it yet.
the translate, scale and rotate functions modify the transformation matrix.
as for it being complex, that's the reason why there are several profiles (core, interactive, etc) so that you're able to support only a subset, yet being fully compatible with the standard and the other browsers.
canvas = document.getelementbyid("canvas"); context3d =  canvas.getcontext("opera-3d"); if (!context3d) { alert("3d  canvas not supported"); return; } logo = new image(); logo.src =  "operalogo.png"; texture = context3d.createtexture(logo);  context3d.texture = texture; cube = context3d.create3dmodel();  cube.addvertex(-1, 1, 1, 0, 0); cube.addvertex(1, 1, 1, 1, 0);
once you've loaded the models, you still need some way to animate them and draw them all in the scene and add various effects, which isn't what collada is for.
the principle is that you multiply each rendered pixel with the light value at that pixel.
after reading all of this you should know enough  to create some cool 3d-canvas demos.
you create 3d models,  add vertices and triangles to them and finally render them to the canvas.
pmkig writes: "but is it a big task to write opengl es bindings that are implemented on top of directx?"
the build is currently only available for windows.
as with the regular canvas you can create textures from images (including svg) or other canvases.
amanonymous: there are bugs to be fixed.
please join efforts with mozilla, w3c and anyone that might be interested in a full 3d web standard with high performance, anyone can use.
grafio # monday, november 26, 2007 5:58:44 pmthreetimes, here anonymous # monday, november 26, 2007 11:17:25 pmben writes: can you please get the mac version released?
this article has given you an introduction to the fundamentals  of using the opera 3d canvas.
if no collision was found the function returns an empty string instead.
vista now requires drivers to run decently, osx uses opengl backend for quite some time and linux is running nicely with compiz fusion.
in this post i will describe the 3d context i added, which is available in  the recently released opera labs build.
the opera-3d context does not have multi-texturing yet, so it is not  possible to do lightmapping in one step, but you can achieve this effect by
opera is my absolute no1 deborahwebb # tuesday, february 12, 2008 12:11:47 pmthank you very much for this article.
the best bet would be to talk to the web3d consortium.
only the commands issued between beginsceneand endsceneare drawn to the canvas.
it is possible to do much more than this using the opera-3d context.
default is  "replace" }; interface canvas3dmodel { void addvertex(in float x, in  float y, in float z, in float s, in float t); void addtriangle(in integer  vertex1, in integer vertex2, in integer vertex3); }; interface canvastexture{ }; let's go through the different functions in the order they appear above: the save and restore functions save and restore  the current rendering state.
the function returns the  collision point as a string when a collision occurs (the point of deepest  penetration is coosen as collision point).
dom3 load and save hard-coding models is fine for small objects, but as the objects grow it  becomes more and more difficult to hard-code them in the script.
anonymous # tuesday, december 18, 2007 4:46:06 pmkig writes: please, don't try to think up your own simple 3d api.
i'm trying to come up with some more detailed suggestions about canvas-3d (i'm not convinced i like either the mozilla or opera approaches), but in the meantime i have a few random comments and was wondering if you have any related plans.
excors # wednesday, december 5, 2007 2:40:25 am x3d browsers, that are fast at rendering 3d, but useless for building apps excors # saturday, december 15, 2007 1:46:32
this is what the interface looks like.
the context is called opera-3d and is basically opera's version of the 3d canvas.
a new addition to html5 is the canvas.
createtexture creates a texture object from an image object.
the actual drawing is done by a  (rendering) context.
if you want to see a more advanced example you can have a look at the3d snake implementation done by mathieu 'p01' henri.
...once you can honestly say that there is nothing, _nothing_ more important to work on.
(but maybe not for mozilla?).
if you want to see a more advanced example  you can have a look at the3d snake implementation done by mathieu 'p01' henri.
my name is  tim johansson, and i am a core technology developer at opera software.
my name is tim johansson, and i am a core technology developer at opera software.
the actual drawing is done by a (rendering) context.
"white"; context3d.draw3dmodel(cube); context3d.endscene(); } function ontick(){ render(); } function onload(){ canvas = document.getelementbyid("canvas");
get in touch with us to share your creations.
the current transformation matrix  will transform all vertices rendered with the 3d canvas.
as with the regular canvas you can create textures  from images (including svg) or other canvases.
this method is usually slow and should not be used for rendering a lot of triangles.
i'm sorry... here is my own answer... 1 2
the specification includes a 2d context that must be implemented, but also allows browser vendors to add their own contexts.
the opera-3d context does not have multi-texturing yet, so it is not possible to do lightmapping in one step, but you can achieve this effect by doing multi pass rendering.
we just escaped from the non-standard development wave in html-land, do not re-invent the blink-tag.
duncan brownduncanbrown # saturday, february 2, 2008 2:37:03 amtim, 3d canvas is a briliant addition.
doing multi pass rendering.
example - a rotating cube
handicapping an implementation of the 3d canvas is not a good design decision at all.
translate, scaleand rotatefunctions modify the transformation matrix.
context3d = canvas.getcontext("opera-3d"); if (!context3d) { alert("3d canvas not supported"); return; } logo = new image(); logo.src = "operalogo.png"; texture = context3d.createtexture(logo); context3d.texture = texture; cube = context3d.create3dmodel(); cube.addvertex(-1, 1, 1, 0, 0); cube.addvertex(1, 1, 1, 1, 0); cube.addvertex(-1, -1, 1, 0, 1); cube.addvertex(1, -1, 1, 1, 1); cube.addvertex(-1, 1, -1, 1, 1); cube.addvertex(1, 1, -1, 0, 1); cube.addvertex(-1, -1, -1, 1, 0); cube.addvertex(1, -1, -1, 0, 0); cube.addtriangle(0,1,2); cube.addtriangle(2,1,3); cube.addtriangle(4,5,6); cube.addtriangle(6,5,7); cube.addtriangle(0,4,2); cube.addtriangle(2,4,6); cube.addtriangle(1,5,3); cube.addtriangle(3,5,7); cube.addtriangle(0,4,1); cube.addtriangle(1,4,5); cube.addtriangle(2,6,3); cube.addtriangle(3,6,7); setinterval(ontick, 10); } document.onload = onload();  in the example above a plain textured cube, which was hard-coded in the script, was rendered.
it is not only about meshed - there is behaviour, navigation, communication between objects (in one scene or across scenes, maybe even servers and clients).
henry james wilkinsonhenryjames # sunday, december 30, 2007 3:53:33 pmi never thought i'd actualy say it
"x3d is large and complex and (i expect) it will never be implemented natively in browsers" just use one of the existing open-source toolkits, or license code from one of the plugin makers.
this  is what the interface looks like.
it's not just 'one feature'.
mac and linux versions should be  available soon.
pm"the hard dependency on directx 9 makes me sad.
how many times does this wheel have to be re-invented?
you create 3d models, add vertices and triangles to them and finally render them to the canvas.
there are bugs to be fixed.
there's no need to re-invent the wheel here.
it's not a big task to write opengl bindings for javascript.
the specification includes a 2d context that must be  implemented, but also allows browser vendors to add their own contexts.
beginscene and endscene are used to distinguish  a frame.
create3dmodel creates a 3dmodel object that can  be built (by adding vertices and triangles) and rendered by the script.
"the inability to use matrix transformations is a bit painful (it's not great fun decomposing matrices into scale/rotations/translation) - do you mean that, or something else?"
checkintersectionis a simple sphere/model collision detection function.
leonardo alassialeoalassia # tuesday, july 22, 2008 9:14:08 pmok...
in the second passztest is set to equal and blend is set to multiply.
for those of you not familiar with the canvas tag here is a crash course in using it.
in the second pass ztest is set to equal and blend is set to multiply.
amthis demo has some extremely primitive x3d capabilities, for loading the meshes and viewpoint from the scene (originally exported from blender).
joão eiras css based fullscreen mode
excors # tuesday, november 20, 2007 3:46:13 pm"actually x3d is implemented in by several vendors (and vrml has been for many years).
this method is usually  slow and should not be used for rendering a lot of triangles.
beginsceneand endsceneare used to distinguish a frame.
grafio # monday, november 19, 2007 3:11:41 pmanything more complicated than a few cubes is hard to write by hand anyway.
the parameters are the sphere (centre and radius) and the model to check for collisions with the sphere.
also, opengl is the standard low-level 3d api.
we will write more about collision detection when it is fixed.
the scene is now rendered with  the lightmap instead of the textures and the result is a lightmapped scene.
interface canvasrenderingcontextopera3d { // state void save(); // push state on state stack void restore(); //
in x3d that would be:    no mess with adding triangles or specifying the points one by one.
the main reasons for doing this are: it makes it easier to implement on non-opengl platforms (such as d3d)
i believe collada should be encouraged as the standard way of importing models into canvas-3d (since it's decent, and fairly widely used, and well supported by modelling tools), but that should be done by external scripts that load the xml and call the api functions like addtriangle.
if you are using an opera build with 3d canvas enabled you can alsosee the rotating cube in action.
below i will describe some techniques that can be used to  make more advanced examples.
start rendering a new frame void  endscene(); // finish rendering of the scene and present the result //
it is possible to do much more than this using the  opera-3d context.
canvas.getcontext();to get the context opera's 3d context, unlike mozilla's, is not a straight mapping to opengl.
probably opengl is the way to go, it's supported even on portable devices (opengl es) and on the ps3, i don't know about wii but opengl was built to be crossplatform and it is easy enough to port to most oses that don't have it already, there's always mesagl that is opensource and it's better to use it when the drivers are not installed.
it is used in many popular games, for example the quake series.
the light value for each pixel is pre-calculated and stored in a texture.
no matrices (the real killer) anonymous # tuesday, december 25, 2007 10:15:13
deutsch english español français frysk magyar polski português brasileiro русский slovenčina shqip türkçe українська tiếng việt lolcatz 日本語 norsk bokmål српски 正體中文
svg was pretty useless when it needed a plugin - might as well just use flash - but now its built in to opera, firefox and safari, its getting very interesting indeed.
pop state stack and restore state // scene/frame void beginscene(); //
call canvas.getcontext(); to get the context that's it.
this includes canvas3dmodelobjects.
start rendering a new frame void endscene(); // finish rendering of the scene and present the result // transformations void translate(in float x, in float y, in float z); void scale(in float x, in float y, in float z); void rotatex(in float rotation); void rotatey(in float rotation); void rotatez(in float rotation); // rendering operation void drawtriangle(in float x1, in float y1, in float z1, in float tex_s1, in float tex_t1, in float x2, in float y2, in float z2, in float tex_s2, in float tex_t2, in float x3, in float y3, in float z3, in float tex_s3, in float tex_t3); void draw3dmodel(in canvas3dmodel model); // create objects canvastexture createtexture(in image img); canvas3dmodel create3dmodel(); // collision detection string checkintersection(in float x, in float y, in float z, in float radius, in canvas3dmodel model); // rendering state attribute canvastexture texture; // current texture or null for no texture, default is null attribute string color; // current color, default is transparent black attribute float fov; // field of view of the scene in degrees, default is 45 attribute float nearplane; // distance to the near clipping plane, default is 0.1 attribute float farplane; //
in the first pass the scene is rendered as usual.
øyvind østlundnoteme # thursday, december 27, 2007 8:12:53
push state on state stack void restore(); // pop state stack and restore state  // scene/frame void beginscene(); //
distance to the far clipping plane, default is 100 attribute string ztest; // "none", "less", "lessequal", "greater", "greaterequal", "equal", "notequal".
the making of opera 10.50 1 2 next » anonymous # friday, november 16, 2007 4:33:17 pmanonymous writes: ive always thought directly mapping opengl into html/js land so that one could have the full power of the opengl api inside the browser and given it is the most common and familiar 3d api it would be the easiest to start using for the largest group of people, was a good idea.
this includes canvas3dmodel objects.
the build is  currently only available for windows.
join now to follow tim johansson's blog and get your own.
any api that's independent of input 3d format, and independent of output api (i.e. opengl, directx, mobile and software implementions) and is supported by all browser vendors should be welcomed with open arms.
when i first implemented the canvas tag in opera i though it would be cool to have a 3d context, so i added one.
draw3dmodelrenders a model previously created with create3dmodelto the canvas.
it's been almost half a year now?
it's better, because it provides aspect-oriented programming, yay!
add a  tag to your page get the canvas element from a javascript using getelementbyid or something similar.
this method will fail if the image object's dimensions are not powers of two  (1, 2, 4, 8, 16, 32 etc.)
my opera is a blog and photo sharing community with millions of members.
taking the canvas to another dimension tuesday, november 13, 2007 4:38:34 pm 3d, opera, canvas recently opera published an experimental build on opera labs, with support  for the video element and video in svg.
excors # thursday, november 22, 2007 1:41:39 am"i guess non-(l)gpl will be an issue for opera.
threetimes # monday, november 26, 2007 5:02:03 pmwhere can i download opera with 3d canvas support?
tim johanssontimjoh # tuesday, november 20, 2007 9:54:11
next » showing comments 1 - 50 of 70.
the context is called opera-3d and is  basically opera's version of the 3d canvas.
the opera-3d context opera's 3d context, unlike mozilla's, is not a straight mapping to opengl.
you mentioned that the 3d canvas is not a direct mapping to opengl?
charles mccathienevilechaals # friday, july 18, 2008 1:59:57 pm@lightning, jacques dumasj_sk # saturday, july 19, 2008 8:46:29 amonce more, it's a never ending admiration for opera all teams work.
infact most .as classes could readily be tweeked to run as .js
since this is my first post i guess i should introduce myself.
you could lift ogre (it's lgpl) wholesale for this... ...once you can honestly say that there is nothing, _nothing_ more important to work on.
leonardo alassialeoalassia # tuesday, july 22, 2008 8:13:42
it will be hard, slow, and easily cause a lot of gc runs.
the canvas is only updated whenendscene is called.
i normally use more opera than firefox so i'm glad that the canvas element is well supported.
writing your own immediate-mode 3d api is like writing your own version of unicode.
most users install their drivers because it doesn't make sense to buy a new graphical card if you don't plan to use it.
i'm dead keen to play with it.
the canvas is more or less a bitmap  that you can draw on using javascript.
in order to view the demos presented here you will need toget the opera labs build.
var canvas; var context3d; var rotation; var texture; var cube; function render(){ context3d.beginscene(); context3d.translate(0,0,-5); context3d.rotatey(rotation); context3d.rotatex(rotation); rotation += 2; context3d.color =
for those of you not familiar with  the canvas tag here is a crash course in using it.
hard-coding models is fine for small objects, but as the objects grow it becomes more and more difficult to hard-code them in the script.
createtexturecreates a texture object from an image object.
put the shiny gimmicks away until you've squashed those, please.
they are very similar to saveand restorein the 2d context.
help/faq | terms| foaflanguage:
the files used for this example  are the html file shown below and an image to use as the texture (operalogo.png  in this case).
pmi am trying to make an application to transform a 3dmax file to a canvas file, but i need to know what are the last two parameters (s and t) in the function addvertex() mathieu 'p01' henrip01 # tuesday, july 22, 2008 8:50:14 pmthey are more commonly called u and v, and refer to the texture coordinates.
if you're going to provide low-level 3d graphics without using opengl, you may as well write a browser which doesn't use javascript, but instead this scripting language you came up with on the back of an envelope.
" haavardhaavard # monday, november 26, 2007 2:41:26 pm originally posted by -spm-mad: it is not even part of the (in my opinion useless) canvas standard, and you add 3d support?
yes, what you would end up doing is: do all matrix math in js, then do svd when applying the matrices for each model / scenegraph node, then split the rotation matrices of the svd into x-rot, y-rot and z-rot (does that work?), and, to apply the matrix: translate, rotate, rotate, rotate, scale, rotate, rotate, rotate.
is possible to get the context object from a java applet ?
beside one render to texture per frame is absolutely acceptable.
show all friends swapnil rustagi
anonymous # friday, november 16, 2007 4:35:43 pmanonymous writes: it should also be noted windows does have an opengl implementation.
when i  first implemented the canvas tag in opera i though it would be cool to have a  3d context, so i added one.
they are very similar tosave and restore in the 2d context.
ilgaz # sunday, february 24, 2008 7:26:50 pmrelying on directx makes no sense.
only the commands issued  betweenbeginscene and endscene are drawn to the  canvas.
does this mean that some features of opengl are not available?
the canvas is more or less a bitmap that you can draw on using javascript.
transformations void translate(in float x, in float y, in float z); void  scale(in float x, in float y, in float z); void rotatex(in float rotation);  void rotatey(in float rotation); void rotatez(in float rotation); // rendering  operation void drawtriangle(in float x1, in float y1, in float z1, in float  tex_s1, in float tex_t1, in float x2, in float y2, in float z2, in float  tex_s2, in float tex_t2, in float x3, in float y3, in float z3, in float  tex_s3, in float tex_t3); void draw3dmodel(in canvas3dmodel model); // create  objects canvastexture createtexture(in image img);
opengl apis could be mapped onto native calls in an os that does not support opengl.
interface canvasrenderingcontextopera3d { // state void save(); //
anonymous # tuesday, november 20, 2007 2:46:06 pmlionsphil writes: oh ye gods.
javascript libraries for animation, interaction etc. will surely also follow, the same way they've done for flash/flex (for example "tweener" classes).
the parameters are the sphere (centre and radius) and the  model to check for collisions with the sphere.
" anonymous # wednesday, november 21, 2007 11:23:24 pmanonymous writes: i guess non-(l)gpl will be an issue for opera.
i believe that not staying api compatable with opengl is a mistake and not rational, especially given there are open source implementations of opengl which can be ported to most platforms.
var canvas; var context3d; var rotation; var texture; var cube; function  render(){ context3d.beginscene(); context3d.translate(0,0,-5);  context3d.rotatey(rotation); context3d.rotatex(rotation); rotation += 2;  context3d.color =
we keep it on a more abstract level.
this article has given you an introduction to the fundamentals of using the opera 3d canvas.
but it's a little slow...
i have made this teatpot.xml http://www.leoalassia.com.ar/aes2opera/teatpot.xml leonardo alassialeoalassia
" mathieu 'p01' henrip01 # wednesday, november 21, 2007 2:11:36
i guess your best bet would be to ask cross-platform games developers, as they end up having to write engines that run on both apis?
when it is, the rendered image is copied to the canvas.
myself i'm caught between x3d browsers, that are fast at rendering 3d, but useless for building apps, and flash which is great for building apps but still "fairly limited" when it comes to 3d. a javascript interface to an sdl-like canvas sounds to me like the best of all worlds, not just for 3d, but all media.
grafio # saturday, november 17, 2007 12:51:51 pmi'm not a 3d specialist, but i think a higher level syntax for 3d context like in the experimental opera is better than simply mapping whole opengl directly, because: excors # saturday, november 17, 2007 6:58:28 pmi've been thinking about this vaguely for a while, so it's nice to see the work here!
drawtriangledraws a single triangle.
charles mccathienevile xavier, this stuff was a demo idea.
it is possible  to get around this by converting the models to an xml format and then loading  them into the script using dom3load and save to parse  the xml.here is a modified version of the rotating cube.
tim johanssontimjoh # monday, november 19, 2007 1:39:30 pmregarding opengl: anonymous # monday, november 19, 2007 2:19:54 pmcecile muller writes: actually x3d is implemented in by several vendors (and vrml has been for many years).
default is "replace" }; interface canvas3dmodel { void addvertex(in float x, in float y, in float z, in float s, in float t); void addtriangle(in integer vertex1, in integer vertex2, in integer vertex3); }; interface canvastexture{ }; let's go through the different functions in the order they appear above: saveand restorefunctions save and restore the current rendering state.
we, in particular tim, a ... download opera - surf the web with lightning speed, using the fastest browser ever.
azamadt smaguloffprofit # friday, november 16, 2007 8:11:07 pmopera video build uses sdl framework for showing video and, most probably, for 3d-canvas too.
anonymous # thursday, july 3, 2008 4:52:43 pmlightning writes: i think the web does need better support for doing 2d/3d stuff.
things like having to add triangles one by one is too much code just for describing a cube.
anonymous # wednesday, november 21, 2007 3:39:27 amanonymous writes: "as i understand it, there's more overlap with x3d, but it's quite similar to the overlap between canvas-2d and svg..."
this is the first example ever written for the opera-3d context.
"white"; context3d.draw3dmodel(cube);  context3d.endscene(); } function ontick(){ render(); } function onload(){
it is possible to get around this by converting the models to an xml format and then loading them into the script using dom3 load and save to parse the xml.here is a modified version of the rotating cube.
the main reasons for doing this are: the main concept is that you work with 3d models.
tuesday, november 13, 2007 4:38:34 pm 3d, opera, canvas recently opera published an experimental build on opera labs, with support for the video element and video in svg.
default is  "lessequal" attribute string blend; // "replace",  "add", "srcalpha", "multiply".
if you are using an opera build with 3d canvas enabled  you can alsosee the rotating cube in action.
annmacgiff # tuesday, february 12, 2008 1:12:29 pmthe canvas feature seems to be working really great in opera.
getelementbyidor something similar.
canvas not supported!
i am responsible for, among other things, canvas (including the underlying vector graphics library) and image decoding.
yes, which is precisely why x3d needs to be implemented in the browser.
if no collision was found the  function returns an empty string instead.
the scene is now rendered with the lightmap instead of the textures and the result is a lightmapped scene.
why the hell couldn't you just support an existing standard, like, collada, vrml or x3d?
the principle is that you  multiply each rendered pixel with the light value at that pixel.