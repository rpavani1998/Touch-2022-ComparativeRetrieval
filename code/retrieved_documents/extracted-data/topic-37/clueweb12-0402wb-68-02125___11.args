erik d: i'm not married to lwjgl "till death do us part" or anything, but i do have a love affair with it because i like the low-level approach.
they listen to their developers and changes get made.
of course, we also have no java (yet?) on ps, so currently development will stick to c++.
many working game developers i have talked to will try anything that is not ms tech.
our students' laptops ran best under directx, and our classroom workstations under opengl.
if j3d had been built on top of an opengl wrapper, i'd probably have used that because it obviously addresses the problem of lwjgl, that there aren't any scene graph implementations available for it yet.
actively put major resources into the gaming space, gain the confidence of developers by being seen to do this, and start listening more keenly to suggestions and being a little more open about what's being done to address issues.
caspian rychlik-prince: an it consultant in the uk who for the last 10 years has specialized in client/server systems with rdbms back ends.
you'd never know it was written for the pc because all the developer has to use is an empty black screen, some speakers, and three input devices, not all of which will even be present.
if all these developers were using ogl wrappers, the exchange would be close to nothing.
i experience this in my courses as well.
you wouldn't know you were running linux underneath it because it's full screen.
gang together with game technologies, embrace and flourish - opengl and openal are sun's only hope against directx, so they'd better start supporting it, encouraging it, sponsoring it, and even helping it.
just like some lwjgl users are finding, eventually you have to build a scene graph anyway for any scene bigger than a bread basket.
i'm not saying those actual packages will end up in a final production, but the integration-to-test phase is lightning fast.
there's no way .net will become available on a playstation, for example.
java does have a longer history than .net and has proven itself in many more ways than .net has, such as the obvious platform independence.
at gdc this year, there was a session on managed directx, which is effectively directx for c#, and you could have replaced every instance of c# with java in the presentation.
you wouldn't know you were running linux underneath it because it's full screen.
the fact that ms will make .net work on the xbox and future xboxes makes it all the more compelling.
if sun is seen to be behind opengl to the point where their own products utterly depended on it, you'd get the positive feedback loop required to ensure that both support each other and grow.
it's not likely to appreciably improve either productivity or code correctness.
there's only one window in lwjgl, and we get a lot of requests for multiple windows.
doug t: as jeff mentions, this mostly affects java from the c# side of things.
gerardo dada: metrowerks' product manager for codewarrior wireless studio.
i can write absolutely optimized code for lwjgl and it runs in hardly any memory.
i use a high-level language and a high-level graphics system.
better cross-platform than ogl alone.
java does have a longer history than .net and has proven itself in many more ways than .net has, such as the obvious platform independence.
the platform with clr the vm, or c# the language.
actively put major resources into the gaming space, gain the confidence of developers by being seen to do this, and start listening more keenly to suggestions and being a little more open about what's being done to address issues.
there's a lot of trading but it is all techniques and code "snippets," not loaders and behaviors or even collision systems because each ogl developer has his or her own scene graph equivalent structure on top of ogl that they will have to translate to for any techniques and code they get from the outside world.
the platform with clr the vm, or c# the language.
lwjgl is not an add-on library to j2se to allow you to write opengl applications in java.
common data structures for public as well as private interchange.
if all these developers were using ogl wrappers, the exchange would be close to nothing.
a side effect of lwjgl is it enables us to deploy games with less licensing restrictions: i can natively compile my games for windows, which solves a bunch of other problems i won't go into here, and the demos come out under the magic 5mb download patience threshold.
gerardo dada: metrowerks' product manager for codewarrior wireless studio.
if there's no room for a java-based console, then truly java is failing as the games platform of choice because it's the best place it could possibly be from a developer's perspective.
for some folks that may be the perfect bar, for others it may be too low.
one of the architects of java 3d, he has also worked in the graphics research group at sun looking at advanced rendering techniques and programmable shading.
perhaps sun could even fund it by running it on a sparc chip.
the point being, when you know what you're doing, a scene graph or immediate mode are both great tools.
you'd never know it was written for the pc because all the developer has to use is an empty black screen, some speakers, and three input devices, not all of which will even be present.
i have the same hope for playstation 3 one day.
i have no fear of .net becoming the default back-end technology for networked games - it was designed with business apps in mind, which need totally different properties.
one problem, due to the high level and ease of use, is that developers think they can make great 3d graphics projects and not know anything about 3d graphics.
there's a lot of trading but it is all techniques and code "snippets," not loaders and behaviors or even collision systems because each ogl developer has his or her own scene graph equivalent structure on top of ogl that they will have to translate to for any techniques and code they get from the outside world.
however, all that being said, i do agree that being able to directly write to ogl is a good thing regardless of what you do on the top of it.
i can write absolutely optimized code for lwjgl and it runs in hardly any memory.
developers and publishers will look at c#, and the same dynamic i stated before.
gang together with game technologies, embrace and flourish - opengl and openal are sun's only hope against directx, so they'd better start supporting it, encouraging it, sponsoring it, and even helping it.
about all it does is muddy the waters around java, which in my opinion is maybe all it's supposed to do.
chris melissinos: sun's chief gaming officer and responsible for driving an industry-wide movement toward java technology-based game development and building infrastructure programs for massively connected game play.
the current java/ogl world is still an ogl on linux/solaris/windows world so j3d has a slight edge there.
when you don't know, a scene graph is a lot easier.
just like some lwjgl users are finding, eventually you have to build a scene graph anyway for any scene bigger than a bread basket.
when you don't know, a scene graph is a lot easier.
.net will not be suitable for games.
of course, we also have no java (yet?) on ps, so currently development will stick to c++.
developers and publishers will look at c#, and the same dynamic i stated before.
caspian rychlik-prince: an it consultant in the uk who for the last 10 years has specialized in client/server systems with rdbms back ends.
the easy integration with a direct, ultra-capable gaming api (directx) means that it's only a matter of time before m$ starts gaining a majority unless there's some direct competition in the same space from sun.
the players are: jason r briggs: java developer's journal contributing editor and your host; games player when he has time, games developer...on occasion.
the other reason for lwjgl was simplicity.
that they are continuing this support doesn't seem like anything new to me.
i've been playing a little with j3d, but i thought opengl was a lot easier to get into, and i like keeping in full control of things.
our students' laptops ran best under directx, and our classroom workstations under opengl.
we have to remember that java 3d is implementing a scene graph, and java/ogl is simply immediate mode access through java.
i experience this in my courses as well.
it doesn't give you physics; again you're going to have to code that.
it was the only way to do 3d in java at the time we started.
the current java/ogl world is still an ogl on linux/solaris/windows world so j3d has a slight edge there.
erik d: i'm not married to lwjgl "till death do us part" or anything, but i do have a love affair with it because i like the low-level approach.
it was designed from the very beginning to be a portable console game library, even if it does end up being only completely theoretical.
i never want to code immediate mode graphics if i can help it.
it doesn't matter if c#/.net isn't exactly java.
we have to remember that java 3d is implementing a scene graph, and java/ogl is simply immediate mode access through java.
for their work it was no problem to use either install and everything worked.
if you write a slow lwjgl game, it's because you've used opengl incorrectly, not because we've written some dicky code in the library.
ogl doesn't give you scene graph management; you're going to need to write that yourself.
one problem, due to the high level and ease of use, is that developers think they can make great 3d graphics projects and not know anything about 3d graphics.
chris melissinos: sun's chief gaming officer and responsible for driving an industry-wide movement toward java technology-based game development and building infrastructure programs for massively connected game play.
the point being, when you know what you're doing, a scene graph or immediate mode are both great tools.
that they are continuing this support doesn't seem like anything new to me.
i developed lwjgl in the first place because i find the opengl api easy and, most important, fast.
ogl is so low level you have to have a bit better programming skill as well as more 3d knowledge to use it.
its xml-based communications protocol is by definition slow and verbose, and that's before you get into the other architectural issues.
this is less of an issue today as the laptops have better support for ogl and the workstations for directx.
we've deliberately created a platform based around what we know the hardware and underlying o/s need to be for gaming: a display, some speakers, a few input devices - nothing more.
at gdc this year, there was a session on managed directx, which is effectively directx for c#, and you could have replaced every instance of c# with java in the presentation.
many working game developers i have talked to will try anything that is not ms tech.
alien flux would even run on a playstation's 32mb of ram with a little tweaking to the graphics.
by this i mean, there's a thriving community of developers who code to j3d and easily trade huge code packages because they all use j3d classes and can be tested and integrated with very little modifications if written well.
it was the only way to do 3d in java at the time we started.
shawn k: i do see serious competition from this because ms will do whatever it can to move developers to windows, games or otherwise.
it doesn't give you physics; again you're going to have to code that.
we get a lot of requests to enable one to create lots of windows and have them behave as they should.
they make one c# game that's a hit and it's a done deal.
i think we need a dedicated engineering, marketing, and support team for the whole issue, yet i feel that jeff and chris are the only sun employees who are even trying, and they only seem to be let out of their cubicles once they've said their prayers to solaris and flayed themselves for eight hours over a hot spreadsheet.
this is the problem a lot of developers have with java 3d.
personally, i don't like the idea of j3d completely hiding details; of course, this isn't fully justified because i haven't done much with j3d, but i do strongly believe you should always be able to get as low level as necessary where games development is concerned and i've seen people struggle with j3d issues that they don't seem to be in control of.
java 3d is so far above my head i barely know where to begin.
huge existing developer base and knowledge base.
lwjgl is not an add-on library to j2se to allow you to write opengl applications in java.
if there's no room for a java-based console, then truly java is failing as the games platform of choice because it's the best place it could possibly be from a developer's perspective.
it doesn't restrict me in any way and i believe it might become a key factor for well-performing games written in java.
if j3d had been built on top of an opengl wrapper, i'd probably have used that because it obviously addresses the problem of lwjgl, that there aren't any scene graph implementations available for it yet.
if you want to learn 3d programming, java 3d isn't the thing for you.
its xml-based communications protocol is by definition slow and verbose, and that's before you get into the other architectural issues.
i have also used scene graphs (from sgi to pc) outside of java and plan to keep on doing so.
i have no fear of .net becoming the default back-end technology for networked games - it was designed with business apps in mind, which need totally different properties.
eventually the class i teach adopted renderware (a pseudo-scene graph api) once it was an acceptable practice.
the players are: jason r briggs: java developer's journal contributing editor and your host; games player when he has time, games developer...on occasion.
i think we need a dedicated engineering, marketing, and support team for the whole issue, yet i feel that jeff and chris are the only sun employees who are even trying, and they only seem to be let out of their cubicles once they've said their prayers to solaris and flayed themselves for eight hours over a hot spreadsheet.
i have also used scene graphs (from sgi to pc) outside of java and plan to keep on doing so.
they make one c# game that's a hit and it's a done deal.
ogl doesn't give you scene graph management; you're going to need to write that yourself.
i have the same hope for playstation 3 one day.
you can't even insist on a title bar and windowed mode; it's specifically meant to provide full screen-only games.
for some folks that may be the perfect bar, for others it may be too low.
if java did spread to ps3 and xbox, i'd say "why c# and stick with pcs if we already have java?"
if sun is seen to be behind opengl to the point where their own products utterly depended on it, you'd get the positive feedback loop required to ensure that both support each other and grow.
i never want to code immediate mode graphics if i can help it.
personally, i don't like the idea of j3d completely hiding details; of course, this isn't fully justified because i haven't done much with j3d, but i do strongly believe you should always be able to get as low level as necessary where games development is concerned and i've seen people struggle with j3d issues that they don't seem to be in control of.
shawn k: i do see serious competition from this because ms will do whatever it can to move developers to windows, games or otherwise.
i discovered alien flux ran on linux without any trouble at all.
eventually the class i teach adopted renderware (a pseudo-scene graph api) once it was an acceptable practice.
if you write a slow lwjgl game, it's because you've used opengl incorrectly, not because we've written some dicky code in the library.
we've deliberately created a platform based around what we know the hardware and underlying o/s need to be for gaming: a display, some speakers, a few input devices - nothing more.
ogl is so low level you have to have a bit better programming skill as well as more 3d knowledge to use it.
one of the architects of java 3d, he has also worked in the graphics research group at sun looking at advanced rendering techniques and programmable shading.
for their work it was no problem to use either install and everything worked.
the fact that ms will make .net work on the xbox and future xboxes makes it all the more compelling.
java 3d is so far above my head i barely know where to begin.
another reason for lwjgl is performance - speed and size.
there's no way .net will become available on a playstation, for example.
a side effect of lwjgl is it enables us to deploy games with less licensing restrictions: i can natively compile my games for windows, which solves a bunch of other problems i won't go into here, and the demos come out under the magic 5mb download patience threshold.
msvm has always supported directx through jdirect, but it hasn't taken off as a game platform.
also, ms makes games.
once it's up and running, it behaves in exactly the same way as the windows one.
c#/clr has none of the benefits of java (it's not cross platform, being yadc (yet another dialect of c) it's not likely to appreciably improve either productivity or code correctness.
you can't even insist on a title bar and windowed mode; it's specifically meant to provide full screen-only games.
this is less of an issue today as the laptops have better support for ogl and the workstations for directx.
once it's up and running, it behaves in exactly the same way as the windows one.
however, all that being said, i do agree that being able to directly write to ogl is a good thing regardless of what you do on the top of it.
they listen to their developers and changes get made.
common data structures for public as well as private interchange.
i developed lwjgl in the first place because i find the opengl api easy and, most important, fast.
i discovered alien flux ran on linux without any trouble at all.
it was designed from the very beginning to be a portable console game library, even if it does end up being only completely theoretical.
alien flux would even run on a playstation's 32mb of ram with a little tweaking to the graphics.
by this i mean, there's a thriving community of developers who code to j3d and easily trade huge code packages because they all use j3d classes and can be tested and integrated with very little modifications if written well.
about all it does is muddy the waters around java, which in my opinion is maybe all it's supposed to do.
we get a lot of requests to enable one to create lots of windows and have them behave as they should.
it doesn't restrict me in any way and i believe it might become a key factor for well-performing games written in java.
i was more surprised than anyone.
i've been playing a little with j3d, but i thought opengl was a lot easier to get into, and i like keeping in full control of things.
if you want to learn 3d programming, java 3d isn't the thing for you.
if java did spread to ps3 and xbox, i'd say "why c# and stick with pcs if we already have java?"
doug t: as jeff mentions, this mostly affects java from the c# side of things.
the easy integration with a direct, ultra-capable gaming api (directx) means that it's only a matter of time before m$ starts gaining a majority unless there's some direct competition in the same space from sun.
there's only one window in lwjgl, and we get a lot of requests for multiple windows.
msvm has always supported directx through jdirect, but it hasn't taken off as a game platform.
i'm not saying those actual packages will end up in a final production, but the integration-to-test phase is lightning fast.