a lot of functionality has been added to interact with the many moving parts of our infrastructure.
marketingplatform(tm) is a solution for marketers in direct marketing and in channel marketing who would like to gain a timely and deep understanding of what is working and what is not working in their marketing campaigns.
unsurprisingly, the job of fixing chat bugs falls to one of a very small group, whereas bugs in our php code have a small army of php generalists waiting to squash them.
design: create communications that are relevant to each individual, driven by the data and insight gained from measurement and analysis.
the ihg is starting off with a limited set of activities, but already it is having an impact on the state of the haskell development platform.
based on this experience, the second part of the talk will discuss the suitability of scala for use within this context, comparing the risks of using a niche language against its productivity benefits.
the stronger community would in turn benefit the commercial users, in a positive feedback cycle.
facebook and the thrift project are also fortunate to have an active community.
second, as we handle people's money, mistakes could be damaging, but the expressiveness of fp give us confidence in our code, and a lack of side effects facilitates testing.
compared to writing derivative-specific monte carlo simulations in a general-purpose computer language, the per-derivative development time has been reduced from weeks to hours.
third, a responsive site is a pleasure to use, so we write parallelizable logic, which fp's avoidance of side effects makes feasible.
c# was retained for building the asp.net user interface, just because the f# tool support is not there yet.
dynamic and data-driven wrappers make external libraries directly visible.
we were able to get to market much sooner with more feature, and the overall cost of the development was significantly lower.
we will also look at how we can encourage the positive feedback cycle between commercial users and the wider community.
the original thrift binding for erlang was implemented in-house but substantial portions were reimplemented by outside contributors.
f# is a functional language with first class functions and composability, a pattern matching language and strongly typed.
building the user programmable internet with erlang speaker: gordon guthrie, hypernumbers abstract: for many people, the programming language of choice is a spreadsheet.
design: create communications that are relevant to each individual, driven by the data and insight gained from measurement and analysis.
a lot of functionality has been added to interact with the many moving parts of our infrastructure.
it's well-known that erlang is a good choice for communications applications and real-time chat in particular, and we'd like to mention that erlang's strong support for concurrency, distribution, hot code loading, and online debugging have been indispensable, and that it's those same weaknesses that lead us away from c++ when first designing the service.
based on this experience, the second part of the talk will discuss the suitability of scala for use within this context, comparing the risks of using a niche language against its productivity benefits.
as well we've leveraged existing open source products including ejabberd and bob ippolito's mochiweb framework.
the hypernumbers platform is itself implemented in a functional programming language — erlang.
our service management tools as well are language-independent; all our services regardless of language are controlled using the same interface.
as well we've leveraged existing open source products including ejabberd and bob ippolito's mochiweb framework.
fortunately we rely heavily on thrift for all our services.
the spreadsheet programming paradigm remains tied to the ‘document’ model due to its firm desktop roots.
however erlang has such a steep learning curve only because most undergraduate programs don't stress functional programming, and facebook in particular doesn't expose most engineers to functional programming, or even information about the strengths and weaknesses of fp versus php, c++, and python.
unfortunately, our erlang projects live outside of our main repository, and the extra learning necessary to develop or just fix bugs in erlang tends to keep us isolated from the pool of talent in our department.
abstract: i'm co-founder & cto at 'hover.in', the in-text content & ad delivery platform that let's blogs and website publishers to push client-side events to the cloud.
the big board aids in filling this technological gap by providing aerial photography, facility for dynamic, geo-referenced content creation, and a mechanism for simulcasting the content to everyone participating in the management of an emergency.
the stronger community would in turn benefit the commercial users, in a positive feedback cycle.
both the channel and jabber servers need to speak to programs written in php and c++, and having infrastructure and engineers comfortable debugging it already in place when we began was invaluable.
the spreadsheet programming paradigm remains tied to the ‘document’ model due to its firm desktop roots.
the code is more readable and easier to adapt as new market requirements come in.
first, easy-to-use often means complex-to-build, but fp's high-level abstractions and referential transparency help us to manage this complexity.
abstract: bryan will talk about how the book "real world haskell" came to be, and the response that it has received since publication.
soon the spreadsheet dependency graph is lost and the spreadsheet layer is relegated to a gui on top of tens/hundreds of thousands of lines of vba.
as they mark up the map, their annotations are simulcasted to everyone else in the same conference room.
most of the business logic was implemented in f#, as was most of the data handling.
most importantly, we needed good support for language-independent rpc.
we expect that as it expands, it will become a significant force driving haskell forwards.
many of our internal tools weren't written with erlang or (in particular) hot code reloading in mind, so we needed to write many one-offs to support all the runtime goodness that erlang affords us.
we have been using scala within a large code base of 300k lines of java on a on a business-critical, production system, where performance requirements are key.
after an initial quite 1 1/2 years of erlang in production, we've just launched our developer blog which might give a closer insight of our work: the big board: teleconferencing over high-res maps with haskell speaker: jefferson heard, renaissance computing institute
we at facebook also tend to work in large codebases and share the responsibility of bug fixing.
we have been using scala within a large code base of 300k lines of java on a on a business-critical, production system, where performance requirements are key.
speaker: lee benfield, barclays capital abstract: barclays capital, like many other investment banks, uses microsoft excel as a rapid application development environment for pricing models and other tools.
conclusion: f# is an excellent language for line of business applications.
marketers are than facilitated in the execution and delivery of campaigns, using this insight to create relevant communications to each individual.
i will also give a demonstration of the application running, showing how it can be used to coordinate a disaster response.
spreadsheet 'programs' can be exported and run outside of excel.
excel combines two programming models a zeroth order functional language (the spreadsheet) an imperative programming language (visual basic for applications) the functional model allows very rapid development and great transparency, but the limitations of excel's built-in functions drives developers to use vba.
abstract: i'm co-founder & cto at 'hover.in', the in-text content & ad delivery platform that let's blogs and website publishers to push client-side events to the cloud.
the hypernumbers platform is itself implemented in a functional programming language — erlang.
presence information, the knowledge of who is currently using chat, is aggregated and shipped to a separate service.
i mentioned above that much of facebook's infrastructure is language-agnostic, but our build and deploy systems unfortunately are not.
additionally, web-services serving geo-referenced content can be integrated onto the map to overlay things such as real-time vehicle location and sensor data.
third, a responsive site is a pleasure to use, so we write parallelizable logic, which fp's avoidance of side effects makes feasible.
hypernumbers are developing a ‘spreadsheet-like’ programming language and platform for the web that will enable non-technical end-users to build dynamic integrated web-applications.
the start-up predominantly runs off the lyme stack ( linux / yaws / mnesia / erlang ) .
the recurring theme is "the right tool for the job" — actor-based, functional, imperative, and object-oriented programming are all valuable tools for modeling particular problems, but the most important lessons in our experience are how to lower the barriers to choosing the right tool, and how to arm engineers with the knowledge they need to make an appropriate choice.
so we believed that we would get the best of both worlds — a modern productive language and a full set of libraries to build on.
i mentioned above that much of facebook's infrastructure is language-agnostic, but our build and deploy systems unfortunately are not.
we expect that as it expands, it will become a significant force driving haskell forwards.
abstract: we use erlang, ml, and haskell for a few small projects but (as i'm sure you guessed) we'd like to focus on the lessons we've learned using erlang for building facebook chat.
the functional model allows very rapid development and great transparency, but the limitations of excel's built-in functions drives developers to use vba.
abstract: bryan will talk about how the book "real world haskell" came to be, and the response that it has received since publication.
the application was developed in less time with significantly less code — probably a quarter.
at the same time it as a .net clr language, fully interoperable with the vast libraries, and fully capable of oop.
in particular the architectural decisions that went into making our distributed python crawler back-end running off mnesia with its sharing & fragmentation strategies for tables that span several millions of rows, load-balancing to our 3-node yaws web servers, tweaks to solve file descriptor & efficiency bottlenecks, experiments in dht's, our cache worker implementations, our messaging queues, cron's & trade offs in dispatching jobs also throw light on design choices that can fit in distributed and heterogeneous environments.
many of our internal tools weren't written with erlang or (in particular) hot code reloading in mind, so we needed to write many one-offs to support all the runtime goodness that erlang affords us.
fmd (‘functional model deployment’) prevents these problems by embedding a functional language cleanly into excel, effectively extending excel to be a higher order functional environment.
our service management tools as well are language-independent; all our services regardless of language are controlled using the same interface.
we will also look at how we can encourage the positive feedback cycle between commercial users and the wider community.
both the channel and jabber servers need to speak to programs written in php and c++, and having infrastructure and engineers comfortable debugging it already in place when we began was invaluable.
we have used scala to implement diesel: a domain-specific language used within our in-house system for pricing/risk-managing/hedging commodity derivatives.
managers who direct emergency operations centers have few technological tools to help them with these complicated, critical tasks.
they are, in fact, still largely paper based.
the channel servers are at the heart of our chat infrastructure; they receive messages from our web servers and queue them for http delivery.
fmd (‘functional model deployment’) prevents these problems by embedding a functional language cleanly into excel, effectively extending excel to be a higher order functional environment.
however erlang has such a steep learning curve only because most undergraduate programs don't stress functional programming, and facebook in particular doesn't expose most engineers to functional programming, or even information about the strengths and weaknesses of fp versus php, c++, and python.
the channel servers are at the heart of our chat infrastructure; they receive messages from our web servers and queue them for http delivery.
marketingplatform(tm) is a solution for marketers in direct marketing and in channel marketing who would like to gain a timely and deep understanding of what is working and what is not working in their marketing campaigns.
abstract: we have developed marketingplatform(tm) a marketing automation solution delivered as software as a service with f# as the primary language.
most importantly, we needed good support for language-independent rpc.
we have also recently built our own in-memory cache workers, persistent stats & logging system, and in the process of now building our own a/b testing framework, that we'd love to talk about.
in particular the architectural decisions that went into making our distributed python crawler back-end running off mnesia with its sharing & fragmentation strategies for tables that span several millions of rows, load-balancing to our 3-node yaws web servers, tweaks to solve file descriptor & efficiency bottlenecks, experiments in dht's, our cache worker implementations, our messaging queues, cron's & trade offs in dispatching jobs also throw light on design choices that can fit in distributed and heterogeneous environments.
facebook runs many services, most of which are in c++, python, or java, and only two in erlang, so in some respects we've needed to work harder to integrate.
it's well-known that erlang is a good choice for communications applications and real-time chat in particular,
in particular we'd like to touch on the prevalence of object-oriented programming in education and in practice, and the tendency of engineers (even engineers with fp experience) to guide their design by oop principles even when they don't fit.
speaker: lee benfield, barclays capital abstract: barclays capital, like many other investment banks, uses microsoft excel as a rapid application development environment for pricing models and other tools.
marketers are than facilitated in the execution and delivery of campaigns, using this insight to create relevant communications to each individual.
as they mark up the map, their annotations are simulcasted to everyone else in the same conference room.
abstract: we have developed marketingplatform(tm) a marketing automation solution delivered as software as a service with f# as the primary language.
the logic is tightly tied to excel, and a server-side implementation involves a complete rewrite in another language, which carries both operational risk and developmental cost.
the goal is that it should give emergency managers a reliable and flexible way to coordinate on their most natural medium (maps), be as easy to use as pen and paper, quick to train a new user on, and able to run in many environments, some quite technologically out of date.
we'd like to focus on the lessons we've learned using erlang for building facebook chat.
the big board aids in filling this technological gap by providing aerial photography, facility for dynamic, geo-referenced content creation, and a mechanism for simulcasting the content to everyone participating in the management of an emergency.
facebook and the thrift project are also fortunate to have an active community.
managers who direct emergency operations centers have few technological tools to help them with these complicated, critical tasks.
additionally, web-services serving geo-referenced content can be integrated onto the map to overlay things such as real-time vehicle location and sensor data.
in this presentation we will talk about the motivation leading to the formation of the ihg, how it has worked thus far and what lessons we can learn that might benefit other fp communities.
in this presentation i will describe: i will also give a demonstration of the application running, showing how it can be used to coordinate a disaster response.
execute: deliver the communications through the most appropriate channels, including email, print and mail, texting and purls.
soon the spreadsheet dependency graph is lost and the spreadsheet layer is relegated to a gui on top of tens/hundreds of thousands of lines of vba.
we at facebook also tend to work in large codebases and share the responsibility of bug fixing.
in particular we'd like to touch on the prevalence of object-oriented programming in education and in practice, and the tendency of engineers (even engineers with fp experience) to guide their design by oop principles even when they don't fit.
facebook runs many services, most of which are in c++, python, or java, and only two in erlang, so in some respects we've needed to work harder to integrate.
we were able to get to market much sooner with more feature, and the overall cost of the development was significantly lower.
diesel can represent commodity derivatives naturally and can then be executed to perform a monte carlo simulation.
erlang has been the right tool for the job.
in this presentation we will talk about the motivation leading to the formation of the ihg, how it has worked thus far and what lessons we can learn that might benefit other fp communities.
so we believed that we would get the best of both worlds — a modern productive language and a full set of libraries to build on.
in the big board, users open a map, join a virtual conference room, and then can collaboratively mark up the map with paths, polygons, and placemarks and add content behind these using a wiki that is generated as part of every conference room.
this requires situational awareness, meaning that emergency managers know what and where their resources are on the ground, and what the ground's features are.
the product is in the market and selling well, so we were rewarded by our decisions.
execute: deliver the communications through the most appropriate channels, including email, print and mail, texting and purls.
compared to writing derivative-specific monte carlo simulations in a general-purpose computer language, the per-derivative development time has been reduced from weeks to hours.
f# is a functional language with first class functions and composability, a pattern matching language and strongly typed.
unfortunately, our erlang projects live outside of our main repository, and the extra learning necessary to develop or just fix bugs in erlang tends to keep us isolated from the pool of talent in our department.
bangalore (with one slide listing all the modules written as well) a more product-oriented interview the big board: teleconferencing over high-res maps with haskell speaker: jefferson heard, renaissance computing institute
the product is in the market and selling well, so we were rewarded by our decisions.
unsurprisingly, the job of fixing chat bugs falls to one of a very small group, whereas bugs in our php code have a small army of php generalists waiting to squash them.
in the big board, users open a map, join a virtual conference room, and then can collaboratively mark up the map with paths, polygons, and placemarks and add content behind these using a wiki that is generated as part of every conference room.
crowd control, first aid, fire, police, and search and rescue teams all have to provide a timely and coordinated response to save lives and property.
the goal is that it should give emergency managers a reliable and flexible way to coordinate on their most natural medium (maps), be as easy to use as pen and paper, quick to train a new user on, and able to run in many environments, some quite technologically out of date.
the recurring theme is "the right tool for the job" — actor-based, functional, imperative, and object-oriented programming are all valuable tools for modeling particular problems, but the most important lessons in our experience are how to lower the barriers to choosing the right tool, and how to arm engineers with the knowledge they need to make an appropriate choice.
crowd control, first aid, fire, police, and search and rescue teams all have to provide a timely and coordinated response to save lives and property.
while this may sound bizarre, excel's flexibility and convenience renders it an immensely useful tool for the front office, and our traders are extremely excel literate.
diesel can represent commodity derivatives naturally and can then be executed to perform a monte carlo simulation.
we have used scala to implement diesel: a domain-specific language used within our in-house system for pricing/risk-managing/hedging commodity derivatives.
clr language, fully interoperable with the vast libraries, and fully capable of oop.
after an initial quite 1 1/2 years of erlang in production, we've just launched our developer blog which might give a closer insight of our work: notes on our multi-core computing & back-end experiences notes on using a erlang based load-testing tool (tsung) my talk on 'erlang at hover.in' at devcamp
presence information, the knowledge of who is currently using chat, is aggregated and shipped to a separate service.
fortunately we rely heavily on thrift for all our services.
second, as we handle people's money, mistakes could be damaging, but the expressiveness of fp give us confidence in our code, and a lack of side effects facilitates testing.
and we'd like to mention that erlang's strong support for concurrency, distribution, hot code loading, and online debugging have been indispensable, and that it's those same weaknesses that lead us away from c++ when first designing the service.
c# was retained for building the asp.net user interface, just because the f# tool support is not there yet.
this requires situational awareness, meaning that emergency managers know what and where their resources are on the ground, and what the ground's features are.
first, easy-to-use often means complex-to-build, but fp's high-level abstractions and referential transparency help us to manage this complexity.
the application was developed in less time with significantly less code — probably a quarter.
the start-up predominantly runs off the lyme stack ( linux / yaws / mnesia / erlang ) .
implementing a domain-specific language for derivative pricing with scala speaker: lee momtahan, edf trading abstract: in this talk i shall explain how scala has been used at edf trading.
the logic is tightly tied to excel, and a server-side implementation involves a complete rewrite in another language, which carries both operational risk and developmental cost.
the code is more readable and easier to adapt as new market requirements come in.
hypernumbers are developing a ‘spreadsheet-like’ programming language and platform for the web that will enable non-technical end-users to build dynamic integrated web-applications.
the ihg is starting off with a limited set of activities, but already it is having an impact on the state of the haskell development platform.
the original thrift binding for erlang was implemented in-house but substantial portions were reimplemented by outside contributors.
implementing a domain-specific language for derivative pricing with scala speaker: lee momtahan, edf trading abstract: in this talk i shall explain how scala has been used at edf trading.
while this may sound bizarre, excel's flexibility and convenience renders it an immensely useful tool for the front office, and our traders are extremely excel literate.
most of the business logic was implemented in f#, as was most of the data handling.
we have also recently built our own in-memory cache workers, persistent stats & logging system, and in the process of now building our own a/b testing framework, that we'd love to talk about.