i have to say that so far i'm really impressed with django.
i admit that i'm no guru after working through one tutorial
i do know on the django side thatpownce.com uses django for it's server side solution.
if i didn't have a framework to being with, i'd have wasted my time basically making the same decisions and having to implement them all.
cu sebastian i haven't finished dive into python yet, but from what i have read so far i'm very impressed and happy with it.
i think both django and ror have big websites that use their frameworks.
the more i experiment with other languages, the more i dislike php.
it's actually pretty detailed and even styled.
the final catalyst that made the pendulum sway towards django was listening to a three hoursnakes and rubies presentation where adrian holovaty (one of the creators of django) anddavid heinemeier hansson (the creator of rails) both present their frameworks and then answer questions from the audience.
and what i found really cool about the admin interface that comes with django is that it doesn't look like something your phd math professor designed.
and what i found really cool about the admin interface that comes with django is that it doesn't look like something your phd math professor designed.
in fact, i find it refreshing that they had the balls to make some of these decisions.
in trying to keep an open mind, i read and keep up with the latest news in web development.
however, the buzz around ror is so big, i sometimes feel i'll be left behind if i don't jump on the ror bandwagon.
it saves a ton of time and is very customizable and was way better than anything rails had when i was doing comparisons, so things might have changed since then.
it's actually has a nice detailed clean graphically designed interface.
can i really use the in-built admin interface with public facing websites; i mean it'll be a security risk if i can't.
in my opinion adrian's presentation was far superior to david's it wasn't even funny.
after watching the video, i committed myself to doing a full app in ror and so far...
i've personally been working on converting all of ciy.com's websites over to using django.
but for me that wasn't an option because i already had a lot of applications on my server that were dependent on apache and i didn't want to run another web daemon on a different port on the same server.
i've posted a poll at: http://www.railsordjango.com great words, will give django a dry thanks for the good comparison.
after hearing both presentations and the questions that followed it felt very clear to me that django is definitely the framework for me.
python is stricter in the way that it does things, like being whitespace sensitive for example.
django developers are always thinking about security and as far as i know it's very secure.
python's syntax and way of doing things is so much cleaner and elegant in my opinion that ruby.
i had also heard rumours of dhh being a yap (young arrogant programmer) and finally decided to watch the snakes and rubies video.
its overall philosophy goes with mine, it uses python which i like more than ruby and django's workflow and stack seem a lot more simple and logical than rails.
i especially like the way the urls work.
python is stricter in the way that it does things, like being whitespace sensitive for example.
also another programming framework that is making some buzz in the community isdjango.
i'll be honest, i did not find dhh cocky or arrogant.
and i needed help from friends at times but ultimately i'm glad i made the investment.
just run the included django dev server.
one major benefit is that all python programs look similar, since indentation is a language requirement and not a matter of style.
you basically just need python and whatever database you're using installed locally for development.
adrian's presentation was very logical in that he explained the django stack so that you could follow django's workflow for creating applications.
in my opinion adrian's presentation was far superior to david's it wasn't even funny.
this makes it easier to read and understand other people's python code."
i have chosen ruby and rails, but that is not to say that i am not going to also look into python and django.
the programming workflow and django's stack just seem to make more sense.
however, after finishing the tutorial i felt like the overall application was sluggish.
david's presentation on the other hand seemed to be in no particular order and very unorganized.
it's actually has a nice detailed clean graphically designed interface.
having an automatic admin interface can cut down on building web applications like content management systems and blog applications.
rewrite my blog in django too, while you're at it.
not to mention that david's over all demeanor was very cocky and arrogant which was a major turn off.
ruby feels like i am speaking english instead of programming, which i find very attractive.
one major benefit is that all python programs look similar, since indentation is a language requirement and not a matter of style.
first of all the installation process was a little tricky since in order to get rails to work with apache 2 you have to installfastcgi.
xhtml, css, rss feeds.
i'm sure a lot of this has to do with the fact that rails uses fastcgi instead of a module for apache like mod_python and php4_module.
i'm addicted to indention so in that respect, python is intriguing.
so ultimately it wouldn't have made good sense to choose something that gave me a headache and required extra time because it came without an admin website built in.
in trying to keep an open mind, i read and keep up with the latest news in web development.
this makes it easier to read and understand other people's python code."
i think i could probably do just about anything you can imagine or have seen on the web in php / mysql.
what's the worst that can happen, you broaden your knowledge base and become a better php programmer (or whatever you use) because of it?
brent, i haven't looked into django much mainly because i attached myself to ruby.
not to mention that david's over all demeanor was very cocky and arrogant which was a major turn off.
after hearing both presentations and the questions that followed it felt very clear to me that django is definitely the framework for me.
unless you've been living in a cave you've probably heard at least something aboutruby on rails.
i've heard but haven't experienced it first hand that rails is a lot faster when you uselighthttpd instead of apache 2.
i also know that #django onfreenode.net is very active.
if you can't already tell my preference is defiantly swaying toward django.
david's presentation on the other hand seemed to be in no particular order and very unorganized.
it has 2 people on it that are django users.
also another programming framework that is making some buzz in the community isdjango.
what's the worst that can happen, you broaden your knowledge base and become a better php programmer (or whatever you use) because of it?
i think i could probably do just about anything you can imagine or have seen on the web in php / mysql.
one of the other features and main differences between rails and django is that django has an "automatic admin interface" which you can either take it or leave it.
i'll be honest, the ruby syntax is different enough from other languages that it puts me off a bit.
however, after finishing the tutorial i felt like the overall application was sluggish.
cu sebastian i too have been programming php for many years.
after the install the tutorial was pretty straight forward and rails did a lot of the tedious reparative tasks for you, which i liked.
i tried ruby on rails first by working through a tutorial they had which walked you through making a simple to-do application.
the other major factor that made me choose django, was for python.
but for me that wasn't an option because i already had a lot of applications on my server that were dependent on apache and i didn't want to run another web daemon on a different port on the same server.
i have to say that so far i'm really impressed with django.
i use git to keep revisions of my code and when i'm ready to deploy i commit the changes to my remote repository and then i update the code that the live site is hosted on from the master repository.
the programming workflow and django's stack just seem to make more sense.
and after working with django for over a year, i am very happy with it and have started using django's design patterns in my php framework that i have keep up over the years.
the experience is pleasantly surprising me at many turns.
it teaches you first the nitty gritty stuff to create your own forms, and then goes into how to make the automatic admin.
having an automatic admin interface can cut down on building web applications like content management systems and blog applications.
not only does django seem to make more sense, it's a lot faster than rails when used with apache 2.
first of all the installation process was a little tricky since in order to get rails to work with apache 2 you have to installfastcgi.
the final catalyst that made the pendulum sway towards django was listening to a three hoursnakes and rubies presentation where adrian holovaty (one of the creators of django) anddavid heinemeier hansson (the creator of rails) both present their frameworks and then answer questions from the audience.
i had built a framework in php over the past five years, that powers lots of high traffic multilingual sites, but after two weeks with django, iÂ´ve not only decided to learn django, but also to stop any other development on my own solution.
"not to mention that david's over all demeanor was very cocky and arrogant which was a major turn off" and also not too mention rails fanatics are mocking other frameworks (especially in php) in any occations.
i haven't been looking for a change, but part of being good at anything in life means keeping an open mind and thinking critically.
not only does django seem to make more sense, it's a lot faster than rails when used with apache 2.
i've heard but haven't experienced it first hand that rails is a lot faster when you uselighthttpd instead of apache 2.
i don't have any benchmarks to prove it but you can just tell by the feel that django's tutorial poll application is faster than rails's tutorial to-do application.
being whitespace sensitive means that it delimits blocks of code by line breaks, other programs like java, c++ and php use curly braces to delimit code blocks.
i tried ruby on rails first by working through a tutorial they had which walked you through making a simple to-do application.
unless you've been living in a cave you've probably heard at least something aboutruby on rails.
i honestly get a headache when looking at ruby code.
it's hard getting used to the django way of doing things, but you are going to have that probablem anytime you move to a new language or framework.
you can use the built-in admin site however you like.
he came across as very opinionated and having strong beliefs.
and so i have complete control on what is installed.
i have no exposure to ruby other than experimenting with ror, while i have written a few apps with python and also the python-based scrapy framework.
the two factors that made me choose django over rails are that django has a very powerful and mature admin website built into the framework that you can use if you want.
ajax support (screw the 7%), allowing code in the template, etc... its as if all the mundane (who cares type) decisions and the obvious good for the 90% use case decisions have been made.
coming from php/mysql, i too have been working through the tutorials.
www.example.com/. django works well with mysql, but most django coders will tell you that they prefer postgresql.
cheers hey drazen, this article was written over three years ago, so things have changed since this article was written for me, in that i have probably about a years worth of experience using django full-time at my full-time job.
its overall philosophy goes with mine, it uses python which i like more than ruby and django's workflow and stack seem a lot more simple and logical than rails.
after the install the tutorial was pretty straight forward and rails did a lot of the tedious reparative tasks for you, which i liked.
it's actually pretty detailed and even styled.
i'm sure a lot of this has to do with the fact that rails uses fastcgi instead of a module for apache like mod_python and php4_module.
one of the other features and main differences between rails and django is that django has an "automatic admin interface" which you can either take it or leave it.
website powered by epicserve's cms.
i haven't been looking for a change, but part of being good at anything in life means keeping an open mind and thinking critically.
adrian's presentation was very logical in that he explained the django stack so that you could follow django's workflow for creating applications.
i admit that i'm no guru after working through one tutorial
i don't have any benchmarks to prove it but you can just tell by the feel that django's tutorial poll application is faster than rails's tutorial to-do application.
being whitespace sensitive means that it delimits blocks of code by line breaks, other programs like java, c++ and php use curly braces to delimit code blocks.
