it has the potential to be a great tool, and the head developer, christian iversen is very open to outside contributions.while it is true that the most restrictive operating systems only permit us to code in objective c, in general, it is not considerate to restrict your developers a single language or environment.it provides a better analysis of code coverage, and is closer to the actual code.many developers create personal or private projects using html 5 because it’s convenient.however, i feel that as i learn the ins and outs of pyjaco, and as the developers continue to refine and improve the compiler, pyjaco may one day be a perfectly viable alternative to writing pure javascript or to the rather too ruby-esque, but otherwise excellent coffeescript.rather, it creates a basic standard library of python-like objects that are utilized in the compiled javascript code.it is time (in fact, long overdue) for python to be supported in the browser, not necessarily as an equal to javascript, but as an alternative.being able to tell the difference between rpython and python (which have identical syntax) is important.while the code is readable, there is very little in the way of end-user documentation.in an ideal world, we could convert this variable to a python variable using py(), but as noted earlier, calling py on a jquery object results in a stack overflow or browser crash.the fallacious underlying assumption here is that modern html applications must be supported on all web browsers in order to be useful.pypy has a solid test framework, and the pypy crew are focused on a 100% test-driven-development paradigm.i’m not going to argue why this is a good idea, i understand that some programmers prefer the “even if i don’t understand it, i can write code that will probably work” paradigm that ruby promotes.i am hopeful that improvements to pyjaco will cause it to generate more readable javascript with less extraneous code.they are so confident in their test suite that they are comfortable programming in a “cowboy coding” style, hacking randomly until all the tests pass.