abstract to scale the backend of amo, we rely heavily on caching in memcached (and soon redis) to keep the load off our database, and multidb to spread the load we can't dump off on cache.
we create development environments using pip and virtualenv, so we naturally started using that setup to deploy the site in production.
) babel helps us localize the site in over 30 languages sphinx (not the documentation tool) serves our search results celery and rabbitmq help us do offline processing nose and hudson help us get over 90% code coverage in tests published 1 year ago by djangocon published 2 years ago by pycon published 1 year ago by djangocon published 2 years ago
in reality, these two systems are very similar and can actually cooperate pretty well.
this will be a very concentrated version (10%) of a course (csc438) on web frameworks the author teaches at depaul university.
code samples will be made available after class with no restrictions.
extracting information, even in the face of bad html: regular expressions, beautifulsoup, sax, and xpath.
we will also discuss in some detail its ajax capabilities by using web2py components and plugins for modular design of rich web interfaces.
playing with xml-rpc do not become an evil comment spammer.
requirements students will need a computer and amazon ec2 and s3 accounts, and will be asked to familiarize themselves with the process of starting and stopping ec2 virtual machines before the class.http://us.pycon.org/2010/tutorials/kaplanmoss_django/ published 1 year ago
we see about 120 million web requests per month and 1.4 million visitors per day.
redundant replicated database servers.
automating firefox with selenium rc to navigate a pure-javascript service.
q&a; and workshopping use your power for good, not evil.
the problem centers around how to efficiently maintain sorted data while advancing a large sliding window one value at a time.
in addition, we work hard to measure and improve raw speed.
the course has been taught 3 times and the last time counted more than 30 students.
the classic, but difficult, algorithm for lexical analysis becomes simple when composing python's dicts and frozensets.
we update and deploy new code at least once a week, and have to deal with the additional complication of managing and interacting with parts of the php site that have not been ported over.
if you're a user of any of these frameworks, you'll want to be present for this talk.
the talk will be more socially-oriented than technical.
by the end of the class, each student will have created an environment featuring:multiple levels of caching and load balancing.
show how these tools can be powerfully combined to create elegant solutions to four hard problems.
it's unusual for open source code and communities to bridge minor perceived differences in scope and style and to start sharing code and ideas openly.
countermeasures, and circumventing them: ip address limits hidden form fields user-agent detection javascript captchas plenty of full source code to working examples: submitting to forms for text-to-speech.
this class will introduce students to a wide variety of technologies, including amazon's ec2 and s3, fabric, varnish, nginx, mod_wsgi, memcached, postgresql, pgpool, pg_standby, and more.
you'll leave with an understanding of when to apply different tools, and learn about automating a full web browser, a "heavy hammer" that i picked up at a project for the electronic frontier foundation.
mastering team play: four powerful examples of composing python tools (#184) mastering team play: four powerful examples of composing python tools presented by raymond hettinger starts with a quick review of the performance characteristics of major individual tools in python: bisect, heapq, lists, deques, sets, frozensets, class structures, sorts, and weakreferences.
hitting indexes and keeping datasets small is critical, and the django ecosystem has many great tools to help us profile.
apart from scaling and deployment, we've customized our application in ways that could be interesting to other django users: jinja is our templating engine (but we keep the admin working) babel helps us localize the site in over 30 languages sphinx (not the documentation tool) serves our search results celery and rabbitmq help us do offline processing nose and hudson help us get over 90% code coverage in tests published 1 year ago pycon 2010:
note: the example application used in this class with be a django site, and the class assumes at least a moderate comfort level with django.
web2py secrets presented by massimo di pierro we will provide an introduction to web2py with particular focus on its design objectives, its differences when compared to other web frameworks, and some of the most recently added features (components, plugins, openid/oauth integration).
it's unusual for open source code and communities to bridge minor perceived differences in scope and style and to start sharing code and ideas openly.
abstract to scale the backend of amo, we rely heavily on caching in memcached (and soon redis) to keep the load off our database, and multidb to spread the load we can't dump off on cache.
there is a fair amount of unnecessary animosity between developers about version control systems, especially between mercurial and git users.
we'll create this whole stack on amazon ec2 virtual machines, so students will be able to take home a complete copy of all the deployment configuration for future review at their leisure.
this talk will be a case study of scaling and deploying a large website (and getting faster than php) with mysql, memcached, virtualenv, celery, hudson, redis, mongodb, and more.
pycon 2011: web2py secrets tutorial (1/2) web2py secrets presented by massimo di pierro we will provide an introduction to web2py with particular focus on its design objectives, its differences when compared to other web frameworks, and some of the most recently added features (components, plugins, openid/oauth integration).
we ran into issues creating a reliable environment with this method; switching to a separate vendor repository solved our problems with only a small amount of added effort.
hitting indexes and keeping datasets small is critical, and the django ecosystem has many great tools to help us profile.
in addition, we work hard to measure and improve raw speed.
python developers using other web frameworks will likely be able to follow along -- see the note in the summary, above.
in this tutorial we will provide a brief introduction to web2py, the web based ide, its internal design, and its internal file organization.
ordered dictionaries: with the right compostion of dictionaries, linked lists, and weak references, a dictionary can remember its insertion order without any impact on its big-oh running times.
frontend caching is external to django and won't be covered.
published 2 years ago by pycon djangocon 2010: scaling the world's largest django application disqus, one of the largest django applications in the world, will explain how they deal with scaling complexities in a small startup.
in this hands-on workshop we'll walk through the creation of a full django deployment environment running on a cluster of (virtual) machines.
automatic template reverse-engineering tools.
in this tutorial we will provide a brief introduction to web2py, the web based ide, its internal design, and its internal file organization.
python in quantitative finance (#158) python in quantitative finance presented by wes mckinney (aqr capital management, llc) this talk will show how python and libraries such as numpy were instrumental at aqr for building a robust research platform for prototyping and implementing quantitative trading models.
we will discuss many different tools, including pandas, a new open source library designed for analyzing common financial and economic data sets.
in this talk we will show just how similar git and mercurial are, look at some of their technical differences, and see how they can work together by looking at hg-git, the bidirectional git/mercurial bridge, implemented in python.
this talk will be a case study of scaling and deploying a large website (and getting faster than php) with mysql, memcached, virtualenv, celery, hudson, redis, mongodb, and more.
we see about 120 million web requests per month and 1.4 million visitors per day.
downloading music from web stores.
apart from scaling and deployment, we've customized our application in ways that could be interesting to other django users:jinja is our templating engine (but we keep the admin working
we will also discuss in some detail its ajax capabilities by using web2py components and plugins for modular design of rich web interfaces.
come hear how we did it, where we fell down and where we're succeeding.
however, the tools and techniques apply just as well to other python web frameworks, so users of other tools will likely be able to follow along fairly easily.
this will be a very concentrated version (10%) of a course (csc438) on web frameworks the author teaches at depaul university.
the talk will be more socially-oriented than technical.
you'll leave with an understanding of when to apply different tools, and learn about a "heavy hammer" for screen scraping that i picked up at a project for the electronic frontier foundation.
by pycon php to python with no regrets presented by alex ezell at emma, we are transforming an eight year old php codebase into an api-driven service written in python.
we update and deploy new code at least once a week, and have to deal with the additional complication of managing and interacting with parts of the php site that have not been ported over.
frontend caching is external to django and won't be covered.
intended audience intermediate to advanced django users with sites nearing or in production.
the course has been taught 3 times and the last time counted more than 30 students.
we ran into issues creating a reliable environment with this method; switching to a separate vendor repository solved our problems with only a small amount of added effort.
we create development environments using pip and virtualenv, so we naturally started using that setup to deploy the site in production.
if you're a user of any of these frameworks, you'll want to be present for this talk.