html looks like html, and dynamic syntax is fairly unobtrusive.however, one could certainly make an argument that razor introduces the opportunity for a careless designer to accidentally delete a closing brace (for example) thinking “hey, that doesn’t belong in the html”, not really realizing that it’s part of the server-side programming syntax.like aspx, razor pages are basically parsed by the web server and then compiled into a .net binary which dynamically generates the html that gets sent to the client browser (essentially writing automatically what we were doing by hand with cgi back in the early 90s).maybe this will change as technologies like html5 bring more programmatic features to html.it’s like public art: it doesn’t “serve a purpose” per se, it just makes your life more pleasant.what’s interesting is not which dynamic languages are most popular; what’s interesting is thatserver-side code embedded in html is ubiquitous.spark has taken a very intriguing approach: they’ve tried to make embedded server-side code look more like html.for me, this is a small trade-off for the improved readability and flow of the razor syntax.it’s easier to indent, it looks cleaner, it flows better…it’s justprettier.well, not many: i think it’s a huge improvement over php/jsp/asp/aspx and cleaner (to me) than spark or nhaml.i’m more practical: i think people are really comfortable with html, so i prefer the approach taken by razor.at first this struck me as an excellent idea: making editing dynamic html more like, well, editing html.it didn’t really take long for someone to say “hey, wouldn’t it be great if i could write html, and make it do dynamic things, instead of writing code to generate html to do dynamic things.”i did some research to try to figure out whoexactly said this because it seems like a huge paradigm shift, and i would like to be able to give someone credit…but i couldn’t find anything definite.you had to know how to write a programand understand html.