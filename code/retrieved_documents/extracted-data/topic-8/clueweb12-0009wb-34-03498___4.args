this problem will subside, though, as code editors get hip to razor (happily, my favorite editor,vim has already got razor syntax support, though you’ve got to work for it a little bit).
but if you wanted to do something as simple as, for example, displaying the current date, you were pretty much out of luck until the common gateway interface (cgi) was introduced in 1993.
whatis exciting is that your html is a lot easier to read.
in preparing for my five-minute presentation at pop art, i did a little analysis to see exactly how many fewer characters you’d end up typing with razor, and i found you’d end up typing as much asten to twenty times fewer fiddly punctuation characters in your razor code.
it’s easier to indent, it looks cleaner, it flows better…it’s justprettier.
we wrote our dynamic websites, but we did it with c and perl.
i checked them both out, and they’re both very interesting in their own way.
it’s like public art: it doesn’t “serve a purpose” per se, it just makes your life more pleasant.
like aspx, razor pages are basically parsed by the web server and then compiled into a .net binary which dynamically generates the html that gets sent to the client browser (essentially writing automatically what we were doing by hand with cgi back in the early 90s).
for me, this is a small trade-off for the improved readability and flow of the razor syntax.
the only thing you have to remember here is that iis will serve an aspx file before a razor file, so if you have “default.aspx” and “default.cshtml” in the same directory, iis will quietly serve the former.
employeemodel so you might be wondering at this point if the only improvements in razor are semantic-aesthetic ones.
you had to know how to write a programand understand html.
i did some research to try to figure out whoexactly said this because it seems like a huge paradigm shift, and i would like to be able to give someone credit…but i couldn’t find anything definite.
it didn’t really take long for someone to say “hey, wouldn’t it be great if i could write html, and make it do dynamic things, instead of writing code to generate html to do dynamic things.”
so if you really enjoy compact representation and/or you’re a huge python fan, you might really take to nhaml.
like aspx, razor pages are basically parsed by the web server and then compiled into a .net binary which dynamically generates the html that gets sent to the client browser (essentially writing automatically what we were doing by hand with cgi back in the early 90s).
it didn’t really take long for someone to say “hey, wouldn’t it be great if i could write html, and make it do dynamic things, instead of writing code to generate html to do dynamic things.”
like most web developers, i was so excited by what they could do that i didn’t really notice how badly they sucked.
asp/aspx/jsp/php often look like a comic strip character cussing and razor…well, it looksgood.
however, one could certainly make an argument that razor introduces the opportunity for a careless designer to accidentally delete a closing brace (for example) thinking “hey, that doesn’t belong in the html”, not really realizing that it’s part of the server-side programming syntax.
it’s like public art: it doesn’t “serve a purpose” per se, it just makes your life more pleasant.
i checked them both out, and they’re both very interesting in their own way.
but there was still a problem: the barrier to entry was pretty high.
it was really interesting to get a more in-depth perspective on what my colleagues have been doing, straight from the proverbial horse’s mouth.
the world wide web was the wild wild west, and you had to be pretty good with a six-shooter if you wanted to play.
html looks like html, and dynamic syntax is fairly unobtrusive.
at first this struck me as an excellent idea: making editing dynamic html more like, well, editing html.
at first this struck me as an excellent idea: making editing dynamic html more like, well, editing html.
normally, the compilation of the aspx/razor pages (jsp works the same way) is done on a “just in time” (jit) basis, so the first time you hit a page, it takes a while while the server compiles the page.
however, one could certainly make an argument that razor introduces the opportunity for a careless designer to accidentally delete a closing brace (for example) thinking “hey, that doesn’t belong in the html”, not really realizing that it’s part of the server-side programming syntax.
i did some research to try to figure out whoexactly said this because it seems like a huge paradigm shift, and i would like to be able to give someone credit…but i couldn’t find anything definite.
well, not many: i think it’s a huge improvement over php/jsp/asp/aspx and cleaner (to me) than spark or nhaml.
for example, our front-end developer uses a mac, and i’d be surprised if his editor ( coda) supports razor syntax.
maybe this will change as technologies like html5 bring more programmatic features to html.
it’s a melting pot for the tweets, diggs, staff bios, facebook status updates and flickr photos that give you a glimpse into the daily lives of your average pop artist.
this problem will subside, though, as code editors get hip to razor (happily, my favorite editor,vim has already got razor syntax support, though you’ve got to work for it a little bit).
the only thing you have to remember here is that iis will serve an aspx file before a razor file, so if you have “default.aspx” and “default.cshtml” in the same directory, iis will quietly serve the former.
anyway, the internet, as we know it, started somewhere between 1989 and 1991, and we were drunk with the possibility ofhypertext, but it was mostly a static thing: you had documents, and you had images, and they could link to each other, and that was great.
for example, our front-end developer uses a mac, and i’d be surprised if his editor ( coda) supports razor syntax.
spark has taken a very intriguing approach: they’ve tried to make embedded server-side code look more like html.
but if you wanted to do something as simple as, for example, displaying the current date, you were pretty much out of luck until the common gateway interface (cgi) was introduced in 1993.
once this one-time compilation is done, razor will be no slower (or faster) than an aspx page.
once this one-time compilation is done, razor will be no slower (or faster) than an aspx page.
i think they might even be able to drink now.
now those brilliant front-end people (hello,john!) can work their magic and make beautiful html, and then us nerdy back-end types can just drop the dynamic elements in…it’s like a well-oiled machine.
anyway, the internet, as we know it, started somewhere between 1989 and 1991, and we were drunk with the possibility ofhypertext, but it was mostly a static thing: you had documents, and you had images, and they could link to each other, and that was great.
so if you really enjoy compact representation and/or you’re a huge python fan, you might really take to nhaml.
flashes of pop, wit and reason skip down to page content.
it was really interesting to get a more in-depth perspective on what my colleagues have been doing, straight from the proverbial horse’s mouth.
asp/aspx/jsp/php often look like a comic strip character cussing and razor…well, it looksgood.
it literally takes about fifteen minutes to get the hang of it, and you can replace your existing aspx files piecemeal.
like most web developers, i was so excited by what they could do that i didn’t really notice how badly they sucked.
again, that may not seem like that big of a deal until you sit down and think about how much of this stuff you stare atevery day (if you’re a web developer, that is).
maybe this will change as technologies like html5 bring more programmatic features to html.
our blog isn’t just for us though.
okay, so typing fewer symbols isn’t all that exciting (after all, most programmers can hit 12,000 characters per hour or more)…maybe you’ll save an hour or so of typing on your average website implementation.
aspx and razor pages can exist side-by-side in total harmony in your site.
there’s no performance hit, and your views will be a lot easier to read.
it will be a bit of a headache for a while, though.
if you’d like to stay on top of our latest posts, sign up for our rss feed and you can be the first to know what goes on here at pop art.
html looks like html, and dynamic syntax is fairly unobtrusive.
here at pop art, we’re all encouraged to be aware of what’s going outside of our own tasks, but usually that means just a general, fuzzy awareness of what people are working on.
spark has taken a very intriguing approach: they’ve tried to make embedded server-side code look more like html.
now those brilliant front-end people (hello,john!) can work their magic and make beautiful html, and then us nerdy back-end types can just drop the dynamic elements in…it’s like a well-oiled machine.
for me, this is a small trade-off for the improved readability and flow of the razor syntax.
normally, the compilation of the aspx/razor pages (jsp works the same way) is done on a “just in time” (jit) basis, so the first time you hit a page, it takes a while while the server compiles the page.
i’m more practical: i think people are really comfortable with html, so i prefer the approach taken by razor.
well, not many: i think it’s a huge improvement over php/jsp/asp/aspx and cleaner (to me) than spark or nhaml.
again, that may not seem like that big of a deal until you sit down and think about how much of this stuff you stare atevery day (if you’re a web developer, that is).
okay, so typing fewer symbols isn’t all that exciting (after all, most programmers can hit 12,000 characters per hour or more)…maybe you’ll save an hour or so of typing on your average website implementation.
it’s easier to indent, it looks cleaner, it flows better…it’s justprettier.
the world wide web was the wild wild west, and you had to be pretty good with a six-shooter if you wanted to play.
whatreally drove it home, though, was seeing something better, and that something was razor.
what’s interesting is not which dynamic languages are most popular; what’s interesting is thatserver-side code embedded in html is ubiquitous.
here at pop art, we’re all encouraged to be aware of what’s going outside of our own tasks, but usually that means just a general, fuzzy awareness of what people are working on.
we wrote our dynamic websites, but we did it with c and perl.
whatis exciting is that your html is a lot easier to read.
what’s interesting is not which dynamic languages are most popular; what’s interesting is thatserver-side code embedded in html is ubiquitous.
it literally takes about fifteen minutes to get the hang of it, and you can replace your existing aspx files piecemeal.
but there was still a problem: the barrier to entry was pretty high.
employeemodel so you might be wondering at this point if the only improvements in razor are semantic-aesthetic ones.
i’m more practical: i think people are really comfortable with html, so i prefer the approach taken by razor.
a lot more sense than having elaborate perl libraries for generating html (and oh yes, i remember those days).
aspx and razor pages can exist side-by-side in total harmony in your site.
whatreally drove it home, though, was seeing something better, and that something was razor.
i’m not going to explain razor here; other people have done a far better job of that than i would, so i’ll direct you to them insetad: in preparing for my five-minute presentation at pop art, i did a little analysis to see exactly how many fewer characters you’d end up typing with razor, and i found you’d end up typing as much asten to twenty times fewer fiddly punctuation characters in your razor code.
there’s no performance hit, and your views will be a lot easier to read.
a lot more sense than having elaborate perl libraries for generating html (and oh yes, i remember those days).