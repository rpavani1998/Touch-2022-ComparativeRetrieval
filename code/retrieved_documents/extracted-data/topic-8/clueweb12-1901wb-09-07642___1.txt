so trying to be the open minded critical thinker that i am, i thought i would give both of them a try.
but for me that wasn't an option because i already had a lot of applications on my server that were dependent on apache and i didn't want to run another web daemon on a different port on the same server.
folder, so they go outside right?
some of these opinions are not politically correct, but advance the end goal.
i really like it so far.
i tried ruby on rails first by working through a  tutorial they had which walked you through making a simple to-do application.
i think i could probably do just about anything you can imagine or have  seen on the web in php / mysql.
i honestly get a headache when looking at ruby code.
first of all the installation process was a little tricky since in order to  get rails to work with apache 2 you have to installfastcgi.
in the online bookdive into python, mark pilgrim puts it this way, "after some initial protests and several snide analogies to fortran, you will make peace with this and start seeing its benefits.
but if you want the automatic admin interface it's there  to use, and guess what?
ruby feels like i am speaking english instead of programming, which i find very attractive.
i created a small irc channel for web geeks in my area called #joplin-web-geeks onfreenode.net.
i've posted a poll at: http://www.railsordjango.com great words, will give django a dry thanks for the good comparison.
xhtml, css, rss feeds.
coming from php/mysql, i too have been working through the tutorials.
being whitespace sensitive means that it delimits blocks of code by line breaks, other programs like java, c++ and php use curly braces to delimit code blocks.
so trying to be the open minded critical thinker that i am, i thought i  would give both of them a try.
view past linksÂ©copright 2001-2012 epicserve.
i just finished part one through part four of "writing your first django app".
currently i'm now planning to finish reading dive into python and the  django documentation and then move on to rewriting this blog using django which  is currently using php and my own php framework that i wrote.
fyi, here is a performance benchmark comparison of the three frameworks/platforms: http://wiki.rubyonrails.org/rails/pages/framework+performance i was contemplating learning a server-side platform, and i think i will go with django/python.
"not to mention that david's over all demeanor was very cocky and arrogant which was a major turn off" and also not too mention rails fanatics are mocking other frameworks (especially in php) in any occations.
i recommend this book for 1.0: http://www.packtpub.com/django-1-0-website-development-2n...>
after watching the video, i committed myself to doing a full app in ror and so far...
i do know on the django side thatpownce.com uses django for it's server side solution.
i have no exposure to ruby other than experimenting with ror, while i have written a few apps with python and also the python-based scrapy framework.
not to mention that david's over all demeanor was very cocky and arrogant which was a major turn off.
i haven't been looking for a change, but part  of being good at anything in life means keeping an open mind and thinking  critically.
the two factors that made me choose django over rails are that django has a very powerful and mature admin website built into the framework that you can use if you want.
i  admit that i'm no guru after working through one tutorial
i tried ruby on rails first by working through a tutorial they had which walked you through making a simple to-do application.
david's  presentation on the other hand seemed to be in no particular order and very  unorganized.
the final catalyst that made the pendulum sway towards django was listening to  a three hoursnakes and rubies presentation where adrian holovaty (one of the  creators of django) anddavid heinemeier hansson (the creator of rails) both  present their frameworks and then answer questions from the audience.
cu sebastian i too have been programming php for many years.
it seems a lot more logical and seems to mesh more with myprogramming philosophy.
do you have an impression on how large and active the communities are?
well if you like ruby you're going  to want to use rails and if you like python you're probably going to want to  use django.
would you recommend reading "dive into python" or are there better python books for experienced php programmers like us?
django developers are always thinking about security and as far as i know it's very secure.
django is a programming framework for python that i first  heard about when i read the news onsimon willison's blog that django was going  to be released as an open source framework.
you'll  need to do some research or just take my word for it that python is better!
and so i have complete control on what is installed.
rewrite my blog in django too, while you're at it.
you can use the built-in admin site however you like.
its overall philosophy goes with mine, it uses python which i  like more than ruby and django's workflow and stack seem a lot more simple and  logical than rails.
cheers hey drazen, this article was written over three years ago, so things have changed since this article was written for me, in that i have probably about a years worth of experience using django full-time at my full-time job.
it's hard getting used to the django way of doing things, but you are going to have that probablem anytime you move to a new language or framework.
thanks comments have been close for this post.
not only does django seem to make more  sense, it's a lot faster than rails when used with apache 2.
i'm sure a lot of this has to do with the fact that rails uses fastcgi instead of a module for apache like mod_python and php4_module.
but for  me that wasn't an option because i already had a lot of applications on my  server that were dependent on apache and i didn't want to run another web  daemon on a different port on the same server.
after hearing both presentations and the questions that followed it felt very clear to me that django is definitely the framework for me.
the programming workflow and django's  stack just seem to make more sense.
the other major factor that made me choose django, was for python.
in my opinion adrian's presentation was far superior to david's it wasn't even funny.
however, after finishing the tutorial  i felt like the overall application was sluggish.
this makes it easier to read  and understand other people's python code."
the experience is pleasantly surprising me at many turns.
i'm sure a lot of this has to  do with the fact that rails uses fastcgi instead of a module for apache like  mod_python and php4_module.
but if you want the automatic admin interface it's there to use, and guess what?
so what goes in /www/?
i'll be honest, the ruby syntax is different enough from other languages that it puts me off a bit.
it teaches you first the nitty gritty stuff to create your own forms, and then goes into how to make the automatic admin.
but what if you don't know either python or ruby, what then?
however, the buzz around ror is so big, i sometimes feel i'll be left behind if i don't jump on the ror bandwagon.
another main difference between django and rails is that django uses python and rails usesruby.
just run the included django dev server.
it's actually has  a nice detailed clean graphically designed interface.
it seems a lot more logical and seems to  mesh more with myprogramming philosophy.
so what does that mean?
i haven't been looking for a change, but part of being good at anything in life means keeping an open mind and thinking critically.
cst i've been a php / mysql developer for almost a decade now
but i do have some  initial impressions which might be of interest to people thinking about rails  or django.
i've heard but haven't experienced it first hand  that rails is a lot faster when you uselighthttpd instead of apache 2.
unless you've been living in a cave you've probably  heard at least something aboutruby on rails.
i nearly spit my coffee on my screen when i read that.
do you know about what significant references ror and django has, how do they compare in terms of what developers have actually accomplished?
i use git to keep revisions of my code and when i'm ready to deploy i commit the changes to my remote repository and then i update the code that the live site is hosted on from the master repository.
have a look athttp://www.ciy.com/, which is the parent organization for about eight different websites and organizations.
its overall philosophy goes with mine, it uses python which i like more than ruby and django's workflow and stack seem a lot more simple and logical than rails.
thanks - and welcome to the django community!
in trying to keep an open mind, i read and keep up with the latest news in web development.
i think i could probably do just about anything you can imagine or have seen on the web in php / mysql.
if you can't already tell my preference is defiantly swaying toward django.
what's the worst that can happen, you broaden your knowledge base and become a better php programmer (or whatever you use) because of it?
i've been a php / mysql developer for almost a decade now
after the install  the tutorial was pretty straight forward and rails did a lot of the tedious  reparative tasks for you, which i liked.
currently i'm now planning to finish reading dive into python and the django documentation and then move on to rewriting this blog using django which is currently using php and my own php framework that i wrote.
david's presentation on the other hand seemed to be in no particular order and very unorganized.
however, his opinions and beliefs seemed to clearly line up with the vision and principles he was espousing.
it's actually pretty detailed and even styled.
where do my django/python files go?
i don't have any  benchmarks to prove it but you can just tell by the feel that django's tutorial  poll application is faster than rails's tutorial to-do application.
being whitespace sensitive means that it delimits blocks  of code by line breaks, other programs like java, c++ and php use curly braces  to delimit code blocks.
ruby on rails has been making a ton of news lately in the web development community.
python is stricter in the way that it does things, like being whitespace sensitive for example.
so ultimately it wouldn't have made good sense to choose something that gave me a headache and required extra time because it came without an admin website built in.
ruby on rails has been making a  ton of news lately in the web development community.
and in case you don't know, ruby on rails is a programmingframework for the programming language ruby.
another main difference between django and rails is that django uses python  and rails usesruby.
i have to say that so far i'm really impressed with django.
the final catalyst that made the pendulum sway towards django was listening to a three hoursnakes and rubies presentation where adrian holovaty (one of the creators of django) anddavid heinemeier hansson (the creator of rails) both present their frameworks and then answer questions from the audience.
i had also heard rumours of dhh being a yap (young arrogant programmer) and finally decided to watch the snakes and rubies video.
brent, i haven't looked into django much mainly because i attached myself to ruby.
i've tried both python/django and ruby on rails (and python/turbogears) and like python/django the best.
i don't have any benchmarks to prove it but you can just tell by the feel that django's tutorial poll application is faster than rails's tutorial to-do application.
thank you for the quick answer!
first of all the installation process was a little tricky since in order to get rails to work with apache 2 you have to installfastcgi.
i especially like the way the urls work.
adrian's presentation was very logical in that he explained the django stack so that you could follow django's workflow for creating applications.
but i am unclear of the best way to install it, or whether it works well with it or not.
one of the other features and main differences between rails and django is  that django has an "automatic admin interface" which you can either  take it or leave it.
i had built a framework in php over the past five years, that powers lots of high traffic multilingual sites, but after two weeks with django, iÂ´ve not only decided to learn django, but also to stop any other development on my own solution.
i think both django and ror have big websites that use their frameworks.
it says not to put them in /www/
i have to say that so  far i'm really impressed with django.
having an automatic admin interface can cut down on building web  applications like content management systems and blog applications.
unless you've been living in a cave you've probably heard at least something aboutruby on rails.
as a person wanting to move from lamp to django, the most common things i am unclear about are: in djangobook it says its outside of its scope, indeed everywhere talks about it being installable on apache but never really detail it; or if it has any hic-ups or even what the host is meant to have installed if i wanted to deploy a django thingee.
so i have been leaning strongly to django.
and what i found really cool about the admin interface that comes with django is that it doesn't look like something your phd math professor designed.
python's syntax and way of doing things is so much cleaner and elegant in my opinion that ruby.
btw, very nice comparison, the best i've read so far!
having an automatic admin interface can cut down on building web applications like content management systems and blog applications.
i also know that #django onfreenode.net is very active.
i just finished part one through  part four of "writing your first django app".
in trying to keep an open mind, i read and keep up with the latest  news in web development.
you'll need to do some research or just take my word for it that python is better!
save this article for later, bookmark it!
one major  benefit is that all python programs look similar, since indentation is a  language requirement and not a matter of style.
not only does django seem to make more sense, it's a lot faster than rails when used with apache 2.
python is stricter in the way that it does things, like being whitespace  sensitive for example.
they are both excellent frameworks.
del.icio.us digg newsvine blinklist magnolia
he came across as very opinionated and having strong beliefs.
the programming workflow and django's stack just seem to make more sense.
i admit that i'm no guru after working through one tutorial
i've heard but haven't experienced it first hand that rails is a lot faster when you uselighthttpd instead of apache 2.
and after working with django for over a year, i am very happy with it and have started using django's design patterns in my php framework that i have keep up over the years.
python and django, ruby on rails, and php february 22, 2006 | 10:42  p.m.
it's actually pretty detailed and even  styled.
and what i  found really cool about the admin interface that comes with django is that it  doesn't look like something your phd math professor designed.
if i didn't have a framework to being with, i'd have wasted my time basically making the same decisions and having to implement them all.
and i needed help from friends at times but ultimately i'm glad i made the investment.
after the install the tutorial was pretty straight forward and rails did a lot of the tedious reparative tasks for you, which i liked.
i'll be honest, i did not find dhh cocky or arrogant.
the move website is one of my favorite that i developed (http://www.ciy.com/move/).>
i put mine in /home/code/
what's the  worst that can happen, you broaden your knowledge base and become a better php  programmer (or whatever you use) because of it?
not to mention that david's over all demeanor was very cocky and  arrogant which was a major turn off.
however, after finishing the tutorial i felt like the overall application was sluggish.
and in case you don't  know, ruby on rails is a programmingframework for the programming language ruby.
put them wherever you want.
i personally don't have a list of what has been accomplished.
but i do have some initial impressions which might be of interest to people thinking about rails or django.
it has 2 people on it that are django users.
i run all my stuff on alinode.com vm
ajax support (screw the 7%), allowing code in the template, etc... its as if all the mundane (who cares type) decisions and the obvious good for the 90% use case decisions have been made.
can i really use the in-built admin interface with public facing websites; i mean it'll be a security risk if i can't.
this makes it easier to read and understand other people's python code."
one of the other features and main differences between rails and django is that django has an "automatic admin interface" which you can either take it or leave it.
in my  opinion adrian's presentation was far superior to david's it wasn't even funny.
adrian's presentation was very logical in that he explained the django stack so  that you could follow django's workflow for creating applications.
cu sebastian i haven't finished dive into python yet, but from what i have read so far i'm very impressed and happy with it.
also another programming framework that is making some buzz in the  community isdjango.
i've personally been working on converting all of ciy.com's websites over to using django.
i have been evaluating ror and django recently (as well as pinax/django) and its been very difficult deciding between the two.
and i like it a  lot.
the more i experiment with other languages, the more i dislike php.
it saves a ton of time and is very customizable and was way better than anything rails had when i was doing comparisons, so things might have changed since then.
well if you like ruby you're going to want to use rails and if you like python you're probably going to want to use django.
in fact, i find it refreshing that they had the balls to make some of these decisions.
you basically just need python and whatever database you're using installed locally for development.
i have chosen ruby and rails, but that is not to say that i am not going to also look into python and django.
i'm going to give it a few more tries, maybe it will grow on me.
www.example.com/. django works well with mysql, but most django coders will tell you that they prefer postgresql.
one major benefit is that all python programs look similar, since indentation is a language requirement and not a matter of style.
after hearing both presentations and the  questions that followed it felt very clear to me that django is definitely the  framework for me.
in the online bookdive into python, mark pilgrim puts  it this way, "after some initial protests and several snide analogies to  fortran, you will make peace with this and start seeing its benefits.
django is a programming framework for python that i first heard about when i read the news onsimon willison's blog that django was going to be released as an open source framework.
website powered by epicserve's cms.
it's actually has a nice detailed clean graphically designed interface.
in the context of web application development, i do agree with most of the decisions ror makes.
installing and using mysql -- django comes with mysqllite
if you're bored with php and need a change, give django a try!
just recently i've been trying django.
i'm addicted to indention so in that respect, python is intriguing.
django is a little hard to get used to at first
i install, apache, mysql and mod_wsgi.
also another programming framework that is making some buzz in the community isdjango.