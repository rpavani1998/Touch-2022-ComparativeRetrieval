fair enough, so python 2.5 is the latest, so i installed that.
i want to try and do something simple  to verify it is working.
posted in technology | tags java, ruby, rails, python,  django | 13 comments about me
i decided that although  python/django and ror (less so ror, in my opinion) certainly seem like great  ways to build web apps, i don't think there's an order of magnitude increase in  productivity over java, assome have claimed.
the leading candidate for the static typing party, particularly among moderate static typers, but having a hard time gaining support from conservative members of the static party who claim that he is too dynamic on some issues.
it uses mongrel to run ror. apache is the actual web  server, it passes requests intended for ror to mongrel, which then serves the  request.
the datamapper project is a model-centric orm for ruby apps and as that  project continues to grow, their could be some ideas borrowed from django  evolution, although they do already have their own thing going on with auto-migration.
my only criticism of the book  so far is that they may have published it a little to early, because for  example if states that grails doesn't support many-to-many relationships, when  in fact it does as of version 0.3.
typo has caused my entire vps instance hosted at vpsland to become unreachable.
another strong dynamic party candidate, but having a hard time stealing the spotlight from the two dynamic party candidates, despite running on a strong platform.
i  haven't done it for django yet, we'll see.
100 the question when is it a language specific library and when it is a dsl?
when i started learning ruby, from the start, everything just worked as you expected it would.
i'm not a big fan of developing with php, and i was hoping to start doing some custom things with my site, so i switched to typo, so that my site would be running ror, and i could make my own extensions using ror.
stripes and hibernate 3.2 with annotations are much better than struts (or webwork or spring mvc for that matter) and hibernate 2.0 respectively.
if you don't want to write the migrations  yourself, you don't have to.
the other nice thing about grails is that it leverages all the existing java frameworks, such asspring and hibernate.
has a stance similar to that of rails on many of the  campaign issues.
the reason why it isn't like this in ror is because ruby isn't a statically  typed language.
but before i do, let me say this.
i like python and django, but i always thought to myself, wouldn't it be nice if the language was optionally typed, to that you could declare the type if you want to, so that the type could be used as metadata by a framework?
python and ruby are both dynamically typed  languages, similar in a lot of ways, but they also have their differences.
a candidate that appeals to some members of both the dynamic and static typing parties, quickly gaining notoriety on the web for his support of once unconventional ideas like functional programming.
since then, i've discovered a few major design flaws with ror, so i'm not writing any code in ror now.
since i can't create a  class in ruby and declare what type each property is, there is no way to  automatically generate a database based on the model.
with  the django project, they chose to create pseudo-typing within python, where you  define the type of property of an object in a way that the framework  understands it, but not the python language itself.
since then, i've discovered a few major design flaws with ror, so i'm not  writing any code in ror now.
if you don't want to write the migrations yourself, you don't have to.
i have had  lots of big ideas in the past and i rarely follow through with any of them, but  this is one that i intend to.
django is another web framework,  but based on python instead of ruby.
i'm just getting my feet wet learning grails, and the best move i've made so far is to purchase the e-book version ofthe definitive guide to grails.
there has been a lot of hype around dynamically typed languages, but i think they have disadvantages as well.
anyone who has tried to maintain a web app built with struts 1.x,  spring, hibernate 2.0, jsp 1.0 and an overly complex set of ant build scripts  can attest to that.
first, i add c:python24in to my path, fire up a command prompt, and enter "python" in hopes of getting an interactive shell.
again, i am naive when it comes to python, this is not a  fair criticism of python, i have done very little to learn the language at this  point, i just trying to illustrate a point.
there are some differences between evolutions and  migrations, mainly due to the fact that django is model-centric, meaning that  you define the attributes of your models in the code and generate the database  from that.
django is cool in a lot of ways.
here's their take on the differences: isn't this just activerecord::migration in python?
[ addfield('author', 'location', models.
first of all, and this isn't really a design flaw,  but more of a bug, is that some combination of typo, mongrel and rails is  causing a serious memory leak.
my only criticism of the book so far is that they may have published it a little to early, because for example if states that grails doesn't support many-to-many relationships, when in fact it does as of version 0.3.
well you will consider many of the things in java odd, so i'm just going  to consider all of these things first impressions and move on to learn more  about the language and give it a fair chance.
this candidate has experience that proves she can bring change.
this means that audit, hinting, and verification schemes can use the django model as a point of reference.
i have had lots of big ideas in the past and i rarely follow through with any of them, but this is one that i intend to.
also, you run it my installing mod_python in apache.
so the point of this long technical discussion is that from what i've read about grails so far, it looks interesting.
in my brief look at it, i've learned a few things.
this has caused this site to be down over the  past few days.
mutation m = new addfield("author", "location",  charfield.class); m.setmaxlength(100); m.setallownulls(false); mutations.add(m); posted in technology | tags rails, python, django,  datamapper, ruby | 0
stripes and hibernate 3.2 with  annotations are much better than struts (or webwork or spring mvc for that  matter) and hibernate 2.0 respectively.
grails the leading candidate for the static typing party, particularly among  moderate static typers, but having a hard time gaining support from  conservative members of the static party who claim that he is too dynamic on  some issues.
first, i add  c:python24in to my path, fire up a command prompt, and enter "python"  in hopes of getting an interactive shell.
comments december 13, 2006 this site is currently using typo, which is blog software written using ruby on rails(ror).
you get you what you get, which is a lot, but you don't have much control over it.
a candidate from the dynamic party who is quickly gaining support, running on his campaign of hope.
conceptually, i like this idea better thanruby on rails,  where you define your domain model in the database, and then rails generates  objects for you at runtime based on the database metadata.
posted in technology | tags ruby, rails, python, django,  java, grails | 1 comment back from the beyond october 20, 2006
my theory is that we are at a point with java where we can build  applications with the same level of productivity as any other framework.
anyone who has tried to maintain a web app built with struts 1.x, spring, hibernate 2.0, jsp 1.0 and an overly complex set of ant build scripts can attest to that.
i press the up arrow, but it doesn't bring up my previous command.
i'm in no way stating that python is poor  language due to these oddities, they just strike me as odd and i feel the need  to express it.
new hashmap(); map.put("iwo jima", new simpledateformat("mm/dd/yyyy").parse("02/19/1945")); days.add(map); } catch(parseexception ex) { ex.printstacktrace(); } } public static void main(string[] args) { for(map day: days) { for(map.
i originally started this site with wordpress, which is php-based blog software.
in addition to  activerecord::migration, django evolution provides: 1.
consider these statements to be my first impressions of python.
why not, because  the python executables aren't in c:python24in, they are in c:python24.
but the bottom line is that if you are a shitty guitar player, it's going to sound like shit, not matter which one you pick.
i'm in no way stating that python is poor language due to these oddities, they just strike me as odd and i feel the need to express it.
they say  "the django evolution syntax is a dsl".
new hashmap(); map.put("pearl harbor", new simpledateformat("mm/dd/yyyy").parse("12/07/1941")); days.add(map); map =
date('12/7/1941'), 'iwo jima' : new java.util.
so the point of this long technical discussion is that from what i've read  about grails so far, it looks interesting.
i noticed i  needed python 2.3 or higher.
this means that  audit, hinting, and verification schemes can use the django model as a point of  reference.
it puts a nice domain specific language on top of hibernate to make using hibernate even easier.
aside form the memory leak issues, and general difficult of setting up a  stable rails site, the biggest thing i don't like about ror is that your  application model is inferred from the database at runtime.
but one thing i want to comment on now is that i find python to be weird.
it complies to java bytecode.
my theory is that we are at a point with java where we can build applications with the same level of productivity as any other framework.
with the django project, they chose to create pseudo-typing within python, where you define the type of property of an object in a way that the framework understands it, but not the python language itself.
grails is a web-framework based on groovy.
you get you what you get, which is a lot, but you  don't have much control over it.
i do most of my programming in java, so i came to the realization that there are great things about python, django, ruby and rails, but java, stripes, hibernate and friends have advantages too.
there is a degree of similarity - the django evolution  syntax is a dsl for describing the changes that have been made to a model.
but when turning back to java, one thing i realized i missed was the true  object oriented-ness that dynamic langauges allow.
it's a must read for anyone looking into grails.
there are die hard fans of different types.
it uses mongrel to run ror. apache is the actual web server, it passes requests intended for ror to mongrel, which then serves the request.
there are obscure niche types.
this is what got me interested in django.
the current leader in the web application framework space, has a declining approval rating from the general public, but still maintains support from members of the static typing party.
i'd much prefer it the other way around, where i write a domain model in code, and then the framework generates the database for me.
so what i'm planning on doing in attempt to prove bruce tate wrong is to build a new version of my own blog in java.
i noticed i needed python 2.3 or higher.
i think up until recently, you couldn't argue with a straight face that building a java application is not more complicated than building a ruby on rails app.
i  think we're beyondbeyond java.
new arraylist>(); static { try { map map =
again, compared to rails with apache, fcgi/scgi, lighttpd, mongrel, etc..., i don't know, let's just say i have found the process of setting up a rails production web/app server challenging.
i try to enter a query, but i make a typo.
rails one of the leading candidates from the dynamic typing party.
for example, in dynamic languages, to store a user object in the database, you use user.save , whereas in java, you do something like userdao.save(user).
new hashmap(); map.put("iwo  jima", new  simpledateformat("mm/dd/yyyy").parse("02/19/1945"));  days.add(map); } catch(parseexception ex) { ex.printstacktrace(); } } public  static void main(string[] args) {
should be a small memory footprint  too, making it easy to run multiple apps in my 192mb virtual server webhost.
a django evolution script is much more than just an alternate syntax for sql alter statements - it is an evolution scheme that is bound to the canonical model definition.
maybe this is because i have done most of my programming in java, but when i started to learn ruby, everything in ruby just made sense, without java's stupidity, such as nullpointerexceptions and primatives.
and if you are a great guitar player, anything  is going to sound pretty good.
i'm sure if you know  python
i decide to install python 2.4 to be safe.
what's with the 3 quotes?
an audit trail - a permanent archive in the database of the changes that have been applied, and when.
posted in technology | tags ruby, rails, python, django, java, grails | 1 comment october 20, 2006 so as i said i would, i've taken a look at python and django.
as i look into python, i find one oddity after another.
should be a small memory footprint too, making it easy to run multiple apps in my 192mb virtual server webhost.
the part where this analogy falls apart is that once you learn to  play guitar, you can pick up any guitar and play, but just because you are a  ruby on rails expert doesn't mean you can build a web site with java, and vice  versa.
i'm going to try to get a new  version of this site developed with grails, and i'll try to make posts here of  my progress, assuming typo doesn't bring down my site again.
entry e: day.entryset()) { system.out.println(e.getkey()+", "+e.getvalue()); } } } and then in a yet-to-be-discussed dynamic language: def days =
in my opinion, there is too much python syntax to call that a dsl.
charfield,  max_length=100, null=true) ] i'm sorry, but if that's a dsl, then what isn't a dsl?
there are widely  used types.
an audit trail - a  permanent archive in the database of the changes that have been applied, and  when.
for example, in dynamic  languages, to store a user object in the database, you useuser.save , whereas in java, you do something likeuserdao.save(user).
posted in technology | tags java, stripes, ruby, rails,  python, django | 8 comments python is weird september 20, 2006 i've heard some good things about the django framework.
in my brief  look at it, i've learned a few things.
i don't know python well at all.
it's a subtle difference but this  is a dsl: add_column :authors, :location, :limit =>
jsp 1.2 is better than jsp 1.0, maven  is better than ant, the list goes on.
the reason why it isn't like this in ror is because ruby isn't a statically typed language.
charfield, max_length=100, null=true) ] i'm sorry, but if that's a dsl, then what isn't a dsl?
and if you are a great guitar player, anything is going to sound pretty good.
i've found the documentation on the grails site to be ok, but the book is great.
date('2/19/1945') ] days.each { key, value -> println "$key, $value" }
but i'm a ruby guy, so i've got to take one shot at them here :).
i want to try and do something simple to verify it is working.
i press the up arrow, but it doesn't bring up my  previous command.
the web application framework candidates february 14, 2008 the web application framework race is heating up, so let's take a moment to  meet some of the candidates.
there is a degree of similarity - the django evolution syntax is a dsl for describing the changes that have been made to a model.
i like python and django, but i always thought to myself, wouldn't it be  nice if the language was optionally typed, to that you could declare the type  if you want to, so that the type could be used as metadata by a framework?
however, there are also some significant differences.
try this one on for size: private static final list> days =
again, i am naive when it comes to python, this is not a fair criticism of python, i have done very little to learn the language at this point, i just trying to illustrate a point.
i'd much prefer it  the other way around, where i write a domain model in code, and then the  framework generates the database for me.
this returns 9 when i execute the query in mysql.
but this blog post isn't really about python or django specifically, it's about languages and web frameworks.
an automated hinting scheme.
but i'm a believer in the latest innovations in java.
one of the leading candidates from the dynamic typing party.
so as i said i would, i've taken a look at python and django.
so what i'm planning on doing in attempt to prove bruce tate wrong is to  build a new version of my own blog in java.
maybe this is because i have done most of my programming in java, but when i  started to learn ruby, everything in ruby just made sense, without java's  stupidity, such as nullpointerexceptions and primatives.
i've never had that kind of problem with a java app.
[ 'pearl harbor' : new java.util.
this is nice because you can build web apps using groovy on grails (gog?), and then deploy to a regular java application server, such as my personal favorite,resin.
in addition to activerecord::migration, django evolution provides: 1.
again, compared to rails with apache,  fcgi/scgi, lighttpd, mongrel, etc..., i don't know, let's just say i have found  the process of setting up a rails production web/app server challenging.
i do most of my programming in java, so i came to the realization that  there are great things about python, django, ruby and rails, but java, stripes,  hibernate and friends have advantages too.
the language is succinct and powerful, it almost  feels like writing psuedo code, except that it actually works.
there are widely used types.
the other nice thing about grails is that it leverages all the existing  java frameworks, such asspring and hibernate.
as a result, the model definition is canonical - not the database.
the next requirement is for mysqldb.
i've soured on rails  recently, but i miss ruby.
there has been a lot of hype around dynamically typed  languages, but i think they have disadvantages as well.
validation that an evolution script will leave  the database in a state consistent with the current model definition.
choosing a web  framework and programming language is like choosing a guitar.
i also feel the need to  blog about it because it will motivate me into actually doing it.
aside form the memory leak issues, and general difficult of setting up a stable rails site, the biggest thing i don't like about ror is that your application model is inferred from the database at runtime.
so now i have python 2.4 and mysqldb.
i decided that although python/django and ror (less so ror, in my opinion) certainly seem like great ways to build web apps, i don't think there's an order of magnitude increase in productivity over java, assome have claimed.
i think up until recently, you couldn't argue with a straight face that  building a java application is not more complicated than building a ruby on  rails app.
there are some differences between evolutions and migrations, mainly due to the fact that django is model-centric, meaning that you define the attributes of your models in the code and generate the database from that.
validation that an evolution script will leave the database in a state consistent with the current model definition.
new  arraylist>(); static { try {  map map =
i haven't done it for django yet, we'll see.
i also feel the need to blog about it because it will motivate me into actually doing it.
new hashmap();  map.put("pearl harbor", new  simpledateformat("mm/dd/yyyy").parse("12/07/1941"));  days.add(map); map =
posted in technology | tags java, ruby, rails, python, django | 13 comments powered by ruby on rails and hosted by slicehostpowered by ruby on rails and hosted by slicehost
but this blog post isn't really about python or django specifically, it's  about languages and web frameworks.
choosing a web framework and programming language is like choosing a guitar.
rails, or i guess activerecord more specifically, as you probably know, is the opposite, where you define your database tables and an object model is generated at runtime from the database metadata.
it's a subtle difference but this is a dsl: add_column :authors, :location, :limit =>
these differences are largely afforded by the model-centric design of django itself.
consider these statements  to be my first impressions of python.
the part where this analogy falls apart is that once you learn to play guitar, you can pick up any guitar and play, but just because you are a ruby on rails expert doesn't mean you can build a web site with java, and vice versa.
java the current leader in the web application framework space, has a declining  approval rating from the general public, but still maintains support from  members of the static typing party.
but python is still weird.
the thing i was least impressed with is that the admin interface  isn't very customizable.
mutation m = new addfield("author", "location", charfield.class); m.setmaxlength(100); m.setallownulls(false); mutations.add(m); posted in technology | tags rails, python, django, datamapper, ruby | 0
also, the succinctness of the dynamic languages are great, whereas java verbosity can be almost ridiculous at times.
the query is: select count(*) from users
date('12/7/1941'), 'iwo  jima' : new java.util.date('2/19/1945') ] days.each { key, value -> println  "$key, $value" }
annotations and generics are making life easier.
one is that python isn't that weird, it's just different.
i find an example in the docs: import mysqldb db=mysqldb.connect(passwd="moonpie",db="thangs") c=db.cursor() max_price=5 c.execute("""select spam, eggs, sausage from breakfast where price < %s""", (max_price,))
so  just deciding which version of python to use is a little bit of a struggle.
so it's not perfect, but you get the idea.
so i guess you would  call that a database-centric orm.
i originally started this site with wordpress, which is php-based blog  software.
it says it works with python 2.3-2.4,  doesn't say anything about 2.5.
fair enough, so python 2.5 is the latest, so i  installed that.
the language is succinct and powerful, it almost feels like writing psuedo code, except that it actually works.
february 14, 2008 the web application framework race is heating up, so let's take a moment to meet some of the candidates.
in my opinion, there  is too much python syntax to call that a dsl.
also, you run it my  installing mod_python in apache.
groovy is a scripting language that runs in the java vm.
this candidate  has experience that proves she can bring change.
the datamapper project is a model-centric orm for ruby apps and as that project continues to grow, their could be some ideas borrowed from django evolution, although they do already have their own thing going on with auto-migration.
i find an example in the docs: import mysqldb  db=mysqldb.connect(passwd="moonpie",db="thangs")  c=db.cursor() max_price=5 c.execute("""select spam, eggs,  sausage from breakfast where price < %s""", (max_price,))
anyway, let's give it a try.
i've soured on rails recently, but i miss ruby.
anyway, let me just give a few examples of python weirdness.
one is that python isn't that weird,  it's just different.
i'm just getting my feet wet learning grails, and the best move i've made  so far is to purchase the e-book version ofthe definitive guide to grails.
the thing i was least impressed with is that the admin interface isn't very customizable.
merb a candidate from the dynamic party who is quickly gaining support, running  on his campaign of hope.
i'm hoping this little side project  will give me a chance to provide the world with an example of how java  applications can be built without endless xml sit-ups.
choosing between them is really a matter a  preference.
first of all, and this isn't really a design flaw, but more of a bug, is that some combination of typo, mongrel and rails is causing a serious memory leak.
i've  found the documentation on the grails site to be ok, but the book is great.
entry e: day.entryset()) {  system.out.println(e.getkey()+", "+e.getvalue()); } } } and then in a yet-to-be-discussed dynamic language: def days =
i'm going to try to get a new version of this site developed with grails, and i'll try to make posts here of my progress, assuming typo doesn't bring down my site again.
django another strong dynamic party candidate, but having a hard time stealing the  spotlight from the two dynamic party candidates, despite running on a strong  platform.
the thing i was most impressed with is the admin interface.
they say "the django evolution syntax is a dsl".
but when turning back to java, one thing i realized i missed was the true object oriented-ness that dynamic langauges allow.
ok fine,  i fix my path, but i decide to use the idle gui instead.
why not, because the python executables aren't in c:python24in, they are in c:python24.
conceptually, i like this idea better thanruby on rails, where you define your domain model in the database, and then rails generates objects for you at runtime based on the database metadata.
one thing that as  me interested in django is that the way it works in general is you define your  domain model in code, in python objects, and django figures out how to build a  database for you.
superficially, yes, but not really.
django is another web framework, but based on python instead of ruby.
but before i  do, let me say this.
python and ruby are both dynamically typed languages, similar in a lot of ways, but they also have their differences.
choosing between them is really a matter a preference.
so, wouldn't it be nice if there was a dynamic, optionally typed language  that would allow us to build a really great, object-oriented web application  framework with a syntax as succinct as the syntax of fully dynamically typed  languages?
whereas a ruby on rails model is a description of a database that has been  created by hand, django uses the python model to creates the database.
these  differences are largely afforded by the model-centric design of django itself.
but the bottom  line is that if you are a shitty guitar player, it's going to sound like shit,  not matter which one you pick.
here's what i've decided.
would you call this a dsl?
ok fine, i fix my path, but i decide to use the idle gui instead.
so, on with the weirdness: so to get started, i started reading the django install guide.
comments typo problems, new site coming soon (hopefully) december 13, 2006 this site is currently using typo, which is blog software written using  ruby on rails(ror).
i'm hoping this little side project will give me a chance to provide the world with an example of how java applications can be built without endless xml sit-ups.
this is nice because  you can build web apps using groovy on grails (gog?), and then deploy to a  regular java application server, such as my personal favorite,resin.
django is  cool in a lot of ways.
superficially,  yes, but not really.
posted in technology | tags rails, python, django, ruby, scala, java, merb | 2 comments november 24, 2007 there is a project for django called evolution, which is conceptually similar to rails' migrations.
i re-type it and get it right this time.
has a stance similar to that of rails on many of the campaign issues.
there are die  hard fans of different types.
i try to enter a  query, but i make a typo.
i'm sure if you know python well you will consider many of the things in java odd, so i'm just going to consider all of these things first impressions and move on to learn more about the language and give it a fair chance.
well, there is, and it isgrails.
so just deciding which version of python to use is a little bit of a struggle.
it says it works with python 2.3-2.4, doesn't say anything about 2.5.
what does python return?
whereas a ruby on rails model is a description of a database that has been created by hand, django uses the python model to creates the database.
the thing i was most impressed with is the admin  interface.
i'm not a big fan of developing with php, and i was hoping to start  doing some custom things with my site, so i switched to typo, so that my site  would be running ror, and i could make my own extensions using ror.
this has caused this site to be down over the past few days.
when i started  learning ruby, from the start, everything just worked as you expected it would.
so, wouldn't it be nice if there was a dynamic, optionally typed language that would allow us to build a really great, object-oriented web application framework with a syntax as succinct as the syntax of fully dynamically typed languages?
groovy is a scripting language  that runs in the java vm.
posted in technology | tags java, stripes, ruby, rails, python, django | 8 comments september 20, 2006 i've heard some good things about the django framework.
scala a candidate that appeals to some members of both the dynamic and static  typing parties, quickly gaining notoriety on the web for his support of once  unconventional ideas like functional programming.
also,  the succinctness of the dynamic languages are great, whereas java verbosity can  be almost ridiculous at times.
so i guess you would call that a database-centric orm.
one thing that as me interested in django is that the way it works in general is you define your domain model in code, in python objects, and django figures out how to build a database for you.
jsp 1.2 is better than jsp 1.0, maven is better than ant, the list goes on.
since i can't create a class in ruby and declare what type each property is, there is no way to automatically generate a database based on the model.
i think we're beyondbeyond java.
a django evolution script is much more than just an alternate syntax  for sql alter statements - it is an evolution scheme that is bound to the  canonical model definition.
handling blocks based on indentation is cool.
as a  result, the model definition is canonical - not the database.
there are even variations among the different types.
it puts a nice domain specific  language on top of hibernate to make using hibernate even easier.
rails, or i guess activerecord more specifically, as you probably  know, is the opposite, where you define your database tables and an object  model is generated at runtime from the database metadata.
posted in technology | tags rails, python, django, ruby,  scala, java, merb | 2 comments evolutions - migrations for model-centric apps november 24, 2007 there is a project for django called evolution, which is conceptually  similar to rails' migrations.