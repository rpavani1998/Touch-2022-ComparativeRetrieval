ryan stansifer's tpk algorithm in different programming languages site  shows this simple algorithm written in several modern languages.
- sumant murugesh has some ideas on how to bring across the idea that computers only do what they are told.
- mitch fincher has the rosetta stone for a few languages.
- academic tutorials has the following tutorial and quiz available: - assembly language tutorial - assembly language quiz classroom activities and games: basic resources - an engaging extension of the marching orders activity, developed by the piny team in seoul, korea.
please be advised that the operating system used in this video is windows vista.
- scratch: can be downloaded at http://scratch.mit.edu/download - alice: can be downloaded at http://www.alice.org/index.php?page=downloads/download_alice alice does not need any installation.
- hiccup: an ide for kids.
- computer world has a great article: the a to z of programming languages - dr lisa n. michaud has a useful handout explaining programming languages - ehow has the following sections that might be helpful: - definition of computer programming languages - comparison of computer languages - programming language tools - assembly language programming tools - about assemblers - what is the definition of a high level language?
- david bolton from about.com has quite a few articles that are helpful below: - what is a programming language?
- laynetworks has a comprehensive assembly langauge tutorial.
- assembly language tutorial: episode 1: jumping in head first: this video covers the very basics of assembly language, just enough to write a simple loop that fills an image with colour.
this document was prepared by sumant murugesh, tim bell and vanja venrooy  at the university of canterbury.
it is not an official document, but is offered  as an evolving guide to the resources that are available for teaching the new  material in ncea digital technologies (currently focussed on the programming  and computer science strand).
our picks here is a list of resources we have picked  from the comprehensive list below that were either developed for high school  use or can be easily adapted for the purpose.
- microsoft small basic: small basic is a project that's aimed at bringing "fun" back to programming.
this document was prepared by sumant murugesh, tim bell and vanja venrooy at the university of canterbury.
this article illustrates eight basic programming concepts with examples in five programming languages: java, perl, python, rebol and scheme.
you can then watch while those programs are executed, and you can observe how numbers stored in the computer change as a program runs.
download starlogo at http://education.mit.edu/starlogo/ starlogo tng is the next generation ofstarlogo modeling and simulation software.
for details on downloading shoes, please go todownloads and choose your os.
this is another  great site with code samples of languages such as ruby,c#, java, javascript,  perl, powershell, tcl/tk, c++, lisp, php.
comprehensive list of resources that relate to this standard the resources below are a mixture that were developed for a varied audience ranging from high school students to university undergraduates, therefore we have attempted to classify the resources in terms of their readiness to be used by teachers.
- 99 bottles of beer website is a collection of the song 99 bottles of beer programmed in different programming languages.
by initially limiting the student's language repertoire to easily grasped imperative commands whose actions are visually displayed, the karel approach quickly introduces students to such concepts as procedures and the major control structures.
- brian shelburne has a short section on programming languages discussing levels, types and language translation - samuel williams has a collection of posters at programming language posters.
- richard holowczak has a website dedicated to a brief tutorial for new programmers, that compares the most common features and funcionality of a handful of programming langauges.
rosetta code is a programming chrestomathy site.
- computer organisation and design textbook has a free companion cd with a section onhow
this tutorial goes way beyond the levels required for high schools, but is a good reference material.
- matthew eastaugh has a great website called computer tutorial that features amicroprocessor tutorial (quite a good resource if you are doing this standard alongside hardware ones).
even though programming is not required for achieving this standard, the following websites will provide explanation on the workings of these languages such if they are interpreted, compiled etc.
samuel williams compares basic, c++, haskell, python, ruby, php and many  others atprogrammingdojo.net.nz samuel williams has a collection of programming language posters david bolton's explains a programming language, compiler, & the  difference between compilers and interpreters computer world has a great article on the a to z of programming languages doit information technology course offers an excellent online course in  computer languages al lukaszewski from about.com compares python with ruby, java, perl, php  in his arctilewhat is python?
- charles dyer at the early teacher project has a section on introduction to computers that covers the text editor, the interpreter and compiler, the operating system and other topics.
mitch fincher has the rosetta stone for a few languages.
course offers an excellent online course in computer languages - al lukaszewski from about.com compares python with ruby, java, perl, php in his arctilewhat is python?
for  additional comments on the above article with regard to writing programs in  other languages such as ruby, c++, smalltalk, pascal and lisp, see alsocomments  1, and comments 2.
- annales mathematicae et informaticae has an interesting research paper is ict teaching methods – programming languages that discusses the fact that the methods used in teaching programming languages, as “languages”, are far from being near to those of natural languages with respect to their elaborateness, quality and, unfortunately, efficiency.
download is at http://msdn.microsoft.com/en-us/devlabs/cc950524.aspx - squeak smalltalk: squeak is a modern, open source, full-featured implementation of the powerful smalltalk programming language and environment.
here we have provided a list of links to more advanced programming lanuages with their download locations.
- ideone is an online compiler and debugging tool which allows to compile and run code online in more than 40 programming languages.
- dr. stuart madnick has the little man computer(lmc) that models a simple von neumann architecture computer, so it has all of the basic features of a modern computer.
the above  ideas will be extended further in looking at lists, subroutines, and repetition.
this resource is quite advanced in terms of depth, but some basic concepts are also explained well.
although originally based on pascal, the karel approach has been used successfully with several different computer programming languages.
- daniel swomley from hanover school, colorado springs, usa has a lesson plan computers only do what they are told, an exercise on giving directions precisely.
- xcomputer lab 2: assembly language programming: covers assembly language programming for the xcomputer, including labels and indirect addressing.
rosetta code currently has 413 tasks, and covers numerous languages, though we do not (and cannot) have solutions to every task in every language.
see thehelp page for more details on the units used for measurement.
ideas for teaching and learning activities compare the speed of the same program being run on compiled and  interpreted systems download and install an open source application from a web repository,  compare the different versions provided (source vs various precompiled  versions), and explore the differences between high level languages, low level  languages, and machine language, including issues such as size, portability and  ease of installation.
part one addresses the first  five ideas: output, variables, expressions, input, and selection.
a brief history of  oop).
this poster will make a nice addition to the classroom to start discussions and students can explore the languages from any year/decade as a project.
the idea is to present solutions to the same task in as many different languages as possible, to demonstrate how languages are similar and different, and to aid a person with a grounding in one approach to a problem in learning another.
- comparing popular programming languages: how do they stack up?
objectives demonstrate an understanding of the distinguishing concepts ofalgorithms and programming languages from computer science and software engineering - understand what a programming language is and the role and characteristics ofprogramming languages - understand programming language concepts such as high level languages, machine languages, interpretation and compilation - explain the need for programs to translate between high and low level languages - compare and contrast programming languages, natural languages and high and low level languages - explain the ways in which high level languages are translated into machine languages - understand the concept that programming languages are precise context the key thing at this level is to be able to understand the need for programming languages to be able to communicate with a computer and program a task.
looping - lmc example 6: full program - itec1000 instructions - programming tasks for little man computer(lmc) that can be administered in the classroom using the applet downloads: basic resources here we have provided a list of links to beginner programming lanuages with their download locations.
- see more videos in this series which might be quite advanced for high school.
it will enable the  reader to make comparisons and generalisations.
download is athttp://www.greenfoot.org/download/ the greenroom is a community site for teachers using the greenfoot software.
- eight things programming languages can do part 2 (may 2004): the above ideas will be extended further in looking at lists, subroutines, and repetition.
this activity illustrates the fact that a program is a series of instructions that tells a computer exactly what to do.
attachment size computer science concepts as 1.44 unit outline - 09.08.10.pdf 275.44 kb groups: - home - your association - projects - news - events - competitions - resources - why join us - how to join nzacditt - membership schools - contact us - built by egressive with free software - xhtml - css - drupal
digital technologies guidelines resources page has information on how a new zealand teacher can get hold of dreamspark account for school.
an introduction could be done by looking at the history of programming languages (e.g.how did we get here?
hello world collection.
- xcomputer lab 3: subroutines: introduces the idea of a subroutine and shows how subroutines can be implemented "by hand" in the assembly language of xcomputer, even though that language does not offer direct support for subroutines.
- starlogo: starlogo is a specialized version of the logo programming language.
- sameer shrestha has a few articles at computersight of relevance below: - compiler vs interpreter - compilation and execution - computer languages history site has a poster showing the history of programming languages.
the structure has been based on various versions of the body of knowledge, proposed standards, and teaching and learning guide; the material comes from an extensive search for relevant resources.
- ryan stansifer's tpk algorithm in different programming languages site shows this simple algorithm written in several modern languages.
the applet displays only the registers and main memory.
by providing a small and easy to learn programming language in a friendly and inviting development environment, small basic makes programming a breeze.
- logo: the classic educational programming environment - robocode: ide activities, code, and forum.
- wolfram rösler has compiled a large collection of the very simple "hello world" program in almost all known programming languages on the planet (428 languages at the time of this publication)
- samuel williams compares basic, c++, haskell, python, ruby, php and many others atprogrammingdojo.net.nz - samuel williams has a collection of programming language posters - david bolton's explains a programming language, compiler, & the difference between compilers and interpreters - computer world has a great article on the a to z of programming languages - doit information technology
to demonstrate the concept that programming languages are precise, try lesson plans such as computers only do what they are told or the cs unplugged activity in programming languages.
our picks here is a list of resources we have picked from the comprehensive list below that were either developed for high school use or can be easily adapted for the purpose.
- rosetta code is a programming chrestomathy site.
note: thetrabb pardo–knuth algorithm (tpk algorithm) reads in an array of 11 values, applies a particular function to each value, and then writes the result in reverse order.
- what is a compiler?
actually the song is represented  in 1348 different programming languages and variations.
for introducing low level languages, trylow level languages as a guide.
[level 1] computer science concepts: programming languages - computer science concepts - level 1 - programming languages what is this resource?
the site gives sample code for users to look at and compile or debug.
brian shelburne has a short section on programming languages discussing  levels, types and language translation samuel williams has a collection of posters at programming language  posters.
cs unplugged activity 12 – programming languages richard buckland has a greatly entertaining video lecture in machine code mystoreful's presentation on what a compiler is? saylor computer science course: cs404: programming languages offers unit  plans with useful readings virginia tech cs department has a complete module on programming languages unit plan a unit plan for teaching that uses some of  the above resources that relates to this standard is attached as apdf at the  bottom of this resource page.
the xcomputer applet that you will use in this lab lets you load programs and data into the memory of the simulated xcomputer.
- cs unplugged activity 12 – programming languages - richard buckland has a greatly entertaining video lecture in machine code - virginia tech cs department has a complete module on programming languages unit plan a unit plan for teaching that uses some of the above resources that relates to this standard is attached as apdf at the bottom of this resource page.
a brief history of oop).
, it exposes students to the idea of open-source development, and also programming language design.
also seetutorials and awiki on using shoes.
- richard bowles has a section dedicated to explaining compilers and interpreters - computer languages history site has a poster showing the history of programming languages.
the shoebox with tons of little demos and apps for you to look at and try out.
the lmc can be programmed in machine or assembly code, and the following simulator will allow you to run your programs.
this site goes into great details that many not be required at this level.
the idea is to present  solutions to the same task in as many different languages as possible, to  demonstrate how languages are similar and different, and to aid a person with a  grounding in one approach to a problem in learning another.
teach ict has the following resources: mini website dedicated to programming languages mini website for types of languages features of low level languages virginia tech cs department has a complete module on programming languages jason voegele does a programming language comparison doit information technology course offers an excellent online course in  computer languages programmingdojo.net.nz developed by samuel williams is a comprehensive  website that compares different programming lanugage such as basic, c++,  haskell, python, ruby, php and many others.
course offers an excellent online course in computer languages - programmingdojo.net.nz developed by samuel williams is a comprehensive website that compares different programming lanugage such as basic, c++, haskell, python, ruby, php and many others.
- 99 bottles of beer is the song programmed in different programming languages - teachict's has a complete mini website dedicated to programming languages.
richard holowczak has a website dedicated to a brief tutorial for new  programmers, that compares the most common features and funcionality of a  handful of programming langauges.
- programming language naming patterns offers explanations of how programming languages are named and how the names were abbreviated to form these names.
it is not an official document, but is offered as an evolving guide to the resources that are available for teaching the new material in ncea digital technologies (currently focussed on the programming and computer science strand).
for introducing low level languages, trylow level  languages as a guide.
program execution: interpreter and compiler.
squeak is the vehicle for a wide range of projects from multimedia applications, educational platforms to commercial web application development.
compilers work: an introduction.
while this version holds true to the premise of starlogo as a tool to create and understand simulations of complex systems, it also brings with it several advances.
this is another great site with code samples of languages such as ruby,c#, java, javascript, perl, powershell, tcl/tk, c++, lisp, php.
so, a computer scientist must design the program carefully, to be sure that the computer will do the right thing.
eight things programming languages can do part 2 (may 2004):
these pages describe a version of karel that uses the c / c++ language.
these activities would demonstrate that programming languages are precise and a wrong instruction can lead to bugs: - brainstorm with a group of students the steps they will need to perform everyday tasks such as below - change a broken light bulb - close the largest window in the room that has 3 windows of different sizes - unlock a cupboard using a bunch of keys - fetch mail from the letterbox outside the house now disuss the following: - steps that were easily overlooked - decision statements - looping/repetition for a number of times - looping until a rogue value is reached - need to formalise the language to have some consistency now is a good time to emphasize the need for more precision particularly in mathematical tasks.
note: thetrabb  pardo–knuth algorithm (tpk algorithm) reads in an array of 11 values,  applies a particular function to each value, and then writes the result in  reverse order.
- jeroo: ide activities and teacher notes.
after getting the above account activated, you can then downloadvisual basic 2008 express edition and install it following the onscreen instructions.
making decisions - lmc example 5:
videos - watch a video lecture in machine code by richard buckland - youtube user mystoreful has a presentation on what a compiler is?
comprehensive list of resources that relate to this standard the resources below are a mixture that were developed for a varied audience  ranging from high school students to university undergraduates, therefore we  have attempted to classify the resources in terms of their readiness to be used  by teachers.
download is at http://www.squeak.org/ - lolcode: lolcode provides community documentation of the emergent lolcode language.
- the university of michigan offers the language guide which is a very nice collection of information about influential and popular programming languages.
downloads: advanced resources
part two  covers lists, subroutines, and repetition.
if you are a teacher, you can apply easily to join and use the resources there.
computer world has a great article: the a to z of programming languages dr lisa n. michaud has a useful handout explaining programming languages ehow has the following sections that might be helpful: definition of computer programming languages comparison of computer languages
it is our hope that this resource will evolve based on feedback from teachers, and ultimately end up as teaching plans that are built on the resources.
for additional comments on the above article with regard to writing programs in other languages such as ruby, c++, smalltalk, pascal and lisp, see alsocomments 1, and comments 2.
rosetta code  currently has 413 tasks, and covers numerous languages, though we do not (and  cannot) have solutions to every task in every language.
download starlogo tng athttp://education.mit.edu/drupal/starlogo-tng - greenfoot: consider greenfoot as a combination between a framework for creating two-dimensional grid assignments in java and an integrated development environment (class browser, editor, compiler, execution, etc.) suitable for novice programmers.
for a comprehensive list of languages used in education - wikipedia: programming languages, high-level programming language, low-level programming language - wikibook entries: machine level structure, machine operation and assembly language - google directory: computers > programming > languages > comparison and review provides various comparisons of different programming languages - virginia tech cs department has a complete module on programming languages - jason voegele does a programming language comparison - doit information technology
- sam cefai has programming languages and translators explaining briefly high-level languages, low-level languages and language translator with exercises students can complete in their understanding of the topics - robert l. oakman has the following explained briefly with examples that could be useful: - the processing cycle - programming language translation - compilers vs. interpreters - an assembly language example - a program to add two numbers in a high-level language - national kaoshiung university, taiwan has some informative presentation in programming languages, discussing the various aspects of machine and high level languages - zafar ali khan's google site has the following useful resources: - the functions of operating systems - the functions and purposes of translators - computer architecture and the fetch- execute cycle - programming paradigms online guides: advanced resources - computer language benchmarks game is a comprehensive site that compares the performance of 30 programming languages using 12 flawed benchmarks and 1100 programs.
there are those that aim to convey a basic understanding of the concepts and those that are advanced and therefore might assist teachers with their professional development activities.
online guides: basic resources wikipedia:  educational programming language: for a comprehensive list of  languages used in education wikipedia:
patrick jordan has a a very quick comparison of popular languages for  teaching computer programming, where he looked at what was involved in writing  simple programs using languages such as basic, c, java and python.
- wolfram rösler has compiled the hello world collection, the simple "hello world" in all known languages!
an introduction could be done by looking at the  history of programming languages (e.g.how did we get here?
- microsoft visual basic: to download and install microsoft visual basic programming environment, you can apply for amicrosoft dreamspark account which is given out to students and teachers of microsoft products.
[level 1] computer science concepts: programming languages computer science concepts programming languages what is this resource?
this  article illustrates eight basic programming concepts with examples in five  programming languages: java, perl, python, rebol and scheme.
it will enable the reader to make comparisons and generalisations.
- patrick jordan has a a very quick comparison of popular languages for teaching computer programming, where he looked at what was involved in writing simple programs using languages such as basic, c, java and python.
students can try to write simple programs using some form of structured english (deb sweeney's peanut butter and jelly programming).
please note: the above activity requires the use of a lego rover robot.
to assist in downloading and installing python, please see the youtube video tutorial ‘python programming tutorial - 1 - installing python’ to follow step-by-step instructions on doing this.
- digibarn computer museum offers a poster called mother tongues of computer languages that gives us a peek at the strongest branches of computer languages.
here the same program has been written in many languages for easy  comparison of aspects like lines of code (loc), syntax, semantics and features.
- gcse in computing (a support site for the new gcse computing course offered by theocr examination board uk) has a section on instructions, a concise explanation of how instructions are coded as bit patterns and how the computer distinguishes between instructions and data.
online guides: basic resources - wikipedia: educational programming language:
(strengths and weaknesses) - al lukaszewski from about.com compares python with ruby, java, perl, php in his arctilewhat is python?
many of the entries have code examples.
- about compilers and interpreters: what's the difference?
- www.theteacher.info has a few free chapters from their textbook in a level computing with some online tests for the modules at locations below: low level languages available tests: test 1, test 2, test 3, test 4, test 5, test 6, test 7 - pasteur institute has a course in python, and a section is on
as well as introducing programming
99 bottles of beer website is a collection of the song 99 bottles of beer  programmed in different programming languages.
feedback  can be sent to tim.bell
to demonstrate the need to formalise everyday language, do some exercises for everyday tasks as a precursor to learning pseudocode later.
as long as you download the program and unzip the contents to a folder, you can run the alice application (alice.exe).
it is quite lengthy because a lot of information is needed to get started and understand what's going on.
wolfram rösler has compiled a large collection of the very simple  "hello world" program in almost all known programming languages on  the planet (428 languages at the time of this publication)
in greenfoot object visualisation and object interaction are the key elements.
some resources of interest here are: - introduction - instruction sets - execution cycle - fetch cycle - decode/execute cycles - execute (immediate) - execute (direct) - execute (indirect) - sample program - quiz - eric poll has a downloadable windows version of the little man computer.
starlogo extends this idea by allowing you to control thousands of graphic turtles in parallel.
hello world  collection.
wolfram rösler has compiled the hello world collection, the simple  "hello world" in all known languages!
if students are concurrently working on programming, a discussion of the  programming environment they are using can lead to a discussion of compiling,  interpreting, and the different kinds of languages.
try these exercises for a start: - calculate the area of a rectangle - given the gross pay of an employee, calculate the income tax and net pay now disuss the following: - operators and operands - syntax for writing these tasks so everyone can follow classroom activities and games: advanced resources - paul a. g. sivilotti has a kinaesthetic learning activity (kla) activity developed to introduce cs concepts to high school girls issoftware engineering: "mars pathfinder".
part two covers lists, subroutines, and repetition.
here the same program has been written in many languages for easy comparison of aspects like lines of code (loc), syntax, semantics and features.
- deb sweeney's lesson on developing an algorithm for making a sandwich.
- xcomputer lab 1: introduction to xcomputer: introduces the xcomputer, a simple model computer, and investigates how it operates in a fetch-and-execute cycle to carry out machine language instructions stored in its memory.
you may create a shortcut to the application in your start menu or desktop.
it was the creator's original hope that the examples could grow in a way that is both internally consistent and suggest a real, feasible computing language.
99 bottles of beer is the song programmed in different programming  languages teachict's has a complete mini website dedicated to programming languages.
- trevor gosbell (at pc update online) has two excellent articles: - eight things programming languages can do part 1 (april 2004):
while greenfoot supports the full java language, it is especially useful for programming exercises that has a visual element.
the structure has been based on various versions  of the body of knowledge, proposed standards, and teaching and learning guide;  the material comes from an extensive search for relevant resources.
you have to take the control circuit, alu, and clock on faith.
note: requires java installed on your computer: - lmc simulator applet - lmc instructions - lmc example 1: input and output - lmc example 2: using memory - lmc example 3: adding and substracting - lmc example 4:
the goal is to help all of us to find inspiration, help each other, find interesting material, and ultimately to improve our teaching.
trevor gosbell (at pc update online) has two excellent articles: eight things programming languages can do part 1 (april 2004):
actually the song is represented in 1348 different programming languages and variations.
with traditional versions of logo, you can create drawings and animations by giving commands to graphic "turtles" on the computer screen.
part one addresses the first five ideas: output, variables, expressions, input, and selection.
trabb pardo–knuth algorithm (tpk algorithm) is a program introduced  bydonald knuth and luis trabb pardo to illustrate the evolution of computer  programming languages.
- karel the robot website with fundamentals and activities is an excellent method for introducing students to computer programming is described by richard e. pattis in his book titledkarel the robot.
objectives demonstrate an understanding of the  distinguishing concepts ofalgorithms and programming languages from computer  science and software engineering understand what a programming language is and the role and characteristics  ofprogramming languages understand programming language concepts such as high level languages,  machine languages, interpretation and compilation explain the need for programs to translate between high and low level  languages compare and contrast programming languages, natural languages and high and  low level languages explain the ways in which high level languages are translated into machine  languages understand the concept that programming languages are precise context the key thing at this level is to be able to  understand the need for programming languages to be able to communicate with a  computer and program a task.
it is our  hope that this resource will evolve based on feedback from teachers, and  ultimately end up as teaching plans that are built on the resources.
please see below: - ds - instructions for schools (powerpoint, 4 mb) - ds - instructions for schools (pdf, 3 mb) - python: can be downloaded at http://www.python.org/download/
see also his course notes from systems software.
students can try to write simple programs using some form of structured  english (deb sweeney's peanut butter and jelly programming).
- shoes: shoes is a a cross-platform toolkit for writing graphical apps easily and artfully using the languageruby.
feedback can be sent to tim.bell
- saylor computer science course: cs404: programming languages offers unit plans with useful readings.
students can get a feel of many languages, their syntax and the concept of debugging.
- neil dickson has video tutorials in assembly language below: - assembly language tutorial: episode 0: some background: this video introduces the tutorial and some basic concepts about the cpu and ram before actually looking at any assembly language.
- if students are concurrently working on programming, a discussion of the programming environment they are using can lead to a discussion of compiling, interpreting, and the different kinds of languages.
ideas for teaching and learning activities - compare the speed of the same program being run on compiled and interpreted systems - download and install an open source application from a web repository, compare the different versions provided (source vs various precompiled versions), and explore the differences between high level languages, low level languages, and machine language, including issues such as size, portability and ease of installation.
excellent for introducing the fetch/execute cycle as an introduction to assembly language.
you can also find a more exhaustive text based compilation atthe language list at the university of freiburg.
- richard bowles has a section dedicated to explaining compilers and interpreters.
programming languages, high-level programming language,  low-level programming language wikibook entries: machine level structure, machine operation and assembly  language google directory: computers > programming > languages >  comparison and review provides various comparisons of different programming  languages
note: the tpk algorithm reads in an array of 11 values,  applies a particular function to each value, and then writes the result in  reverse order.
- trabb pardo–knuth algorithm (tpk algorithm) is a program introduced bydonald knuth and luis trabb pardo to illustrate the evolution of computer programming languages.
it also explains what assembly language is and when one might want to use it.
- teachict's poster activity to guess which programming language called what am i?
- hobart and william smith colleges has the xcomputer lab which uses the xcomputer applet, which simulates a simple model computer (which is also called xcomputer).
squeak is highly-portable - even its virtual machine is written entirely in smalltalk making it easy to debug, analyze, and change.
to demonstrate the  concept that programming languages are precise, try lesson plans such as computers only do what they are told or the cs unplugged activity in  programming languages.
note: the tpk algorithm reads in an array of 11 values, applies a particular function to each value, and then writes the result in reverse order.
ideal for kids and adults alike, small basic helps beginners take the first step into the wonderful world of programming.
there are those that aim to convey a basic understanding of the  concepts and those that are advanced and therefore might assist teachers with  their professional development activities.
[at] canterbury.ac.nz. achievement standard the resources on this page relate  mostly to the digital technologies achievement standard 1.44/as91074  (demonstrate understanding of basic concepts from computer science)
that explains the difference between compilers and interpreters.
its purpose is to share experiences and material, and to offer a platform for discussion and support.
richard bowles has a section dedicated to explaining compilers and  interpreters computer languages history site has a poster showing the history of  programming languages.
teachict's poster activity to guess which programming language called what  am i?
[at] canterbury.ac.nz. achievement standard the resources on this page relate mostly to the digital technologies achievement standard 1.44/as91074 (demonstrate understanding of basic concepts from computer science)
students will learn the importance of written communication skills and sequential thinking while trying to write a computer program on how to make a peanut butter and jelly sandwich.