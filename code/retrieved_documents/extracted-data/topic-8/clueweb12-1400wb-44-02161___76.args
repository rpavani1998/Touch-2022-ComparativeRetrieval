of course the stalin approach to java would pay off about as well as for scheme.
for many of the config files i can think of — log4j, hibernate, ant (if you’re some sort of nutty nut girl who’s nuts) — you can programmatically configure them in java code.
neither would the open source guy who cares about solutions, clarity and beauty use a monster language like java.
[…] in gosling didn’t get the memo a statement by james gosling that is too dumb to be true (but alas, it is) is dissected.
by changing the jsp file, the container (like tomcat) recognizes the changes, re-compiles and re-loads it only once for further use.
this seems strange, because one of the three main reasons* i chose to learn ruby is because of the amount of interest it’s generated in the .net world recently - i just haven’t seen any hostility from the .net people towards ruby, but i’ve seen stacks of it from rank-and-file java developers.
the real reason dynamic compilation exists is that it makes changing code more flexible than when precompiled.
in games for example you need a glue language for game-logic, a dsl which allows the game-designer to specify logic without recompiling the whole engine.
no reason to waste time on him, other than for the amusement value.
rails, for instance, allots one database connection per thread, and that connection is persisted for the life of the server.
it is perfectly possible to write a webserver in pure perl, python or ruby, and in fact rails and catalyst ship with such included for development purposes (although neither is not particularly optimised or feature-complete, so is not recommended for actual deployment).
i’ve seen great systems written in those same languages.
however, you can pin the types down retrospectively as needed, instead of burdening yourself with a static type system during development.
python can do many of the same tricks…and choice is good.
march 2006 isaac gouy: ryan, you were quick to make a personal attack on james gosling accusing him of spreading misinformation and malicious lies, as-soon-as the tabloid headline version of his comments was reported.
but none of them attempt any serious breadth in the application domain it’s hard to determine what kind of breadth is missing when you consider the capabilities provided by modern dynamic language environments, the platforms they run on, and the extensions and bridges that allow them to use damn near any other program or library available.
not: they just generate web pages.
if i define a certain player as being a type, and i’ve made a decision to cast that player as a type while i was being governed by the contextual circumstances, when the context changes, that type will have a hell of a problem getting out of the cast.
march 2006 a bigger soapbox [@lesscode.org]: […] sys-con media publisher/editor jeremy geelan, a fine chap who interviewed the father of java just the other day, contacted me about re-publishing gosling didn’t get the memo on sys-con.com.
in peter siebel’s book, practical common lisp, he relays an anecdote from eran gatt regarding the use of lisp in the deep space 1 mission in 1998, specifically pointing out the usefulness of having a read-eval-print loop available on a remote piece of hardware.
when you present that many ‘generate web page’ examples it becomes understandable that an outsider like james gosling has the impression that php and ruby are just used to generate web pages.
java’s older sister, self, is now a fine 19 year old, though only available on mac os x (fine by me).
on “they just generate web pages” and get their power through specialization: they just generate web pages.
there is a reason why pojo has a name (plain old java objects, iirc).
but of course no one here knows that, because its not about truth, its only about hype.
while the benefits of dynamic languages–first realized millions of years ago in lisp and smalltalk–are well understood in academia, it managers and sun certified developers are perfectly accepting of our static = professional / dynamic = amateurish labeling scheme.
there are languages specialized for a certain task that are incapable of being used for anything else.
it’s fast enough for a wider range of applications compared to ruby - and it’snot a scripting language.
march 2006 barryd: i do find it somewhat telling that you’re happy to bang the drum for scripting in the form of perl, ruby et al, and hammer on about scalability but you fail to mention vbscript.
i can do something very similiar to scripting in compiled languages too, using jsp or asp or whatever… i do not see the point.
a real language shouldn’t need an extra language to constrain it.
march 2006 bertus: alex bunardzic wrote: if i define a certain player as being a type, and ive made a decision to cast that player as a type while i was being governed by the contextual circumstances, when the context changes, that type will have a hell of a problem getting out of the cast.
but dynamic typing is and was only a kludge to have a certain level of expressiveness without going thru the difficult task to create a good type system.
every use of lamp is essentially using these “scripting” languages forglue â they “assume the existence of a set of powerful components and are intended primarily for connecting components together” (john k. ousterhout).
excel automation, i’ve seen trading houses and banks where prediction and reporting models are built in excel using vb for applications.
java technology is not fault tolerant and is not designed, manufactured, or intended for use or resale as online control equipment in hazardous environments requiring fail-safe performance, such as in the operation of nuclear facilities, aircraft navigation or communication systems, air traffic control, direct life support machines, or weapons systems, in which the failure of java technology could lead directly to death, personal injury, or severe physical or environmental damage.
only lisp can if you use lot of type constraining declares.
and that’s my point no one is doing such things with php because it’s not meant for that sort of thing.
they do have the look’n’feel of dynamic languages but, honestly, they are not.
it’s a poor musician that blames his instrument.
it’s geared heavily toward generating web content, though it can also be used outside the context of a web server, and such code doesn’t end nearly up as grotesque as, say, writing servers inbash using netcat.
look, dynamic typing is as old as programming languages.
you can pin the types down retrospectively as needed, instead of burdening yourself with a static type system during development.
and even so, they can’t stand against apache speed-wise.
static typing is an optimisation, but also compiler verifiable documentation and specification.
if not, php is only usable for scripting or with other words for glueing componentes together.
computer are getting faster and at some point in time you can even affort a 100 times slower language to gain some comfort.
and scripting languages normally do lack an instance with an infinite loop that may serve as container for pooling etc. - thats the punchline.
those who placed technical excellence and pragmaticism above religious attachment and vendor cronyism were easily convinced of the benefits that broadening their definition of acceptable technologies could bring.
one year ago, this type of behavior could be attributed to a lack of documentation and discussion on these issues, today it’s impossible to attribute to anything but malice.
it looks like lowly javascript with its ajax creates the next generation of client-side applications, while java applets went nowhere in this direction.
he says java is “not fun” and far less productive than php, python or ruby for web development.
partial-compilation to “unroll” some of the dynamism might make more of the code available to a stalin compiler.
march 2006 remi broemeling: as denyerec has implied, eve online would be a good example of enterprise, non-web-page usage of python.
because of its runtime model which is very different from the runtime model of ruby.
the thing is, as you point out in your article, the knowledge that this is spew is well-documented.
so, english is a general-purpose natural language.
only lisp can if you use lot of type constraining declares.
april 2006 patrick logan: the problem is that stalin only works with relativly static and also only with “closed-world” programs.
july 2006 cnemelka: i’ve seen a 70 year old carpenter put up a wall faster with a hammer than a 20 year old carpenter using a nail gun.
and although speaking of scripting languages at that point you could i.e. use java like normal cgi (but i think no one would rather like to do that).
simply because they are only useful as ‘glue’ between programs which do the real work.
unlike c, vm-based languages such as ruby, python, and java have associated initial load times just to get the vm into memory.
by not keeping the state on the server (but in the database), you can have as many servers to handle the requests as you want.
this technique is also known to result in dynamic language advocates going absolute bat-shit crazy and making complete fools of themselves.
so the engine is written in c/c++ and the game-logic in some dsl.
java is a well known memory hog, but if you substract the usage of the vm and the loaded standard-libs (which takes more space then the optimized libs for ruby for example which are written in c) you see that java uses noticable less space then ruby for most oo-based applications.
when nasa wanted a space ship to navigate under its own autonomous control for the first time (deep space i, in a planetary shadow), it had the ship’s computer run dynamic lisp code.
more relevantly, perhaps, is that the bug which needed to be addressed concerned a race condition due to the concurrent nature of the software, not any of the type-safety or other shallow bugs that might be addressed by adopting java instead.
algol-derived static typing is detrimental and will be left behind sooner or later.
and if a programmer really takes care to program in a way a type-inferencer can type a dynamic program to a static one, then he also can write those types down from the beginning.
but for other usage patterns which are very common in your average ruby or php program, stalin won’t give you much benefit (or won’t even work because it don’t support the whole scheme standard).
sure enough, in backoffice 2000 server’s license (for example), i found: note on java support.
sorry but jsps are not dynamic as such, even if the expression language suggests otherwise.
eventually, they were forced to accept the fact that non-application specialists are going to take over and do their own financial shit using spreadsheets.
i’d also like to note that exposing resource representations via http/urls has been moving into areas other than “generating web pages”.
if you’re happy with the 80% work, fine.
gosling thinks ruby just generates web pages david heinemeier hansson: pay no attention to the heathens and distinguishing power from versatility assaf: james gosling explains what’s wrong with java james robertson: the static empire gets nervous frank wiles: seriously funny all we’re asking is that you stop spreading misinformation about the current state of dynamic languages to the press, analysts, and your customers.
the technical details of how it manages this dynamicity are of no importance to me (and, in fact, it was touched on above that lisp is a fully dynamic language that can be interpretedor compiled).
this is a strongly typed, type inferencing, purely functional language.
the web server is becoming a key piece of integration infrastructure.
so the engine is written in c/c++ and the game-logic in some dsl.
memory consumption is amuch greater sticking point.
now, 10 years ago, i was 12, so don’t bet your life that my facts are straight.
you could say in the view, and from the controller, pass objects of twoentirely different classes that implement the getstuff() method.
i worked for another company who found they had to use 45 web servers to run their ejb site rather than the 30 which it took to run their vbscript site.
using java for web development must not be very easy, popular or productive.
march 2006 isaac gouy: carl, also see the flawed benchmarks page - yes, the point of scripting languages is to script stuff written in other languages.
but dynamic typed languages like ruby won’t be the future too.
it reveals why static languages are not real languages â€“ they need other languages to constrain them.
the parts in java can scale to dozens or more computers simply by using the facade pattern with stateless session beans calling pojo’s.
specialization and enhanced capabilities related to generating and serving hyper-media over http are and will continue to increase in value.
this makes them bad candidates for the typical “script-based” (by your definition) cgi.
someone needs to tell gosling his baby was ugly then, and even uglier now.
i think bash is a good example of a specialized “scripting language”.
they don’t need the xml languages.
i’ve seen excellent db admins who think that pl-sql is the only language you should ever write in.
only exceptions are benchmarks where most time is spend in libs like regular-expression-matching or simmilar.
march 2006 isaac gouy: ryan, you were quick to make a personal attack on james gosling accusing him of spreading misinformation and malicious lies, as-soon-as the tabloid headline version of his comments was reported.
march 2006 john: you couldn’t write a library that does, say, interplanetary navigation.
dynamic languages are making a resurgence, not a comeback since they never really went away, and for many it will be a good, productive and profitable time.
if you’re happy with the 80% work, fine.
this technique is also known to result in dynamic language advocates going absolute bat-shit crazy and making complete fools of themselves.
contrast that with static languages, where you are forced to create a completely separate “scripting language” when you need to provide a constrained/specialized language (this is why xml is used so heavily in java for things like o/r mapping, dependency injection, configuration, build processes, etc. — xml is java’s scripting language).
i of course, will remain open minded that ruby may be better than say java at some tasks but for the… trackback at 13.
“php and ruby are perfectly fine systems,” he continued, “but they are scripting languages james pulled this directly out of “effective java advocacy beans”, section 6.8.3 “dealing with questions on dynamic languages”: first, call anything not statically compiled a “scripting language”.
it’s an excellent solution for certain goals but it isn’t unique, it isn’t absolutely universal!
march 2006 notes » blog archive » dynamic languages and choosing a technology for a project: […] an extended post responding to james gosling’s java is under no serious threat from php, ruby, or c# (that site, java.sys-con.com, is the worst i’ve enountered for quite a while with regard to ad content — annyoing pop-up dhtml ads not caught by firefox’s pop-up blocker, a million flashing, blinking, and whirling ads.
and although speaking of scripting languages at that point you could i.e. use java like normal cgi (but i think no one would rather like to do that).
march 2006 alan: i’m no expert, but dissing dynamic languages because they don’t do “interplanetary navigation” is just contrarian unhistorical blather.
you expect more from people who have an m.s — after all they don’t go to such schools just to learn compilers.
memory consumption is amuch greater sticking point.
java technology is not fault tolerant and is not designed, manufactured, or intended for use or resale as online control equipment in hazardous environments requiring fail-safe performance, such as in the operation of nuclear facilities, aircraft navigation or communication systems, air traffic control, direct life support machines, or weapons systems, in which the failure of java technology could lead directly to death, personal injury, or severe physical or environmental damage.
when someone unfamiliar with modern dynamic languages and experienced in java hears someone say, “they’re scripting languages, and get their power through specialization,” they are being misled into thinking that these languages are like bash and can be used only for a single specialized scenarios, which is obvious not the case: they can be contrained and specialized as much or as little as required and become useful in multiple specialized scenarios.
april 2006 carl: the problem is that stalin only works with relativly static and also only with “closed-world” programs.
so all people who thik that dynamic typing is some kind of new trend, are way off the mark.
while it is not a ready-to-go package with lots of std libraries, it is quite fast, small, customizable and has a strong and very smart community.
sorry but jsps are not dynamic as such, even if the expression language suggests otherwise.
the technical details of how it manages this dynamicity are of no importance to me (and, in fact, it was touched on above that lisp is a fully dynamic language that can be interpretedor compiled).
while i stand steadfastly by james’ analysis of the current quantity of language, we will quickly diverge in opinion from here.
while, when coding java, your ide blinks angrily at you when you try to call new integer(5).trim(), you’ll get no flak from jsp el, because there, types are not evaluated until runtime.
” seo sanghyeon: on “they just generate web pages”, python has… revision control system spam filter with outlook plugin speciailized gui program for genealogy sophiscated plotting library etc ad nauseum.
actually, and i realize james was pointing primarily at the newcomers to the dynamic language crowd, nasa has used lisp extensively in the past.
if i may borrow an example from the natural languages â if someone in everyday situation suddenly starts waving a flag above his head, that could get easily misinterpreted as being an act of patriotism, of flag desecration, and many other things.
there are languages specialized for a certain task that are incapable of being used for anything else.
what i guess amazes me more is that someone like gosling, with his education and apparent experience, is so worried about having his ivory tower renovated, has resorted to the technical equivalent of ad hominem attacks.
my aging brain recalls very simular emotional arguements from lisp vs. fortran advocates.
besides, he doesn’t do “interplanetary navigation” so nobody in their right mind would take him seriously.
march 2006 barryd: i do find it somewhat telling that you’re happy to bang the drum for scripting in the form of perl, ruby et al, and hammer on about scalability but you fail to mention vbscript.
java itself is evolving probably better than other languages and it has the best api you need.
and lisp was, in fact, doing the navigation.
two or three years ago we have someone at the local lug who gave a talk about how they wrote a pure-perl webserver which got them much better performance than they could achieve using apache + mod_perl.
a real language shouldn’t need an extra language to constrain it.
that’s because the jsp expression language is a dynamic language, albeit not a general purpose one.
so, in all but the most idiotic setups, webapps written in ruby and python are not being run like scripts.
after watching good people likemartin lamonica and jon udell balance out the mainstream tech press with coverage of lessish tools and languages,and having seen forward looking companies likeredmonk inject themselves into the traditional analyst racket with smart, honest, and unignorable critique,and having seen herds of java luminaries migrate to simpler, more agile tools and languages, and after hearing bill gates say that less code was the only metric, and having watched david, bill, ian, adrian, phillip, aristotle, harry, mark, mark, chad, curt, james and many other extremely talented programmers dismantle all the common hollow arguments for superfluous complexity and replace them with simple methodologies andworking code, after all that i just figured there wasn’t much to do around here.
april 2006 isaac gouy: stalin generates much better code stalin is installed on the computer language shootout but no one has contributed programs.
python are very slow.
if you only remember one thing, that java is about interplanetary navigation, not serving web pages, that’s enough to summarize everything that’s wrong with java.
even though one tends to accept/recognize when the trade press like to sensationalize such things, i feel terrible when a phd/m.s talks like a slashdotter/high schooler/”digg”er.
along the way, the article churns out a very long list of links to sites and blog posts containing ammo for fighting the java crowd (and their associates over at c# central, etcetera ).
so solutions could be dynamically provided, if needed, and so that the basic code would be smart.
indeed, ask.com was for many years getting along fine with a vbscript-based website.
so it’s sometimes hard to separate the specialized pieces from the general purpose pieces.
dynamic language designers shouldn’t forget that computers are still very much valued in their ability to do computations (hence the name!)
since due to development in many opensource projects such fop , xml , apache , eclipse and opensympony will lead java to be the king of internet kingdom !!
ryan tomayko has a great post called gosling didn’t get the memo that explains and link to the sea change we’ve seen over the last year or more.
he’s an obviously interested party, with a party line to spew.
in java the price for the better performance is the static types you have to use as a programmer (and i for myself don’t even consider static typing as a burden, but thats different topic).
the rest are just fooling themselves into buying into a more complex solution because it makes them feel good.
i believe one of the reasons the term “scripting language” has stuck with them is partially because it’s become so common to create mini-languages (i.e. dsls) in dynamic languages that are specialized for certain tasks.
stalin is also a decade old.
same goes for ruby (even if ruby is a much better language then php, but also so slow that its nit possible to write even the runtime-libs of ruby in ruby without having an unbearable slow program).
the difference between being able to handle 1,000,000 and 10,000,000 data points is the difference between a sale and no sale.
every use of lamp is essentially using these “scripting” languages forglue â€“ they “assume the existence of a set of powerful components and are intended primarily for connecting components together” (john k. ousterhout).
april 2006 patrick logan: if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
it looks like lowly javascript with its ajax creates the next generation of client-side applications, while java applets went nowhere in this direction.
like bash, this seems to be working extremely well.
in java i use a web-server written in java, huge libs, written in java to access a db-server written in c (i also could use a db which is written in java, there are some).
respectful debate, honesty, passion, and working systems created an environment that not even the most die-hard enterprise architect
it is a language executed as script.
gosling shows his ignorance regarding the current feature set provided by dynamic languages and what people are using them for.
at the idea ms would slip this into a eula, that i had to verify it.
it’s obvious why this costs much more memory - but it’s not obvious how ruby can made more optimal without totally redefining its runtime semantics.
i just read through this entire blog and was transported back to 1972 (or so) when i first encountered programming.
i believe that a majority of people in it now consider dynamic languages like perl, ruby, python, and php to be very much capable of sitting at the table with java and .net for a wide range of common technical problems.
change the context, and the interpretation of the language constructs changes.
people don’t, however, because the java code ends up looking even uglier than the xml files.
even the hypothetical future interplanetary staff, which he dragged in as his crown argument, will be writing scripts instead on relying on statically typed java applications to guide them while they hurl through the space.
all i wanted to point out is that it is the same for me how the script is executed.
more trademark nonsensical metaphors will not make you look any smarter; really.
partial-compilation to “unroll” some of the dynamism might make more of the code available to a stalin compiler.
other programming languages are not so weak and useless as you can think […] pingback at 16.
which, again, is perfectly fine and correct and the best possible way of performing that task.
and scripting languages normally do lack an instance with an infinite loop that may serve as container for pooling etc. - thats the punchline.
actually, and i realize james was pointing primarily at the newcomers to the dynamic language crowd, nasa has used lisp extensively in the past.
the troll patrol may take me away, now.
there arelots of industry luminaries, all spewing their corporate lines.
so to get comperable performance in lisp you also have to program in a way comparable to java.
besides, he doesn’t do “interplanetary navigation” so nobody in their right mind would take him seriously.
oh what a great post, really proved gosling wrong.
sure those are microbenches - but microbenches are mostly a problem for java because of the dynamic recompilation in the vm which makes programs run more slowly in the beginning.
but then you’d have to wonder why the language was so less expressive.
“php and ruby are perfectly fine systems,” he continued, “but they are scripting languages and get their power through specialization: they just generate web pages.
there is a reason why pojo has a name (plain old java objects, iirc).
while, when coding java, your ide blinks angrily at you when you try to callnew integer(5).trim(), you’ll get no flak from jsp el, because there, types are not evaluated until runtime.
rails, for instance, allots one database connection per thread, and that connection is persisted for the life of the server.
maybe those scriping language will replace languages like java sometimes.
this is stuff used by thousands and thousands of people on a daily basis internally (and the sap it is something that actually works..
you are effectively saying that java does not have the facilities necessary to create dsls which can express configuration more tersely than xml.
well i just wanted to nail down what a script does.
using a general purpose language but extending it in places that would traditionally require “scripting” is the fundamental design principal behind rails, django, tg, seaside, etc.
they assume some brain power behind the powers that use them.
now, 10 years ago, i was 12, so don’t bet your life that my facts are straight.
if you ask bjarne stroustrup about c++, he is known to defend c++’s successes in a wide area of applications(which is wider than java’s).
yet the compiled code isfaster than c++.
while none of them have any basis in reality, they have proven sufficient in creating fear and uncertainty in the minds of those who are evaluating these technologies.
gosling is keeping his head in the sand.
for instance, some people occasionally use smoke signals to communicate messages.
eventually, they were forced to accept the fact that non-application specialists are going to take over and do their own financial shit using spreadsheets.
static typing is an optimisation, but also compiler verifiable documentation and specification.
in peter siebel’s book, practical common lisp, he relays an anecdote from eran gatt regarding the use of lisp in the deep space 1 mission in 1998, specifically pointing out the usefulness of having a read-eval-print loop available on a remote piece of hardware.
i can do something very similiar to scripting in compiled languages too, using jsp or asp or whatever… i do not see the point.
a compiled language may offer very little capabilities, and a scripting language may offer much more capabilities, and vice versa.
and lisp was, in fact, doing the navigation.
we just need to keep successfully building real, working systems using the tools that we feel are appropriate.
i believe that a majority of people in it now consider dynamic languages like perl, ruby, python, and php to be very much capable of sitting at the table with java and .net for a wide range of common technical problems.
perhaps the lesson here is that front-end websites simply don’t need ultra-fast micro-benchmarked platforms.
but ruby, python, perl, smalltalk, etc. are not specialized scripting languages.
as long the language really has to do the work on itself, php and ruby and to a lesser degree
i generally use the libxml2 bindings for perl rather than pure-perl xml parsers to do xml processing; the extra speed is a nice bonus, but the real reason is that building a dom for even a moderately large xml document using perl data structures consumes mindboggling amounts of memory.
after watching good people likemartin lamonica and jon udell balance out the mainstream tech press with coverage of lessish tools and languages,and having seen forward looking companies likeredmonk inject themselves into the traditional analyst racket with smart, honest, and unignorable critique,and having seen herds of java luminaries migrate to simpler, more agile tools and languages, and after hearing bill gates say that less code was the only metric, and having watched david, bill, ian, adrian, phillip, aristotle, harry, mark, mark, chad, curt, james and many other extremely talented programmers dismantle all the common hollow arguments for superfluous complexity and replace them with simple methodologies andworking code, after all that i just figured there wasn’t much to do around here.
if you ask bjarne stroustrup about c++, he is known to defend c++’s successes in a wide area of applications(which is wider than java’s).
the reason why dynamic typing has some kind of ‘revial’ in the moment is the hype created by ror and the increasing computing power of todays computers.
and even smalltalk (which is the oo-language with the most effort in efficient execution ever - even most concepts in the java-vm are derived from experiences with smalltalk) isn’t comperable to java performancewise.
i think this applet is the closest anyone have gotten to actually do “interplanetary navigation” in java.
i am an application programmer, and while huge chunks of the program have very little cause to be concerned about performance (dialogs and db i/o and such), real world applications find themselves having to deal with larger and larger datasets, and more and more computations.
for instance, some people occasionally use smoke signals to communicate messages.
but for application development performance does count, many people are still bashing java because of its alleged poor performance.
now, both of these websites had backend systems which weren’t script-based.
by that token, java must be a scripting language, since running a java vm written in java inside a java vm would be very slow.
may 2006 morves: well, as for the “interplanetary navigation” issue, maybe we should hear from a nasa employee (sean kelly) what he thinks about java and dynamic languages: http://oodt.jpl.nasa.gov/better-web-app.mov they have been using tcl/tk (dynamic language) to build guis for years, replacing c++.
sure, there are webservers written in ruby and python - but without big parts of the libs written in c those would be unbearable slow.
when someone unfamiliar with modern dynamic languages and experienced in java hears someone say, “they’re scripting languages, and get their power through specialization,” they are being misled into thinking that these languages are likebash and can be used only for a single specialized scenarios, which is obvious not the case: they can be contrained and specialized as much or as little as required and become useful in multiple specialized scenarios.
maybe future shock won’t get us after all.
using java for web development must not be very easy, popular or productive.
leave java to the masses as they wallow in suffering…just code around them in the fast lane.
april 2006 paul: i guess you could classify apache as middleware, but the scripts like php aren’t really doing the middle job, apache is.
while it is not a ready-to-go package with lots of std libraries, it is quite fast, small, customizable and has a strong and very smart community.
may 2006 morves: well, as for the “interplanetary navigation” issue, maybe we should hear from a nasa employee (sean kelly) what he thinks about java and dynamic languages: http://oodt.jpl.nasa.gov/better-web-app.mov they have been using tcl/tk (dynamic language) to build guis for years, replacing c++.
even though one tends to accept/recognize when the trade press like to sensationalize such things, i feel terrible when a phd/m.s talks like a slashdotter/high schooler/”digg”er.
he has since addressed the flame war that erupted, but the whole ordeal got me thinking seriously about php and its scalability and performance abilities compared to java.
but if the context for the formal semaphore-based communication is first proposed, than the flag waving attains much more clarity.
i’ll quit before this becomes a paul graham post, but suffice it to say, gosling would do well to familiarize himself with what ruby gets right.
same for perl which is also faster then ruby and php.
those who placed technical excellence and pragmaticism above religious attachment and vendor cronyism were easily convinced of the benefits that broadening their definition of acceptable technologies could bring.
april 2006 carl: the problem is that stalin only works with relativly static and also only with “closed-world” programs.
that’s because the jsp expression language is a dynamic language, albeit not a general purpose one.
no one is suggesting he champion, support, or advocate anything, just that he stop spreading information that’s provably incorrect.
update: seo sanghyeon provides a list of popular python related applications that have nothing to do with generating web content.
in the java 6.0 , we’re going to have javascript (aka rhino from mozilla) included so perhaps “scripting languages” will get better and better on the jvm.
peace and all be happy… just to add another use of dynamic languages in big corps: python for example is used by sap for internal it automation.
lesscode can’t go away until morecode has been staked through the heart, buried in a cemetary surrounded by moving water, with it’s head severed, placed in a silk bag, it’s mouth stuffed with garlic and rose petals, and consecrated by an eastern orthodox priest.
this is a strongly typed, type inferencing, purely functional language.
stalin generates much better code for scheme than any java compiler i am aware of.
so to get comperable performance in lisp you also have to program in a way comparable to java.
he was showing off to me some code he had helped write that — guess what —actually did interplanetary navigation.
i thinkbash is a good example of a specialized “scripting language”.bash is for chaining commands together.
march 2006 toby: baptiste wrote: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air transport and nuclear powerplants”
because in the end no language is that special but a good api saves you from a lot of trouble.
but on the ground-side, there are a number of parts of the whole command and control chain that goes out to the rover that’s done in java.
the product may contain support for programs written in java.
april 2006 isaac gouy: stalin generates much better code stalin is installed on the computer language shootout but no one has contributed programs.
thats the reason why there are so many dynamic typed languages, not because dynamic typing is something sophisticated.
we all know that ruby/python can be used for 80% of the applications that java can be used.
but we know(from the 80/20 rule) that the only 20% of the journey is done when you say that 80% work is done.
unlike c, vm-based languages such as ruby, python, and java have associated initial load times just to get the vm into memory.
james, who as you may know has had some problems recently with the dynamic language community had some interesting things to say about the way programmers use the language he designed.
now if you wrote a webserver or an orb entirely with php, then it would be middleware.
beyond the buzz and fud, scripting and dynamic are just features of the language.
gosling has higher motivation that bjarne ever did to keep their created languages going but at the same time we should not put ignorance and ill-motives.
noone would use a dynamic language in a team of 30 developers in a company with a beaurocratic mindset.
but of course no one here knows that, because its not about truth, its only about hype.
whereas a “scripting” language is executed and dies afterwards (which has its advantages like rapid development, ease of deployment etc.
another bang on point: real languages are context sensitive.
two or three years ago we have someone at the local lug who gave a talk about how they wrote a pure-perl webserver which got them much better performance than they could achieve using apache + mod_perl.
they don’t need the xml languages.
if i may borrow an example from the natural languages â€“ if someone in everyday situation suddenly starts waving a flag above his head, that could get easily misinterpreted as being an act of patriotism, of flag desecration, and many other things.
leave java to the masses as they wallow in suffering…just code around them in the fast lane.
other programming languages are not so weak and useless as you can think […] pingback at 16.
gosling has higher motivation that bjarne ever did to keep their created languages going but at the same time we should not put ignorance and ill-motives.
you can do this in java and not in php so php is ‘only’ for glue - hence a scriping language.
this is similar to how spreadsheets used to scare the shit out of people who based their careers on building financial applications.
while none of them have any basis in reality, they have proven sufficient in creating fear and uncertainty in the minds of those who are evaluating these technologies.
respectful debate, honesty, passion, and working systems created an environment … the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, so this is what respectful debate looks like?
attempt to insinuate that all languages without an explicit compilation step are not to be taken seriously and that they are all equivalently shitty.
in games for example you need a glue language for game-logic, a dsl which allows the game-designer to specify logic without recompiling the whole engine.
in other words, such languages are context-sensitive.
stalin generates much better code for scheme than any java compiler i am aware of.
and if a programmer really takes care to program in a way a type-inferencer can type a dynamic program to a static one, then he also can write those types down from the beginning.
and lisp as one of the oldes higher-level lprogramming language is also dynamically typed.
the rover itself has a computer onboard.
maybe you’d like to learn about it… untyped so-called “dynamic” languages are nice for many things, but eschewing statically typed languages simply due to ignorance about how type systems actually work, and what the state-of-the-art is capable of, is really just foolish.
you can do this in java and not in php so php is ‘only’ for glue - hence a scriping language.
thanks partly to some ill-advised comments from james gosling (and other "thought leaders" (snigger)) on the ruby language, it looks as if there’s some real bad blood between the ruby and java camps at the moment.
july 2006 cnemelka: i’ve seen a 70 year old carpenter put up a wall faster with a hammer than a 20 year old carpenter using a nail gun.
[…] the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, which brings us back nicely to james gosling’s recent statements.
by arguing with gosling, it’s making his words more legitimate.
if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
in my opinion that was what gosling meant saying that scripting languages “[..] have really serious scaling and performance problems.” .
more trademark nonsensical metaphors will not make you look any smarter; really.
only there, because of the highly optimized c version in the runtime-lib php and ruby can perform similar to the java-implemented re-lib in the java-standard-libs performance wise.
in java i use a web-server written in java, huge libs, written in java to access a db-server written in c (i also could use a db which is written in java, there are some).
blog archive » about java: […] personally i don’t like java because it seems like a just product of high-quality pr.
same goes for ruby (even if ruby is a much better language then php, but also so slow that its nit possible to write even the runtime-libs of ruby in ruby without having an unbearable slow program).
in everyday situations we also see a number of specialized languages (non-programming languages), that are constrained and therefore limited in one way or another.
anyway, even php has the socket functions and the other stuff that you’d need to write a webserver.
java’s older sister, self, is now a fine 19 year old, though only available on mac os x (fine by me).
i believe one of the reasons the term “scripting language” has stuck with them is partially because it’s become so common to create mini-languages (i.e. dsls) in dynamic languages that are specialized for certain tasks.
march 2006 isaac gouy: carl, also see the flawed benchmarks page - yes, the point of scripting languages is to script stuff written in other languages.
april 2006 patrick logan: the problem is that stalin only works with relativly static and also only with “closed-world” programs.
ryan tomayko has a great post called gosling didn’t get the memo that explains and link to the sea change we’ve seen over the last year or more.
march 2006 anjan bacchu: hi there, james gosling did a lot of work on lisp to build emacs.
the rover itself has a computer onboard.
i’ve seen excellent programmers who think that all their code performance problems are because the network is slow.
and of course i could do application programming using scripting languages.
there arelots of industry luminaries, all spewing their corporate lines.
it’s geared heavily toward generating web content, though it can also be used outside the context of a web server, and such code doesn’t end nearly up as grotesque as, say, writing servers inbash using netcat.
this is similar to how spreadsheets used to scare the shit out of people who based their careers on building financial applications.
the reason is that if you have a dynamic programming language, progammers are really using this dynamism and then it’s impossible for any type-inferencer to succeed.
april 2006 patrick logan: if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
while the benefits of dynamic languages–first realized millions of years ago in lisp and smalltalk–are well understood in academia, it managers and sun certified developers are perfectly accepting of our static = professional / dynamic = amateurish labeling scheme.
seo sanghyeon: on “they just generate web pages”, python has… etc ad nauseum.
on scaling and performance and they both have really serious scaling and performance problems.
if you want to do ruby-like metaprogramming or dynamic class loading and creation like in java, its approach won’t work.
something that is high on my list is a better conceptual model for dealing with multiple processors.
contrast that with static languages, where you are forced to create a completely separate “scripting language” when you need to provide a constrained/specialized language (this is why xml is used so heavily in java for things like o/r mapping, dependency injection, configuration, build processes, etc.
now if you wrote a webserver or an orb entirely with php, then it would be middleware.
and if someone thinks i’m trolling along, please feel free not not to read my posts.
lisp has its dynamic nature, even when most of what it’s running at the moment may be fully-compiled.
the rest are just fooling themselves into buying into a more complex solution because it makes them feel good.
but on the other hand i do not have to read“effective java advocacy beans”, section 6.8.3 to see another kind of fud raising on.
yes, you can have dynamic languages which are faster - but even smalltalk and lisp can’t compete to java normally.
if you only remember one thing, that java is about interplanetary navigation, not serving web pages, that’s enough to summarize everything that’s wrong with java.
i worked for another company who found they had to use 45 web servers to run their ejb site rather than the 30 which it took to run their vbscript site.
so you can affort a slower language to a certain degree now - but only in specific areas.
but ruby, python, perl, smalltalk, etc. are not specialized scripting languages.
please understand, that the advocates of the dynamici languages do not say that java can’t scale.
he has since addressed the flame war that erupted, but the whole ordeal got me thinking seriously about php and its scalability and performance abilities compared to java.
severed, placed in a silk bag, it’s mouth stuffed with garlic and rose petals, and consecrated by an eastern orthodox priest.
these languages are severely limited (which is exactly why the monthy python skit presenting emily bronte’s “wuthering heights” with actors using flags for semaphores to engage each other in a dialog is so hilarious).
i just read through this entire blog and was transported back to 1972 (or so) when i first encountered programming.
while describing the sort of system that i was envisioning a coworker mentioned that what i was saying sounded like jini, that java related technology that never really seemed to get going.
perhaps the lesson here is that front-end websites simply don’t need ultra-fast micro-benchmarked platforms.
whereas a “scripting” language is executed and dies afterwards (which has its advantages like rapid development, ease of deployment etc. as mentioned above and in other linked pages), a “compiled” language does not (need to have, so it may use caching/pooling/memory objects much more efficient and has not to rely on backend systems and their performance that much).
in some strange way helsberg seems to have a better grasp of this than gosling (strange in a turbo pascal v. emacs way), as evidenced by c#’s haskell inspired linq stuff.
either now or in months or in years, everyone who can have their mind opened will have their mind opened, just by the current motion and inertia that platforms like rails and php possess today.
they are compiled and loaded into the virtual machine where they reside for the applications lifecycle and can interact with the complete jvm.
from what i recall, it was real-time image analysis logic that helped one satellite automatically maneuver itself into connecting with another, via video camera.
they do have the look’n’feel of dynamic languages but, honestly, they are not.
march 2006 john: you couldn’t write a library that does, say, interplanetary navigation.
lisp has its dynamic nature, even when most of what it’s running at the moment may be fully-compiled.
it’s not like every last piece of every subsystem is based on the java code.
in java the price for the better performance is the static types you have to use as a programmer (and i for myself don’t even consider static typing as a burden, but thats different topic).
the difference between being able to handle 1,000,000 and 10,000,000 data points is the difference between a sale and no sale.
march 2006 denyerec: i believe chunks of the game eve online are coded in python and that, clearly, involves interplanetray navigation.
there have, in fact, beensome number of languages.
you say james gosling is ignorant of the many different things that php and ruby are used for (he mentions php 7 times, ruby 1, python 1, perl 0) because he characterizes them as languages that just generate web pages.
and even smalltalk (which is the oo-language with the most effort in efficient execution ever - even most concepts in the java-vm are derived from experiences with smalltalk) isn’t comperable to java performancewise.
as mentioned above and in other linked pages), a “compiled” language does not (need to have, so it may use caching/pooling/memory objects much more efficient and has not to rely on backend systems and their performance that much).
he says java is “not fun” and far less productive than php, python or ruby for web development.
james uses the example of “interplanetary navigation”, which is a really good example except that it isn’t; most of us aren’t working at nasa and those of us who are working at nasa are doing things like trying to get the payroll and accounting systems working together or building simple productivity applications.
using a general purpose language but extending it in places that would traditionally require “scripting” is the fundamental design principal behind rails, django, tg, seaside, etc.
but for application development performance does count, many people are still bashing java because of its alleged poor performance.
which, again, is perfectly fine and correct and the best possible way of performing that task.
which, again, is perfectly fine and correct and the best possible way of performing that task.
sure those are microbenches - but microbenches are mostly a problem for java because of the dynamic recompilation in the vm which makes programs run more slowly in the beginning.
i have been programming for 26+ years and try to learn a new language every year.
the web server is becoming a key piece of integration infrastructure.
i know, there are people refuse to see those both last points and see static typing only as a burden, not as a means to help you even in the design process.
neither would the open source guy who cares about solutions, clarity and beauty use a monster language like java.
march 2006 petrilli: the reality is that large chunks of mission control @ nasa as well as the space telescope sciences institute (the people who run the hubble) use python to manage their missions to interplanetary destinations.
so, in all but the most idiotic setups, webapps written in ruby and python are not being run like scripts.
the combination of applying stalin-like compilation to partially-closed-world modules, with anamorphic-like hot spot code generation, etc. could combine to get overall great results.
maybe you’d like to learn about it… untyped so-called “dynamic” languages are nice for many things, but eschewing statically typed languages simply due to ignorance about how type systems actually work, and what the state-of-the-art is capable of, is really just foolish.
i think my general point is that if you only think of a compiler as something like what kernighan and ritchie developed thirty years ago then, no, c or java will almost always out perform ruby for sufficiently cpu-bound examples.
to see something that might be cast in a more familiar “middleware” light, check outactivegrid.
there have, in fact, beensome number of languages.
i think the future lies more in statically typed languages with very sophisticated type-systems which give you much more expressive power then the type system of languages like java has.
the same happend with c and java: javas is in average about 50% slower then c because of the gc and certain design decisions but it don’t matter much because of the gain of productivity.
the same happend with c and java: javas is in average about 50% slower then c because of the gc and certain design decisions but it don’t matter much because of the gain of productivity.
because in the end no language is that special but a good api saves you from a lot of trouble.
either now or in months or in years, everyone who can have their mind opened will have their mind opened, just by the current motion and inertia that platforms like rails and php possess today.
if i define a certain player as being a type, and i’ve made a decision to cast that player as a type while i was being governed by the contextual circumstances, when the context changes, that type will have a hell of a problem getting out of the cast.
james uses the example of “interplanetary navigation”, which is a really good example except that it isn’t; most of us aren’t working at nasa and those of us who are working at nasa are doing things like trying to get the payroll and accounting systems working together or building simple productivity applications.
languages have a long way to go yet, no doubt, but one thing is already clear: algol-derived static typing is detrimental and will be left behind sooner or later.
but not everybody is able to crate a powerfull and expressive type system like for example a language like haskell has.
thats the reason why there are so many dynamic typed languages, not because dynamic typing is something sophisticated.
i’ve had1 customer in 10 years who had a real challenge.
by not keeping the state on the server (but in the database), you can have as many servers to handle the requests as you want.
just as cobol development continued after its natural life, so will java. rest and wsdl will let us still use java on life support until we replace it!
so whilst it may not be trendy, it may not be open source, it may not have some word of mouth marketing scheme behind it the lack of vbscript’s inclusion in your mind’s list of scripting languags may show more snobbery than gosling.
in other words, they require more intelligent handling.
please understand, that the advocates of the dynamici languages do not say that java can’t scale.
its implemented this way in the jnode-os, a pure java os with drivers, vm etc totally written in java.
but on the ground-side, there are a number of parts of the whole command and control chain that goes out to the rover that’s done in java.
march 2006 keith wright: i think it might be nice to mention that while a lot of concerns about performance are overblown and fud, there is a point at which performance becomes a real issue, which many have a habit of handwaving and say that you can always optimize that part to c. i am an application programmer, and while huge chunks of the program have very little cause to be concerned about performance (dialogs and db i/o and such), real world applications find themselves having to deal with larger and larger datasets, and more and more computations.
march 2006 alan: i’m no expert, but dissing dynamic languages because they don’t do “interplanetary navigation” is just contrarian unhistorical blather.
i knew that several hugely popular web 2.0 applications were written in scripting languages like php, so i contacted owen byrne - senior software engineer at digg.com to learn how he addressed any problems they encountered during their meteoric growth.
could ignore, no matter how buried in java design patterns.
this is not to claim superiority for a given task, just that the competitive playing field is beginning to level off.
i can’t for the life of me understand why someone is upset that the father of java still prefers java, i’d be more surprised if he’d prefer something else.
so shame on gosling, he could have made his point more clear on that.
while i stand steadfastly by james’ analysis of the current quantity of language, we will quickly diverge in opinion from here.
march 2006 notes » blog archive » dynamic languages and choosing a technology for a project: […] an extended post responding to james gosling’s java is under no serious threat from php, ruby, or c# (that site, java.sys-con.com, is the worst i’ve enountered for quite a while with regard to ad content — annyoing pop-up dhtml ads not caught by firefox’s pop-up blocker, a million flashing, blinking, and whirling ads.
when he specifically says that breadth is not there in the other languages, you should not jump to conclusions about his motives.
but dynamic typing is and was only a kludge to have a certain level of expressiveness without going thru the difficult task to create a good type system.
i think this applet is the closest anyone have gotten to actually do “interplanetary navigation” in java.
march 2006 thought leadership: why ruby doesn’t matter… you may have noticed that pretty much everyone in the ruby camp are insultants with many of them being book authors attempting to capitalize on hype.
it’s an excellent solution for certain goals but it isn’t unique, it isn’t absolutely universal!
it turns out that selectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.
indeed, ask.com was for many years getting along fine with a vbscript-based website.
it’s a poor musician that blames his instrument.
compared to ocaml i even java is a dynamic language.
and that’s my point no one is doing such things with php because it’s not meant for that sort of thing.
so you can affort a slower language to a certain degree now - but only in specific areas.
later some people found out that maybe they don’t need that whole j2ee monster, maybe simple java objects are enough… comment at 13.
when you present that many ‘generate web page’ examples it becomes understandable that an outsider like james gosling has the impression that php and ruby are just used to generate web pages.
like bash, this seems to be working extremely well.
java doesn’t generate web pages.
the right tool for the right people for the right job.
excel automation, i’ve seen trading houses and banks where prediction and reporting models are built in excel using vb for applications.
from their point of view there are not anything noteworthy except perfect, brilliant, ideal java!
anyway, even php has the socket functions and the other stuff that you’d need to write a webserver.
but for other usage patterns which are very common in your average ruby or php program, stalin won’t give you much benefit (or won’t even work because it don’t support the whole scheme standard).
the number of customers i run into who think they have “scalability” issues is mindboggling huge.
now, both of these websites had backend systems which weren’t script-based.
in other words, i could walk into most shops during a technology evaluation and put these technologies on the table as legitimate considerations without being too worried about being laughed out of the room.
contrast that with static languages, where you are forced to create a completely separate “scripting language” when you need to provide a constrained/specialized language (this is why xml is used so heavily in java for things like o/r mapping, dependency injection, configuration, build processes, etc.
you could say in the view, and from the controller, pass objects of twoentirely different classes that implement the getstuff() method.
because of that, it’s an article worth bookmarking.
what i guess amazes me more is that someone like gosling, with his education and apparent experience, is so worried about having his ivory tower renovated, has resorted to the technical equivalent of ad hominem attacks.
if not, php is only usable for scripting or with other words for glueing componentes together.
the parts in java can scale to dozens or more computers simply by using the facade pattern with stateless session beans calling pojos.
okay, distilling all these into such a little sentence like gosling did has a taste of fud, but nevertheless gosling may have relied on the fact that people who read his interview are a little bit technically educated (and even i did not point out anythingthat new until now either).
it’s not like every last piece of every subsystem is based on the java code.
the reason why dynamic typing has some kind of ‘revial’ in the moment is the hype created by ror and the increasing computing power of todays computers.
you avoid most (but not all) of the drawbacks of static typing while getting all the benefits of static typing despite only rarely specifying an explicit type â
you expect more from people who have an m.s — after all they don’t go to such schools just to learn compilers.
all things have a certain price: in ruby the price of the comprehensive runtime meta programming is a increased memory consumption and a reduced performance.
but if the context for the formal semaphore-based communication is first proposed, than the flag waving attains much more clarity.
march 2006 remi broemeling: as denyerec has implied, eve online would be a good example of enterprise, non-web-page usage of python.
the reason is that if you have a dynamic programming language, progammers are really using this dynamism and then it’s impossible for any type-inferencer to succeed.
responses from ruby followers in particular indicated the language does have the scalability and power to build more than web “just” applications.
so all people who thik that dynamic typing is some kind of new trend, are way off the mark.
we are now free to dismissany technology that lacks “interplanetary navigation” features.
they are only saying that dynamic-lanugages can scale as well.
[…] the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, which brings us back nicely to james gosling’s recent statements.
(smalltalk is included on one ofthe computer language shootouts) and remember the computer language shootout compares programs - maybe the programs aren’t as good as they could be… comment at 01.
computer are getting faster and at some point in time you can even affort a 100 times slower language to gain some comfort.
in particular, all the data visualization, user interface front-end stuff
python can do many of the same tricks…and choice is good.
attempt to insinuate that all languages without an explicit compilation step are not to be taken seriously and that they are all equivalently shitty.
but none of them attempt any serious breadth in the application domain it’s hard to determine what kind of breadth is missing when you consider the capabilities provided by modern dynamic language environments, the platforms they run on, and the extensions and bridges that allow them to use damn near any other program or library available.
the troll patrol may take me away, now.
smalltalk is pretty damn fast these days â without type declarations.
update: seo sanghyeon provides a list of popular python related applications that have nothing to do with generating web content.
these languages are severely limited (which is exactly why the monthy python skit presenting emily bronte’s “wuthering heights” with actors using flags for semaphores to engage each other in a dialog is so hilarious).
in the java 6.0 , we’re going to have javascript (aka rhino from mozilla) included so perhaps “scripting languages” will get better and better on the jvm.
march 2006 baptiste: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air transport and nuclear powerplants” comment at 13.
thats not that bad, such kinds of languages are usefull and neccessary.
thanks partly to some ill-advised comments from james gosling (and other "thought leaders" (snigger)) on the ruby language, it looks as if there’s some real bad blood between the ruby and java camps at the moment.
thats not bad for a scriping language, because performance isn’t relevant for scripting purposes as long as it don’t takes an eternity.
and even so, they can’t stand against apache speed-wise.
the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, which brings us back nicely to james gosling’s recent statements.
when someone unfamiliar with modern dynamic languages and experienced in java hears someone say, “they’re scripting languages, and get their power through specialization,” they are being misled into thinking that these languages are like bash and can be used only for a single specialized scenarios, which is obvious not the case: they can be constrained and specialized as much or as little as required and become useful in multiple specialized scenarios.
specialization and enhanced capabilities related to generating and serving hyper-media over http are and will continue to increase in value.
march 2006 twifkak: george said: and if someone thinks i’m trolling along, please feel free not not to read my posts.
i think the future lies more in statically typed languages with very sophisticated type-systems which give you much more expressive power then the type system of languages like java has.
okay, distilling all these into such a little sentence like gosling did has a taste of fud, but nevertheless gosling may have relied on the fact that people who read his interview are a little bit technically educated (and even i did not point out anythingthat new until now either).
in some strange way helsberg seems to have a better grasp of this than gosling (strange in a turbo pascal v. emacs way), as evidenced by c#’s haskell inspired linq stuff.
everybody can create dynamically typed languages - it’s in fact totally simple.
so solutions could be dynamically provided, if needed, and so that the basic code would be smart.
lastly, peter yared (former sun hacker) and the rest of the folks over at activegrid should also be interested to learn that no one is attempting to widen the viability of dynamic languages in the “application domain”.
it turns out thatselectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.
this makes them bad candidates for the typical “script-based” (by your definition) cgi.
when someone unfamiliar with modern dynamic languages and experienced in java hears someone say, “they’re scripting languages, and get their power through specialization,” they are being misled into thinking that these languages are like bash and can be used only for a single specialized scenarios, which is obvious not the case: they can be constrained and specialized as much or as little as required and become useful in multiple specialized scenarios.
when nasa wanted a space ship to navigate under its own autonomous control for the first time (deep space i, in a planetary shadow), it had the ship’s computer run dynamic lisp code.
when he specifically says that breadth is not there in the other languages, you should not jump to conclusions about his motives.
dynamic language during development, compiled when it is time to deploy.
(smalltalk is included on one ofthe computer language shootouts) and remember the computer language shootout compares programs - maybe the programs aren’t as good as they could be… comment at 01.
java is a well known memory hog, but if you substract the usage of the vm and the loaded standard-libs (which takes more space then the optimized libs for ruby for example which are written in c) you see that java uses noticable less space then ruby for most oo-based applications.
with dynamic programming languages but none really worked for a wide range of real programs.
but of course no one here knows that, because its not about truth, its only about hype.
march 2006 carl: you can write the java vm in java too, the problem is the bootstrapping, because no os can execute java by itself, so you need at least some loader in assembler.
this seems strange, because one of the three main reasons* i chose to learn ruby is because of the amount of interest it’s generated in the .net world recently - i just haven’t seen any hostility from the .net people towards ruby, but i’ve seen stacks of it from rank-and-file java developers.
no one is suggesting he champion, support, or advocate anything, just that he stop spreading information that’s provably incorrect.
while describing the sort of system that i was envisioning a coworker mentioned that what i was saying sounded like jini, that java related technology that never really seemed to get going.
but php has such weak metaprogramming facilities that i wouldn’t use it for anything other than its main domain, and even that is just because of its ubiquity.
the combination of applying stalin-like compilation to partially-closed-world modules, with anamorphic-like hot spot code generation, etc. could combine to get overall great results.
that doesn’t make it bad, it just makes it limited to that specific problem domain.
you avoid most (but not all) of the drawbacks of static typing while getting all the benefits of static typing despite only rarely specifying an explicit type â€“ yet the compiled code isfaster than c++.
but php has such weak metaprogramming facilities that i wouldn’t use it for anything other than its main domain, and even that is just because of its ubiquity.
respectful debate, honesty, passion, and working systems created an environment that not even the most die-hard enterprise architect could ignore, no matter how buried in java design patterns.
the number of customers i run into who think they have “scalability” issues is mindboggling huge.
march 2006 denyerec: i believe chunks of the game eve online are coded in python and that, clearly, involves interplanetray navigation.
one year ago, this type of behavior could be attributed to a lack of documentation and discussion on these issues, today it’s impossible to attribute to anything but malice.
march 2006 carl: you can write the java vm in java too, the problem is the bootstrapping, because no os can execute java by itself, so you need at least some loader in assembler.
april 2006 paul: i guess you could classify apache as middleware, but the scripts like php aren’t really doing the middle job, apache is.
the right tool for the right people for the right job.
so this comparison of java and lisp is more the result of where compiler developers put their effort than on anything inherent in the languages per se.
the thing is, as you point out in your article, the knowledge that this is spew is well-documented.
that doesn’t make it bad, it just makes it limited to that specific problem domain.
they don’t need the xml languages, [though] the java code ends up looking even uglier than the xml files.
it’s important that the reader not be exposed to the concepts separating scripting languages like bash, ms-dos batch, and perl-in-the-eighties from general purposedynamic languages like ruby, python, smalltalk, and perl present day.
in comparission: i’ve benchmarked tomcat against apache on my system and to my own surprise tomcat came out noticeable faster - even if i tested only the delivery of static content.
march 2006 baptiste: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air transport and nuclear powerplants” comment at 13.
march 2006 twifkak: george said: and if someone thinks i’m trolling along, please feel free not not to read my posts.
contrast that with static languages, where you are forced to create a completely separate “scripting language” when you need to provide a constrained/specialized language (this is why xml is used so heavily in java for things like o/r mapping, dependency injection, configuration, build processes, etc. — xml is java’s scripting language).
it works best if you do numerical programming because stalin detects some common usage patterns and creates optimized code for those patterns.
the parts in java can scale to dozens or more computers simply by using the facade pattern with stateless session beans calling pojo’s.
even assembler is dynamically typed.
look, dynamic typing is as old as programming languages.
that’s because the jsp expression language is a dynamic language, albeit not a general purpose one.
we all know that ruby/python can be used for 80% of the applications that java can be used.
the last item in this blogger’s transcript gives different source text for the same question & answer - parse away.
but ruby or php are hideous slow compered to java in most benches.
respectful debate, honesty, passion, and working systems created an environment … the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, so this is what respectful debate looks like?
so this comparison of java and lisp is more the result of where compiler developers put their effort than on anything inherent in the languages per se.
in comparission: i’ve benchmarked tomcat against apache on my system and to my own surprise tomcat came out noticeable faster - even if i tested only the delivery of static content.
i think the reason is that in ruby each object is implemented as a hash-table, while in java objects are implementes like c structs.
it is perfectly possible to write a webserver in pure perl, python or ruby, and in fact rails and catalyst ship with such included for development purposes (although neither is not particularly optimised or feature-complete, so is not recommended for actual deployment).
however, you can pin the types down retrospectively as needed, instead of burdening yourself with a static type system during development.
for example trex (a search engine), it even includes a python tcl gui.
we’ve tried our best to clear up any ambiguity related to the term “scripting language” in the past: and get their power through specialization: they just generate web pages.
i think bash is a good example of a specialized “scripting language”.
if not, php is only usable for scripting or with other words for glueing componentes together.
i’ve seen excellent db admins who think that pl-sql is the only language you should ever write in.
furthermore, many, many, many, many, many, many, many, many, many java programs are run as a “script.”
in lisp you can type your program statically to improve performance (look at ‘declaim’, ‘declare’ and ‘proclaim’ functions) and if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
someone needs to tell gosling his baby was ugly then, and even uglier now.
all i wanted to point out is that it is the same for me how the script is executed.
i’ve had1 customer in 10 years who had a real challenge.
change the context, and the interpretation of the language constructs changes.
i’ve seen excellent programmers who think that all their code performance problems are because the network is slow.
later some people found out that maybe they don’t need that whole j2ee monster, maybe simple java objects are enough… comment at 13.
furthermore, many, many, many, many, many, many, many, many, many java programs are run as a “script.”
a compiled language may offer very little capabilities, and a scripting language may offer much more capabilities, and vice versa.
no reason to waste time on him, other than for the amusement value.
its implemented this way in the jnode-os, a pure java os with drivers, vm etc totally written in java.
java itself is evolving probably better than other languages and it has the best api you need.
only exceptions are benchmarks where most time is spend in libs like regular-expression-matching or simmilar.
gosling shows his ignorance regarding the current feature set provided by dynamic languages and what people are using them for.
the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, which brings us back nicely to james gosling’s recent statements.
along the way, the article churns out a very long list of links to sites and blog posts containing ammo for fighting the java crowd (and their associates over at c# central, etcetera ).
any piece of ocaml code can operate on different types much like code in dynamic languages, but the compiler checks that the types it is invoked with are compatible with regard to the operations performed.
if you look at alle those examples of successful usage of those languages you see, thats they are always uses as glue.
in lisp you can type your program statically to improve performance (look at ‘declaim’, ‘declare’ and ‘proclaim’ functions) and if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
it’s important that the reader not be exposed to the concepts separating scripting languages like bash, ms-dos batch, and perl-in-the-eighties from general purposedynamic languages like ruby, python, smalltalk, and perl present day.
actually, he does: for the command and control system, big parts of it are this rather large java application.
the argument holds water only because the the php interpreter is tied to a webserver, which makes it practically impossible to write dæmons.
dynamic language during development, compiled when it is time to deploy.
smalltalk is pretty damn fast these days â€“ without type declarations.
it’s fast enough for a wider range of applications compared to ruby - and it’snot a scripting language.
blog archive » about java: […] personally i don’t like java because it seems like a just product of high-quality pr.
but not everybody is able to crate a powerfull and expressive type system like for example a language like haskell has.
you say james gosling is ignorant of the many different things that php and ruby are used for (he mentions php 7 times, ruby 1, python 1, perl 0) because he characterizes them as languages that just generate web pages.
but dynamic typed languages like ruby won’t be the future too.
i’ll quit before this becomes a paul graham post, but suffice it to say, gosling would do well to familiarize himself with what ruby gets right.
same for perl which is also faster then ruby and php.
james, who as you may know has had some problems recently with the dynamic language community had some interesting things to say about the way programmers use the language he designed.
radlab, scripting and scale, a blog entry by gosling saying the exact same stuff and a comment thread full of people correcting gosling’s dated evaluation of dynamic languages.
they are compiled and loaded into the virtual machine where they reside for the applications lifecycle and can interact with the complete jvm.
so, english is a general-purpose natural language.
any piece of ocaml code can operate on different types much like code in dynamic languages, but the compiler checks that the types it is invoked with are compatible with regard to the operations performed.
it turns out that selectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.
java kicks ass because of the jvm.
march 2006 thought leadership: why ruby doesn’t matter… you may have noticed that pretty much everyone in the ruby camp are insultants with many of them being book authors attempting to capitalize on hype.
sure enough, in backoffice 2000 server’s license (for example), i found: note on java support.
“php and ruby are perfectly fine systems,” he continued, “but they are scripting languages and get their power through specialization: they just generate web pages.
noone would use a dynamic language in a team of 30 developers in a company with a beaurocratic mindset.
just as cobol development continued after its natural life, so will java. rest and wsdl will let us still use java on life support until we replace it!
march 2006 toby: baptiste wrote: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air transport and nuclear powerplants”
by changing the jsp file, the container (like tomcat) recognizes the changes, re-compiles and re-loads it only once for further use.
i knew that several hugely popular web 2.0 applications were written in scripting languages like php, so i contacted owen byrne - senior software engineer at digg.com to learn how he addressed any problems they encountered during their meteoric growth.
a cursory glance over rubyforge.org’s project tree reveals that the number of projects that “just generate web pages” are really quite small: 151 of 1,342 total projects are registered underinternet::www/http::dynamic content and many of those projects are related to using the web (http/uris) as a platform for integration more than they are for “generating web pages”.
something that is high on my list is a better conceptual model for dealing with multiple processors.
a cursory glance over rubyforge.org’s project tree reveals that the number of projects that “just generate web pages” are really quite small: 151 of 1,342 total projects are registered underinternet::www/http::dynamic content and many of those projects are related to using the web (http/uris) as a platform for integration more than they are for “generating web pages”.
of course the stalin approach to java would pay off about as well as for scheme.
we don’t need to prove him wrong with articles and blog posts.
they don’t need the xml languages, [though] the java code ends up looking even uglier than the xml files.
sure, there are webservers written in ruby and python - but without big parts of the libs written in c those would be unbearable slow.
only there, because of the highly optimized c version in the runtime-lib php and ruby can perform similar to the java-implemented re-lib in the java-standard-libs performance wise.
it turns out thatselectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.
[snip] … they just generate web pages”.
so whilst it may not be trendy, it may not be open source, it may not have some word of mouth marketing scheme behind it the lack of vbscript’s inclusion in your mind’s list of scripting languags may show more snobbery than gosling.
lastly, peter yared (former sun hacker) and the rest of the folks over at activegrid should also be interested to learn that no one is attempting to widen the viability of dynamic languages in the “application domain”.
peace and all be happy… just to add another use of dynamic languages in big corps: python for example is used by sap for internal it automation.
march 2006 erikh: i still think that all of this language war stuff is malarky.
everybody can create dynamically typed languages - it’s in fact totally simple.
simply because they are only useful as ‘glue’ between programs which do the real work.
the real reason dynamic compilation exists is that it makes changing code more flexible than when precompiled.
but then you’d have to wonder why the language was so less expressive.
if you look at alle those examples of successful usage of those languages you see, thats they are always uses as glue.
for example trex (a search engine), it even includes a python tcl gui.
it’s obvious why this costs much more memory - but it’s not obvious how ruby can made more optimal without totally redefining its runtime semantics.
we are now free to dismissany technology that lacks “interplanetary navigation” features.
beyond the buzz and fud, scripting and dynamic are just features of the language.
serving web pages is the meat of internet applications, enterprise applications, software as a service.
i have been programming for 26+ years and try to learn a new language every year.
it works best if you do numerical programming because stalin detects some common usage patterns and creates optimized code for those patterns.
to see something that might be cast in a more familiar “middleware” light, check outactivegrid.
http://proprietary.clendons.co.nz/licenses/eula/backoffice2000server-eula.htm interesting, but i guess nobody reads licenses anyway.
you are effectively saying that java does not have the facilities necessary to create dsls which can express configuration more tersely than xml.
this is stuff used by thousands and thousands of people on a daily basis internally (and the sap it is something that actually works..
from what i recall, it was real-time image analysis logic that helped one satellite automatically maneuver itself into connecting with another, via video camera.
dynamic language designers shouldn’t forget that computers are still very much valued in their ability to do computations (hence the name!)
dynamic languages are making a resurgence, not a comeback since they never really went away, and for many it will be a good, productive and profitable time.
they are only saying that dynamic-lanugages can scale as well.
that doesn’t make it bad, it just makes it limited to that specific problem domain.
in everyday situations we also see a number of specialized languages (non-programming languages), that are constrained and therefore limited in one way or another.
actually, he does: for the command and control system, big parts of it are this rather large java application.
from their point of view there are not anything noteworthy except perfect, brilliant, ideal java!
yes, you can have dynamic languages which are faster - but even smalltalk and lisp can’t compete to java normally.
i think the reason is that in ruby each object is implemented as a hash-table, while in java objects are implementes like c structs.
scalability: the j2ee guy still doesn’t get php ibm poop heads say lamp users need to “grow up”
look at the actual shootout-pages for benchmarks.
even the hypothetical future interplanetary staff, which he dragged in as his crown argument, will be writing scripts instead on relying on statically typed java applications to guide them while they hurl through the space.
i believe that a majority of people in it now consider dynamic languages like perl, ruby, python, and php to be very much capable of sitting at the table with java and .net for a wide range of common technical problems.
responses from ruby followers in particular indicated the language does have the scalability and power to build more than web “just” applications.
serving web pages is the meat of internet applications, enterprise applications, software as a service.
i’ve seen excellent programmers who have no idea why their software turns a high-end oracle rdbms server into an expensive brick.
this is not to claim superiority for a given task, just that the competitive playing field is beginning to level off.
i know, there are people refuse to see those both last points and see static typing only as a burden, not as a means to help you even in the design process.
the last item in this blogger’s transcript gives different source text for the same question & answer - parse away.
the argument holds water only because the the php interpreter is tied to a webserver, which makes it practically impossible to write dæmons.
we just need to keep successfully building real, working systems using the tools that we feel are appropriate.
march 2006 bertus: alex bunardzic wrote: if i define a certain player as being a type, and ive made a decision to cast that player as a type while i was being governed by the contextual circumstances, when the context changes, that type will have a hell of a problem getting out of the cast.
and lisp as one of the oldes higher-level lprogramming language is also dynamically typed.
thats not bad for a scriping language, because performance isn’t relevant for scripting purposes as long as it don’t takes an eternity.
by that token, java must be a scripting language, since running a java vm written in java inside a java vm would be very slow.
since due to development in many opensource projects such fop , xml , apache , eclipse and opensympony will lead java to be the king of internet kingdom !!
he was showing off to me some code he had helped write that — guess what —actually did interplanetary navigation.
you can pin the types down retrospectively as needed, instead of burdening yourself with a static type system during development.
more relevantly, perhaps, is that the bug which needed to be addressed concerned a race condition due to the concurrent nature of the software, not any of the type-safety or other shallow bugs that might be addressed by adopting java instead.
if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
march 2006 a bigger soapbox [@lesscode.org]: […] sys-con media publisher/editor jeremy geelan, a fine chap who interviewed the father of java just the other day, contacted me about re-publishing gosling didn’t get the memo on sys-con.com.
people don’t, however, because the java code ends up looking even uglier than the xml files.
in other words, i could walk into most shops during a technology evaluation and put these technologies on the table as legitimate considerations without being too worried about being laughed out of the room.
not: they just generate web pages.
as long the language really has to do the work on itself, php and ruby and to a lesser degree python are very slow.
and please note, that the java answer was not always pojo.
at the idea ms would slip this into a eula, that i had to verify it.
my aging brain recalls very simular emotional arguements from lisp vs. fortran advocates.
for many of the config files i can think of — log4j, hibernate, ant (if you’re some sort of nutty nut girl who’s nuts) — you can programmatically configure them in java code.
so it’s sometimes hard to separate the specialized pieces from the general purpose pieces.
if you want to do ruby-like metaprogramming or dynamic class loading and creation like in java, its approach won’t work.
but we know(from the 80/20 rule) that the only 20% of the journey is done when you say that 80% work is done.
all things have a certain price: in ruby the price of the comprehensive runtime meta programming is a increased memory consumption and a reduced performance.
i generally use the libxml2 bindings for perl rather than pure-perl xml parsers to do xml processing; the extra speed is a nice bonus, but the real reason is that building a dom for even a moderately large xml document using perl data structures consumes mindboggling amounts of memory.
i’ve seen excellent programmers who have no idea why their software turns a high-end oracle rdbms server into an expensive brick.
i think my general point is that if you only think of a compiler as something like what kernighan and ritchie developed thirty years ago then, no, c or java will almost always out perform ruby for sufficiently cpu-bound examples.
but on the other hand i do not have to read“effective java advocacy beans”, section 6.8.3 to see another kind of fud raising on.
i can’t for the life of me understand why someone is upset that the father of java still prefers java, i’d be more surprised if he’d prefer something else.
because of its runtime model which is very different from the runtime model of ruby.
the product may contain support for programs written in java.
the parts in java can scale to dozens or more computers simply by using the facade pattern with stateless session beans calling pojos.
i’d also like to note that exposing resource representations via http/urls has been moving into areas other than “generating web pages”.
and if someone thinks i’m trolling along, please feel free not not to read my posts.
march 2006 petrilli: the reality is that large chunks of mission control @ nasa as well as the space telescope sciences institute (the people who run the hubble) use python to manage their missions to interplanetary destinations.