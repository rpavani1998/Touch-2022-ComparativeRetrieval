microsoft introduced asp in  ‘97 and then sun, playing catch-up to microsoft, introduced jsp in  ‘99.
and it’s ubiquitous for a reason: it makes sense.
this problem will subside, though, as code editors  get hip to razor (happily, my favorite editor,vim has already got razor syntax  support, though you’ve got to work for it a little bit).
view posts by del olds view posts by john skelton view posts by tom paul view posts by steve rosenbaum view posts by dave selden view posts by lorien steele view posts by sho ito view posts by christine herb view posts by allison thompson view posts by george winborn view posts by ethan brown view posts by lulu cohen view posts by dylan hallstrom view posts by jamie jeffers view posts by emily passmore view posts by stephen leineweber view posts by jake neilson razor is better.
but after thinking about it, i decided it’s actually a bad thing — in blurring the line between html and your server-side language, you’re losing sight of the fact that they are indeed two very different things.
but if you wanted to do something as simple as,  for example, displaying the current date, you were pretty much out of luck  until the common gateway interface (cgi) was introduced in 1993.
whatis exciting is that your html is a lot easier to read.
aesthetics aside, are there practical, tangible benefits?
in preparing for my five-minute presentation at pop art, i did a little  analysis to see exactly how many fewer characters you’d end up typing  with razor, and i found you’d end up typing as much asten to twenty  times fewer fiddly punctuation characters in your razor code.
it’s easier to indent, it looks cleaner, it flows  better…it’s justprettier.
well-written, with some very illuminating  explanations (lots of “ah-hah!”
we wrote our dynamic websites, but we did it with c and perl.
sun brought a lot of innovations to web programming, and j2ee was the player to be beat in the late 90s, and microsoft wanted to beat that player very badly, so they answered with asp.net in 2002.
i haven’t done any research on this, but i  don’t think there’s anything to worry about here.
i know people who don’t.
i checked them both out, and they’re both very  interesting in their own way.
it’s like public art: it doesn’t “serve a purpose” per se, it just makes your life more pleasant.
microsoft introduction to razor.
filed under software, web development, andrew nurse, asp.net, razor, scott guthrie.
i used for my  talk: razor view engine — 5 minutes share on twitter
that’s the bulk of what razor gives you, but  there is some new functionality that was difficult or impossible to do in aspx,  such as sections (seescott guthrie’s introduction for more information  about this).
like aspx, razor  pages are basically parsed by the web server and then compiled into a .net  binary which dynamically generates the html that gets sent to the client  browser (essentially writing automatically what we were doing by hand with cgi  back in the early 90s).
for example, you can say x is five!x is not five!.
for me, this is a small trade-off for the improved readability and flow of the razor syntax.
grab an atom feed: what is rss/atom?
the only thing you have to remember here is that iis will serve an aspx file before a razor file, so if you have “default.aspx” and “default.cshtml” in the same directory, iis will quietly serve the former.
employeemodel so you might be wondering at this point if the only improvements in razor  are semantic-aesthetic ones.
you had to know how to write a programand understand html.
i  did some research to try to figure out whoexactly said this because it  seems like a huge paradigm shift, and i would like to be able to give someone  credit…but i couldn’t find anything definite.
it didn’t really take long for someone to say “hey,  wouldn’t it be great if i could write html, and make it do dynamic  things, instead of writing code to generate html to do dynamic things.”
i can’t think of a single reason why you shouldn’t switch to  razor.
so if you really enjoy compact representation and/or you’re a huge python fan, you might really take to nhaml.
like aspx, razor pages are basically parsed by the web server and then compiled into a .net binary which dynamically generates the html that gets sent to the client browser (essentially writing automatically what we were doing by hand with cgi back in the early 90s).
it didn’t really take long for someone to say “hey, wouldn’t it be great if i could write html, and make it do dynamic things, instead of writing code to generate html to do dynamic things.”
tel: (503) 242-4292 •
like most web  developers, i was so excited by what they could do that i didn’t really  notice how badly they sucked.
asp/aspx/jsp/php often look like a comic strip character cussing and razor…well, it looksgood.
however, one could certainly make an argument that razor introduces the  opportunity for a careless designer to accidentally delete a closing brace (for  example) thinking “hey, that doesn’t belong in the html”, not  really realizing that it’s part of the server-side programming syntax.
it’s like public art: it doesn’t “serve a purpose” per  se, it just makes your life more pleasant.
i checked them both out, and they’re both very interesting in their own way.
however,there are techniques to pre-compile  every dynamic page on a web server to avoid this problem — and this is a  problem independent of razor.
for  example, you can say x is  five!x is not five!.
i haven’t done any research on this, but i don’t think there’s anything to worry about here.
i certainly think  so.
andrew nurse is one of the developers of the razor view engine, and his  blog posts contain some interesting details about the implementation of razor  for those wanting to dive a little deeper.
i did my presentation on something i’ve been meaning to blog about  anyway…something i’m very excited about: microsoft’s new  view engine, razor.
you also might ask if razor is really that new or revolutionary, and i would be remiss if i didn’t point out that there are two other .net view engines that have been around a while trying to solve the same problem as razor: spark and nhaml.
a great place to start.
but there was still a problem: the barrier to entry was pretty  high.
it was really interesting to get a more in-depth perspective on what my colleagues have been doing, straight from the proverbial horse’s mouth.
my colleague john asked a very good question: “what about  performance?”
work with us in the shiny new office!http://t.co/mdpamynr 2 days ago the pop art blog is our ongoing social media mash-up, designed to bring our part of theportland, oregon interactive marketing world to you.
first, a little history.
the world wide web was the wild wild west, and you had to be pretty good with a six-shooter if you wanted to play.
look around and leave a comment or two.
html looks like  html, and dynamic syntax is fairly unobtrusive.
at first this struck me as an excellent idea: making editing dynamic html more like, well, editing html.
come see 'em tonight with @ stlandau @jerryketel @theandy at free paf event: http://t.co/wu988y8e 2 days ago we'd like to remind you about our two opening positions: ios dev & pm.
at first this struck  me as an excellent idea: making editing dynamic html more like, well, editing  html.
normally, the compilation of the aspx/razor pages (jsp works the same way) is done on a “just in time” (jit) basis, so the first time you hit a page, it takes a while while the server compiles the page.
it addressed all the things that i knew sucked about aspx, and a few more that i didn’t.
however, one could certainly make an argument that razor introduces the opportunity for a careless designer to accidentally delete a closing brace (for example) thinking “hey, that doesn’t belong in the html”, not really realizing that it’s part of the server-side programming syntax.
this has been a long post that i’m going to wrap up here, but before i go, there’s one more comforting thing i want to say about razor for those of you out there maybe a little daunted by the idea of converting all of your aspx pages to razor pages: you don’t have to.
i did some research to try to figure out whoexactly said this because it seems like a huge paradigm shift, and i would like to be able to give someone credit…but i couldn’t find anything definite.
well, not many: i think it’s a  huge improvement over php/jsp/asp/aspx and cleaner (to me) than spark or nhaml.
here’s the powerpoint presentation (i know, i know!)
by ethan brown, software developer comments on this entry are closed.
i used for my talk: razor view engine — 5 minutes posted on june 22, 2011.
for example, our front-end developer uses a mac, and i’d be surprised if his editor ( coda) supports razor syntax.
now here we are in the present day (2011) and, for the most part, aspx and php are the lingua franca of the internet, along with some bit players like ruby on rails, jsp, and python (and i mean no offense; i know you ror and python folks are doing great work — i’m just talking sheer numbers here).
maybe this will change as technologies like html5 bring more programmatic features to html.
it’s a melting pot for the tweets, diggs, staff bios, facebook status updates and flickr photos that give you a glimpse into the daily lives of your average pop artist.
this problem will subside, though, as code editors get hip to razor (happily, my favorite editor,vim has already got razor syntax support, though you’ve got to work for it a little bit).
it could have been rasmus lerdorf, who introduced php in 1995, but that’s only supposition.
the only thing you have to remember here is that iis will serve an aspx  file before a razor file, so if you have “default.aspx” and  “default.cshtml” in the same directory, iis will quietly serve the  former.
anyway, the internet, as we know it, started somewhere between 1989 and 1991,  and we were drunk with the possibility ofhypertext, but it was mostly a  static thing: you had documents, and you had images, and they could link to  each other, and that was great.
for example,  our front-end developer uses a mac, and i’d be surprised if his editor ( coda) supports razor syntax.
i certainly think so.
this has been a long post that i’m going to wrap up here, but before  i go, there’s one more comforting thing i want to say about razor for  those of you out there maybe a little daunted by the idea of converting all of  your aspx pages to razor pages: you don’t have to.
↓ last week at our all-hands meeting, we all had to give a five-minute presentation on something we’d been working on, which i thought was a really great idea.
spark has taken a very intriguing approach:  they’ve tried to make embedded server-side code look more like html.
so if it’s all so groovy, why do we need yet another “language” (i put “language” in quotes because that’s kind of misleading in this case)?
but if you wanted to do something as simple as, for example, displaying the current date, you were pretty much out of luck until the common gateway interface (cgi) was introduced in 1993.
now here we are in the present day (2011) and, for the most part, aspx and  php are the lingua franca of the internet, along with some bit players like  ruby on rails, jsp, and python (and i mean no offense; i know you ror and  python folks are doing great work — i’m just talking sheer numbers  here).
once this one-time compilation is done, razor will be  no slower (or faster) than an aspx page.
nhaml takes an approach that is perhaps closer to razor, but much more alien than either razor or spark, and makes me think more of python or ruby.
nhaml takes an approach that is perhaps closer  to razor, but much more alien than either razor or spark, and makes me think  more of python or ruby.
pop art, inc. • interactive marketing agency • 1125 nw couch street, suite 805 •
remember when the web started?
once this one-time compilation is done, razor will be no slower (or faster) than an aspx page.
i think they might even be able to drink now.
now those brilliant front-end people (hello,john!) can work their magic and make beautiful html, and then us nerdy back-end types can just drop the dynamic elements in…it’s like a well-oiled machine.
on one site i’m  working on, i’m doing exactly this: the views were originally done in  aspx, and i’m leaving them that way until i have to fix a bug or  implement a feature; i’m kind of bit-by-bit converting these views to  razor.
portland, oregon 97209
anyway, the internet, as we know it, started somewhere between 1989 and 1991, and we were drunk with the possibility ofhypertext, but it was mostly a static thing: you had documents, and you had images, and they could link to each other, and that was great.
so if you  really enjoy compact representation and/or you’re a huge python fan, you  might really take to nhaml.
however,there are techniques to pre-compile every dynamic page on a web server to avoid this problem — and this is a problem independent of razor.
it’s a very sparse syntax, and indentation  matters!
flashes of pop, wit and reason skip down to page content.
on one site i’m working on, i’m doing exactly this: the views were originally done in aspx, and i’m leaving them that way until i have to fix a bug or implement a feature; i’m kind of bit-by-bit converting these views to razor.
last week at our all-hands meeting, we all had to give a five-minute  presentation on something we’d been working on, which i thought was a  really great idea.
it was really  interesting to get a more in-depth perspective on what my colleagues have been  doing, straight from the proverbial horse’s mouth.
i did my presentation on something i’ve been meaning to blog about anyway…something i’m very excited about: microsoft’s new view engine, razor.
asp/aspx/jsp/php often look like a comic strip character cussing and  razor…well, it looksgood.
it literally takes about fifteen minutes to get the hang of it, and you  can replace your existing aspx files piecemeal.
like most web developers, i was so excited by what they could do that i didn’t really notice how badly they sucked.
again, that may not seem like that big of a deal until you sit down and think about how much of this stuff you stare atevery day (if you’re a web developer, that is).
maybe this will change as technologies like html5 bring more  programmatic features to html.
our blog isn’t just for us though.
i can’t think of a single reason why you shouldn’t switch to razor.
okay, so typing fewer symbols isn’t all that exciting (after all, most programmers can hit 12,000 characters per hour or more)…maybe you’ll save an hour or so of typing on your average website implementation.
well, because asp and aspx and  jsp and php suck.
aspx and razor pages  can exist side-by-side in total harmony in your site.
you also might ask if razor is really that new or revolutionary, and i  would be remiss if i didn’t point out that there are two other .net view  engines that have been around a while trying to solve the same problem as razor: spark and nhaml.
well, because asp and aspx and jsp and php suck.
there’s no performance  hit, and your views will be a lot easier to read.
it will be a bit of a headache for a while, though.
if you’d like to stay on top of our latest posts, sign up for our rss feed and you can be the first to know what goes on here at pop art.
that’s the bulk of what razor gives you, but there is some new functionality that was difficult or impossible to do in aspx, such as sections (seescott guthrie’s introduction for more information about this).
html looks like html, and dynamic syntax is fairly unobtrusive.
sun brought a lot of innovations to web programming, and j2ee was  the player to be beat in the late 90s, and microsoft wanted to beat that player  very badly, so they answered with asp.net in 2002.
here at pop art, we’re all encouraged to be aware of what’s going outside of our own tasks, but usually that means just a general, fuzzy awareness of what people are working on.
rt @daveselden: miss some superbowl ads?
spark has taken a very intriguing approach: they’ve tried to make embedded server-side code look more like html.
if i’m writing a view from scratch, i have to constantly be thinking  about whether or not i closed that opening  and in razor: @model mvctempdemo1.models.
now those brilliant front-end people (hello,john!) can  work their magic and make beautiful html, and then us nerdy back-end types can  just drop the dynamic elements in…it’s like a well-oiled machine.
microsoft introduced asp in ‘97 and then sun, playing catch-up to microsoft, introduced jsp in ‘99.
for me, this is a small trade-off for the improved readability and flow of the  razor syntax.
normally, the compilation of the  aspx/razor pages (jsp works the same way) is done on a “just in  time” (jit) basis, so the first time you hit a page, it takes a while  while the server compiles the page.
php  became incredibly popular, and microsoft, among others, recognized the  importance of this approach, and imitated it.
whether the idea came from rasmus or not, it was clearly a big hit.
(i’m not one of those anti-”indentation as syntax” zealots, but it doesn’t really thrill me in this context.)
in the back of my head, i knew it…and in  those moments of clarity, when i was trying to untangle a snarl of  tags mixed in with c# mixed in with html, i would think  “wow…this sucks.”
i’m more practical: i think people are really comfortable with html, so i prefer the approach taken by razor.
well, not many: i think it’s a huge improvement over php/jsp/asp/aspx and cleaner (to me) than spark or nhaml.
again, that may not seem like  that big of a deal until you sit down and think about how much of this stuff  you stare atevery day (if you’re a web developer, that is).
so, do i see any downsides to razor?
okay, so typing fewer symbols isn’t all that exciting (after  all, most programmers can hit 12,000 characters per hour or more)…maybe  you’ll save an hour or so of typing on your average website  implementation.
it’s easier to indent, it looks cleaner, it flows better…it’s justprettier.
my colleague john asked a very good question: “what about performance?”
popart-1 • fax: (503) 242-2491 a pop art® production.
the world wide web was the wild wild west, and you had to be pretty good  with a six-shooter if you wanted to play.
whatreally drove it home, though,  was seeing something better, and that something was razor.
what’s interesting is not which dynamic languages are most  popular; what’s interesting is thatserver-side code embedded in html  is ubiquitous.
here at pop art, we’re all encouraged to be aware of  what’s going outside of our own tasks, but usually that means just a  general, fuzzy awareness of what people are working on.
we wrote our dynamic websites, but we  did it with c and perl.
it’s a very sparse syntax, and indentation matters!
whatis exciting is that your html is a lot easier to  read.
what’s interesting is not which dynamic languages are most popular; what’s interesting is thatserver-side code embedded in html is ubiquitous.
it literally takes about fifteen minutes to get the hang of it, and you can replace your existing aspx files piecemeal.
but there was still a problem: the barrier to entry was pretty high.
employeemodel so you might be wondering at this point if the only improvements in razor are semantic-aesthetic ones.
i’m more practical: i think people are really  comfortable with html, so i prefer the approach taken by razor.
it addressed all the  things that i knew sucked about aspx, and a few more that i didn’t.
a lot more sense than having elaborate perl libraries for generating html (and oh yes, i remember those days).
but after thinking about it, i decided it’s actually a bad thing  — in blurring the line between html and your server-side language,  you’re losing sight of the fact that they are indeed two very different  things.
in the back of my head, i knew it…and in those moments of clarity, when i was trying to untangle a snarl of  tags mixed in with c# mixed in with html, i would think “wow…this sucks.”
aspx and razor pages can exist side-by-side in total harmony in your site.
so if it’s all so groovy, why do we need yet another “language” (i put “language” in quotes because  that’s kind of misleading in this case)?
whatreally drove it home, though, was seeing something better, and that something was razor.
i’m not going to explain razor here; other people have done a far better job of that than i would, so i’ll direct you to them insetad: in preparing for my five-minute presentation at pop art, i did a little analysis to see exactly how many fewer characters you’d end up typing with razor, and i found you’d end up typing as much asten to twenty times fewer fiddly punctuation characters in your razor code.
(i’m not one of those anti-”indentation as syntax”  zealots, but it doesn’t really thrill me in this context.)
i’m not going to explain razor here; other people have done a far  better job of that than i would, so i’ll direct you to them insetad: microsoft developer scott guthrie’s excellent introduction to razor.
php became incredibly popular, and microsoft, among others, recognized the importance of this approach, and imitated it.
there’s no performance hit, and your views will be a lot easier to read.
if i’m writing a view from scratch, i have to constantly be thinking about whether or not i closed that opening  and in razor: @model mvctempdemo1.models.
a lot more sense  than having elaborate perl libraries for generating html (and oh yes, i  remember those days).