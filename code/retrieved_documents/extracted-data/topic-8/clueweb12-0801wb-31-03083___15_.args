general performance improvement for 1.9 is looking to be about 150% to 200% for most applications, based on more real world test cases.where you could make your program run tree times faster by changing the vm from python to ruby, you could have made it a million times faster by changing the algorithm.a good choice of algorithm is far more important than language implementation.doing the same thing when it comes to comparing two different languages however, leaves much more room for error.i guess having a compiler (which can compile things entered interactively!) is a bit of an advantage.python is the best solution for my current situation, but i admire ruby.)reply i imagine that like many i’m skeptical about the true level of improvement, i’m eager to see some more thorough benchmarks but still, assuming it’s not a one off thing, that’s a pretty impressive speedup and could end up making ruby much more competitive as an enterprise-level language.you just need to use right tools for right tasks.i am not impressed by the results of this micro-benchmark (probably because i’m well-informed regarding ruby 1.9); it’s always been well-known that 1.9 can be over 5 times faster than ruby 1.8 in such simplistic tests (in this case, the gains come mainly from the integer op optimizations introduced in yarv).so, you might be cutting down some milliseconds off each request once that request gets heard, but you might also be dramatically increasing the time before an apache process actually deals with a specific request.now it’ll be very interesting to run a series of algorithmically equivalent tests for ruby and python, and to see just when exactly ruby 1.9 manages to knock python out of the water – and where python has still the edge.you have an excellent cpu there, but running the python script in under a second seems like an unrealistic result.in fact, the leading python framework (django) says in their documentation that it’s memory and not processing power that makes the difference.the point i am trying to make, is that real-world performance has very little to do with the speed of the python or ruby interpreter measured in micro-benchmarks.i like python because the standard library is great and it has built in unicode support.reply andrew ingram says: november 28, 2007 at 7:46 am i imagine that like many i’m skeptical about the true level of improvement, i’m eager to see some more thorough benchmarks but still, assuming it’s not a one off thing, that’s a pretty impressive speedup and could end up making ruby much more competitive as an enterprise-level language.