but python pulls off the delicate balancing act of working well as a trade language where a programmer can be productive very quickly after starting, and having room to grow for those programmers who are able to experience it more like a native language.it has been suggested that top-notch perl programmers are slightly more productive than top-notch python programmers, and if you were to speak a computer language natively, perl would be an excellent choice.while simplicity is important in python, python is a multiparadigm language (like many others, including ocaml and javascript as well as perl) and directly supports procedural, object-oriented, and (in part) functional programming, letting the programmer choose what works best for a situation.normally people who discuss usability discuss making a system usable for nontechnical end users, but there is such a thing as usability for programmers; a good chunk of python's attraction is that it shows meticulous attention to detail in the usability it provides to programmers.because in python we are effectively "running the source code," this usually means a faster feedback cycle than the edit-compile-test process one uses in working with a c application.in python, a ternary operator like a > b and a or b can malfunction if its middle argument is falsy; it is more robust to write (a > b and [a] or [b])[0], at a significant cost to pythonic ease in reading and understanding.in working on the web, there may be ideal input that you intend, but both from a usability and a security perspective you need to be able to respond appropriately to input that was not what you intended.for the web, frameworks like django, turbogears, and web2py offer significantly greater power with less work in more truly pythonic fashion.now python does have compiled bytecode, and it is possible to get an implementation of python that runs on a java vm or creates a standalone executable, but distributing a python program or library usually means distributing the source code.it is a truism that code is read many more times than it is written, and write-only code is very much "the dark side of code maintainability."this kind of thing is very appropriate in dealing with the web, where you should assume that input is inappropriate and possibly malicious until proven otherwise.it would not be a surprise if ruby on rails or php developers were to look through this and find it speaks to how they can create a better user interface.however, i have never heard of production use of these extensions pythonically saving time and effort while making programmers more productive.the enormous english vocabulary with so many ways to say things, and the broad collection of idioms, are tremendous tools for the skilled english communicator.the code samples peppering this chapter are intended to simply illustrate basic features of the language; once you get up to speed, it's not so much that you'll have better ways of doing what that code does, as that you'll have better ways of avoiding doing that, using python more like a magic wand.