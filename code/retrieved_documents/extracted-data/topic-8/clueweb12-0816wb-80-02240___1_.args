the reflection api is one of the powerful features of php to analyze the internal structure of interfaces, classes, and methods and reverse engineer them.languages like c++ and python allow us to inherit from multiple classes which solves this problem to some extent, and mixins in ruby allows us to mix the functionality of one or more classes without using inheritance.reflection the reflection api is one of the powerful features of php to analyze the internal structure of interfaces, classes, and methods and reverse engineer them.instead of having complex semantics, they provide us with a light weight mechanism for code reuse.they allows us to horizontally reuse code across independent classes in different class hierarchies.it’s not multiple inheritance and so still wouldn’t allow quite the logical structure that one might look for in certain scenarios, but it’s a massive benefit nonetheless.though there are some drawbacks with traits, they certainly can help improve the design of your application removing code duplication and making it more dry.conflict resolution and aliasing when using multiple traits there may be a situation where different traits use the same method names.but in php it can sometimes be difficult because of the limitations of the single inheritance model it uses; you might have some methods that you would like to use in multiple classes but they may not fit well into the inheritance hierarchy.they let programmers reuse code fragments horizontally across multiple classes which do not have to be within the same inheritance hierarchy.php 5.4 allows us to have traits composed of other traits so that we can include only one instead of a number of traits in all these classes.as the application grows, it’s quite possible that we will have a set of traits which are used across different classes.for example, php will give a fatal error if you try to run the following code because of conflicting method names: play(); such trait conflicts aren’t resolved automatically for you.as traits are completely flattened into the class composed of them, any property or method of the trait will become a part of that class and we access them just like any other class properties or methods.unlike traits in scala, traits in php can have a constructor but it must be declared public (an error will be thrown if is private or protected).