we could legitimately follow a convention that a member  with a leading underscore in its name, _
it is not at all something to be taken for granted that you can travel twenty miles and order food and basic necessities in your native language.
in other words, an exception is only appropriate for a very  rare case when something very unusual has happened.
explicit is better than implicit.
the list, denoted by square braces ("[]") and tuple, which is often surrounded by parentheses ("()") even though it is not strictly denoted by them unless a tuple is empty, both contain an ordered list of anything.
[] for tag in re.findall(ur' 0] lambdas, anonymous functions close to the lambdas of functional  programming, are commonly used with filter, map, and reduce: >>> numbers =
now python does have compiled bytecode, and it is possible to get an implementation of python that runs on a java vm or creates a standalone executable, but distributing a python program or library usually means distributing the source code.
previous influential languages to use significant whitespace include cobol and fortran, which are known by reputation, a reputation that survives in sayings like, "a computer without cobol and fortran is like a slice of chocolate cake without ketchup and mustard," "the teaching of cobol cripples the mind.
if invoked like parse(text),  it will default to 0 in the case of a parse failure; if invoked like  parse(text, 1), it will default to another value, such as 1, and if invoked  like parse(text, none), the result can be examined for a parse failure: it will  hold an integer if parsing was successful and the (non-integer) value none in  the case of failure.
c would be a scientific scalpel, molecular sharp: the  most exacting precision you can get unless you go subatomic with assembler or  machine language, but treacherously slippery and easy to cut yourself with,  something like the scientific-use razor blades which came in a package  labelled: "warning: knife is extremely sharp.
and people listed legitimate flaws with django and legitimate reasons they use other alternatives, but one developer got over thirty upvotes with a response of, "yeah, i am an honest guy, and the client wanted to charge by the hour.
python does not require you to do object-oriented programming, but in python everything is an object.
unlike a normal list where you should be able to get things in a  fixed order, elements in a dictionary should not be expected to be in any  particular order: nothing in the dictionary's job description says that it  should give back first the name, then the phone number, then the email.
answer the door and meekly explain to nice police officer that you didn't  know jr. had slipped out of the house and was heading for the street.
suppose further that you want to get  the integer out of the string, but default to 0 if parsing fails (for instance,  u'one' will not be parsed as an integer).
if you have more than one pet, this method will place a line break between each sentence.
measure 1/3-cup cocoa.
and in fact the essay "why python?" in which eric raymond said that python's significant whitespace made the first impression of a "steaming pile of dinosaur dung", goes on to give python some singular compliments, saying of one particular good experience with python, "to say i was astonished would have been positively wallowing in understatement.
what if we wanted to make the member field private?
if cat: result.append(u'i  have a cat named ' + cat + u'.')
(or a function can  explicitly return none).
however, i do advocate the use of a serious, noteworthy "python++"  framework and not the standard library alone: the cgi module works entirely as  advertised, but the difference between python + django + pinax and just python  with the cgi module is comparable to the difference between python with the cgi  module and programming on bare metal in c.
if you pair the numbers like that, you have 50 pairs that have the same sum, 101, and so the grand total has to be 50 * 101 = 5050.
flat is better than nested.
as opposed to c and c++ which are compiled to a standalone executable (or library, etc.), python is interpreted from a script's source file, or more precisely compiled to a bytecode.
there are some cases where the backslash is optional and discouraged: in  particular, if you have open parentheses or square/curly braces, python expects  you to complete the statement with more lines: stooges =
for some python software such as cherrypy, if you make a change in one of your source files, the application immediately reloads it without needing separately quit and restart, making the feedback cycle even shorter and more responsive.
so, if you ask for the number  that google is named after, ten multiplied by itself a hundred times, python  will handle the request correctly:  1), then why not n+1?
now is better than never.
few features in python are absolutely unique, and python did not pioneer  the concept of significant whitespace.
if you are going to make a web interface that allows the user to upload files, you don't want to say, "i don't know exactly how many the user will want, so i'm deciding five is probably enough;" you start with one file upload input and add a button that creates another file upload input, and lets the user keep adding as many files as are wanted.
ask, "how does python already solve my problem?" and  "what python language feature most resembles my problem?"
simple is better than  complex.
the bad way is: sum = 0 for number in range(1, 10000000001): sum
although never is often better than *right*  now.
but there is a point to be made here about two different  types of spoken languages, trade languages and languages that are native  languages, that have everything to do with usability.
we could legitimately follow a convention that a member with a leading underscore in its name, _
none: result.append(u'the name of the course is "' +  course_name + u'."') for student in students: result.append(student + u'  is a student in this course.')
second_number current = bottom while current >> print 10000000000 * (10000000000 + 1) / 2  50000000005000000000
%  count print u'%d slabs of spam,' % count print u'send
unless explicitly silenced.
if you want a social network and you use django and pinax, you don't have to reinvent the internal combustion engine either, or power steering, or antilock brakes, because they are all included in standard packages for a car or truck.
apply antiseptic and bandages to scratches sustained while removing shortening from cat's tail.
terse syntax... more than one way to do it... default variables.
or, depending on context, you may create an interface that  allows the user to upload at most one file as an avatar, or you may write an  opinion survey in which uploading files does not make sense as part of the  design.
dir() is a  function that lists all of the methods of an object: if at the interpreter you  call dir() on the integer 1, you get: >>> dir(1)
printf("%d slabs of  spam,\n", i); printf("send one to abuse and just hit  delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } which is best?
printf("%d slabs of spam in my  mail!\n", i); printf("%d slabs of spam,\n", i);  printf("send one to abuse and just hit delete,\n"); printf("%d  slabs of spam in my mail!\n\n", i + 1); } for(i = 99; i > 0; ++i) {  printf("%d slabs of spam in my mail!\n", i);
this kind of thing is very appropriate in dealing with the web, where you should assume that input is inappropriate and possibly malicious until proven otherwise.
but there is a major difference.
now python does have compiled bytecode, and it  is possible to get an implementation of python that runs on a java vm or  creates a standalone executable, but distributing a python program or library  usually means distributing the source code.
for a consolation prize, underscores are a little bit better than camelcase for native english speakers and significantly better than camelcase for programmers struggling with english's alphabet.
once above 1, there's no excuse not to allow any  n; hence, infinity.
and no matter what choice you make, it's not the only choice  out there, and sooner or later you will run into code that is formatted  differently.
in fact, this phenomenon is so common, even among  experienced python programmers, that the python community has a name for it.
and this is a recipe to bake jr's teddy bear at 375 and then  be left wondering why the house is so full of foul-smelling smoke: proper  exception handling removes the teddy bear from the oven, repeatedly if need be,  instead of just boldly ignoring problems that need to be addressed properly.
but it is not entirely easy to  learn or read perl, and this is not just something that affects novices.
it would not be a surprise if ruby  on rails or php developers were to look through this and find it speaks to how  they can create a better user interface.
in working on the web, there may be ideal input that you intend, but both from a usability and a security perspective you need to be able to respond appropriately to input that was not what you intended.
none): self.initialized =
because in python we are effectively "running the source code," this usually means a faster feedback cycle than the edit-compile-test process one uses in working with a c application.
dir() is a function that lists all of the methods of an object: if at the interpreter you call dir() on the integer 1, you get: >>> dir(1)
this can mean that, even if we expect we will mainly just write code for  the ideal case, we may have to write a significant amount of code for non-ideal  cases.
english may be a powerful language and an object of beauty, but what it is not is easy for beginners the way swahili is.
let me explain what i mean  by this and why it is more pythonic.
previous influential languages  to use significant whitespace include cobol and fortran, which are known by  reputation, a reputation that survives in sayings like, "a computer  without cobol and fortran is like a slice of chocolate cake without ketchup and  mustard," "the teaching of cobol cripples the mind.
(note that  there is a behavior that is shared with other programming languages but  surprising to people learning to program: if the condition becomes false after  some of the statements in the loop has run, the loop does not stop immediately;  it continues until all of the statements in that iteration have run, and then  the condition is checked to see if the loop should run for another iteration.)
but there is a point to be made here about two different types of spoken languages, trade languages and languages that are native languages, that have everything to do with usability.
for example, suppose that you have a string value that's supposed to be an integer displayed as a string, like u'1'.
and "what python language feature most resembles my problem?"
if invoked just as teach(u'prof.
false if url: self.load_url(url) def __nonzero__(self): return self.initialized def list_tags(self): if self.initialized: result =
if bunny: result.append(u'i have a bunny named ' + bunny + u'.') return u'\n'.join(result)
" it is my suggestion that python is a lightsabre, and wielding it well makes  a graceful foundation for usability.
and the good way is: sum = 0
while condition: run_function() the if and while statements test if condition is true, and the variable condition can be anything a variable can hold.
a classic joke reads: exterior:
this may be unfortunate, but to the reader interested in functional programming in python, i may suggest downloading, reading, and usingthe xoltar toolkit.
a  classic joke reads: exterior: dagobah--day with yoda strapped to his back,  luke climbs up one of the many thick vines that grow in the swamp until he  reaches the dagobah statistics lab.
/usr/bin/python import re import urllib2 class webpage(object): def __init__(self, url =
name_pets(u'goldie') will  return, u'i have a dog named goldie.'
take the teddy bear out of the broiler and throw it away—far away.
one is, in choosing names (for variables,  methods, objects, classes, and so on), use whole_words_with_underscores, not  camelcase.
even if  their faraway english sounded a little different, you have pretty complete  coverage if you know just one language, english.
perl has been rightly called "unix's swiss army chainsaw," and perhaps nothing else so well concisely describes what it is that perl has to offer.
if you were born in the u.s. and grew up speaking english, you could  presumably not just travel around your state but travel thousands of miles,  traveling from state to state coast to coast all the while being able to buy  food, fuel, lodging, and the like without language being an issue.
def ternary(condition, first_option, second_option):
software engineers dig one another's graves," and write-only code is  code with bad programmer usability, and a way of digging your own grave.
returning to functions, it is possible to specify default values, as in: def parse(input, default = 0): try: return int(input) except valueerror:
in python, the equivalent code is: if remaining > 0: if-then-else chains in python use the elif statement: if first_condition: first_function() elif second_condition: second_function() elif third_condition: third_function() else: default_function() any of the example indented statements could be replaced by several statements, indented to the same level; this is also the case with other constructs like while.
the styles i mentioned are some of the styles that significant numbers of programmers who care about well-formatted code advocate for; freeform allows for laziness, and for that matter paved the way for one of the first contests elevating bad programming to a refined art form: the international obfuscated c code contest, where c code submitted was code that worked, but top-notch c programmers look at the code and have no idea how it works.
english may be a powerful language and an object of beauty, but  what it is not is easy for beginners the way swahili is.
the problem with the fact that people can format freeform code however they want is that people do format freeform however they want.
lists and tuples are  both indexed, with counting beginning at zero, so that the declaration of  stooges above could have been replaced by creating an empty list and assigning  members: stooges =
this is a working, if not necessarily advisable, counter class.
bob is a  student in this course.
in c/c++/java, one might write: if (remaining > 0)
however, i  have never heard of production use of these extensions pythonically saving time  and effort while making programmers more productive.
however, i have never heard of production use of these extensions pythonically saving time and effort while making programmers more productive.
['__abs__', '__add__', '__and__', '__class__',  '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__',  '__float__', '__floordiv__', '__format__', '__getattribute__',  '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__',  '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__',  '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__',  '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__',  '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__',  '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__',  '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__',  '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'conjugate',  'denominator', 'imag', 'numerator', 'real'] methods with names like __add__
you are welcome to sort the keys where appropriate if you want them in alphabetical order: def alphabetical_listing(**keywords): keys = keywords.keys() keys.sort() for key in keys: print key + u': ' + keywords[key] if you then call alphabetical_listing(name='alice', phone='(800) 555-1212', email='alice@example.com'), you should then get the keys in fixed alphabetical order: email: alice@example.com name: alice phone: (800) 555-1212 you can have any combination, or none, of these ways of accepting an argument.
but what if you want to name a cat but not a dog?
many hackers recall in this connection isaac asimov's sf novel the gods themselves in which a character announces that the number 2 is impossible - if you're going to believe in more than one universe, you might as well believe in an infinite number of them.
answer the door and meekly explain to nice police officer that you didn't know jr. had slipped out of the house and was heading for the street.
the move from c to c++ is a move made by extending the core language to  directly support objects, templates, and other features.
but it is begging trouble to do: try: first_method() second_method() third_method() except: pass this use of except: is a bit like the goto statement; it offers convenience  at the beginning and can bring headaches down the road.
you are allowed to add a semicolon at the end of a statement or use semicolons to separate more than one statement on a single line; hence both of the following are legal: print u'hello, world!'; print u'ping!'; print u'pong!'
but it is begging trouble to do: try: first_method() second_method() third_method() except: pass this use of except: is a bit like the goto statement; it offers convenience at the beginning and can bring headaches down the road.
keep out of children.
a : b, is not a built-in structure in python.
let's return to the task of parsing integers.
exceptions are thrown when something doesn't work ideally, and usually you want  to catch them.
it would not in principle be very difficult to write a program that would transform freeform syntax to python, "compiling to python" so to speak and allowing a freeform variant on python, but so far as i know it's never been done; people who have gotten into python seem to find this unusual feature, shared with some ridiculed predecessors, to be a decision that was done right.
(if i  have enough cargo to fill the trailer on an eighteen wheel truck, then the most  efficient use of resources is to pay for that way of transporting the payload,  but if the cargo fits neatly inside an envelope, a postage stamp is enough.)
but  there is a major difference.
someone said, "computer  scientists stand on each other's shoulders.
luke: is perl better than python?
yoda: no... no... no.
lists and tuples are both indexed, with counting beginning at zero, so that the declaration of stooges above could have been replaced by creating an empty list and assigning members: stooges =
it turns out that there is a better and a worse way to calculate the sum of the numbers from 1 to 10,000,000,000.
panting heavily, he continues his  exercises--grepping, installing new packages, logging in as root, and writing  replacements for two-year-old shell scripts in python.
a : b will double-increment the selected argument if invoked as max(++c, ++d).
name_pets(u'goldie') will return, u'i have a dog named goldie.'
to  simplify slightly, "the thing you run" is usually not a separate  executable that is derived from the source code; "the thing you run"  is effectively the source code.
if you are making a running sum, it may be appropriate to ignore a specific error like this.
bob is a student in this course.
the typing is so-called "duck typing": if it walks like a duck and it quacks like a duck, it's a duck, and we have already seen one instance of duck typing at work: if an integer computation overflows, python deftly substitutes another class that walks like the basic integer class and quacks like the basic integer class, but can handle millions of digits or more as long as you have enough memory and processor time.
if you do this, the only language that needs to initially be supported is  your own, perhaps tested by a second language, but then you don't need to do  major rewrites to support a second language, or a third, fourth, or twelfth.
adding a comment to one of the  more cryptic lines of the example we have: for tag in re.findall(ur'>> print u'the quick brown dog jumps over the lazy red  fox.
and the future mathematician tried to figure out how to do things the smart way, realizing that if you add 1 and 100 you get 101; if you add 2 and 99 you also get 101, if you add 3 and 98 you get the exact same thing.
i do not wish to discourage anyone from using different frameworks than i  have mentioned, or suggest that there is something wrong with thinking things  out and choosing turbogears over django.
while simplicity is important in python, python is a multiparadigm language (like many others, including ocaml and javascript as well as perl) and directly supports procedural, object-oriented, and (in part) functional programming, letting the programmer choose what works best for a situation.
if the  implementation is easy to explain, it may be a good idea.
[] if dog:  result.append(u'i have a dog named ' + dog + u'.')
maybe that wouldn't be a perfect localization, but it's another major step, and  it's not too hard.
perl, designed by a linguist, is a bit like english in this regard.
call operator and attempt to have direct dialed call removed from bill.
perl is a vast native language and  painfully vast as a trade language.
the short answer is, we can't, and we don't really want to.
this may be unfortunate, but to the  reader interested in functional programming in python, i may suggest  downloading, reading, and usingthe xoltar toolkit.
normally  people who discuss usability discuss making a system usable for nontechnical  end users, but there is such a thing as usability for programmers; a good chunk  of python's attraction is that it shows meticulous attention to detail in the  usability it provides to programmers.
the problem is already solved for us.
python's standard library does come with its cgi module, and  it is possible to write webapps with it, but using the cgi module and the  standard library to implement a social networking site with all the common  bells and whistles would take months or years.
if you are from the u.s. and were to need a trade  language to get along with traveling, perhaps neither you nor the other party  would know a trade language like swahili well enough to have a long and  meandering chat, but you would be able to handle basic exchanges like buying  things you need.
unlike java, the humble integer is an object.
so if we define a function: def listing(**keywords): for key in keywords: print key + u': ' + keywords[key] if we then call listing(name='alice', phone='(800) 555-1212', email='alice@example.com'), it should print out something like: phone: (800) 555-1212 name: alice email: alice@example.com
usually you can just stick them all together by u''.join(buffer),  but if you choose another string, like u'\n' here, then that other string is  the glue that joins the pieces, and you get a line break between each sentence  here.
in java, it is usually preferred practice to  choose object composition over multiple inheritance; in python, it is usually  preferred practice to choose multiple inheritance over object composition.
if we write in c: #include  int main() { long top; scanf("%ld", &top); printf("%ld\n", top * (top + 1) / 2); return 0; } the code correctly gives 5050 if we give it a value of 100, just like python, but if we give the original ten billion, we get, incorrectly: 3883139820726120960 python turns out to have just as much an arbitrarily threshold as c, but the difference is that if you trigger an overflow, instead of continuing on with garbage results, python quietly substitutes a type that will give correct results for any number that will fit in memory.
melt 1-cup margarine in saucepan.
adding a comment to one of the more cryptic lines of the example we have: for tag in re.findall(ur'>> print u'the quick brown dog jumps over the lazy red fox.
english is considered an almost notoriously difficult language for an adult learner, and even english as a second language teachers may need a few sensitivity experiences to understand why the english pronunciation that they find second nature is so tricky and confusing for adult speakers of other languages to pin down.
to do this, become more demanding of python.
jones', u'archaeology 101', u'alice', u'bob', u'charlie'), the output will be: this class is being taught by prof. jones.
although never is often better than *right* now.
python's standard library does come with its cgi module, and it is possible to write webapps with it, but using the cgi module and the standard library to implement a social networking site with all the common bells and whistles would take months or years.
this code says that plan a is to get an appropriate integer value out of  the input, and plan b is to set a default of 0.
the dictionary is a like a list, but instead of the index automatically  being a whole number, the index can be anything that is immutable.
" it is my suggestion that python is a lightsabre, and wielding it well makes a graceful foundation for usability.
this is true if you are developing for the web; if you are in another  domain, similar remarks could be made for numpy or scipy.
freeform formatting means that the compiler will  accept all of the variations of the "internet user's drinking song"  below as equivalent: for(i = 99; i > 0; ++i) {
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'conjugate', 'denominator', 'imag', 'numerator', 'real'] methods with names like __add__
part of my first introduction to perl was the statement, "you're not really thinking perl until you're thinking associative arrays," meaning what in perl does the same job as python's dictionary, and lists and dictionaries in particular are powerful structures that can do a lot of useful work.
one way, which happens to be implemented by a tuple, is useful if you want to return (for instance) both a status code and a text description of the status.
in python, the equivalent code is: if remaining > 0: if-then-else chains in python use the elif statement: if first_condition: first_function() elif second_condition:  second_function() elif third_condition: third_function() else:  default_function() any of the example indented statements could be replaced by several  statements, indented to the same level; this is also the case with other  constructs like while.
a famous blog post called python is not java addresses java programmers rather bluntly on why doing everything you'd do in java is not getting the most out of python: essentially, if you've been using java for a while and are new to python, do not trust your instincts.
it turns out that there is a better and a worse way  to calculate the sum of the numbers from 1 to 10,000,000,000.
and if n+1, then why not n+2, and so on?
the short answer is, we can't, and we  don't really want to.
now there are a couple of things going on.
second_number current = bottom while current >> print 10000000000 * (10000000000 + 1)
u'larry' stooges[1] = u'moe' stooges[2] =
not only do  programmers grow attached to a formatting style, but this is the subject of  holy wars; to go through another programmer's code and change all the  formatting to another brace style is quite rude, like a direct invasion of  personal space.
i may further comment that fundamental usability is the same whether the implementation is django, turbogears, web2py, or for that matter python with the cgi module or c working with bare metal.
in python, comments are not there to make code understandable.
it's not primarily about speed; both are painfully  slow, especially if you compare them to calculating 10000000000 * (10000000000  + 1) / 2, which is lightning fast.
it is a truism that code is read  many more times than it is written, and write-only code is very much "the  dark side of code maintainability."
here python observes a principle that you should observe in what you pass on to your users.
it is common practice to build up a long string by creating an initially empty list, and then bit by bit build up the contents of the string in the list.
it is not at all something to be taken for granted that you  can travel twenty miles and order food and basic necessities in your native  language.
one to abuse and just hit  delete,' count += 1 print u'%d slabs of spam in my mail!'
if you use python, you don't have to reinvent the  wheel.
special cases aren't special enough to break the rules.
for a consolation prize,  underscores are a little bit better than camelcase for native english speakers  and significantly better than camelcase for programmers struggling with  english's alphabet.
" another point about usability may be made by looking at "natural" languages, meaning the kinds of languages people speak (such as english), as opposed to computer languages and other languages that have been artificially created.
you will be absolutely astonished at how often it happens that thing you need is already there in some form.
although that way may not be obvious at first unless you're dutch.
this little poem speaks against trying to be as clever as you can, and this  is something deep in python's veins.
answer the door and apologize to neighbor for billy having stuck a garden hose in man's front door mail slot.
a very small number of  objects, meaning the boolean false, numeric variables that are zero, containers  like lists and dictionaries that are empty, and a few objects that have a  method like __nonzero__(), __bool__(), or __len__() defined a certain way, are  treated as being falsy, meaning that an if statement will skip the if clause  and execute the else clause if one is provided; and a while statement will stop  running (or not run in the first place).
the only gotchas are that you cannot include the same triple quotation mark delimiter, and if the last character of the string is the same kind of character, it needs to be escaped with a backslash, like: u'''this string ends with an apostrophe: \''''.
[2, 4, 6] >>> reduce(lambda x, y: x + y, numbers) 6 python's support of functional programming has not always been the best, and functional programmers may be dismayed to learn that guido was hoping at one point to remove lambda altogether.
you are  allowed to add a semicolon at the end of a statement or use semicolons to  separate more than one statement on a single line; hence both of the following  are legal: print u'hello, world!'; print u'ping!'; print u'pong!'
it would not be a surprise if ruby on rails or php developers were to look through this and find it speaks to how they can create a better user interface.
its teaching  should therefore be regarded as a criminal offence," or "you can tell  how advanced of a society we live in when fortran is the language of  supercomputers."
something like xrange() can be implemented for our purposes as: def xrange(first_number, second_number =
with that stated, it might be suggested that perl is the creation of a  linguist, but a linguist who seemed not to be thinking about why a language  like english is hard for adults to learn and, in its native form, is a terrible  trade language.
"no, no." add margarine to 2 cups sugar.
an ex-apple honcho slapped the buzzer and said,  "windows!"
but we are saying  thatthe python core library is among a good python programmer's most heavily  used bookmarks.
let me explain what i mean by this and why it is more pythonic.
class counter(object): def __init__(self): self._value = 0 def get_value(self): return self._value def increment(self): self._value += 1 def reset(self): self._value = 0
functions are first-class objects and can be  treated as such.
in the face of ambiguity, refuse the  temptation to guess.
the basic concept in significant  whitespace is that how you use spaces, tabs, line breaks, etc.
printf("%d slabs of spam in my mail!\n", i); printf("%d slabs of spam,\n", i); printf("send one to abuse and just hit delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } the one true brace style did a good job of being thrifty with lines of screen space when monitors were small, but it is confusing now: the close curly brace is visually grouped with lines that follow: if i add a line: for(i = 99; i > 0; ++i) { printf("%d slabs of spam in my mail!\n", i); printf("%d slabs of spam,\n", i); printf("send one to abuse and just hit delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } printf("i suppose even integer overflow has its uses...\n"); the close curly brace is visually grouped with the subsequent exclamation, and not, what would be better, visually grouped with the drinking song's stanza.
the first argument to each of its methods is self (n.b. self, rather than this), and the class has one instance variable, defined in the __init__() method called in initialization, although it could just as well have many or none.
that is, the first argument will be assigned to dog, and name_pets(u'jazz', u'zappy') will correspondingly name the dog "jazz" and the cat "zappy."
you can't just say, "gather these ingredients, mix, and bake;" you need all the except clauses like, "remove teddy bear from oven..." in addition to try and except, there is a finally clause which follows the try clause and any except clauses, and is to be executed whether or not an exception was caught.
alice is a student in this course.
but what if you want to  name a cat but not a dog?
reduce(lambda x, y: x + y, numbers) 6 python's support of functional programming has not always been the best,  and functional programmers may be dismayed to learn that guido was hoping at  one point to remove lambda altogether.
if you are from the u.s. and were to need a trade language to get along with traveling, perhaps neither you nor the other party would know a trade language like swahili well enough to have a long and meandering chat, but you would be able to handle basic exchanges like buying things you need.
but if you're starting out, it's needlessly cryptic and confusing: the reasons  people love the pathologically eclectic rubbish lister (as perl as called by  its biggest fans) are reasons it would make a painful trade language.
there are some cases where the backslash is optional and discouraged: in particular, if you have open parentheses or square/curly braces, python expects you to complete the statement with more lines: stooges =
for the web, frameworks like django, turbogears, and web2py offer significantly greater power with less work in more truly pythonic fashion.
the basic idea is that plan a didn't work and you should have a plan b.
the first  argument to each of its methods is self (n.b. self, rather than this), and the  class has one instance variable, defined in the __init__() method called in  initialization, although it could just as well have many or none.
like_this instead of like_this, is a  part of the present private implementation, does not represent in any sense the  public api, and is subject to change or removal at any time.
except valueerror: return default, 0, u'parsing failed.'
the styles i mentioned are some of the styles  that significant numbers of programmers who care about well-formatted code  advocate for; freeform allows for laziness, and for that matter paved the way  for one of the first contests elevating bad programming to a refined art form:  the international obfuscated c code contest, where c code submitted was code  that worked, but top-notch c programmers look at the code and have no idea how  it works.
you can't just say, "gather these ingredients,  mix, and bake;" you need all the except clauses like, "remove teddy  bear from oven..." in addition to try and except, there is a finally clause which follows the  try clause and any except clauses, and is to be executed whether or not an  exception was caught.
remove burned brownies from oven.
simple is better than complex.
[2, 3] >>> map(lambda x: x
what i have heard consistently is that using a good library really does  qualify as a move from "unadorned python" to "python++".
a python comment, like perl and tcl (and one option in php), begins with a hash mark and continues to the end of the line.
(note that there is a behavior that is shared with other programming languages but surprising to people learning to program: if the condition becomes false after some of the statements in the loop has run, the loop does not stop immediately; it continues until all of the statements in that iteration have run, and then the condition is checked to see if the loop should run for another iteration.)
def  get_value(self): return self._value def increment(self):
perl users have an acronym, tmtowtdi, pronounced "tim-towdy," standing for "there's more than one way to do it."
if you do this, the only language that needs to initially be supported is your own, perhaps tested by a second language, but then you don't need to do major rewrites to support a second language, or a third, fourth, or twelfth.
a programmer's strength flows from code maintainability.
this difference boils down to usability.
this is true if you are developing for the web; if you are in another domain, similar remarks could be made for numpy or scipy.
jonathanscorner.com/python i would like to begin discussing python with a feature that causes puzzlement to good programmers first meeting python:significant whitespace .
an ex-apple honcho slapped the buzzer and said, "windows!"
and if n+1,  then why not n+2, and so on?
throw cat outside while there's still time and he's still able to run away.
but if you're starting out, it's needlessly cryptic and confusing: the reasons people love the pathologically eclectic rubbish lister (as perl as called by its biggest fans) are reasons it would make a painful trade language.
hence a function of: def name_pets(dog =
true: false,  false: true, } falsy =
web2py in particular cuts out one very daunting hurdle to new programmers: a command line with a steep learning curve.
class counter(object): def __init__(self): self.value = 0 def increment(self): self.value += 1 def reset(self): self.value = 0
yoda: you will know.
if bunny: result.append(u'i have a bunny named  ' + bunny + u'.') return u'\n'.join(result)
when your code you try to read six  months from now.
that is not how python  works, and exceptions are a commonly used way of saying "the ideal case  didn't happen."
this result is correct, but c programmers, as well as c++ and java  programmers, may have a conditioned reflex: in c, for instance, just as a  string buffer is an array of characters with a fixed length, integer types have  a maximum and minimum possible value, and you may be able to choose an integer  type with a bigger range, but there is always an arbitrary line, and if you  cross it you get an overflow error that causes incorrect results.
answer the door and apologize to neighbor for billy having stuck a garden  hose in man's front door mail slot.
one of the key features of a good trade language's job  description is to be gentle to people who do not eat, sleep, and breathe it.
this can mean that, even if we expect we will mainly just write code for the ideal case, we may have to write a significant amount of code for non-ideal cases.
part of my  first introduction to perl was the statement, "you're not really thinking  perl until you're thinking associative arrays," meaning what in perl does  the same job as python's dictionary, and lists and dictionaries in particular  are powerful structures that can do a lot of useful work.
if invoked like parse(text), it will default to 0 in the case of a parse failure; if invoked like parse(text, 1), it will default to another value, such as 1, and if invoked like parse(text, none), the result can be examined for a parse failure: it will hold an integer if parsing was successful and the (non-integer) value none in the case of failure.
maybe that wouldn't be a perfect localization, but it's another major step, and it's not too hard.
and  the future mathematician tried to figure out how to do things the smart way,  realizing that if you add 1 and 100 you get 101; if you add 2 and 99 you also  get 101, if you add 3 and 98 you get the exact same thing.
remember reading "hi, how are you?" written in greek letters as "αι &oicron;υ αρ ιυ:" sometimes just using another language's alphabet is a challenge.
however, the standard practice is to let line breaks end your statements: print u'hello, world!'
the list, denoted by square braces ("[]") and tuple,  which is often surrounded by parentheses ("()") even though it is not  strictly denoted by them unless a tuple is empty, both contain an ordered list  of anything.
the dark side of code maintainability are they.
if you write a web script that asks people to enter their age, and someone hits two keys at once and enters an age of u'22w', you need to be able to roll with it-and this is nothing next to what might happen if someone is acting maliciously.
perl is very unusual among computer languages in terms of having been  created by a linguist who understood natural languages well; it may be the only  well-known programming language where questions like "how would this work  if it were someone's native language?" are a major consideration that  shaped the language.
if a function has two or more arguments with default values, unnamed  arguments are specified from left to right.
someone said, "computer scientists stand on each other's shoulders.
i advocate, when possible, moving from unadorned, "bare metal"  python to what might be called "python++."
spanish is widely spoken and there  are large groups with other native languages, but this does not really change  the fact that you can travel from coast to coast, buy basic travel necessities,  and for that matter chat if you want and only need english.
even if their faraway english sounded a little different, you have pretty complete coverage if you know just one language, english.
rewritten that way, our class would look like this:
in fact, this phenomenon is so common, even among experienced python programmers, that the python community has a name for it.
there are a couple of ways in python programming that we can provide good usability for other programmers.
the xoltar toolkit provides  a module, functional, which is written in pure python, is largely  self-documenting code, and provides tools and/or reference implementations for  currying and other favorites.
few features in python are absolutely unique, and python did not pioneer the concept of significant whitespace.
in java and some other languages, recommended best practices say, "exceptions should not be used for regular flow control."
finally: return  result one note to be given: it can be appropriate to put pass in an except  clause, so we have: total = 0
note that this differs from javascript, where the final semicolon on a line is treated as optional but it is usually considered best practice to explicitly include the semicolon.
exceptions are important in python.
but the issue goes beyond the fact that the common style bold enough to proclaim itself as the one true brace style may not be the top usability pick now that we have larger monitors.
true: false, false: true, } falsy =
jones', u'archaeology 101', u'alice', u'bob', u'charlie'), the  output will be: this class is being taught by prof. jones.
in other words, an exception is only appropriate for a very rare case when something very unusual has happened.
but there is another sense in which you may want a generator that can keep on returning values.
if you only type: result = int(input) your whole program will break on even an innocent typo like entering u'22w' when asked for their age.
assemble 4 eggs, 2-tsp. vanilla, and 1-1/2 cups sifted flour.
for that  matter, you could probably strike up a meandering chat with locals you meet in  obtaining food, fuel, and lodging without language being an issue.
python is both an easy trade language for  those beginning and a deep native language for gurus.
if you want to break a statement over multiple lines, usually because it  would be a very long line otherwise, you can end a line with a backslash, and  then continue after whitespace, which i suggest you indent to two spaces more  than the beginning of the line: print \ u'hello, world!'
you can specify an open-ended number of arguments, with a single asterisk  before the last argument name, like: def teach(teacher, course_name =
this is not something universal across the world.
in the face of ambiguity, refuse the temptation to guess.
python's objects are in some ways like java and in some ways like javascript: python objects come from full-fledged classes like java, but are more dynamic: fields and methods can be deleted from a python object on the fly, like javascript, even though inheritance is classical and not prototypal.
take telephone away from billy and assure party on the line the call was a  mistake.
but python pulls off the delicate balancing act of working  well as a trade language where a programmer can be productive very quickly  after starting, and having room to grow for those programmers who are able to  experience it more like a native language.
programmers stand on one another's  toes.
but the one with xrange() uses  very little memory because it is a generator that produces the numbers as  needed but never creates an enormous list.
the python community does not favor shows of cleverness in quite the same way; in fact, saying, "this code is clever," is a respectful and diplomatic way of saying, "you blew it."
if you use python, you don't have to reinvent the wheel.
the list of languages that have embraced this feature include c, c++, java, c#, perl, php, and sql, and that's really just naming a few of the bigger players.
on this point i  may point out that object oriented programming is not a better way of solving  problems than procedural programming; it is one that scales better for larger  projects.
in working  on the web, there may be ideal input that you intend, but both from a usability  and a security perspective you need to be able to respond appropriately to  input that was not what you intended.
your instincts are tuned to java,  not python.
while condition:  run_function()
visual basic is an easy trade  language but a limited native language.
python's core library is documented extensively, searchably, and well at  http://docs.python.org/library/ (be advised that python.
usability, the soul of python an introduction to programming python through the eyes of usability jonathanscorner.com/python i would like to begin discussing python with a feature that causes  puzzlement to good programmers first meeting python:significant whitespace .
one is, in choosing names (for variables, methods, objects, classes, and so on), use whole_words_with_underscores, not camelcase.
essentially everything else is treated  as being truthy, meaning that an if statement will run the if clause and skip  any else clause, and a while loop will run for one complete iteration and then  check its condition again to see if it should continue or stop.
if you are making a running sum, it may be appropriate to ignore a specific  error like this.
python has been called  "executable pseudocode," and is your code's job to be understandable  itself.
( false, 0, 0.0, '', u'', {},
english is considered  an almost notoriously difficult language for an adult learner, and even english  as a second language teachers may need a few sensitivity experiences to  understand why the english pronunciation that they find second nature is so  tricky and confusing for adult speakers of other languages to pin down.
software engineers dig one another's graves," and write-only code is code with bad programmer usability, and a way of digging your own grave.
i advocate, when possible, moving from unadorned, "bare metal" python to what might be called "python++."
emacs is perfectly willing to insert spaces in displayed camelcase words, but this is a compensation for camelcase's weakness, and not everyone uses emacs: or either of vim or emacs, for that matter: gui editors are not going to go away, even if our beloved command line editors might go away.
perhaps you have seen the famous "mom's brownie recipe" on the web: remove teddy bear from oven and preheat oven to 375.
easily they flow, quick to join you when code you write.
rescue cat and take razor away from billy.
early exposure to fortran left an undeniably foul taste in eric raymond's mouth, and when he learned that python had significant whitespace, he repeatedly described python's first impression on him as "a steaming pile of dinosaur dung."
in addition to if/else/elif and while, python has a for loop.
for that matter, you could probably strike up a meandering chat with locals you meet in obtaining food, fuel, and lodging without language being an issue.
for input in inputs: try: total += int(input) except valueerror:
name_pets(cat=u'guybrush') will specify the value of the cat argument while  leaving dog and bunny to have their default values.
the basic concept in significant whitespace is that how you use spaces, tabs, line breaks, etc.
if we write  in c: #include  int main() { long top; scanf("%ld",  &top); printf("%ld\n", top * (top + 1) / 2); return 0; } the code correctly gives 5050 if we give it a value of 100, just like  python, but if we give the original ten billion, we get, incorrectly: 3883139820726120960 python turns out to have just as much an arbitrarily threshold as c, but  the difference is that if you trigger an overflow, instead of continuing on  with garbage results, python quietly substitutes a type that will give correct  results for any number that will fit in memory.
in terms of user interface design, for the iphone to allow exactly one application at a time and for the droid to allow multiple applications are both sensible approaches: perhaps the droid marketing campaign insists that we need to run multiple apps, but for a long time the iphone, designed to run one app at a time, was an uncontested darling.
as opposed to c and c++ which are  compiled to a standalone executable (or library, etc.), python is interpreted  from a script's source file, or more precisely compiled to a bytecode.
this code says that plan a is to get an appropriate integer value out of the input, and plan b is to set a default of 0.
mix the following in saucepan: 1 cup sugar, 1 oz unsweetened chocolate, 1  cup margarine.
the name of the course is "archaeology 101."
the problem with the fact that people can format freeform code however they  want is that people do format freeform however they want.
emacs is perfectly willing to insert spaces in displayed camelcase  words, but this is a compensation for camelcase's weakness, and not everyone  uses emacs: or either of vim or emacs, for that matter: gui editors are not  going to go away, even if our beloved command line editors might go away.
[1, 2, 3] >>> filter(lambda x: x > 1,  numbers)
pour mixture into well-greased 9x13-inch pan.
perl carries on a tradition of one-liners, a program that has only one  clever line, like: perl -lne '(1x$_) !
first_number else: bottom =
the only gotchas are that you cannot include the same triple quotation mark  delimiter, and if the last character of the string is the same kind of  character, it needs to be escaped with a backslash, like: u'''this string ends  with an apostrophe: \''''.
for(i = 99; i > 0; ++i) {
false if url: self.load_url(url)  def __nonzero__(self): return self.initialized def list_tags(self): if  self.initialized: result =
python does not require you to do object-oriented programming, but in  python everything is an object.
take a step back, and above all,stop writing so much code.
and in the cultures and  peoples of africa, there is a basic phenomenon of a trade language.
but the one with xrange() uses very little memory because it is a generator that produces the numbers as needed but never creates an enormous list.
english has many things  to appreciate as a native language, but these strengths are the opposite of  what makes for a good trade language that adults can learn.
once above 1, there's no excuse not to allow any n; hence, infinity.
rewritten that  way, our class would look like this: class counter(object): def __init__(self): self._value = 0
but we are saying thatthe python core library is among a good python programmer's most heavily used bookmarks.
the three statements above represent three basic types: the list, the dictionary, also called the hash, dict, or occasionally associative array, and also the tuple.
take  smoldering teddy bear from oven and open all doors and windows for ventilation.
def ternary(condition, first_option, second_option): if condition: return first_option else: return second_option i might note that in python, the common ternary operator that appears in c/c++/java like a > b ?
the last way arguments can be specified is by keyword arguments, where any  arguments given by keyword that have not been otherwise claimed in the argument  list are passed into a dictionary.
then you can explicitly name the argument: name_pets(cat=u'guybrush') will specify the value of the cat argument while leaving dog and bunny to have their default values.
what is it that is attractive about python?
the "significant whitespace" mentioned earlier means that a statement usually ends with a line break rather than a semicolon.
we  call it "guido's time machine", because sometimes it seems as though
(depending on where you live, if you are a nigerian, you may  regularly walk by people on the street who may be just as nigerian as you, but  neither of you knows the other's native language.)
for many people you meet,  english would be their native language, too.
the last way arguments can be specified is by keyword arguments, where any arguments given by keyword that have not been otherwise claimed in the argument list are passed into a dictionary.
comments have a place, but if you need to add comments to make your code understandable, that's a sign you need to rewrite your code.
in python, it is uncommon to end a statement with a  semicolon.
if the implementation is hard to explain, it's a bad idea.
ask, "how does python already solve my problem?"
it's not just that the solution we have built works a bit more like java  than python, but the problem we were addressing in the first place works more  like java than python.
the name of the course is  "archaeology 101."
if you pair the  numbers like that, you have 50 pairs that have the same sum, 101, and so the  grand total has to be 50 * 101 = 5050.
because people are intelligent, you can write a recipe book and describe only the ideal case.
mix the following in saucepan: 1 cup sugar, 1 oz unsweetened chocolate, 1 cup margarine.
the if and while statements test if condition is true, and the variable  condition can be anything a variable can hold.
self._value += 1 def  reset(self): self._value = 0
truer to the spirit of python would be to use an integer and avoid the work of creating a class, let alone accessor methods.
jones'), the result will be one line: u'this class is being taught by prof. jones.'.
but this way of solving things makes more sense in java than python; in  java it is recommended practice to make most or all instance variables private  and then define corresponding getters and setters, and perhaps build a counter  class that let you guarantee it could only be incremented, read, and optionally  reset.
the  best thing of all would be to just use spaces in variable names, but so far the  language designers have not supported that route.
for example, suppose that you have a string value that's supposed to be an  integer displayed as a string, like u'1'.
and worse than the flaws of any one brace style are the flaws of a mix of brace styles and the fact that they seem to be tied to personal investment for programmers who care about writing code well.
i would choose object oriented methodology over procedural for large projects, and procedural over object oriented for small to intermediate sized projects, with some tiny projects not even needing procedural structure.
exceptions are thrown when something doesn't work ideally, and usually you want to catch them.
note that this differs from javascript, where the final semicolon on a line  is treated as optional but it is usually considered best practice to explicitly  include the semicolon.
summary what is it that is attractive about python?
from a usability standpoint, the braces go with the lines to print out the stanza rather than the for statement or the code after, so the following is best:
not only boolean variables but numbers, strings, lists, dictionaries, tuples, and objects can be used as a condition.
but deliberately lazy or inappropriately clever formatting isn't the real problem here either.
ajax without javascript or client-side scripting hayward's free intranet employee photo directory usability for hackers: programmers, anthropology, and making software more usable within the steel orb
usually you can just stick them all together by u''.join(buffer), but if you choose another string, like u'\n' here, then that other string is the glue that joins the pieces, and you get a line break between each sentence here.
the rule is basically similar to perl.
for number in xrange(1, 10000000001): sum += number what's the difference?
if you want a social network and you use django and pinax, you don't  have to reinvent the internal combustion engine either, or power steering, or  antilock brakes, because they are all included in standard packages for a car  or truck.
this kind of thing is very  appropriate in dealing with the web, where you should assume that input is  inappropriate and possibly malicious until proven otherwise.
a stackoverflow user asked, "have you considered using django and found good reasons not to?"
normally people who discuss usability discuss making a system usable for nontechnical end users, but there is such a thing as usability for programmers; a good chunk of python's attraction is that it shows meticulous attention to detail in the usability it provides to programmers.
i may further comment that fundamental usability is the same whether the  implementation is django, turbogears, web2py, or for that matter python with  the cgi module or c working with bare metal.
not only boolean variables but  numbers, strings, lists, dictionaries, tuples, and objects can be used as a  condition.
necessarily  communicates certain basic aspects of your program, like how individual  statements should be grouped together (or not).
in java, it is usually preferred practice to choose object composition over multiple inheritance; in python, it is usually preferred practice to choose multiple inheritance over object composition.
comments have a place, but if you need to add comments to make your  code understandable, that's a sign you need to rewrite your code.
there should be one-- and preferably only one --obvious way to do it.
that is not how python works, and exceptions are a commonly used way of saying "the ideal case didn't happen."
on this point i may point out that object oriented programming is not a better way of solving problems than procedural programming; it is one that scales better for larger projects.
with yoda strapped to his back, luke climbs up one of the many thick vines that grow in the swamp until he reaches the dagobah statistics lab.
namespaces are one honking great idea -- let's do more of those!
you will be  absolutely astonished at how often it happens that thing you need is already  there in some form.
not only do programmers grow attached to a formatting style, but this is the subject of holy wars; to go through another programmer's code and change all the formatting to another brace style is quite rude, like a direct invasion of personal space.
(depending on where you live, if you are a nigerian, you may regularly walk by people on the street who may be just as nigerian as you, but neither of you knows the other's native language.)
perl is very unusual among computer languages in terms of having been created by a linguist who understood natural languages well; it may be the only well-known programming language where questions like "how would this work if it were someone's native language?" are a major consideration that shaped the language.
a very small number of objects, meaning the boolean false, numeric variables that are zero, containers like lists and dictionaries that are empty, and a few objects that have a method like __nonzero__(), __bool__(), or __len__() defined a certain way, are treated as being falsy, meaning that an if statement will skip the if clause and execute the else clause if one is provided; and a while statement will stop running (or not run in the first place).
as an aside, note that the arguments appear in a different order than they  were given.
whatever brace styles  python programmers may happen to use in languages with braces, all the python  code looks the same, and while the major brace styles illustrated above are a  few of many ways the c code could be laid out, there's only one real way to do  it.
how do you create functions, procedures, and methods in python?
none: result.append(u'the name of the course is "' + course_name
[] for tag in re.findall(ur' 0] lambdas, anonymous functions close to the lambdas of functional programming, are commonly used with filter, map, and reduce: >>> numbers =
if condition:  return first_option else: return second_option i might note that in python, the common ternary operator that appears in  c/c++/java like a > b ?
finally: return result
you can specify an open-ended number of arguments, with a single asterisk before the last argument name, like: def teach(teacher, course_name =
with python + django + pinax the time is more like hours.
when you're programming, you need to be able to say,  "this is plan a; this is plan b if plan a doesn't work; this is plan c if  plan b doesn't work."
python's core library is documented extensively, searchably, and well at http://docs.python.org/library/ (be advised that python.
/ 2 50000000005000000000 this result is correct, but c programmers, as well as c++ and java programmers, may have a conditioned reflex: in c, for instance, just as a string buffer is an array of characters with a fixed length, integer types have a maximum and minimum possible value, and you may be able to choose an integer type with a bigger range, but there is always an arbitrary line, and if you cross it you get an overflow error that causes incorrect results.
both of them  provide ready-made solution to routine tasks, whether user avatars with  gravatar support, or a shopping cart with that works with any of several  payment gateways.
[]  result.append(u'this class is being taught by ' + teacher + u'.')
i do not wish to discourage anyone from using different frameworks than i have mentioned, or suggest that there is something wrong with thinking things out and choosing turbogears over django.
but the first one, the one with range(),  creates a list with a staggering ten billion integers; a workstation with eight  gigs of ram doesn't have nearly enough memory to hold the list, and if you try  to run it, you may well observe your computer slow to a crawl as more and more  memory is used just to create that one array.
there is a classic story in mathematics in which one  famous mathematician, as a boy, was in class and the teacher wanted some time  and so decided to give the students a time-consuming task to keep them busy.
pretend that python is a magic  wand that will miraculously do whatever you want without you needing to lifting  a finger.
printf("%d slabs of spam,\n", i);  printf("send one to abuse and just hit delete,\n"); printf("%d  slabs of spam in my mail!\n\n", i + 1); } printf("i suppose even  integer overflow has its uses...\n"); the close curly brace is visually grouped with the subsequent exclamation,  and not, what would be better, visually grouped with the drinking song's stanza.
spanish is widely spoken and there are large groups with other native languages, but this does not really change the fact that you can travel from coast to coast, buy basic travel necessities, and for that matter chat if you want and only need english.
what it says is,  "try to run these three methods; if anything goes wrong, just ignore it  and move on."
panting heavily, he continues his exercises--grepping, installing new packages, logging in as root, and writing replacements for two-year-old shell scripts in python.
the "significant whitespace" mentioned earlier means that a  statement usually ends with a line break rather than a semicolon.
let's look at some of the core language features that are likely to come up.
there  are some somewhat hackish ways pythonistas use to fake it, notably a > b and  a or b, but besides reading somewhat strangely, they run into problems a bit  like c macros, where the c macro max(a, b) defined to a > b ?
the simplest example of a class is: class simple: pass an instance of this class can be created as: instance = simple() a somewhat more ornate example would be:
(if i have enough cargo to fill the trailer on an eighteen wheel truck, then the most efficient use of resources is to pay for that way of transporting the payload, but if the cargo fits neatly inside an envelope, a postage stamp is enough.)
printf("%d slabs of  spam,\n", i); printf("send one to abuse and just hit  delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1);  } for(i = 99; i > 0; ++i) { printf("%d slabs of spam in my  mail!\n", i); printf("%d slabs of spam,\n", i);  printf("send one to abuse and just hit delete,\n"); printf("%d  slabs of spam in my mail!\n\n", i + 1); } for(i = 99; i > 0; ++i) {  printf("%d slabs of spam in my mail!\n", i);
gur dhvpx oebja qbt whzcf bire gur ynml erq sbk.
we call it "guido's time machine", because sometimes it seems as though that's the only way he could've known what we needed, before we knew it ourselves.
org, is a famous porn site), and python's core library is your  best friend.
and in the cultures and peoples of africa, there is a basic phenomenon of a trade language.
when your code you try to read six months from now.
there was no way django was going to allow  me to make enough money."
[1, 2, 3] >>> filter(lambda x: x > 1, numbers)
take shortening can away from jr.
perl users have an acronym, tmtowtdi, pronounced "tim-towdy,"  standing for "there's more than one way to do it."
based on this realization, there is a simple mathematical formula to calculate the sum of the first n positive integers: the sum is equal to n * (n + 1) / 2.
u'larry' stooges[1] = u'moe' stooges[2]
promise to pay for ruined carpet.
while simplicity is important in python, python is a multiparadigm language  (like many others, including ocaml and javascript as well as perl) and directly  supports procedural, object-oriented, and (in part) functional programming,  letting the programmer choose what works best for a situation.
(in the computer bowl one year, bill gates as moderator asked  contestants, "what contest, held annually via usenet, is devoted to  examples of obscure, bizarre, incomprehensible, and really bad  programming?"
additionally, if, else, while, and the like end with a colon and do not require parentheses.
in java and some other languages,  recommended best practices say, "exceptions should not be used for regular  flow control."
the following three functions are equivalent; they  take no arguments and return none: def first(): pass def second(): return def third(): return none a function's required arguments are named; their type is not specified.
you are  welcome to sort the keys where appropriate if you want them in alphabetical  order: def alphabetical_listing(**keywords): keys = keywords.keys() keys.sort()  for key in keys: print key + u': ' + keywords[key] if you then call alphabetical_listing(name='alice', phone='(800) 555-1212',  email='alice@example.com'), you should then get the keys in fixed alphabetical  order: email: alice@example.com name: alice phone: (800) 555-1212 you can have any combination, or none, of these ways of accepting an  argument.
the braces are gone, and with them the holy wars.
python is a scripting language, along with such languages as perl, php,  ruby, tcl, and shell scripting like bash.
nigeria in africa is a country about the size of texas, and it doesn't have a native language; it has hundreds of them.
perl has been rightly called "unix's swiss army chainsaw," and  perhaps nothing else so well concisely describes what it is that perl has to  offer.
but the issue goes beyond the fact that the common style bold enough to  proclaim itself as the one true brace style may not be the top usability pick  now that we have larger monitors.
it has been  suggested that top-notch perl programmers are slightly more productive than  top-notch python programmers, and if you were to speak a computer language  natively, perl would be an excellent choice.
a trade language, such as hausa in nigeria and much of west africa, or swahili in much of east africa, may or may not have any native speakers at all, but it is an easy-to-learn language that you can use for basic needs with people who do not speak your native language.
since the days of fixed formatting as in cobol and fortran, there was the  invention of what is called freeform formatting, which means that as long as  you follow a few basic rules, you can use whitespace to format your code  however you please.
probably the next step to internationalization after using unicode strings is, instead of storing the interface language in your code like: print u'please enter your email address below:' you would instead do string look-ups that would pull the appropriate translation: print translate(messages.
it's longer than our counter class, but not all that much longer: #!
what if we  wanted to make the member field private?
if you use all of them, it should be like: def example(required, default = u'default value', *arguments,  **keywords): before leaving the topic of functions, i would like to mention that there  are a couple of ways in which you can speak of a function returning more than  one value, both of which are useful, and both of which are supported in python.
functions are first-class objects and can be treated as such.
sparse is better than dense.
the code samples peppering this chapter are intended to simply  illustrate basic features of the language; once you get up to speed, it's not  so much that you'll have better ways of doing what that code does, as that  you'll have better ways of avoiding doing that, using python more like a magic  wand.
we can write: def parse(input, default = 0): try: return int(input), 1, u'parsed  successfully.'
freeform formatting means that the compiler will accept all of the variations of the "internet user's drinking song" below as equivalent: for(i = 99; i > 0; ++i) {
additionally, if, else, while, and the like end with a colon and do not require  parentheses.
many hackers recall in this connection isaac asimov's sf novel the gods  themselves in which a character announces that the number 2 is impossible  - if you're going to believe in more than one universe, you might as well  believe in an infinite number of them.
it is also a daunting obstacle to adults who need to learn the  many ways english speakers may say something to them.
if you want to break a statement over multiple lines, usually because it would be a very long line otherwise, you can end a line with a backslash, and then continue after whitespace, which i suggest you indent to two spaces more than the beginning of the line: print \ u'hello, world!'
web2py in particular cuts out one very  daunting hurdle to new programmers: a command line with a steep learning curve.
if the implementation is easy to explain, it may be a good idea.
com, besides being easy to type when you really mean python.
and people listed legitimate flaws with django and  legitimate reasons they use other alternatives, but one developer got over  thirty upvotes with a response of, "yeah, i am an honest guy, and the  client wanted to charge by the hour.
add 1/3-cup milk, dash of salt, and boil, stirring constantly for 2 minutes.
(the teacher, seeing that he had the correct answer so quickly,  assumed that the boy must have cheated and gave him a spanking as his just  reward.)
() are methods you can create or override for operator overloading; without attempting to explain all of these methods, i will briefly observe that not only is an integer like 1 an object, it is an object that supports quite a number of methods.
if you use all of them, it should be like: def example(required, default = u'default value', *arguments, **keywords): before leaving the topic of functions, i would like to mention that there are a couple of ways in which you can speak of a function returning more than one value, both of which are useful, and both of which are supported in python.
u'curly' i will comment briefly that zero-based indices, while they are a common feature to most major languages, confuse newcomers: it takes a while for beginning programmers to gain the ingrained habit of "you don't start counting at 1; you start counting at 0."
if once you start down the  dark path, forever will it dominate your destiny, consume you it will.
as an aside, note that the arguments appear in a different order than they were given.
~ /^1?$|^(11+?)\1+$/ && print "$_ is  prime"' there is a tradition of writing programs like these that show off your  cleverness.
errors should never pass silently.
if a function has two or more arguments with default values, unnamed arguments are specified from left to right.
take telephone away from billy and assure party on the line the call was a mistake.
another point about usability may be made by looking at "natural"  languages, meaning the kinds of languages people speak (such as english), as  opposed to computer languages and other languages that have been artificially  created.
in addition to if/else/elif and while, python has a for  loop.
that's the only way he could've known what we needed, before we knew it  ourselves.
but let us suppose we did not know that, and we wished to manually  check what the result was.
there are a couple of ways in python programming that we can provide good  usability for other programmers.
complex is better than complicated.
c would be a scientific scalpel, molecular sharp: the most exacting precision you can get unless you go subatomic with assembler or machine language, but treacherously slippery and easy to cut yourself with, something like the scientific-use razor blades which came in a package labelled: "warning: knife is extremely sharp.
if you were born in the u.s. and grew up speaking english, you could presumably not just travel around your state but travel thousands of miles, traveling from state to state coast to coast all the while being able to buy food, fuel, lodging, and the like without language being an issue.
the only surface difference is the letter 'x'.
it is a truism that code is read many more times than it is written, and write-only code is very much "the dark side of code maintainability."
tie billy to clothesline.
if you are going to make a web  interface that allows the user to upload files, you don't want to say, "i  don't know exactly how many the user will want, so i'm deciding five is  probably enough;" you start with one file upload input and add a button  that creates another file upload input, and lets the user keep adding as many  files as are wanted.
the following three functions are equivalent; they take no arguments and return none: def first(): pass def second(): return def third(): return none a function's required arguments are named; their type is not specified.
there is a classic story in mathematics in which one famous mathematician, as a boy, was in class and the teacher wanted some time and so decided to give the students a time-consuming task to keep them busy.
a  language like visual basic may be said to be the opposite on both counts, as  making a very gentle start to programming, but not a good place to grow to be  an expert programmer: the sort of place where you'll be constricted by the  language's ceiling.
it is common practice to build up a long string by creating an  initially empty list, and then bit by bit build up the contents of the string  in the list.
but let us suppose we did not know that, and we wished to manually check what the result was.
this code somewhat flexibly parses string/unicode input for an integer value, returning a default if it cannot be parsed.
explain to kids that you have no idea if shaved cats will sunburn.
please_enter_your_email_address_below)
java might be compared to the equipment owned by a construction company, equipment that allows large organizations and a well-organized army to erect something monumental.
[ u'larry', u'moe', u'curly', ] opposites = {
perl carries on a tradition of one-liners, a program that has only one clever line, like: perl -lne '(1x$_) !
but this way of solving things makes more sense in java than python; in java it is recommended practice to make most or all instance variables private and then define corresponding getters and setters, and perhaps build a counter class that let you guarantee it could only be incremented, read, and optionally reset.
with python + django + pinax the  time is more like hours.
"') for student in students: result.append(student + u' is a student in this course.') return u'\n'.join(result)
so, if you ask for the number that google is named after, ten multiplied by itself a hundred times, python will handle the request correctly:  1), then why not n+1?
one way of writing the same code in python would be: count = 99
in python, comments  are not there to make code understandable.
remove teddy bear from oven and tell jr.
truer to the spirit of python would be to use an integer  and avoid the work of creating a class, let alone accessor methods.
python's objects are in some ways like java and in some ways like  javascript: python objects come from full-fledged classes like java, but are  more dynamic: fields and methods can be deleted from a python object on the  fly, like javascript, even though inheritance is classical and not prototypal.
but it is not entirely easy to learn or read perl, and this is not just something that affects novices.
in code like: if condition: run_function() else: run_other_function()
and this is a recipe to bake jr's teddy bear at 375 and then be left wondering why the house is so full of foul-smelling smoke: proper exception handling removes the teddy bear from the oven, repeatedly if need be, instead of just boldly ignoring problems that need to be addressed properly.
a python comment, like perl and tcl (and one option in php), begins with a  hash mark and continues to the end of the line.
org, is a famous porn site), and python's core library is your best friend.
but what was not  a correct decision was for the iphone web browser to be able to have up to  eight windows open, but
the python community does not favor shows of cleverness in quite  the same way; in fact, saying, "this code is clever," is a respectful  and diplomatic way of saying, "you blew it."
but if invoked as print  teach(u'prof.
visual basic is an easy trade language but a limited native language.
there are some somewhat hackish ways pythonistas use to fake it, notably a > b and a or b, but besides reading somewhat strangely, they run into problems a bit like c macros, where the c macro max(a, b) defined to a > b ?
this little poem speaks against trying to be as clever as you can, and this is something deep in python's veins.
python has been called "executable pseudocode," and is your code's job to be understandable itself.
if your goal is an online store instead of a social network pinax will not likely be of much help, but django + satchmo will.
but the first one, the one with range(), creates a list with a staggering ten billion integers; a workstation with eight gigs of ram doesn't have nearly enough memory to hold the list, and if you try to run it, you may well observe your computer slow to a crawl as more and more memory is used just to create that one array.
(the teacher, seeing that he had the correct answer so quickly, assumed that the boy must have cheated and gave him a spanking as his just reward.)
in c, the following idiom is used to do something to each element in array, with c++ and java following a similar pattern: sum = 0; for(i
perl, designed by a  linguist, is a bit like english in this regard.
however, i do advocate the use of a serious, noteworthy "python++" framework and not the standard library alone: the cgi module works entirely as advertised, but the difference between python + django + pinax and just python with the cgi module is comparable to the difference between python with the cgi module and programming on bare metal in c.
like_this instead of like_this, is a part of the present private implementation, does not represent in any sense the public api, and is subject to change or removal at any time.
the xoltar toolkit provides a module, functional, which is written in pure python, is largely self-documenting code, and provides tools and/or reference implementations for currying and other favorites.
a language like visual basic may be said to be the opposite on both counts, as making a very gentle start to programming, but not a good place to grow to be an expert programmer: the sort of place where you'll be constricted by the language's ceiling.
having looked at that, let's look at another topic: exceptions and errors.
there have been some  efforts to extend the python core language: easy_extend is intended to make it  pythonically easy to tinker with and extend the language syntax.
although practicality beats purity.
there is a well-known  easter egg in python; normally one uses the import statement to let code access  an existing module for a specific task, but if you start the python interpreter  interactively (in itself a powerful learning tool to try things out and learn  some things quickly) and type import this, you get: >>> import this the zen of python, by tim peters beautiful is  better than ugly.
one way, which happens to be implemented by a tuple, is useful if you want to  return (for instance) both a status code and a text description of the status.
a trade  language, such as hausa in nigeria and much of west africa, or swahili in much  of east africa, may or may not have any native speakers at all, but it is an  easy-to-learn language that you can use for basic needs with people who do not  speak your native language.
in c, the following idiom is used to do something to each element in  array, with c++ and java following a similar pattern: sum = 0; for(i
none, *students): result =
perhaps you have seen the famous "mom's brownie  recipe" on the web: remove teddy bear from oven and preheat oven to 375.
in python,  a ternary operator like a > b and a or b can malfunction if its middle  argument is falsy; it is more robust to write (a > b and [a] or [b])[0], at  a significant cost to pythonic ease in reading and understanding.
one of the key features of a good trade language's job description is to be gentle to people who do not eat, sleep, and breathe it.
it has been suggested that top-notch perl programmers are slightly more productive than top-notch python programmers, and if you were to speak a computer language natively, perl would be an excellent choice.
perl is a vast native language and painfully vast as a trade language.
zero, one, and infinity each have their places.
=  u'curly' i will comment briefly that zero-based indices, while they are a common  feature to most major languages, confuse newcomers: it takes a while for  beginning programmers to gain the ingrained habit of "you don't start  counting at 1; you start counting at 0."
but how will i know why python is better than perl?
a famous blog post called python is not java addresses java programmers  rather bluntly on why doing everything you'd do in java is not getting the most  out of python: essentially, if you've been using java for a while and are new to python, do not trust your instincts.
one note to be given: it can be appropriate to put pass in an except clause, so we have: total = 0
[] result.append(u'this class is being taught by ' + teacher + u'.')
the example of a tuple provided above are some of the few values that evaluate to false.
() are methods you can create or override  for operator overloading; without attempting to explain all of these methods, i  will briefly observe that not only is an integer like 1 an object, it is an  object that supports quite a number of methods.
a : b will  double-increment the selected argument if invoked as max(++c, ++d).
the list of languages that have embraced this feature  include c, c++, java, c#, perl, php, and sql, and that's really just naming a  few of the bigger players.
sparse  is better than dense.
errors should never  pass silently.
the function/procedure distinction that exists in c, where a function returns a value and a procedure does not, is not as prominent and python programmers do not usually speak of "procedures."
if you've given it years and  years of hard work, perl breathes very attractively, a native language to love.
necessarily communicates certain basic aspects of your program, like how individual statements should be grouped together (or not).
python is both an easy trade language for those beginning and a deep native language for gurus.
python has comments, but i would like to make a point.
but python pulls off the delicate balancing act of working well as a trade language where a programmer can be productive very quickly after starting, and having room to grow for those programmers who are able to experience it more like a native language.
suppose further that you want to get the integer out of the string, but default to 0 if parsing fails (for instance, u'one' will not be parsed as an integer).
and in fact the essay "why python?" in which eric raymond  said that python's significant whitespace made the first impression of a  "steaming pile of dinosaur dung", goes on to give python some  singular compliments, saying of one particular good experience with python,  "to say i was astonished would have been positively wallowing in  understatement."
and this is the number he gave the teacher.
probably the next step to internationalization after using unicode strings  is, instead of storing the interface language in your code like: print u'please enter your email address below:' you would instead do string look-ups that would pull the appropriate  translation: print translate(messages.
it's not just that the solution we have built works a bit more like java than python, but the problem we were addressing in the first place works more like java than python.
there is a well-known easter egg in python; normally one uses the import statement to let code access an existing module for a specific task, but if you start the python interpreter interactively (in itself a powerful learning tool to try things out and learn some things quickly) and type import this, you get: >>> import this the zen of python, by tim peters beautiful is better than ugly.
if you've given it years and years of hard work, perl breathes very attractively, a native language to love.
terse syntax... more than one way to do  it... default variables.
special cases aren't special enough  to break the rules.
in python, a ternary operator like a > b and a or b can malfunction if its middle argument is falsy; it is more robust to write (a > b and [a] or [b])[0], at a significant cost to pythonic ease in reading and understanding.
java might be compared to the equipment owned by a construction company,  equipment that allows large organizations and a well-organized army to erect  something monumental.
because in python we are  effectively "running the source code," this usually means a faster  feedback cycle than the edit-compile-test process one uses in working with a c  application.
for the web, frameworks like django, turbogears,  and web2py offer significantly greater power with less work in more truly  pythonic fashion.
class counter(object): def __init__(self): self.value = 0 def  increment(self): self.value += 1 def reset(self): self.value = 0
none): if second_number ==
essentially everything else is treated as being truthy, meaning that an if statement will run the if clause and skip any else clause, and a while loop will run for one complete iteration and then check its condition again to see if it should continue or stop.
the move from c to c++ is a move made by extending the core language to directly support objects, templates, and other features.
both of them provide ready-made solution to routine tasks, whether user avatars with gravatar support, or a shopping cart with that works with any of several payment gateways.
here python observes a principle that you should observe in what you pass  on to your users.
% count print u'%d slabs of spam,' % count print u'send one to abuse and just hit delete,' count += 1 print u'%d slabs of spam in my mail!'
whatever brace styles python programmers may happen to use in languages with braces, all the python code looks the same, and while the major brace styles illustrated above are a few of many ways the c code could be laid out, there's only one real way to do it.
but if invoked as print teach(u'prof.
it's not primarily about speed; both are painfully slow, especially if you compare them to calculating 10000000000 * (10000000000 + 1) / 2, which is lightning fast.
measure 1-tsp. salt & a cup nuts and beat all ingredients well.
there should be one-- and preferably only one --obvious  way to do it.
(at a glance, afewwordsincamelcase look a bit more like a block of undifferentiated text than a_few_words_separated_by_underscores if you live and breathe english's alphabet, but if you have worked hard on english but its alphabet is still not your own, afewwordsincamelcase looks absolutely like a block of undifferentiated text next to a_few_words_separated_by_underscores.
or, depending on context, you may create an interface that allows the user to upload at most one file as an avatar, or you may write an opinion survey in which uploading files does not make sense as part of the design.
[] if dog: result.append(u'i have a dog named ' + dog + u'.')
from a usability standpoint, the braces go with the lines to  print out the stanza rather than the for statement or the code after, so the  following is best:
the three statements above represent three basic types: the list, the  dictionary, also called the hash, dict, or occasionally associative array, and  also the tuple.
even if there are not ego issues involved, it's distracting.
if you write a web  script that asks people to enter their age, and someone hits two keys at once  and enters an age of u'22w', you need to be able to roll with it-and this is  nothing next to what might happen if someone is acting maliciously.
i will not be attempting to provide select highlights from the core  library because that would easily be a book in its own right.
if once you start down the dark path, forever will it dominate your destiny, consume you it will.
a more pythonic example might be a simple way to list tags in a webpage.
if a function completes without returning a value, or returns without specifying a value, it returns the special value none, which is like an sql null value.
if your goal is an online store instead of a social network pinax  will not likely be of much help, but django + satchmo will.
because people are intelligent, you can write a recipe book and describe  only the ideal case.
if a function completes without  returning a value, or returns without specifying a value, it returns the  special value none, which is like an sql null value.
nigeria in africa is a  country about the size of texas, and it doesn't have a native language; it has  hundreds of them.
but there is another sense in which you may want a generator that can keep  on returning values.
the dictionary is a like a list, but instead of the index automatically being a whole number, the index can be anything that is immutable.
the enormous english vocabulary with so many ways to say things, and the broad collection of idioms, are tremendous tools for the skilled english communicator.
there was no way django was going to allow me to make enough money."
for many people you meet, english would be their native language, too.
early exposure to fortran left an undeniably foul taste  in eric raymond's mouth, and when he learned that python had significant  whitespace, he repeatedly described python's first impression on him as "a  steaming pile of dinosaur dung."
then you can write: try: result = int(input) except valueerror: result = 0
then you can explicitly name the argument:
there have been some efforts to extend the python core language: easy_extend is intended to make it pythonically easy to tinker with and extend the language syntax.
(in the computer bowl one year, bill gates as moderator asked contestants, "what contest, held annually via usenet, is devoted to examples of obscure, bizarre, incomprehensible, and really bad programming?"
it can appear: try: output_message(warning) finally: log_message(warning) or: try: result = items[0] except indexerror: result = 0
what i have heard consistently is that using a good library really does qualify as a move from "unadorned python" to "python++".
its teaching should therefore be regarded as a criminal offence," or "you can tell how advanced of a society we live in when fortran is the language of supercomputers."
something like xrange() can be  implemented for our purposes as: def xrange(first_number, second_number =
i would choose object oriented methodology over procedural for large  projects, and procedural over object oriented for small to intermediate sized  projects, with some tiny projects not even needing procedural structure.
if you have more than one pet, this method will place a line break between each  sentence.
the best thing of all would be to just use spaces in variable names, but so far the language designers have not supported that route.
that is one thing going on; there is something else going on with strings.
we can write: def parse(input, default = 0): try: return int(input), 1, u'parsed successfully.'
the  enormous english vocabulary with so many ways to say things, and the broad  collection of idioms, are tremendous tools for the skilled english  communicator.
for input in inputs: try: total += int(input) except  valueerror:
and this is the number he gave the  teacher.
you might also like... ajax without javascript or client-side scripting hayward's free intranet employee photo directory usability for hackers: programmers, anthropology, and making  software more usable within the steel orb
charlie is a student in this course.
when you're programming, you need to be able to say, "this is plan a; this is plan b if plan a doesn't work; this is plan c if plan b doesn't work."
the difference between them is that a tuple is immutable, meaning that the list of elements cannot be changed, and a list is mutable, meaning that it can be changed, and more specifically elements can be rearranged, added, and deleted, none of which can be done to a tuple.
namespaces are one  honking great idea -- let's do more of those!
if you only type: result = int(input) your whole program will break on even an innocent typo like entering u'22w'  when asked for their age.
the difference between them is that a tuple is immutable, meaning  that the list of elements cannot be changed, and a list is mutable, meaning  that it can be changed, and more specifically elements can be rearranged,  added, and deleted, none of which can be done to a tuple.
printf("%d slabs of spam in my mail!\n", i); printf("%d slabs of spam,\n", i); printf("send one to abuse and just hit delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } for(i = 99; i > 0; ++i) { printf("%d slabs of spam in my mail!\n", i); printf("%d slabs of spam,\n", i); printf("send one to abuse and just hit delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } for(i = 99; i > 0; ++i) { printf("%d slabs of spam in my mail!\n", i); printf("%d slabs of spam,\n", i); printf("send one to abuse and just hit delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } for(i = 99; i > 0; ++i) { printf("%d slabs of spam in my mail!\n", i); printf("%d slabs of spam,\n", i); printf("send one to abuse and just hit delete,\n"); printf("%d slabs of spam in my mail!\n\n", i + 1); } which is best?
a programmer's strength flows from code  maintainability.
pretend that python is a magic wand that will miraculously do whatever you want without you needing to lifting a finger.
unlike a normal list where you should be able to get things in a fixed order, elements in a dictionary should not be expected to be in any particular order: nothing in the dictionary's job description says that it should give back first the name, then the phone number, then the email.
the example of a tuple provided above are some of the few values that  evaluate to false.
it is also a daunting obstacle to adults who need to learn the many ways english speakers may say something to them.
a  stackoverflow user asked, "have you considered using django and found good  reasons not to?"
but what was not a correct decision was for the iphone web browser to be able to have up to eight windows open, but not nine or more.
if cat: result.append(u'i have a cat named ' + cat + u'.')
although that way may not be obvious at first unless you're  dutch.
there are a couple of ways these multiple results could be unpacked; one is: value, status, explanation =
return default this code somewhat flexibly parses string/unicode input for an integer  value, returning a default if it cannot be parsed.
printf("%d slabs of spam in my  mail!\n", i); printf("%d slabs of spam,\n", i);  printf("send one to abuse and just hit delete,\n"); printf("%d  slabs of spam in my mail!\n\n", i + 1); } the one true brace style did a good job of being thrifty with lines of  screen space when monitors were small, but it is confusing now: the close curly  brace is visually grouped with lines that follow: if i add a line: for(i = 99; i > 0; ++i) { printf("%d slabs of spam in my  mail!\n", i);
in terms of user interface design, for the iphone to allow  exactly one application at a time and for the droid to allow multiple  applications are both sensible approaches: perhaps the droid marketing campaign  insists that we need to run multiple apps, but for a long time the iphone,  designed to run one app at a time, was an uncontested darling.
i will not be attempting to provide select highlights from the core library because that would easily be a book in its own right.
the typing is so-called "duck typing": if it walks like a duck and it  quacks like a duck, it's a duck, and we have already seen one instance of duck  typing at work: if an integer computation overflows, python deftly substitutes  another class that walks like the basic integer class and quacks like the basic  integer class, but can handle millions of digits or more as long as you have  enough memory and processor time.
so if we define a function: def listing(**keywords): for key in keywords: print key + u': ' +  keywords[key] if we then call listing(name='alice', phone='(800) 555-1212',  email='alice@example.com'), it should print out something like: phone: (800) 555-1212 name: alice email: alice@example.com
/usr/bin/python import re import urllib2 class webpage(object): def  __init__(self, url =
(at a glance, afewwordsincamelcase look a bit more like a  block of undifferentiated text than a_few_words_separated_by_underscores if you  live and breathe english's alphabet, but if you have worked hard on english but  its alphabet is still not your own, afewwordsincamelcase looks absolutely like  a block of undifferentiated text next to a_few_words_separated_by_underscores.
return u'\n'.join(result)
~ /^1?$|^(11+?)\1+$/ && print "$_ is prime"' there is a tradition of writing programs like these that show off your cleverness.
apply antiseptic and bandages to scratches sustained while removing  shortening from cat's tail.
programmers stand on one another's toes.
easily  they flow, quick to join you when code you write.
and no matter what choice you make, it's not the only choice out there, and sooner or later you will run into code that is formatted differently.
based on this realization, there is a simple mathematical formula to  calculate the sum of the first n positive integers: the sum is equal to n * (n  + 1) / 2.
the look on bill gates's face was classic, but this answer was not accepted as correct.)
to simplify slightly, "the thing you run" is usually not a separate executable that is derived from the source code; "the thing you run" is effectively the source code.
python is a scripting language, along with such languages as perl, php, ruby, tcl, and shell scripting like bash.
it would not in principle be very difficult to write a program that would  transform freeform syntax to python, "compiling to python" so to  speak and allowing a freeform variant on python, but so far as i know it's  never been done; people who have gotten into python seem to find this unusual  feature, shared with some ridiculed predecessors, to be a decision that was  done right.
and worse than the flaws of any one brace style are the flaws of a  mix of brace styles and the fact that they seem to be tied to personal  investment for programmers who care about writing code well.
for some python software such as cherrypy, if you make a change in  one of your source files, the application immediately reloads it without  needing separately quit and restart, making the feedback cycle even shorter and  more responsive.
jones'), the result will be one line:  u'this class is being taught by prof. jones.'.
remember reading "hi, how are you?" written in greek letters as  "αι &oicron;υ αρ ιυ:"  sometimes just using another language's alphabet is a challenge.
with that stated, it might be suggested that perl is the creation of a linguist, but a linguist who seemed not to be thinking about why a language like english is hard for adults to learn and, in its native form, is a terrible trade language.
and so the teacher told the students to add up the numbers from 1 to 100.
your instincts are tuned to java, not python.
the code samples peppering this chapter are intended to simply illustrate basic features of the language; once you get up to speed, it's not so much that you'll have better ways of doing what that code does, as that you'll have better ways of avoiding doing that, using python more like a magic wand.
in python, it is uncommon to end a statement with a semicolon.
that is, the first argument will be  assigned to dog, and name_pets(u'jazz', u'zappy') will correspondingly name the  dog "jazz" and the cat "zappy."
while count > 0: print u'%d slabs of spam in my mail!'
quicker, easier, more seductive.
the basic idea is that plan a didn't work and you should have a  plan b.
since the days of fixed formatting as in cobol and fortran, there was the invention of what is called freeform formatting, which means that as long as you follow a few basic rules, you can use whitespace to format your code however you please.
english has many things to appreciate as a native language, but these strengths are the opposite of what makes for a good trade language that adults can learn.
the look on bill gates's face was classic, but this answer  was not accepted as correct.)
but deliberately lazy or inappropriately clever  formatting isn't the real problem here either.
even if there are  not ego issues involved, it's distracting.
let cat out of refrigerator.
now i will be discussing "usability for programmers."
what it says is, "try to run these three methods; if anything goes wrong, just ignore it and move on."
the  function/procedure distinction that exists in c, where a function returns a  value and a procedure does not, is not as prominent and python programmers do  not usually speak of "procedures."
(or a function can explicitly return none).