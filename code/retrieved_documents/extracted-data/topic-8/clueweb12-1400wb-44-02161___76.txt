of course the stalin approach to java would pay off about as well as for scheme.
for many of the config files i can think of — log4j,  hibernate, ant (if you’re some sort of nutty nut girl who’s nuts)  — you can programmatically configure them in java code.
is php more suitable as a “scripting language” like bash (albeit for generating web content) or a general purpose language like ruby?
april 2006 jon rowett’s workblog » ruby, java, c#, mullah omar, timothy dalton…: […]
april 2006 paul: if these “scripting languages” are supposed to replace java, then why aren’t they used like java/c++ for building middleware layers?
remember that smalltalk is around for more then 30 years now - and it never make a breakthru.
march 2006 isaac gouy: as we’re still talking about mr gosling’s reaction, the new transcript on artima is similar to what’s spoken on the conference flash video, 33:25 through 37:25 comment at 22.
want  a different problem domain?
there have been multiple responses to gosling’s statements ranging in  sentiment from outrage to amusement: curt hibbs:
neither would the open source guy who cares about solutions, clarity and beauty use a monster language like java.
[…] in gosling didn’t get the memo a statement by james gosling that is too dumb to be true (but alas, it is) is dissected.
by changing the jsp file, the container (like tomcat) recognizes the changes, re-compiles and re-loads it only once for further use.
it’s been 4 days since curt hibbs wrote “reading the actual transcript shows a much more reasonable point of view” and retracted his criticism.
march 2006 sebs: you got beans, we got balls (and free time left) comment at 13.
just  stop lying about them.
yes, but there’s an important distinction that’s not being made here.
this seems strange, because one of the three main reasons* i chose to learn ruby is because of the amount of interest it’s generated in the .net world recently - i just haven’t seen any hostility from the .net people towards ruby, but i’ve seen stacks of it from rank-and-file java developers.
the real  reason dynamic compilation exists is that it makes changing code more flexible  than when precompiled.
can static languages  be made context-sensitive?
march 2006 achilleas margaritis: the way a program is translated to machine code has no relation to what the  program can do.
it’s been 4 days since curt hibbs  wrote “reading the actual transcript shows a much more reasonable point  of view” and retracted his criticism.
in these portions of the  program performance cannot be ignored.
in games for example you need a glue language for game-logic, a dsl which allows the game-designer to specify logic without recompiling the whole engine.
no reason to waste time on him, other than for the amusement value.
rails, for instance, allots one database  connection per thread, and that connection is persisted for the life of the  server.
it is perfectly possible to write a webserver in pure perl, python or ruby, and in fact rails and catalyst ship with such included for development purposes (although neither is not particularly optimised or feature-complete, so is not recommended for actual deployment).
i’ve seen great systems written in those same languages.
however, you can pin the types down retrospectively as needed, instead of  burdening yourself with a static type system during development.
python can do many of the same tricks…and choice is good.
march 2006 isaac gouy: ryan, you were quick to make a personal attack on james gosling accusing him of spreading misinformation and malicious lies, as-soon-as the tabloid headline version of his comments was reported.
it’s called parametric polymorphism (fragments of system-f) in  conjunction with type inference (hindley-milner type unification), and  it’s been understood now for decades.
march 2006 alex bunardzic: ryan said:
that comment jars a little as its a far out  dated term normally reserved for cheap pot-shots.
stalin is an approach you’d apply to larger chunks of code you expect to be in production for some longer period of time, e.g. weeks or months.
but none of them attempt any serious breadth in the application domain it’s hard to determine what kind of breadth is missing when you consider the capabilities provided by modern dynamic language environments, the platforms they run on, and the extensions and bridges that allow them to use damn near any other program or library available.
not: they just generate web pages.
if i define a certain player as being a type, and i’ve made a  decision to cast that player as a type while i was being governed by the  contextual circumstances, when the context changes, that type will have a hell  of a problem getting out of the cast.
–cnemelka comment at 20.
april 2006 somewhere in… colourful moments »
i mean, whats the bare bone of it,  technically spoken?
march 2006 a bigger soapbox [@lesscode.org]: […] sys-con media publisher/editor jeremy geelan, a fine chap who  interviewed the father of java just the other day, contacted me about  re-publishing gosling didn’t get the memo on sys-con.com.
gosling didn’t get the memo: […] read moreâ |â digg story […] pingback at 13.
in peter siebel’s book, practical common lisp, he relays an anecdote  from eran gatt regarding the use of lisp in the deep space 1 mission in 1998,  specifically pointing out the usefulness of having a read-eval-print loop  available on a remote piece of hardware.
when you present that  many ‘generate web page’ examples it becomes understandable that an  outsider like james gosling has the impression that php and ruby are just used  to generate web pages.
that’s stretching it.
see i think it’s wrong to  suggest that python and ruby are targeting the 80% of java projects.
java’s older sister, self, is  now a fine 19 year old, though only available on mac os x (fine by me).
on “they just generate web pages” and get their power through specialization: they just generate web pages.
who cares what james gosling thinks?
there is a  reason why pojo has a name (plain old java objects, iirc).
but of course no one here knows that, because its not about truth, its only about hype.
while the benefits of dynamic languages–first realized millions of years ago in lisp and smalltalk–are well understood in academia, it managers and sun certified developers are perfectly accepting of our static = professional / dynamic = amateurish labeling scheme.
dynamic, static,  assemblique.
107 responses to “gosling didn’t get the memo
there are languages specialized for a certain task that are incapable of being used for anything else.
it’s sad, james gosling is clueless chad fowler:
is php more suitable as a “scripting language” like  bash (albeit for generating web content) or a general purpose language like  ruby?
bash is for chaining commands together.
it’s fast enough for a wider range of applications compared to ruby - and  it’snot a scripting language.
march 2006 barryd: i do find it somewhat telling that you’re happy to bang the drum for scripting in the form of perl, ruby et al, and hammer on about scalability but you fail to mention vbscript.
march 2006 twifkak: martin something said: wow… isn’t is wasteful to spend all the time you save by using  ruby/python et.
i can do something very similiar to scripting in compiled languages too, using jsp or asp or whatever… i do not see the point.
php, ruby,  python, get it done.
now, how am i supposed to do  that with the part written in python?
the idea that java is somehow capable of a larger breadth of  problems is absurd.
i have  a feeling that “interplanetary navigation” will become some kind of  standing joke/meme.
it’s where most of the development is taking place.
a real language shouldn’t need an extra language to constrain it.
march 2006 bertus: alex bunardzic wrote: if i define a certain player as being a type, and ive made a decision to cast that player as a type while i was being governed by the contextual circumstances, when the context changes, that type will have a hell of a problem getting out of the cast.
but dynamic typing is and was only a  kludge to have a certain level of expressiveness without going thru the  difficult task to create a good type system.
nur james gosling scheint  es noch nicht begriffen zu haben.
perhaps you too should reconsider your comments.
php was originally very much specialized for generating web content and that’s its forte to this day.
producs are another thing;)).
every use of lamp is essentially using these “scripting” languages forglue â they “assume the existence of a set of powerful components and are intended primarily for connecting components together” (john k. ousterhout).
excel automation, i’ve seen trading houses  and banks where prediction and reporting models are built in excel using vb for  applications.
java technology is not fault tolerant and is not designed, manufactured, or intended for use or resale as online control equipment in hazardous environments requiring fail-safe performance, such as in the operation of nuclear facilities, aircraft navigation or communication systems, air traffic control, direct life support machines, or weapons systems, in which the failure of java technology could lead directly to death, personal injury, or severe physical or environmental damage.
but hey, i’m no expert.
only lisp can if you use lot of type constraining  declares.
and that’s my point no one is doing such things with php  because it’s not meant for that sort of thing.
they do have the look’n’feel of dynamic languages but, honestly, they are not.
but guess what: it’s totally static.
it’s a poor  musician that blames his instrument.
so when i see how a language like ruby does in performance tests, often 100  times slower than the leader, i have to ask myself whether it has any place in  application programming.
it’s geared heavily toward generating web content, though it can also be used outside the context of a web server, and such code doesn’t end nearly up as grotesque as, say, writing servers inbash using netcat.
compiled, interpreted or compiled  to bytecode then interpreted, whatever.
look, dynamic typing is as old as programming  languages.
you can pin the types down retrospectively as needed, instead of burdening yourself with a static type system during development.
do you lie about anything that’s not your preference?
march 2006 alex bunardzic: i wouldn’t downplay the ’scripting’ aspect, ryan.
and even so, they can’t stand against apache speed-wise.
does being a  java advocate give gosling a license to say whatever he wants without any kind  of basic fact checking or respect for basic, fundamental scientific process?
this was the plan when http was originally designed but has only recently begun to really catch on.
this does not require you to champion or otherwise support these technologies â just stop lying about them.
static typing is an optimisation, but also compiler verifiable documentation and specification.
if  not, php is only usable for scripting or with other words for glueing  componentes together.
is ruby better than …?
and this has nothing to  do with the fact that java is precompiled or dynamically compiled (from source  code to machine code, that is, not bytecode); it has to do with the language  itself.
computer are getting faster and at some point in time you can even affort a 100  times slower language to gain some comfort.
and scripting  languages normally do lack an instance with an infinite loop that may serve as  container for pooling etc. - thats the punchline.
those who placed technical excellence and pragmaticism above religious attachment and vendor cronyism were easily convinced of the benefits that broadening their definition of acceptable technologies could bring.
digg php’s scalability and performance:
one year ago, this type of behavior could be attributed to a lack of documentation and discussion on these issues, today it’s impossible to attribute to anything but malice.
it  looks like lowly javascript with its ajax creates the next generation of  client-side applications, while java applets went nowhere in this direction.
in “java is the suv of programming tools”, philip greenspun  writes “ascripting language such as php or perl”.
he says java is “not fun” and far less productive than php, python or ruby for web development.
partial-compilation to “unroll” some of the dynamism might make  more of the code available to a stalin compiler.
march 2006 remi broemeling: as denyerec has implied, eve online would be a good example of enterprise,  non-web-page usage of python.
if i use for example php, i have a web-server written in c, which uses a  module written in c to execute a language which uses libraries written in c to  access a database-server written in c. can you write all this stuff in php?
because of its runtime model which is very different from the runtime model  of ruby.
we managed to drag a lot of them about halfway to lisp.
and yes, it’s fast (but not always as fast as  c++, only in certain areas).
you acknowledge that licensed software is not designed or intended for use in the design, construction, operation or maintenance of any nuclear facility…” comment at 29.
the thing is, as you point out in your article, the knowledge that this is spew is well-documented.
so, english is a general-purpose natural language.
asp is scalable, if you’re sensible in your coding.
only lisp can if you use lot of type constraining declares.
april 2006 patrick logan: the problem is that stalin only works with relativly static and also only with “closed-world” programs.
, java adherents think differently.
and of course no one ever called ocaml a  scripting language too.
july 2006 cnemelka: i’ve seen a 70 year old carpenter put up a wall faster with a hammer  than a 20 year old carpenter using a nail gun.
and although speaking  of scripting languages at that point you could i.e. use java like normal cgi  (but i think no one would rather like to do that).
« i’ll be speaking at canada on  rails conference time to stop obsessing about the infrastructure?
simply because they are only  useful as ‘glue’ between programs which do the real work.
unlike c, vm-based languages such as ruby, python, and java have  associated initial load times just to get the vm into memory.
i was  referring to the typing.
by not keeping  the state on the server (but in the database), you can have as many servers to  handle the requests as you want.
it  doesn’t look like i’m the only one either as ryan tomayko at  lesscode.org seems to have paid comment to goslings post in quite some depth
this technique is also known to result in dynamic language advocates going  absolute bat-shit crazy and making complete fools of themselves.
static typing is an optimisation; we all know what they say about premature optimisation, right?
i don’t have any numbers at hand for current java or lisp compilers.
principalmente o php.
you accuse james gosling of spreading misinformation about the current  state of dynamic languages, presumably including the current state of php and  ruby performance.
so the engine is written in c/c++ and the  game-logic in some dsl.
what’s all the fuss about ruby on rails performance: a subjective analysis of two high-level, object-oriented languages making the case for php at yahoo!
there have been no fewer than three head explosions recorded as a result of this technique.
java is a well  known memory hog, but if you substract the usage of the vm and the loaded  standard-libs (which takes more space then the optimized libs for ruby for  example which are written in c) you see that java uses noticable less space  then ruby for most oo-based applications.
and that’s exactly where it’s strength lies.
when nasa wanted a space ship to navigate under its own autonomous  control for the first time (deep space i, in a planetary shadow), it had the  ship’s computer run dynamic lisp code.
more relevantly, perhaps, is that the bug which needed to be addressed concerned a race condition due to the concurrent nature of the software, not any of the type-safety or other shallow bugs that might be addressed by adopting java instead.
algol-derived static typing is detrimental and will be left behind  sooner or later.
and if a programmer really takes care to  program in a way a type-inferencer can type a dynamic program to a static one,  then he also can write those types down from the beginning.
but for other usage patterns which are very common in your average ruby or php program, stalin won’t give you much benefit (or won’t even work because it don’t support the whole scheme standard).
sure enough, in backoffice 2000 server’s license (for  example), i found: note on java support.
why isn’t there any free lisp (for commercial usage) with an api the  size of java (or at least threading + platform independent gui + networking  stuff) ??
sorry but jsps are not dynamic as such, even if the expression language  suggests otherwise.
in dynamic  languages, you are generally not required to leave the core language to get  that specialization: you use techniques like meta-programming and dsls or just  include/require/use some designated file at a designated point and let it do  it’s thing with the api.
march 2006 twifkak: when i was, like, 10 years younger (and too young to care about dynamic  languages or beautiful code), i visited the home ofkipr fellow dave lavery, who  happens to work for nasa.
how easy will it be to pull such a stunt?
eventually, they  were forced to accept the fact that non-application specialists are going to  take over and do their own financial shit using spreadsheets.
march 2006 twifkak: good post, alderete.
i’d also like to note that exposing resource representations via http/urls has been moving into areas other than “generating web pages”.
if you’re happy with the 80% work, fine.
this was true a few  years ago, anyway.
gosling thinks ruby just generates web pages david heinemeier hansson: pay no attention to the heathens and  distinguishing power from versatility assaf: james gosling explains what’s wrong with java james robertson: the static empire gets nervous frank wiles: seriously funny all we’re asking is that you stop spreading misinformation about the  current state of dynamic languages to the press, analysts, and your customers.
the technical details of how it manages this dynamicity are of no  importance to me (and, in fact, it was touched on above that lisp is a fully  dynamic language that can be interpretedor compiled).
this is a strongly typed, type inferencing, purely  functional language.
the web server is becoming a key piece of integration  infrastructure.
[…] there is an ongoing discussion because of some claims made by james gosling about dynamic languages.
so the engine is written in c/c++ and the game-logic in some dsl.
memory  consumption is amuch greater sticking point.
sorry, i thought it had  something to do with honestly entertaining the possibility that other opinions  might actually be valid.
i’ve seen great systems written in languages most of you have never  heard of (edl anyone?).
now, 10 years ago, i was 12, so don’t bet your life that my facts are straight.
you  could say in the  view, and from the controller, pass objects of twoentirely different  classes that implement the getstuff() method.
i worked for another company who found they had to use 45 web servers  to run their ejb site rather than the 30 which it took to run their vbscript  site.
it’s boring to scale with ruby on rails does ruby on rails scale?
[…] several weeks ago there was a notable bit of controversy over some comments made by james gosling, father of the java programming language.
how believable will the  pulling the wool over someone’s eyes be?
march 2006 isaac gouy:
march 2006 sam: more and more of my projects are ending up in scheme (gambit-c to be  precise).
march 2006 sex, drugs & compiler construction »
[…] scripting languages?
i’ve had numerous  discussions with java advocates in which ruby, python and any other dynamically  typed language has been dismissed as a meer scripting language.
using java for web development must not be very easy, popular or  productive.
this is the  same site that published gosling’s original remarks.
so why should ruby change that now?
march 2006 isaac gouy: carl, also see the flawed benchmarks page - yes, the point of scripting  languages is to script stuff written in other languages.
but dynamic typed languages like ruby won’t be the future too.
worry about it if it does.
that comment jars a little as its a far out dated term normally reserved for cheap pot-shots.
it reveals why static languages are not real  languages â€“ they need other languages to constrain them.
the parts in  java can scale to dozens or more computers simply by using the facade pattern  with stateless session beans calling pojo’s.
similarly, straight-forward systems like rest, microformats, and atom are  generally considered legitimate alternatives to the vendor/analyst/press  peddled technologies like ws-* for a wide range of integration issues.
a entrevista por ser encontrada aqui e os  comentários do ryan aqui ps: a entrevista e os comentários  estão em inglês.
specialization and enhanced capabilities related to generating and serving hyper-media over http are and will continue to increase in value.
this makes them bad candidates for the typical “script-based” (by your definition) cgi.
someone  needs to tell gosling his baby was ugly then, and even uglier now.
i think bash is a good example of a specialized  “scripting language”.
they don’t need the xml  languages.
i’ve seen excellent db admins who think that pl-sql is the only language you should ever write in.
i’ve seen countless projects fail because of issues at layer 8 of the  osi model (politics=layer 8, for those of you who think there are only 7 layers)
still, such languages are a subset of the â€˜general  purpose’ natural languages (and their dialects thereof).
only exceptions are benchmarks where most time is spend in libs like  regular-expression-matching or simmilar.
march 2006 isaac gouy: ryan, you were quick to make a personal attack on james gosling accusing  him of spreading misinformation and malicious lies, as-soon-as the tabloid  headline version of his comments was reported.
and they should’t cede the whole program space to the  venerable compiled warhorses.
march 2006 john: you couldn’t write a library that does, say, interplanetary navigation.
nothing mysterious - ruby on  rails marketing & hype.
blog archive » sun’s gosling on  ruby and php:
thats all, simple like that.
parsing every phrase of the prepared keynote address might have thrown up  something interesting, but is it really worth doing for a second-hand version  of an extemporary answer to a question from the audience?
interplanetary navigation is still a dream of a far off future.
dynamic languages are making a resurgence, not a comeback since they never  really went away, and for many it will be a good, productive and profitable  time.
if you’re happy with the 80%  work, fine.
this technique is also known to result in dynamic language advocates going absolute bat-shit crazy and making complete fools of themselves.
contrast that with static languages, where you are forced to create a completely separate “scripting language” when you need to provide a constrained/specialized language (this is why xml is used so heavily in java for things like o/r mapping, dependency injection, configuration, build processes, etc. — xml is java’s scripting language).
i of course, will remain open minded that ruby may be better than say java at some tasks but for the… trackback at 13.
but not “none of these technologies have underwent huge feature or stability increases in the past year.”
ñð·ñðºð¾ð²ñðµ ð²ð¾ð¹ð½ñ: ðð¶ðµð¹ð¼ñ ðð¾ñð»ð¸ð½ð³ ð¾ ð½ðµð¿ð¾ð»ð½ð¾ñðµð½ð½ð¾ññð¸ ñðºñð¸ð¿ñð¾ð²ññ ñð·ñðºð¾ð²: […] ððµñð´ð¸ð²ð¸ñðµð»ñð½ð¾, ññð¾ ñð°ðºð¾ð³ð¾ ñð¾ð´ð° ðºð¾ð¼ð¼ðµð½ñð°ñð¸ð¸ ð²ñð·ð²ð°ð»ð¸ ñð¸ñð¾ðºññ ð¾ñð²ðµñð½ññ ñðµð°ðºñð¸ñ. ð ðºð°ñðµññð²ðµ ð¾ð´ð½ð¾ð³ð¾
“php and ruby are perfectly fine systems,” he continued, “but they are scripting languages james pulled this directly out of “effective java advocacy beans”, section 6.8.3 “dealing with questions on dynamic languages”: first, call anything not statically compiled a “scripting language”.
and  then you use php / ruby on rails ‘generate web page’ examples for 13 of 15 links on scalability and performance.
příznivcům dynamických jazyků na jak na city, tak  na
it’s an excellent solution for certain goals but it isn’t unique,  it isn’t absolutely universal!
march 2006 thought leadership: more thoughts on ruby and why it isn’t enterprise i previously blogged on large enterprises and why they don’t care about ruby and was rightfully accused of bashing folks in the ruby community but not providing the answer to my original statement.
i’ve seen crappy systems written in  java/c/c++/vb/lisp/algol/forth,etc,etc, etc.
march 2006 notes » blog archive » dynamic languages and choosing a  technology for a project: […] an extended post responding to james gosling’s java is  under no serious threat from php, ruby, or c# (that site, java.sys-con.com, is  the worst i’ve enountered for quite a while with regard to ad content  — annyoing pop-up dhtml ads not caught by firefox’s pop-up blocker,  a million flashing, blinking, and whirling ads.
april 2006 patrick logan: every use of lamp is essentially using these “scripting”  languages for middleware.
and although speaking of scripting languages at that point you could i.e. use java like normal cgi (but i think no one would rather like to do that).
march 2006 alan: i’m no expert, but dissing dynamic languages because they don’t  do “interplanetary navigation” is just contrarian unhistorical  blather.
that means it is  called (from somewhere), then loaded, executed and ends, thats all, and what  concerns me, i’m perfectly fine with that.
you expect more from people who have an m.s — after all they don’t go to such schools just to learn compilers.
java at some tasks but for the… trackback at 13.
its the same for me if it is interpreted, pre-compiled into p-code (or  similiar) or executable, cgi or fast-cgi, module or stand-alone, as long as it  behaves like intended i’ll befine.
this was true a few years ago, anyway.
really, what programmer is worth his salt that only  knows and writes in one language?
march 2006 dennis: wow.
memory consumption is amuch greater sticking point.
java technology is not fault tolerant and is not designed,  manufactured, or intended for use or resale as online control equipment in  hazardous environments requiring fail-safe performance, such as in the  operation of nuclear facilities, aircraft navigation or communication systems,  air traffic control, direct life support machines, or weapons systems, in which  the failure of java technology could lead directly to death, personal injury,  or severe physical or environmental damage.
when someone unfamiliar with modern dynamic languages and experienced in java hears someone say, “they’re scripting languages, and get their power through specialization,” they are being misled into thinking that these languages are like bash and can be used only for a single specialized scenarios, which is obvious not the case: they can be contrained and specialized as much or as little as required and become useful in multiple specialized scenarios.
april 2006 carl: the problem is that stalin only works with relativly static and also only  with “closed-world” programs.
so all people who  thik that dynamic typing is some kind of new trend, are way off the mark.
but not “none of these technologies have underwent huge feature or stability  increases in the past year.”
nur james gosling scheint es noch nicht begriffen zu haben.
do i get to be really pissed of if guido doesn’t  prefer java over python?
while it is not a ready-to-go package with lots of std libraries, it is quite fast, small, customizable and has a strong and very smart community.
march 2006 andi: good old albert knew it: it’s all relative.
sorry but jsps are not dynamic as such, even if the expression language suggests otherwise.
the technical details of how it manages this dynamicity are of no importance to me (and, in fact, it was touched on above that lisp is a fully dynamic language that can be interpretedor compiled).
while i stand steadfastly by james’ analysis of the current quantity of language, we will quickly diverge in opinion from here.
while, when coding java, your ide blinks angrily at you when you try to call new integer(5).trim(), you’ll get no flak from jsp el, because there, types are not evaluated until runtime.
let’s lay  onto the ground and wait to die ?
” seo sanghyeon: on “they just generate web pages”, python has… revision control system spam filter with outlook plugin speciailized gui program for genealogy sophiscated plotting library etc ad nauseum.
â€“ haskell, ocaml,  clean, whatever.
actually, and i realize james was pointing primarily at the newcomers to the dynamic language crowd, nasa has used lisp extensively in the past.
march 2006 ahsan: do databases rot the mind?
march 2006 wordpress » blog archive » distinguishing power from versatility : […] update:
and they should’t cede the whole program space to the venerable compiled warhorses.
do you know the full context in  which the remarks were made?
if i may borrow an example from the natural languages â if someone in everyday situation suddenly starts waving a flag above his head, that could get easily misinterpreted as being an act of patriotism, of flag desecration, and many other things.
their motto is “tap the power of lamp for service-oriented applications”.
the situation you describe parallels closely the situation in real (non-virtual) world.
march 2006 mmcclellan: and you’re right: we were not out to win over the lisp programmers; we were after the c++ programmers.
but none really worked for a wide range of real programs.
this post asks for the following: all  we’re asking is that you stop spreading misinformation about the current  state of dynamic languages to the press, analysts, and your customers.
in “why  php scales - a cranky, snarky answer”, george schlossnagle writes  “php (andscripting languages in general)…”.
so today i decided to do some research on what jini was all about and how those ideas could benefit my current line of thinking.
there are languages specialized for a certain task that are incapable of  being used for anything else.
what i guess amazes me more is that someone like gosling, with his  education and apparent experience, is so worried about having his ivory tower  renovated, has resorted to the technical equivalent of ad hominem attacks.
march 2006 isaac gouy: as we’re still talking about mr gosling’s reaction, the new transcript on artima is similar to what’s spoken on the conference  flash video, 33:25 through 37:25 comment at 22.
the idea that java is somehow capable of a larger breadth of problems is absurd.
my aging brain recalls very simular emotional arguements from lisp vs. fortran advocates.
just random note along the same lines oracle (10g for windows) and  ibm/rational (used by both clearquest and clearcase) both install perl 5.6 in  their default windows installs.
besides, he doesn’t do “interplanetary navigation” so nobody in their right mind would take him seriously.
march 2006 barryd: i do find it somewhat telling that you’re happy to bang the drum for  scripting in the form of perl, ruby et al, and hammer on about scalability but  you fail to mention vbscript.
march 2006 xml is java’s scripting language - coder’s eye: […] great article at lesscode.org, responding to gosling’s dismissal of scripting languages.
java itself is evolving probably better than other languages and it has the best api you need.
sun microsystems, inc. has contractually obligated microsoft to make this disclaimer.
and lisp was, in fact, doing the  navigation.
two or three years ago we have someone at the local lug who gave a talk about how they wrote a pure-perl webserver which got them much better performance than they could achieve using apache + mod_perl.
a real language shouldn’t need  an extra language to constrain it.
that’s because the jsp expression language is a dynamic language,  albeit not a general purpose one.
march 2006 gábor farkas: anonymous: i am currently engaged in writing an enterprise application.
i believe that a majority of people in it now consider dynamic languages  like … to be very much capable of sitting at the table … if that is the case why do you feel the need to respond so strongly against  something that verges on gossip?
in “confounding: sun vs. scripting languages”, peter yared  writes “…scripting languages like php and  ruby…”.
so, in all but the most idiotic setups, webapps written in ruby and python are not being run like scripts.
thanks for not returning the favor.
(all the power, none of the crap.)
and i believe a whole lot of the database stuff is.
after watching good  people likemartin lamonica and jon udell balance out the mainstream tech press  with coverage of lessish tools and languages,and having seen forward  looking companies likeredmonk inject themselves into the traditional analyst  racket with smart, honest, and unignorable critique,and having seen  herds of java luminaries migrate to simpler, more agile tools and languages, and after hearing bill gates say that less code was the only metric, and having watched david, bill, ian, adrian, phillip, aristotle, harry,  mark, mark, chad, curt, james and many other extremely talented  programmers dismantle all the common hollow arguments for superfluous  complexity and replace them with simple methodologies andworking code,  after all that i just figured there wasn’t much to do around here.
april 2006 isaac gouy: stalin generates much better code stalin is installed on the computer language shootout but no one has  contributed programs.
python are very slow.
march 2006 isaac gouy: gigo do you have a sufficiently accurate source text  for this kind of phrase-by-phrase analysis?
if you only remember one thing, that java is about interplanetary  navigation, not serving web pages, that’s enough to summarize everything  that’s wrong with java.
not a  bit of dynamism.
even though one tends to accept/recognize when the trade press like to sensationalize such things, i feel terrible when a phd/m.s talks like a slashdotter/high schooler/”digg”er.
static typing is an  optimisation; we all know what they say about premature optimisation, right?
on several factors, one of which is the nature of the team using the technology.
along the  way, the article churns out a very long list of links to sites and blog posts  containing ammo for fighting the java crowd (and their associates over at c#  central, etcetera ).
php, ruby, python, get it done.
gosling acha que ruby só gera páginas web: […] agora é oficial: o autor de java não entende de linguagens de programação.
a script is not an application.
so solutions could be dynamically provided, if needed, and so that the basic code would be smart.
indeed, ask.com was for many years getting along fine with a vbscript-based  website.
and that’s exactly where  it’s strength lies.
many languages fill very well-defined (or in some cases, better performing) domains and should be used there.
so  it’s sometimes hard to separate the specialized pieces from the general  purpose pieces.
dynamic language designers shouldn’t forget that computers are still very much valued in their ability to do computations (hence the name!)
since due to  development in many opensource projects such fop , xml , apache , eclipse and  opensympony will lead java to be the king of internet kingdom !!
ryan tomayko has a great post called gosling  didn’t get the memo that explains and link to the sea change we’ve  seen over the last year or more.
he’s an obviously interested party, with a party line to spew.
march 2006 anonymous: minds changed.
in java the price for the better performance is the static types you have to use as a programmer (and i for myself don’t even consider static typing as a burden, but thats different topic).
the rest are just fooling themselves into buying into a more  complex solution because it makes them feel good.
i believe one of the reasons the term “scripting language” has stuck with them is partially because it’s become so common to create mini-languages (i.e. dsls) in dynamic languages that are specialized for certain tasks.
like there’s a debate here.
it is simply not possible for me to add anything to the massive set of material addressing this topic.
stalin is also a decade old.
great big pieces of it are.
and just another note here: they just closed the java consulting depeartment in germany - a “strategic decision.”
it’s stated precisely in the article.
same goes for ruby (even if ruby is a much better language then php, but also so slow that its nit possible to write even the runtime-libs of ruby in ruby without having an unbearable slow program).
and guess why… take a look at ocaml.
the difference between being able to handle 1,000,000 and 10,000,000 data points is the difference between a sale and no sale.
every use of lamp is  essentially using these “scripting” languages forglue â€“ they “assume the existence of a set of  powerful components and are intended primarily for connecting components  together” (john k. ousterhout).
digg php’s scalability and performance : […] several weeks ago there was a notable bit of controversy over  some comments made by james gosling, father of the java programming language.
april 2006 patrick logan: if you really want a lisp program to compete performancewise with java, you  end up writing a statically typed program in lisp using lots of declares which  fix the types of nearly everything.
design by ratter / robert powered by wordpress.de
you just described every program lacking an infinite loop.
it looks like lowly javascript with its ajax creates the next generation of client-side applications, while java applets went nowhere in this direction.
haskell, ocaml, clean, whatever.
like bash, this seems to be working extremely well.
in java i use a web-server written in java, huge libs, written in java to access a db-server written in c (i also could use a db which is written in java, there are some).
respectful debate, honesty, passion, and working systems  created an environment that not even the most die-hard enterprise architect
or “none of these technologies have undergone huge feature or stability increases in the past year.”
it is a language executed as script.
gosling shows his ignorance regarding the current feature set provided by dynamic languages and what people are using them for.
march 2006 twifkak: anon: i am currently engaged in writing an enterprise application.
at the idea ms would slip this into a eula, that  i had to verify it.
now, how am i supposed to do that  with the part written in python?
it’s obvious why this costs much more memory  - but it’s not obvious how ruby can made more optimal without totally  redefining its runtime semantics.
scalability: performance: there have been multiple responses to gosling’s statements ranging in sentiment from outrage to amusement: all we’re asking is that you stop spreading misinformation about the current state of dynamic languages to the press, analysts, and your customers.
i just read through this entire blog and was  transported back to 1972 (or so) when i first encountered programming.
want a different problem domain?
there have  been no fewer than three head explosions recorded as a result of this technique.
br, ~a comment at 13.
something’s wrong with this picture.
i believe that a majority of people in it now consider dynamic languages like perl, ruby, python, and php to be very much capable of sitting at the table with java and .net for a wide range of common technical problems.
change the context, and the interpretation of the language constructs changes.
in “why php scales - a cranky, snarky answer”, george schlossnagle writes “php (andscripting languages in general)…”.
it fufils all the criteria you’ve mentioned above.
people  don’t, however, because the java code ends up looking even uglier than  the xml files.
it might affect you, it probably doesn’t.
even the hypothetical future interplanetary staff, which he dragged in as his crown argument, will be writing scripts instead on relying on statically typed java applications to guide them while they hurl through the space.
i’ve seen crappy systems written in java/c/c++/vb/lisp/algol/forth,etc,etc, etc.
march 2006 cees’ blog » blog archive » lesscode dissects  gosling’s fud: […] in gosling didn’t get the memo a statement by james
vášně :) asi nejlepší reakcí, jakou  jsem viděl, je gosling didn’t get the memo.
march 2006 aristotle pagaltzis: carl:
all i wanted to point out is that it is the same for me how the script is executed.
more trademark nonsensical metaphors will not make you look any smarter; really.
partial-compilation to “unroll” some of the dynamism might make more of the code available to a stalin compiler.
other programming languages are not so weak and useless  as you can think […] pingback at 16.
march 2006 or something »
cheers, george comment at 13.
march 2006 steve reno: (all the power, none of the  crap.)
i agree with you in this point.
there’s no java in that computer now.
which, again, is perfectly fine and correct and the best possible way of performing that task.
and scripting languages normally do lack an instance with an infinite loop that may serve as container for pooling etc. - thats the punchline.
actually, and i realize james was pointing primarily at the newcomers to  the dynamic language crowd, nasa has used lisp extensively in the past.
when jini’s roamed the earth: […] in preparation for working on the specs for hlvm (high level virtual machine) i have been brainstorming on what the future of languages and language features might be.
march 2006 achilleas margaritis: the way a program is translated to machine code has no relation to what the program can do.
the troll patrol may take me away,  now.
there arelots of industry luminaries, all spewing their corporate  lines.
so to get comperable performance in lisp you also have to program in a way comparable to java.
this is certainly not true for the stalin compiler for scheme, for example.
besides, he doesn’t do  “interplanetary navigation” so nobody in their right mind would  take him seriously.
oh what a great post, really proved gosling wrong.
railsexpress.blog why people are upset
see the artima comments comment at 17.
sure those are microbenches - but microbenches are mostly a problem for java because of the dynamic recompilation in the vm which makes programs run more slowly in the beginning.
i’ve been blissfully neglecting this site for months with the  assumption that a large part of our goal was completed.
april 2006 paul: if these “scripting languages” are supposed to replace java,  then why aren’t they used like java/c++ for building middleware layers?
but then you’d have to wonder why the language was so less expressive.
“php and ruby are perfectly fine systems,” he  continued, “but they are scripting languages and get their power through  specialization: they just generate web pages.
there is a reason why pojo has a name (plain old java objects, iirc).
in this article(page 4 specifically) from 1999, bill venners who went on to found artima speaks to bill joy and then james gosling.
as the current nike commercial (running during college basketball) says,  “let your game do the talking.”
while, when coding java, your ide blinks angrily at  you when you try to callnew integer(5).trim(), you’ll get no  flak from jsp el, because there, types are not evaluated until runtime.
rails, for instance, allots one database connection per thread, and that connection is persisted for the life of the server.
maybe those scriping language will replace languages like java sometimes.
march 2006 carl: why are ruby and php scripting languages?
this is stuff used by  thousands and thousands of people on a daily basis internally (and the sap it  is something that actually works..
you are  effectively saying that java does not have the facilities necessary to create  dsls which can express configuration more tersely than xml.
well i just wanted to nail down what a script does.
using a general purpose language but extending it in places that would  traditionally require “scripting” is the fundamental design  principal behind rails, django, tg, seaside, etc.
they assume some brain power behind the powers that use them.
now, 10 years ago, i was 12, so don’t bet your life that my facts are  straight.
if you ask bjarne  stroustrup about c++, he is known to defend c++’s successes in a wide  area of applications(which is wider than java’s).
sun microsystems, inc. has  contractually obligated microsoft to make this disclaimer.
yet the compiled code isfaster than c++.
while none of them have any basis in reality, they have proven  sufficient in creating fear and uncertainty in the minds of those who are  evaluating these technologies.
not a bit of dynamism.
and i recommend a read!
gosling is keeping his head in the sand.
march 2006 aristotle pagaltzis: please just learn a language with type inferencing before you make any further statements or simply don’t say anything at all.
for instance, some people occasionally use smoke signals to communicate messages.
gosling didn’t get the  memo: […] statisch getypte sprachen sind ja sowas von out.
eventually, they were forced to accept the fact that non-application specialists are going to take over and do their own financial shit using spreadsheets.
march 2006 straw dogs code blog »
static typing is an optimisation, but also compiler verifiable  documentation and specification.
in peter siebel’s book, practical common lisp, he relays an anecdote from eran gatt regarding the use of lisp in the deep space 1 mission in 1998, specifically pointing out the usefulness of having a read-eval-print loop available on a remote piece of hardware.
but they use  python in their products too.
what do they have to do with generating webpages?
see i think it’s wrong to suggest that python and ruby are targeting the 80% of java projects.
a entrevista por ser encontrada aqui e os comentários do ryan aqui ps: a entrevista e os comentários estão em inglês.
i can do something very similiar to scripting in compiled languages too,  using jsp or asp or whatever… i do not see the point.
“just to add another use of dynamic languages in big corps: python  for example is used by sap for internal it automation.”
a compiled language may offer very little capabilities, and a  scripting language may offer much more capabilities, and vice versa.
and lisp was, in fact, doing the navigation.
we just need to keep successfully building real, working systems using the tools that we feel are appropriate.
take a look at ocaml.
i believe that a majority of people in it now consider dynamic languages  like perl, ruby, python, and php to be very much capable of sitting at the  table with java and .net for a wide range of common technical problems.
march 2006 it’s a free world, baby… »
i think the target is 80% of lisp and smalltalk.
perhaps the lesson here is that front-end websites simply don’t need ultra-fast micro-benchmarked platforms.
i think the main reason is that there are different programming  philosophies behind the kind php (ruby, perl etc.)
but ruby, python, perl, smalltalk, etc. are not specialized scripting  languages.
james gosling - father of java confirmed this thesis in  his interview: “java is under no serious threat from php, ruby or  c#”.
march 2006 aristotle pagaltzis: ryan: it’s hard to put php in any category.
as long the language really has to do the work on itself, php and ruby and to a lesser degree
but can the gain of productitivy justify a 10-100 times performance loss if you compare java to ruby?
and that’s exactly where it’s  strength lies.
i guess there’s a perspective of someone who’s done a whole  breadth of applications using java.
you acknowledge that licensed software is not  designed or intended for use in the design, construction, operation or  maintenance of any nuclear facility…” comment at 29.
i generally  use the libxml2 bindings for perl rather than pure-perl xml parsers to do xml  processing; the extra speed is a nice bonus, but the real reason is that  building a dom for even a moderately large xml document using perl data  structures consumes mindboggling amounts of memory.
james gosling is a troll.
i know ocaml very well.
well, maybe if you spent “a small amount of time researching and  validating” your arguments, you’d know how.
after watching good people likemartin lamonica and jon udell balance out the mainstream tech press with coverage of lessish tools and languages,and having seen forward looking companies likeredmonk inject themselves into the traditional analyst racket with smart, honest, and unignorable critique,and having seen herds of java luminaries migrate to simpler, more agile tools and languages, and after hearing bill gates say that less code was the only metric, and having watched david, bill, ian, adrian, phillip, aristotle, harry, mark, mark, chad, curt, james and many other extremely talented programmers dismantle all the common hollow arguments for superfluous complexity and replace them with simple methodologies andworking code, after all that i just figured there wasn’t much to do around here.
in “why php scales - a cranky,  snarky answer”, george schlossnagle writes “…php being  naturally slower than java (something i believe to be true)…” jruby implementor charles nutter blogs “…ruby’s troubles  with performance are fairly well-documented… again, ruby’s  struggles with performance are widely known.”
if you ask bjarne stroustrup about c++, he is known to defend c++’s successes in a wide area of applications(which is wider than java’s).
the reason why dynamic typing has some kind of ‘revial’ in the moment is the hype created by ror and the increasing computing power of todays computers.
and even smalltalk (which is the oo-language with the most effort in  efficient execution ever - even most concepts in the java-vm are derived from  experiences with smalltalk) isn’t comperable to java performancewise.
i think this applet is the closest anyone have gotten to actually do “interplanetary navigation” in java.
i am an application programmer, and while huge chunks of the program have very little cause to be concerned about performance (dialogs and db i/o and such), real world applications find themselves having to deal with larger and larger datasets, and more and more computations.
for instance, some people occasionally use smoke  signals to communicate messages.
but for application development performance does count, many people are still  bashing java because of its alleged poor performance.
march 2006 george: you seem to have a big problem with the term “scripting  language” as gosling used it.
that’s duck-typing, my friend, and that’s dynamic.
march 2006 ryan tomayko: besides, he [gosling] doesn’t do “interplanetary  navigation”
and now java is an even uglier 10 year old.
i’m unaware of any breakthrough in  scaling these systems past what they’re already capable of.
now, both of these websites had backend systems which weren’t script-based.
by that token, java must be a scripting language, since running a java vm written in java inside a java vm would be very slow.
may 2006 morves: well, as for the “interplanetary navigation” issue, maybe we  should hear from a nasa employee (sean kelly) what he thinks about java and  dynamic languages: http://oodt.jpl.nasa.gov/better-web-app.mov they have been using tcl/tk (dynamic language) to build guis for years,  replacing c++.
sure, there are webservers written in ruby and python - but without big parts of the libs written in c those would be unbearable slow.
i am currently engaged in writing an enterprise application.
when someone unfamiliar with modern dynamic languages and experienced in  java hears someone say, “they’re scripting languages, and get their  power through specialization,” they are being misled into thinking that  these languages are likebash and can be used only for a single  specialized scenarios, which is obvious not the case: they can be contrained  and specialized as much or as little as required and become useful in multiple specialized scenarios.
on “scripting languages” “php and ruby are perfectly fine systems,” he continued,  “but they are scripting languages james pulled this directly out of “effective java advocacy  beans”, section 6.8.3 “dealing with questions on dynamic  languages”: first, call anything not statically compiled a “scripting  language”.
weg, aber so langsam scheint  sich die erkenntnis auf breiter front durchzusetzen.
april 2006 » ruby je větší konkurent než java,  říká don box: […] don box v zápisku gosling on ruby po  delší době upozornil na určité  ignorantství jamese goslinga, duchovního i  „biologického“ otce javy, který rozhovorem
maybe future shock won’t get us after all.
march 2006 keith wright: i think it might be nice to mention that while a lot of concerns about performance are overblown and fud, there is a point at which performance becomes a real issue, which many have a habit of handwaving and say that you can always optimize that part to c.
using java for web development must not be very easy, popular or productive.
–guy steele java’s evolutionary step towards lisp has been important and in some  ways helped pave the way for python and ruby.
with dynamic programming languages
james gosling - father of java confirmed this thesis in his interview: “java is under no serious threat from php, ruby or c#”.
nitpicking over (relatively) vague terms like  “enterprise” and “applications” seems like something  that belongs in a marketing conference or board room than in any technical  discussion whatsoever.
or “none of these technologies have undergone huge feature or stability  increases in the past year.”
leave java to the masses as they wallow in suffering…just code around them in the fast lane.
april 2006 paul: i guess you could classify apache as middleware, but the scripts like php aren’t really doing the middle job, apache is.
while it is not a  ready-to-go package with lots of std libraries, it is quite fast, small,  customizable and has a strong and very smart community.
may 2006 morves: well, as for the “interplanetary navigation” issue, maybe we should hear from a nasa employee (sean kelly) what he thinks about java and dynamic languages: http://oodt.jpl.nasa.gov/better-web-app.mov they have been using tcl/tk (dynamic language) to build guis for years, replacing c++.
even though one tends to accept/recognize when the trade press like to  sensationalize such things, i feel terrible when a phd/m.s talks like a  slashdotter/high schooler/”digg”er.
he has since addressed the flame war that erupted, but the whole ordeal got me thinking seriously about php and its scalability and performance abilities compared to java.
but if the context for the formal  semaphore-based communication is first proposed, than the flag waving attains  much more clarity.
i’ll quit before this becomes a paul graham post, but suffice it to say, gosling would do well to familiarize himself with what ruby gets right.
gosling didn’t get the memo: […] read more | digg story […] pingback at 13.
now that java and by extension c# have dragged programming half the way to lisp, the next step seems smaller and practically inevitable.
same for perl which is also  faster then ruby and php.
i’ve seen great systems written in languages most of you have never heard of (edl anyone?).
those who placed  technical excellence and pragmaticism above religious attachment and vendor  cronyism were easily convinced of the benefits that broadening their definition  of acceptable technologies could bring.
it may have been a prototype of the real thing, but i don’t  think that it was.
its subset, roger-over-out, is a rigid  language used for most of the wireless human-to-human communications occurring  today (there is also the less famous â€˜able, baker,  charlie’ language, known and used by all radiophone operators in the  services).
so today i decided to do some research on what jini was all about  and how those ideas could benefit my current line of thinking.
april 2006 carl: the problem is that stalin only works with relativly static and also only with “closed-world” programs.
that’s because the jsp expression language is a dynamic language, albeit not a general purpose one.
mr gosling’s reaction is a good indicator for what i have been suspecting all these years: java encourages bloatware.
this is what we may refer to as âmetaprogramming’.
die debatte unter  “gosling: java vs php a moot debate” enthält unter anderem  einen relativ kurzen beitrag von bruce eckel, in welchem er auf eine etwas  längere antwort von ryan tomayko hinweist: “gosling didn’t get  the memo”.
it fufils all the criteria you’ve  mentioned above.
no one is suggesting he champion, support, or advocate anything, just  that he stop spreading information that’s provably incorrect.
update: seo sanghyeon provides a list of popular python related applications that have nothing to do with generating web content.
march 2006 aristotle pagaltzis: alex: this is an excellent point.
» blog archive »  ñð·ñ‹ðºð¾ð²ñ‹ðµ  ð²ð¾ð¹ð½ñ‹:  ð”ð¶ðµð¹ð¼ñ  ð“ð¾ñð»ð¸ð½ð³  ð¾  ð½ðµð¿ð¾ð»ð½ð¾ñ†ðµð½ð½ð¾ññ‚ð¸  ñðºñ€ð¸ð¿ñ‚ð¾ð²ñ‹ñ…  ñð·ñ‹ðºð¾ð²: […]  ððµñƒð´ð¸ð²ð¸ñ‚ðµð»ñœð½ð¾,  ñ‡ñ‚ð¾  ñ‚ð°ðºð¾ð³ð¾  ñ€ð¾ð´ð°  ðºð¾ð¼ð¼ðµð½ñ‚ð°ñ€ð¸ð¸  ð²ñ‹ð·ð²ð°ð»ð¸  ñˆð¸ñ€ð¾ðºñƒñž  ð¾ñ‚ð²ðµñ‚ð½ñƒñž  ñ€ðµð°ðºñ†ð¸ñž.
in the java 6.0 , we’re going to have javascript (aka rhino from  mozilla) included so perhaps “scripting languages” will get better  and better on the jvm.
peace and all be happy… just to add another use of dynamic languages in big corps: python for example is used by sap for internal it automation.
this does not require you to champion or otherwise support these technologies  â€“ just stop lying about them.
and why not use a existing language as dsl, maybe  python or ruby.
now that java and by extension c# have  dragged programming half the way to lisp, the next step seems smaller and  practically inevitable.
the former was teoma and the latter was oracle.
march 2006 alex bunardzic: aristotle pagaltzis wrote: can static languages be made context-sensitive?
regarding the rest of your article, i’m with you 100%.
will that stunt be conducive to the discipline of less code?
java vs. php: […] in besagtem interview, von welchem ich bisher nur kleine ausschnitte lesen konnte, soll gosling vor allem durch ignoranz gegebenüber “scripting”-sprachen wie php, ruby und ähnlichen “geglänzt” haben.
lesscode can’t go away until morecode has been staked through the heart, buried in a cemetary surrounded by moving water, with it’s head severed, placed in a silk bag, it’s mouth stuffed with garlic and rose petals, and consecrated by an eastern orthodox priest.
this is a strongly typed, type inferencing, purely functional language.
stalin generates much better code for scheme than any java compiler i am aware of.
so to get comperable performance in lisp you also have to program in  a way comparable to java.
he was showing off to me some code he had helped  write that — guess what —actually did interplanetary  navigation.
there have  been some improvements in running dynamic languages on the mainstream vms,  which many predicted would lead to quick acceptance, but that’s not it  either.
this article addresses the  all-to-common false assumptions about the cost of scalability and performance  in php applications.
sorry, all, if i just fed the trolls.
i thinkbash is a good example of a  specialized “scripting language”.bash is for chaining  commands together.
gosling didn’t get the memo: […] statisch getypte sprachen sind ja sowas von out.
march 2006 toby: baptiste wrote: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air transport and nuclear powerplants”
why isn’t there any free lisp (for commercial usage) with an api the size of java (or at least threading + platform independent gui + networking stuff) ??
in “confounding: sun vs. scripting languages”, peter yared writes “…scripting languages like php and ruby…”.
in “why php scales - a cranky, snarky answer”, george schlossnagle writes “…php being naturally slower than java (something i believe to be true)…” jruby implementor charles nutter blogs “…ruby’s troubles with performance are fairly well-documented… again, ruby’s struggles with performance are widely known.”
none of these technologies underwent huge feature or  stability increases in the past year.
because in the end no language is that special but a good  api saves you from a lot of trouble.
it’s been 5 days since the his real comments became available on artima (video and transcript).
java is  under no serious threat from php, ruby or c# zahrál mnoha
but on the ground-side, there are a number of parts of the whole command and control chain that goes out to the rover that’s done in java.
the product may contain support for programs written  in java.
april 2006 isaac gouy: stalin generates much better code stalin is installed on the computer language shootout but no one has contributed programs.
thats the reason why there are so many dynamic typed  languages, not because dynamic typing is something sophisticated.
we all know that ruby/python can be used  for 80% of the applications that java can be used.
but we know(from the 80/20 rule) that the only 20% of the journey is done when you say that 80% work is done.
unlike c, vm-based languages such as ruby, python, and java have associated initial load times just to get the vm into memory.
april 2006 isaac gouy: patrick logan wrote: every use of lamp is essentially using these  “scripting” languages for middleware.
it was ugly when it was born (smalltalk-like vm + c syntax).
james, who as you may know  has had some problems recently with the dynamic language community had some  interesting things to say about the way programmers use the language he  designed.
that’s really important.
what would you  like for the man ??
now if you wrote a webserver or an orb entirely with php, then it would be  middleware.
beyond the buzz and fud, scripting and dynamic are just features of the  language.
gosling has higher  motivation that bjarne ever did to keep their created languages going but at  the same time we should not put ignorance and ill-motives.
noone would use a dynamic language in a team of 30 developers in a company with  a beaurocratic mindset.
but of course no one here  knows that, because its not about truth, its only about hype.
whereas  a “scripting” language is executed and dies afterwards (which has  its advantages like rapid development, ease of deployment etc.
another bang on point: real languages are context sensitive.
ðñ€ð³ñƒð¼ðµð½ñ‚ñ‹  ð°ð¿ð¾ð»ð¾ð³ðµñ‚ð¾ð²  “ñðºñ€ð¸ð¿ñ‚ð¾ð²ñ‹ñ…  ñð·ñ‹ðºð¾ð²”  ñð²ð¾ð´ññ‚ññ  ðº  ñð»ðµð´ñƒñžñ‰ðµð¼ñƒ:  […] pingback at 14.
i like lisp and python and i’ve used jython quite a lot at some  point, but for for corporate work you really can’t choose on the desktop  side something else except java or .net
two or three years ago we have someone at the  local lug who gave a talk about how they wrote a pure-perl webserver which got  them much better performance than they could achieve using apache + mod_perl.
not a desirable scenario in the bureaucrats’ worldview.
they don’t need the xml languages.
also im grunde genommen waren sie schon immer lästig und im
they had to learn to move on.
really, what programmer is worth his salt that only knows and writes in one language?
a clear and definitive answer new take on scalability
if i may borrow an example from the natural languages â€“  if someone in everyday situation suddenly starts waving a flag above his head,  that could get easily misinterpreted as being an act of patriotism, of flag  desecration, and many other things.
leave java to the masses as they wallow in suffering…just code  around them in the fast lane.
it doesn’t look like i’m the only one either as ryan tomayko at lesscode.org seems to have paid comment to goslings post in quite some depth and i recommend a read!
other programming languages are not so weak and useless as you can think […] pingback at 16.
and you do what you accuse him of - as one of only 5 performance references you link to a 6 year old comparison of miniscule python programs to blackdown jdk 1.1.7, rather than a comparison of standalone php or ruby with java hotspot 1.5.
gosling has higher motivation that bjarne ever did to keep their created languages going but at the same time we should not put ignorance and ill-motives.
you know, he’s almost right.
yes, but there’s an important distinction that’s not being made  here.
you can do this in java and not in php so php is ‘only’ for glue - hence a scriping language.
speed is not a particularly big problem for dynamic languages.
this is similar to how spreadsheets used to scare the shit out of people who based their careers on building financial applications.
while none of them have any basis in reality, they have proven sufficient in creating fear and uncertainty in the minds of those who are evaluating these technologies.
want to automatic your os, write shell script equivilants?
the number who actually  have it?
respectful debate, honesty, passion, and working systems  created an environment … the people who are still unconvinced are those  that just don’t care or are too lazy to spend a small amount of time  researching and validating the arguments, so this is what respectful debate looks like?
attempt to insinuate that all languages without an explicit compilation step are not to be taken seriously and that they are all equivalently shitty.
march 2006 sebs: dear mr. gosling: you got beans, we got balls (and free time left) comment at 13.
in games for example you need a glue  language for game-logic, a dsl which allows the game-designer to specify logic  without recompiling the whole engine.
in other words, such languages are context-sensitive.
stalin generates much better code for scheme than any java compiler i am aware  of.
march 2006 isaac gouy: john smith: has anyone actually asked james what he really said?
and if a programmer really takes care to program in a way a type-inferencer can type a dynamic program to a static one, then he also can write those types down from the beginning.
i expect perl and python break down even wider.
and lisp as one of the oldes  higher-level lprogramming language is also dynamically typed.
the rover itself has a computer onboard.
george: what is a scripting language?
march 2006 developers.org.ua
march 2006 ryan tomayko: besides, he [gosling] doesn’t do “interplanetary navigation”
this was the plan when http was originally designed but has only  recently begun to really catch on.
i don’t want to minimize the java importance.
regards, comment at 14.
[…] there is an ongoing discussion because of some claims made by  james gosling about dynamic languages.
maybe you’d like to learn about it… untyped so-called “dynamic” languages are nice for many things, but eschewing statically typed languages simply due to ignorance about how type systems actually work, and what the state-of-the-art is capable of, is really just foolish.
you can do this in java and not in php so php is  ‘only’ for glue - hence a scriping language.
features themselves are not that important.
a quick note to aspiring java pundits: play close attention to the next few  statements.
march 2006 hynek’s scribbles » blog archive » static vs. dynamic:
march 2006 xml is java’s scripting language - coder’s eye: […] great article at lesscode.org, responding to gosling’s  dismissal of scripting languages.
figured i would set things right… trackback at 18.
thanks partly to some ill-advised comments from james gosling (and other "thought leaders" (snigger)) on the ruby language, it looks as if there’s some real bad blood between the ruby and java camps at the moment.
july 2006 cnemelka: i’ve seen a 70 year old carpenter put up a wall faster with a hammer than a 20 year old carpenter using a nail gun.
[…] the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, which brings us back nicely to james gosling’s recent statements.
bill venners: so given that it was more perceived along the lines of  embedded devices, or that’s how you thought of it, would you say there  are deficiencies in java for the enterprise environment, or areas in which you  could do better at the language level?
it’s metaprogramming that matters, not typing.
james gosling didn’t get the memo: […] the best rebuttal on this topic i found was by ryan tomayko.
by arguing with gosling, it’s making his words more legitimate.
can you do something like this in php  or ruby?
i have a feeling that “interplanetary navigation” will become some kind of standing joke/meme.
if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
in my opinion that was what gosling meant saying that scripting languages “[..] have really serious scaling and performance problems.” .
why does gosling mention it anyway, why are so many users/programmers upset with the term “only scripting”?
more trademark  nonsensical metaphors will not make you look any smarter; really.
only there, because of the highly optimized c version in the runtime-lib php and ruby can perform similar to the java-implemented re-lib in the java-standard-libs performance wise.
in java i use a web-server written in java, huge libs, written in java to  access a db-server written in c (i also could use a db which is written in  java, there are some).
ð¾ñð²ðµñð¾ð² ñðµðºð¾ð¼ðµð½ð´ññ ð¿ð¾ññ ñ lesscode.org: gosling didn’t get the memo.
blog archive » about java: […] personally i don’t like java because it seems like a just product of high-quality pr.
same goes for ruby  (even if ruby is a much better language then php, but also so slow that its nit  possible to write even the runtime-libs of ruby in ruby without having an  unbearable slow program).
hovewer, java adherents think differently.
in everyday situations we also see a number of specialized languages (non-programming languages), that are constrained and therefore limited in one way or another.
anyway, even php has the socket functions and the other stuff that you’d need to write a webserver.
java’s older sister, self, is now a fine 19 year old, though only available on mac os x (fine by me).
i believe one of the  reasons the term “scripting language” has stuck with them is  partially because it’s become so common to create mini-languages (i.e.  dsls) in dynamic languages that are specialized for certain tasks.
march 2006 isaac gouy: carl, also see the flawed benchmarks page - yes, the point of scripting languages is to script stuff written in other languages.
what james refers to as “generating web pages” is  now a general purpose technique for exposing resources to anything outside of  the application process.
we’ve tried our best to clear up any ambiguity related to the term  “scripting language” in the past: wikipedia: scripting language describes the difference between specialized  scripting languages and general purpose dynamic languages.
april 2006 patrick logan: the problem is that stalin only works with relativly static and also only  with “closed-world” programs.
ryan tomayko has a great post called gosling didn’t get the memo that explains and link to the sea change we’ve seen over the last year or more.
now, what i’m not entirely sure about is where php fits in all this.
march 2006 anjan bacchu: hi there, james gosling did a lot of work on lisp to build emacs.
this is the same site that published gosling’s original remarks.
no wonder  bureaucrats despise such languages â€“ they assume some brain  power behind the powers that use them.
let’s lay onto the ground and wait to die ?
the rover itself  has a computer onboard.
i’ve seen excellent programmers who think that all their code  performance problems are because the network is slow.
and of course i could do application programming using scripting languages.
java is the new legacy, the new cobol.
its subset, roger-over-out, is a rigid language used for most of the wireless human-to-human communications occurring today (there is also the less famous âable, baker, charlie’ language, known and used by all radiophone operators in the services).
a quick note to aspiring java pundits: play close attention to the next few statements.
there arelots of industry luminaries, all spewing their corporate lines.
it’s geared heavily  toward generating web content, though it can also be used outside the context  of a web server, and such code doesn’t end nearly up as grotesque as,  say, writing servers inbash using netcat.
this is similar to how spreadsheets used to scare the shit out of people  who based their careers on building financial applications.
but none of them attempt any  serious breadth in the application domain and they both have really serious  scaling and performance problems.”
i’m unaware of any breakthrough in scaling these systems past what they’re already capable of.
the reason is that if you have a dynamic programming language,  progammers are really using this dynamism and then it’s impossible for  any type-inferencer to succeed.
april 2006 patrick logan: if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
but that is not a given.
while the  benefits of dynamic languages–first realized millions of years ago in  lisp and smalltalk–are well understood in academia, it managers and sun  certified developers are perfectly accepting of our static = professional /  dynamic = amateurish labeling scheme.
seo sanghyeon: on “they just generate web pages”, python has… etc ad nauseum.
on scaling and performance and they both have really serious scaling and performance problems.
march 2006 isaac gouy: has anyone actually asked james what he really said?
use what’s good for the job in order.
remember that smalltalk is around for more then 30  years now - and it never make a breakthru.
if you want to do ruby-like metaprogramming or dynamic class loading and  creation like in java, its approach won’t work.
java: 4.23s, ruby: 1393.77s, php: timeout, python: timeout binary-trees: java: 8.23s, ruby: timeout, php: 519.68s, python: 82.77s.
something that is high on my list is a better  conceptual model for dealing with multiple processors.
contrast that with static languages, where you are forced to create a completely separate “scripting language” when you need to provide a constrained/specialized language (this is why xml is used so heavily in java for things like o/r mapping, dependency injection, configuration, build processes, etc.
march 2006 richb: barryd wrote: hammer on about scalability but you fail to mention vbscript.
their motto is “tap the power of lamp for service-oriented  applications”.
now if you wrote a webserver or an orb entirely with php, then it would be middleware.
and if someone thinks i’m trolling along, please feel free not not to  read my posts.
lisp has its dynamic nature, even when most of what it’s running at the moment may be fully-compiled.
the rest are just fooling themselves into buying into a more complex solution because it makes them feel good.
no thanks necessary.
no wait, i’m serious.
but  on the other hand i do not have to read“effective java advocacy  beans”, section 6.8.3 to see another kind of fud raising on.
can you do something like this in php or ruby?
just my $0,02 comment at 13.
yes, you can have dynamic languages which are faster - but even smalltalk and lisp can’t compete to java normally.
but  hey, i’m no expert.
seems like developers would use them for this purpose if they fit.
if you only remember one thing, that java is about interplanetary navigation, not serving web pages, that’s enough to summarize everything that’s wrong with java.
gosling didn’t get the memo: […] read moreâ |â digg story […] pingback at 13.
comment rss - both comments and pings are currently closed.
i worked for another company who found they had to use 45 web servers to run their ejb site rather than the 30 which it took to run their vbscript site.
so you can affort a slower language to a certain degree now - but  only in specific areas.
but ruby, python, perl, smalltalk, etc. are not specialized scripting languages.
please understand, that the advocates of the dynamici languages do not say  that java can’t scale.
he has since addressed the flame war that erupted, but the whole ordeal got me  thinking seriously about php and its scalability and performance abilities  compared to java.
march 2006 twifkak: martin something said: wow… isn’t is wasteful to spend all the time you save by using ruby/python et.
march 2006 ryan tomayko: gosling is a java adovate, what the hell is he supposed to say?
and i only wish to make two comments (neither original): 1) people are more important than technology.
severed, placed in a silk bag, it’s mouth stuffed with garlic and rose  petals, and consecrated by an eastern orthodox priest.
these languages are severely limited (which is exactly why the monthy  python skit presenting emily bronte’s “wuthering heights”  with actors using flags for semaphores to engage each other in a dialog is so  hilarious).
i just read through this entire blog and was transported back to 1972 (or so) when i first encountered programming.
while describing the  sort of system that i was envisioning a coworker mentioned that what i was  saying sounded like jini, that java related technology that never really seemed  to get going.
perhaps the  lesson here is that front-end websites simply don’t need ultra-fast  micro-benchmarked platforms.
why does gosling mention it anyway, why are  so many users/programmers upset with the term “only scripting”?
whereas a “scripting” language is executed and dies afterwards (which has its advantages like rapid development, ease of deployment etc. as mentioned above and in other linked pages), a “compiled” language does not (need to have, so it may use caching/pooling/memory objects much more efficient and has not to rely on backend systems and their performance that much).
in some strange way helsberg seems to have a better grasp of this than gosling (strange in a turbo pascal v. emacs way), as evidenced by c#’s haskell inspired linq stuff.
either now or in months or in years, everyone who can have their mind opened will have their mind opened, just by  the current motion and inertia that platforms like rails and php possess today.
well lets dig in a little bit further  on that.
they are compiled and loaded into the virtual machine where they reside for the applications lifecycle and can interact with the complete jvm.
from what i recall, it was real-time image analysis logic that helped one satellite automatically maneuver itself into connecting with another, via video camera.
great big pieces of it  are.
they do have  the look’n’feel of dynamic languages but, honestly, they are not.
on several factors, one of which is the nature of the team  using the technology.
march 2006 john: you couldn’t write a library that does, say, interplanetary  navigation.
something  must have changed.
lisp has its dynamic nature, even when  most of what it’s running at the moment may be fully-compiled.
can do vs. get it done.
scripting is exactly what scares the shit out of gosling and other application  evangelists.
i guess no-one told ccp that they weren’t allowed to use python to  create non-webpages?
it’s not like every last piece of every subsystem is based on the java code.
in java the price for the better performance is the static types  you have to use as a programmer (and i for myself don’t even consider  static typing as a burden, but thats different topic).
now if we agree on  the premise that less code is better, wouldn’t that mean java actually needs xml?
the difference between being able to  handle 1,000,000 and 10,000,000 data points is the difference between a sale  and no sale.
march 2006 denyerec: i believe chunks of the game eve online are coded in python and that,  clearly, involves interplanetray navigation.
there have, in fact, beensome number of languages.
you say james gosling is ignorant of the many different things that php and  ruby are used for (he mentions php 7 times, ruby 1, python 1, perl 0) because  he characterizes them as languages that just generate web pages.
and even smalltalk (which is the oo-language with the most effort in efficient execution ever - even most concepts in the java-vm are derived from experiences with smalltalk) isn’t comperable to java performancewise.
march 2006 middleware matters: proof of “the language divide” as i mentioned in my previous post, my latest ic “toward integration” column, entitled “the language divide,” attempts to explain why there’s a dearth of scripting/dynamic language use in the traditional standards-based middleware space.
as mentioned  above and in other linked pages), a “compiled” language does not  (need to have, so it may use caching/pooling/memory objects much more efficient  and has not to rely on backend systems and their performance that much).
what is a scripting language?
gosling acha  que ruby só gera páginas web: […] agora é oficial: o autor de java não entende de  linguagens de programação.
java v ruby: flame on: […] that said, the “debate” around james’ comments  became rather polemical.
by “dynamic” (which is, i grant you, a loaded word)
he says java is “not fun” and far less productive  than php, python or ruby for web development.
james uses the example of “interplanetary navigation”, which is a really good example except that it isn’t; most of us aren’t working at nasa and those of us who are working at nasa are doing things like trying to get the payroll and accounting systems working together or building simple productivity applications.
using a general purpose language but extending it in places that would traditionally require “scripting” is the fundamental design principal behind rails, django, tg, seaside, etc.
march 2006 anonymous: i would add lua to the list of dynamic languages.
would you “befine” if i changed the term “p-code”  to “jvm bytecode” in your above sentence?
but for application development performance does count, many people are still bashing java because of its alleged poor performance.
which, again, is perfectly fine and correct and the best possible way  of performing that task.
which, again, is perfectly fine and correct and  the best possible way of performing that task.
sure those are  microbenches - but microbenches are mostly a problem for java because of the  dynamic recompilation in the vm which makes programs run more slowly in the  beginning.
i have been programming for 26+ years and try to learn a new language every  year.
lukas: http://www.googlefight.com/index.php?lang=en_gb&word1=java+nasa&word2=php+nasa comment at 13.
that is, virtually no one is using  it for that.
the web server is becoming a key piece of integration infrastructure.
i know, there are people refuse to see those  both last points and see static typing only as a burden, not as a means to help  you even in the design process.
you may as well use scheme.
neither would the open source guy who cares about  solutions, clarity and beauty use a monster language like java.
that means it is called (from somewhere), then loaded, executed and ends, thats all, and what concerns me, i’m perfectly fine with that.
march 2006 petrilli: the reality is that large chunks of mission control @ nasa as well as the  space telescope sciences institute (the people who run the hubble) use python  to manage their missions to interplanetary destinations.
so, in all but the most idiotic setups, webapps written in ruby and python  are not being run like scripts.
aristotle, “smalltalk is pretty damn fast” doing what?
the combination of applying stalin-like compilation to partially-closed-world modules, with anamorphic-like hot spot code generation, etc. could combine to get overall great results.
march 2006 adler » blog archive » entrevista de james gosling: […] na minha opinião, um comentário inútil,  porque estas linguagens estão dentre as que mais crescem.
now’s my  time to step off my high horse — why are the technical details of the  fact that jsps are compiled-then-run vs interpreted important to you?
march 2006 midtoad: james gosling says “php and ruby are perfectly fine systems…
maybe you’d like to learn  about it… untyped so-called “dynamic” languages are nice for many things,  but eschewing statically typed languages simply due to ignorance about how type  systems actually work, and what the state-of-the-art is capable of, is really  just foolish.
2) learn what you do not know.
that is, virtually no one is using it for that.
i think my general point is that if you only think of a compiler as something like what kernighan and ritchie developed thirty years ago then, no, c or java will almost always out perform ruby for sufficiently cpu-bound examples.
to see something that might be cast in a more familiar  “middleware” light, check outactivegrid.
the same is probably true of django, though  i don’t know about that.
also sprach alex: this is an excellent point.
“there have been a number of language[s] this part is notable because it’s actually true.
there have, in fact,  beensome number of languages.
i think the future lies more in statically typed languages with very sophisticated type-systems which give you much more expressive power then the type system of languages like java has.
the same happend with c and java:  javas is in average about 50% slower then c because of the gc and certain  design decisions but it don’t matter much because of the gain of  productivity.
the same happend with c and java: javas is in average about 50% slower then c because of the gc and certain design decisions but it don’t matter much because of the gain of productivity.
because in the end no language is that special but a good api saves you from a lot of trouble.
there’s no need for debate.
many  languages fill very well-defined (or in some cases, better performing) domains  and should be used there.
either now or in months or in years, everyone who can have their mind opened will have their mind opened, just by the current motion and inertia that platforms like rails and php possess today.
if i define a certain player as being a type, and i’ve made a decision to cast that player as a type while i was being governed by the contextual circumstances, when the context changes, that type will have a hell of a problem getting out of the cast.
about lisp: everybody who writes about how lisp is used in performance  relevant appilcations should take a look at the code of these applications.
james uses the example of  “interplanetary navigation”, which is a really good example except  that it isn’t; most of us aren’t working at nasa and those of us  who are working at nasa are doing things like trying to get the payroll and  accounting systems working together or building simple productivity  applications.
[…] several weeks ago there was a notable bit of controversy over  some comments made by james gosling, father of the java programming language.
weg, aber so langsam scheint sich die erkenntnis auf breiter front durchzusetzen.
using stateless objects.
languages have a long way to go yet, no doubt, but one thing is already clear: algol-derived static typing is detrimental and will be left behind sooner or later.
but i completely forgot about james gosling: “there have been a number of language[s] coming up lately,” noted james gosling today at sun’s world wide education & research conference in new york city when asked if java was in any kind of danger from the newcomers.
but not everybody is able to crate a powerfull and expressive type system like for example a language like haskell has.
on the current quantity of language “there have been a number of language[s] this part is notable because it’s actually true.
thats the reason why there are so many dynamic typed languages, not because dynamic typing is something sophisticated.
i’ve had1 customer in 10 years who had a real challenge.
anand: not only gosling , the whole internet world depend on java !,
its the same for me if it is  interpreted, pre-compiled into p-code (or similiar) or executable, cgi or  fast-cgi, module or stand-alone, as long as it behaves like intended i’ll  befine.
its the same for me if it is interpreted, pre-compiled into p-code (or similiar) or executable, cgi or fast-cgi, module or stand-alone, as long as it behaves like intended i’ll befine.
by not keeping the state on the server (but in the database), you can have as many servers to handle the requests as you want.
just as cobol development continued after its natural life, so will java. rest and wsdl will let us still use java on life support until we replace it!
so whilst it may not be trendy, it may not be open source, it may not have some word of mouth marketing scheme behind it the lack of vbscript’s inclusion in your mind’s list of scripting languags may show more snobbery than gosling.
in other words, they require more intelligent handling.
languages have a long way to go yet, no doubt, but one thing is already  clear:
i’ve been blissfully neglecting this site for months with the assumption that a large part of our goal was completed.
please understand, that the advocates of the dynamici languages do not say that java can’t scale.
its implemented this way in the jnode-os, a pure java os with  drivers, vm etc totally written in java.
but on the  ground-side, there are a number of parts of the whole command and control chain  that goes out to the rover that’s done in java.
march 2006 middleware matters: proof of “the language divide” as i mentioned in my previous post, my latest ic “toward  integration” column, entitled “the language divide,” attempts  to explain why there’s a dearth of scripting/dynamic language use in the  traditional standards-based middleware space.
march 2006 keith wright: i think it might be nice to mention that while a lot of concerns about  performance are overblown and fud, there is a point at which performance  becomes a real issue, which many have a habit of handwaving and say that you  can always optimize that part to c. i am an application programmer, and while huge chunks of the program have  very little cause to be concerned about performance (dialogs and db i/o and  such), real world applications find themselves having to deal with larger and  larger datasets, and more and more computations.
this post asks for the following: all we’re asking is that you stop spreading misinformation about the current state of dynamic languages to the press, analysts, and your customers.
march 2006 alan: i’m no expert, but dissing dynamic languages because they don’t do “interplanetary navigation” is just contrarian unhistorical blather.
i knew that several hugely popular web 2.0 applications were  written in scripting languages like php, so i contacted owen byrne - senior  software engineer at digg.com to learn how he addressed any problems they  encountered during their meteoric growth.
march 2006 adler » blog archive » entrevista de james gosling: […] na minha opinião, um comentário inútil, porque estas linguagens estão dentre as que mais crescem.
come upfront and say : we are all doomed!
one of many discussions can be found there.
march 2006 thoughts.on.code » james mcgovern::thought leadershit: […] yes… several bloggers have jumped on james gosling indicating he didn’t get the memo.
gosling seems bent on meeting the needs of the 20% while leaving  the 80% with a platform that’slosing bids to dynamic/agile shops.
could ignore, no matter how buried in java design patterns.
this is not to claim superiority  for a given task, just that the competitive playing field is beginning to level  off.
and they both have really serious scaling and performance problems.
march 2006 steve reno: what a maroon.
i believe that a majority of people in it now consider dynamic languages like … to be very much capable of sitting at the table … if that is the case why do you feel the need to respond so strongly against something that verges on gossip?
i can’t for the life of me understand why someone is upset that the  father of java still prefers java, i’d be more surprised if he’d  prefer something else.
so shame on gosling, he could have made his point more clear on that.
there have been some improvements in running dynamic languages on the mainstream vms, which many predicted would lead to quick acceptance, but that’s not it either.
while i stand steadfastly by  james’ analysis of the current quantity of language, we will quickly  diverge in opinion from here.
march 2006 notes » blog archive » dynamic languages and choosing a technology for a project: […] an extended post responding to james gosling’s java is under no serious threat from php, ruby, or c# (that site, java.sys-con.com, is the worst i’ve enountered for quite a while with regard to ad content — annyoing pop-up dhtml ads not caught by firefox’s pop-up blocker, a million flashing, blinking, and whirling ads.
march 2006 isaac gouy: toby, it’s in sun microsystems, inc. binary code license agreement “3.
when he specifically says that breadth is not there in the other languages,  you should not jump to conclusions about his motives.
but can the gain of productitivy justify a 10-100 times  performance loss if you compare java to ruby?
i wouldn’t want it any other way.
but dynamic typing is and was only a kludge to have a certain level of expressiveness without going thru the difficult task to create a good type system.
i think this applet is the closest anyone have gotten to actually do  “interplanetary navigation” in java.
also im grunde  genommen waren sie schon immer lästig und im
i’ve had numerous discussions with java advocates in which ruby, python and any other dynamically typed language has been dismissed as a meer scripting language.
march 2006 thought leadership: why ruby doesn’t matter… you may have noticed that pretty much everyone in the ruby camp are  insultants with many of them being book authors attempting to capitalize on  hype.
it’s an excellent solution for certain goals but it isn’t unique, it isn’t absolutely universal!
if i use  for example php, i have a web-server written in c, which uses a module written  in c to execute a language which uses libraries written in c to access a  database-server written in c. can you write all this stuff in php?
it turns out that  selectively strictening a loose type system is more productive than selecting  weakening a static type but just as performant.
it’s called parametric polymorphism (fragments of system-f) in conjunction with type inference (hindley-milner type unification), and it’s been understood now for decades.
indeed, ask.com was for many years getting along fine with a vbscript-based website.
dear java-programmers,  please, be more modest.
it’s a poor musician that blames his instrument.
what has typing got to do with any of it?
compared to ocaml i even java is a dynamic language.
ignoranz  gegebenüber “scripting”-sprachen wie php, ruby und  ähnlichen “geglänzt” haben.
march 2006 aristotle pagaltzis: please just learn a language with type inferencing before you make any  further statements or simply don’t say anything at all.
i mean, whats the bare bone of it, technically spoken?
mr gosling’s reaction is a good indicator for what i have been  suspecting all these years: java encourages bloatware.
just random note along the same lines oracle (10g for windows) and ibm/rational (used by both clearquest and clearcase) both install perl 5.6 in their default windows installs.
deja vu all over again.
and that’s my point no one is doing such things with php because it’s not meant for that sort of thing.
thanks anyway — ed. comment at 13.
so you can affort a slower language to a certain degree now - but only in specific areas.
later some people found out that maybe they don’t need that whole j2ee monster, maybe simple java objects are enough… comment at 13.
when you present that many ‘generate web page’ examples it becomes understandable that an outsider like james gosling has the impression that php and ruby are just used to generate web pages.
like bash, this seems to be working  extremely well.
doh ;) comment at 13.
java doesn’t generate web pages.
al., instead of java, writing vitriol-filled comments here?
march 2006 twifkak: woah… logic.
the right tool for the right people for the right job.
excel automation, i’ve seen trading houses and banks where prediction and reporting models are built in excel using vb for applications.
from their point of view there are not anything noteworthy except perfect, brilliant, ideal java!
anyway, even php has the socket functions and the other stuff that  you’d need to write a webserver.
on “breadth of application domain”
but for other usage patterns which  are very common in your average ruby or php program, stalin won’t give  you much benefit (or won’t even work because it don’t support the  whole scheme standard).
this is an excellent point.
april 2006 xoops china - wordpress »
at least not now i suppose.
march 2006 george: you seem to have a big problem with the term “scripting language” as gosling used it.
the number of customers i run into who think they have  “scalability” issues is mindboggling huge.
now, both of these websites had backend systems which weren’t  script-based.
in other  words, i could walk into most shops during a technology evaluation and put  these technologies on the table as legitimate considerations without being too  worried about being laughed out of the room.
contrast that with static languages, where you are forced to create a  completely separate “scripting language” when you need to provide a  constrained/specialized language (this is why xml is used so heavily in java  for things like o/r mapping, dependency injection, configuration, build  processes, etc.
march 2006 thought leadership: more thoughts on ruby and why it isn’t enterprise i previously blogged on large enterprises and why they don’t care  about ruby and was rightfully accused of bashing folks in the ruby community  but not providing the answer to my original statement.
you could say  in the view, and from the controller, pass objects of twoentirely different classes that implement the getstuff() method.
march 2006 eugene lazutkin: you forgot to mention one vastly popular dynamic language:
because of that, it’s an article worth bookmarking.
do you know the full context in which the remarks were made?
what i guess amazes me more is that someone like gosling, with his education and apparent experience, is so worried about having his ivory tower renovated, has resorted to the technical equivalent of ad hominem attacks.
march 2006 george: twifkak: wow.
well lets dig in a little bit further on that.
if not, php  is only usable for scripting or with other words for glueing componentes  together.
the parts in  java can scale to dozens or more computers simply by using the facade pattern  with stateless session beans calling pojos.
okay, distilling all these into such a little sentence like gosling did has a  taste of fud, but nevertheless gosling may have relied on the fact that people  who read his interview are a little bit technically educated (and even i did  not point out anythingthat new until now either).
it’s not like every  last piece of every subsystem is based on the java code.
march 2006 harry fuecks: perhaps it’s time to nail down the term scripting language - my vote  goes for “anything with a virtual machine is scripting language” -  then james might not feel so left out.
the  reason why dynamic typing has some kind of ‘revial’ in the moment  is the hype created by ror and the increasing computing power of todays  computers.
things  haven’t changed as much as i had thought ;-) comment at 21.
you avoid most (but not all) of the drawbacks of static typing while getting all the benefits of static typing despite only rarely specifying an explicit type â
you expect more from people who  have an m.s — after all they don’t go to such schools just to learn  compilers.
all things have a certain price: in ruby the price of the comprehensive  runtime meta programming is a increased memory consumption and a reduced  performance.
why should i not “befine” with that?
but if the context for the formal semaphore-based communication is first proposed, than the flag waving attains much more clarity.
web dominated by j2ee? is a rant on an article spreading the same  misinformation.
â€” xml is java’s scripting language).
march 2006 remi broemeling: as denyerec has implied, eve online would be a good example of enterprise, non-web-page usage of python.
not a desirable scenario in the  bureaucrats’ worldview.
the reason is that if you have a dynamic programming language, progammers are really using this dynamism and then it’s impossible for any type-inferencer to succeed.
responses from ruby followers in particular indicated the language does have the scalability and power to build more than web “just” applications.
so all people who thik that dynamic typing is some kind of new trend, are way off the mark.
we are now free to dismissany technology that  lacks “interplanetary navigation” features.
they are only saying that dynamic-lanugages can  scale as well.
dear java-programmers, please, be more modest.
march 2006 thoughts.on.code » james mcgovern::thought leadershit: […] yes… several bloggers have jumped on james gosling  indicating he didn’t get the memo.
[…] the people who  are still unconvinced are those that just don’t care or are too lazy to  spend a small amount of time researching and validating the arguments, which  brings us back nicely to james gosling’s recent statements.
in this  article(page 4 specifically) from 1999, bill venners who went on to found  artima speaks to bill joy and then james gosling.
but i completely forgot about james gosling: “there have been a number of language[s] coming up lately,”  noted james gosling today at sun’s world wide education & research  conference in new york city when asked if java was in any kind of danger from  the newcomers.
(smalltalk is included on one ofthe computer language shootouts) and remember the computer language shootout compares programs - maybe the  programs aren’t as good as they could be… comment at 01.
computer are getting faster and at some point in time you can even affort a 100 times slower language to gain some comfort.
in particular, all the data visualization, user interface front-end stuff
and there are already tons of other languages built on top of that jvm (jython, jruby anyone ?)
best results are achieved when you provide no further  explanation of the pros and cons of static and dynamic compilation and/or  typing and instead allow the reader to simply assume that there are a wealth of  benefits and very few, if any, disadvantages to static compilation.
no wonder bureaucrats despise such languages â
python can  do many of the same tricks…and choice is good.
march 2006 twifkak: comment at 14.
attempt to insinuate that all languages without an explicit  compilation step are not to be taken seriously and that they are all  equivalently shitty.
by ryan tomayko under  then they fight you... on 12.
but none of them attempt any serious breadth in the application domain it’s hard to determine what kind of breadth is missing when you  consider the capabilities provided by modern dynamic language environments, the  platforms they run on, and the extensions and bridges that allow them to use  damn near any other program or library available.
is php more suitable as a “scripting language” like bash (albeit for generating web content) or a general purpose  language like ruby?
the troll patrol may take me away, now.
smalltalk is pretty damn fast these days â without type declarations.
update: seo sanghyeon provides a list of popular python related  applications that have nothing to do with generating web content.
and leave two pieces of advice: 1) implement technology based on a deep understanding of the problem/business/project/requirements,etc.
these languages are severely limited (which is exactly why the monthy python skit presenting emily bronte’s “wuthering heights” with actors using flags for semaphores to engage each other in a dialog is so hilarious).
in the java 6.0 , we’re going to have javascript (aka rhino from mozilla) included so perhaps “scripting languages” will get better and better on the jvm.
gosling that is too dumb to be true (but alas, it is) is dissected.
march 2006 baptiste: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air  transport and nuclear powerplants” comment at 13.
others use semaphores, the blinking lamps, etc.
thats not that bad, such kinds of languages are usefull and neccessary.
thanks partly to some ill-advised comments from james gosling  (and other "thought leaders" (snigger)) on the ruby language, it  looks as if there’s some real bad blood between the ruby and java camps  at the moment.
march 2006 twifkak: when i was, like, 10 years younger (and too young to care about dynamic languages or beautiful code), i visited the home ofkipr fellow dave lavery, who happens to work for nasa.
how believable will the pulling the wool over someone’s eyes be?
thats not bad for a scriping language, because performance isn’t relevant for scripting purposes as long as it don’t takes an eternity.
segue abaixo os links para a entrevistas e para as respostas a esta entrevista feitas pelo ryan tomayko .
regards, martin comment at 14.
and even so,  they can’t stand against apache speed-wise.
march 2006 sam: more and more of my projects are ending up in scheme (gambit-c to be precise).
and there are already tons of other  languages built on top of that jvm (jython, jruby anyone ?)
what james refers to as “generating web pages” is now a general purpose technique for exposing resources to anything outside of the application process.
the people who are still unconvinced are those that just don’t care  or are too lazy to spend a small amount of time researching and validating the  arguments, which brings us back nicely to james gosling’s recent  statements.
when someone unfamiliar with modern dynamic languages and experienced in  java hears someone say, “they’re scripting languages, and get their  power through specialization,” they are being misled into thinking that  these languages are like bash and can be used only for a single specialized  scenarios, which is obvious not the case: they can be constrained and  specialized as much or as little as required and become useful in multiple  specialized scenarios.
specialization and enhanced capabilities  related to generating and serving hyper-media over http are and will continue  to increase in value.
march 2006 twifkak: george said: and if someone thinks i’m trolling along, please feel free not not to  read my posts.
in dynamic languages, you are generally not required to leave the core language to get that specialization: you use techniques like meta-programming and dsls or just include/require/use some designated file at a designated point and let it do it’s thing with the api.
even for interplanetary navigation… comment at 31.
i think the future lies more in statically typed languages with very  sophisticated type-systems which give you much more expressive power then the  type system of languages like java has.
do i get to be really pissed of if guido doesn’t prefer java over python?
okay, distilling all these into such a little sentence like gosling did has a taste of fud, but nevertheless gosling may have relied on the fact that people who read his interview are a little bit technically educated (and even i did not point out anythingthat new until now either).
in some strange way helsberg seems to have a better  grasp of this than gosling (strange in a turbo pascal v. emacs way), as  evidenced by c#’s haskell inspired linq stuff.
see thetechnical faq, section 7.4.
do yourself a favour and learn a type-inferenced, statically typed language (which in practice means one of a set of pure functional languages) â
the number who actually have it?
everybody can create dynamically typed languages - it’s in fact totally simple.
so solutions could be  dynamically provided, if needed, and so that the basic code would be smart.
for all the other popular dynamic languages, the argument does not hold.
lastly, peter yared (former sun hacker) and the rest of the folks over at  activegrid should also be interested to learn that no one is attempting to  widen the viability of dynamic languages in the “application  domain”.
it turns out thatselectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.
this makes them  bad candidates for the typical “script-based” (by your definition)  cgi.
march 2006 twifkak: comment at 15.
april 2006 patrick logan: every use of lamp is essentially using these “scripting” languages for middleware.
i’ve seen countless projects fail because of issues at layer 8 of the osi model (politics=layer 8, for those of you who think there are only 7 layers)
and guess what — it was in lisp.
when someone unfamiliar with modern dynamic languages and experienced in java hears someone say, “they’re scripting languages, and get their power through specialization,” they are being misled into thinking that these languages are like bash and can be used only for a single specialized scenarios, which is obvious not the case: they can be constrained and specialized as much or as little as required and become useful in multiple specialized scenarios.
april 2006 » ruby je větší konkurent než java, říká don box: […] don box v zápisku gosling on ruby po delší době upozornil na určité ignorantství jamese goslinga, duchovního i „biologického“ otce javy, který rozhovorem java is under no serious threat from php, ruby or c# zahrál mnoha příznivcům dynamických jazyků na jak na city, tak na vášně :) asi nejlepší reakcí, jakou jsem viděl, je gosling didn’t get the memo.
and then you do what you accuse him of - you use the term dynamic language to hype php and ruby by associating them with more powerful language implementations like lisp and smalltalk.
when nasa wanted a space ship to navigate under its own autonomous control for the first time (deep space i, in a planetary shadow), it had the ship’s computer run dynamic lisp code.
when he specifically says that breadth is not there in the other languages, you should not jump to conclusions about his motives.
let’s say the overal context, or bias, of the james bond movies changes for some reason, and now doctor evil needs to be portrayed as a mankind’s benefactor.
and leave two pieces of advice: 1) implement technology based on a deep understanding of the  problem/business/project/requirements,etc.
dynamic language during development, compiled when it is time to  deploy.
(smalltalk is included on one ofthe computer language shootouts) and remember the computer language shootout compares programs - maybe the programs aren’t as good as they could be… comment at 01.
java is a well known memory hog, but if you substract the usage of the vm and the loaded standard-libs (which takes more space then the optimized libs for ruby for example which are written in c) you see that java uses noticable less space then ruby for most oo-based applications.
with dynamic programming languages but none really worked for a wide range of  real programs.
but of course no one here knows that,  because its not about truth, its only about hype.
dynamic, static, assemblique.
march 2006 carl: you can write the java vm in java too, the problem is the bootstrapping, because no os can execute java by itself, so you need at least some loader in assembler.
there where many attempts do full-program type propagation/inference etc.
this seems strange, because one of the three main reasons* i  chose to learn ruby is because of the amount of interest it’s generated  in the .net world recently - i just haven’t seen any hostility from the  .net people towards ruby, but i’ve seen stacks of it from rank-and-file  java developers.
it is simply not possible for me to add anything to the massive set of  material addressing this topic.
no one is suggesting he champion, support, or advocate anything, just that he stop spreading information that’s provably incorrect.
while describing the sort of system that i was envisioning a coworker mentioned that what i was saying sounded like jini, that java related technology that never really seemed to get going.
and you do what you accuse him of - as one of  only 5 performance references you link to a 6 year old comparison of miniscule  python programs to blackdown jdk 1.1.7, rather than a comparison of standalone  php or ruby with java hotspot 1.5.
but php has such weak metaprogramming  facilities that i wouldn’t use it for anything other than its main  domain, and even that is just because of its ubiquity.
the combination of applying stalin-like  compilation to partially-closed-world modules, with anamorphic-like hot spot  code generation, etc. could combine to get overall great results.
if you wo… trackback at 19.
that  doesn’t make it bad, it just makes it limited to that specific problem  domain.
i think the main reason is that there are different programming philosophies behind the kind php (ruby, perl etc.)
you  avoid most (but not all) of the drawbacks of static typing while getting all  the benefits of static typing despite only rarely specifying an explicit type  â€“ yet the compiled code isfaster than c++.
and then you use php / ruby on rails ‘generate web page’ examples for 13 of 15 links on scalability and performance.
but php has such weak metaprogramming facilities that i wouldn’t use it for anything other than its main domain, and even that is just because of its ubiquity.
respectful debate, honesty, passion, and working systems created an environment that not even the most die-hard enterprise architect could ignore, no matter how buried in java design patterns.
the number of customers i run into who think they have “scalability” issues is mindboggling huge.
march 2006 denyerec: i believe chunks of the game eve online are coded in python and that, clearly, involves interplanetray navigation.
things haven’t changed as much as i had thought ;-) comment at 21.
now, how am i supposed to do that with the part written in python?
one year ago, this type of  behavior could be attributed to a lack of documentation and discussion on these  issues, today it’s impossible to attribute to anything but malice.
march 2006 carl: you can write the java vm in java too, the problem is the bootstrapping,  because no os can execute java by itself, so you need at least some loader in  assembler.
april 2006 paul: i guess you could classify apache as middleware, but the scripts like php  aren’t really doing the middle job, apache is.
the situation you describe parallels closely the situation in real  (non-virtual) world.
the right tool  for the right people for the right job.
so this comparison of java and lisp is more the result of where compiler developers put their effort than on anything inherent in the languages per se.
gosling is a java adovate, what the hell is he supposed to say?
and yes, it’s fast (but not always as fast as c++, only in certain areas).
can static languages be made context-sensitive?
the thing is, as you point out in your article, the knowledge that this is  spew is well-documented.
that doesn’t make it bad, it just makes it limited to  that specific problem domain.
march 2006 michael stepanov blog »
august 2006 feeds: posts (valid?) or comments (valid?)
i guess there’s a perspective of someone who’s done a whole breadth of applications using java.
they don’t need the xml languages, [though] the java code ends up looking even uglier than the xml files.
let’s say the overal context, or bias, of the james bond movies changes  for some reason, and now doctor evil needs to be portrayed as a mankind’s  benefactor.
it’s  important that the reader not be exposed to the concepts separating scripting languages like bash, ms-dos batch, and perl-in-the-eighties  from general purposedynamic languages like ruby, python,  smalltalk, and perl present day.
in comparission: i’ve  benchmarked tomcat against apache on my system and to my own surprise tomcat  came out noticeable faster - even if i tested only the delivery of static  content.
march 2006 carl: oh, i forgot: you can find the benchmarks here: http://shootout.alioth.debian.org/
digg php’s scalability and performance :
this article addresses the all-to-common false assumptions about the cost of scalability and performance in php applications.
march 2006 baptiste: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air transport and nuclear powerplants” comment at 13.
java vs. php: […] in besagtem interview, von welchem ich bisher nur kleine  ausschnitte lesen konnte, soll gosling vor allem durch
march 2006 twifkak: george said: and if someone thinks i’m trolling along, please feel free not not to read my posts.
they need other languages to constrain them.
also, avoid the term “dynamic language” at all cost.
in james bond movies, doctor evil is cast as an archetypal villain.
contrast that with static languages, where you are forced to  create a completely separate “scripting language” when you need to  provide a constrained/specialized language (this is why xml is used so heavily  in java for things like o/r mapping, dependency injection, configuration, build  processes, etc. — xml is java’s scripting language).
but none of them attempt any serious breadth in the application domain and they both have really serious scaling and performance problems.”
march 2006 grammada: 4th paragraph.
it works best if you do numerical programming because stalin detects some common usage patterns and creates optimized code for those patterns.
april 2006 isaac gouy: patrick logan wrote: every use of lamp is essentially using these “scripting” languages for middleware.
march 2006 danno: here, here!
the same is probably true of django, though i don’t know about that.
“that’s the kind of power i do not envy”.
the parts in java can scale to dozens or more computers simply by using the facade pattern with stateless session beans calling pojo’s.
arrogance, ignorance, and a blinding sun is david heinemeier hanson  correcting the same misinformation somewhere else.
even assembler is dynamically typed.
no one ever called smalltalk ’scripting language’.
the fastcgi method was chosen specifically because it does have an  infinite loop.
march 2006 6th sense analytics » blog archive »
look, dynamic typing is as old as programming languages.
that’s because the jsp expression language is a dynamic  language, albeit not a general purpose one.
we all know that ruby/python can be used for 80% of the applications that java can be used.
the last item in this blogger’s transcript gives different source text for the same question & answer - parse away.
this was not the case last year at this time, so what happened?
but ruby or php are hideous slow compered to java in most benches.
respectful debate, honesty, passion, and working systems created an environment … the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, so this is what respectful debate looks like?
so this comparison of java and lisp is  more the result of where compiler developers put their effort than on anything  inherent in the languages per se.
in comparission: i’ve benchmarked tomcat against apache on my system and to my own surprise tomcat came out noticeable faster - even if i tested only the delivery of static content.
i think the reason is that in ruby each object is implemented as a hash-table, while in java objects are implementes like c structs.
it  is perfectly possible to write a webserver in pure perl, python or ruby, and in  fact rails and catalyst ship with such included for development purposes  (although neither is not particularly optimised or feature-complete, so is not  recommended for actual deployment).
however, you can pin the types down retrospectively as needed, instead of burdening yourself with a static type system during development.
lesscode can’t go away until morecode has been staked through the  heart, buried in a cemetary surrounded by moving water, with it’s head
no one ever called smalltalk  ’scripting language’.
–guy steele java’s evolutionary step towards lisp has been important and in some ways helped pave the way for python and ruby.
for example trex (a search engine), it even includes a python tcl gui.
march 2006 a random pixel »
we’ve tried our best to clear up any ambiguity related to the term “scripting language” in the past: and get their power through specialization: they just generate web pages.
i think bash is a good example of a specialized “scripting language”.
if not, php is only usable for scripting or with other words for glueing componentes together.
i’ve seen excellent db admins who think that pl-sql is the only  language you should ever write in.
i expect  perl and python break down even wider.
furthermore, many, many, many, many, many, many, many, many, many java  programs are run as a “script.”
in lisp you can type your program statically to improve performance (look at ‘declaim’, ‘declare’ and ‘proclaim’ functions) and if you really want a lisp program to compete performancewise with java, you end up writing a statically typed program in lisp using lots of declares which fix the types of nearly everything.
march 2006 fredrik: goslings comments was the funniest thing i’ve read this year.
i’ve seen a lot of things in 26+ years.
march 2006 gosling and the memo at reinventnow: […] gosling didn’t get the memo [@lesscode.org] one year ago, this type of behavior could be attributed to a lack of documentation and discussion on these issues, today it’s impossible to attribute to anything but malice.
â xml is java’s scripting language).
someone needs to tell gosling his baby was ugly then, and even uglier now.
all i wanted to point out  is that it is the same for me how the script is executed.
some serious metaprogramming will be required.
i’ve had1 customer in 10 years who had a  real challenge.
april 2006 jon rowett’s workblog » ruby, java, c#, mullah omar, timothy  dalton…: […]
august 2006 feeds:  posts (valid?) or comments (valid?)
change the  context, and the interpretation of the language constructs changes.
march 2006 martin j steer: wow… isn’t is wasteful to spend all the time you save by using  ruby/python et.
about lisp: everybody who writes about how lisp is used in performance relevant appilcations should take a look at the code of these applications.
in dynamic languages, you are generally not required to leave the core  language to get that specialization: you use techniques like meta-programming  and dsls or just include/require/use some designated file at a designated point  and let it do it’s thing with the api.
i’ve seen excellent programmers who think that all their code performance problems are because the network is slow.
it’s  stated precisely in the article.
ant, to name but one.
and you are right, memory consumption is a problem too.
march 2006 ryan tomayko: alex said: i wouldn’t downplay the ’scripting’ aspect, ryan.
later some  people found out that maybe they don’t need that whole j2ee monster,  maybe simple java objects are enough… comment at 13.
furthermore, many, many, many, many, many, many, many, many, many java programs are run as a “script.”
just thought it worth a mention.
not misinformation, not malicious lies: widely known.
(changes ‘underwent’ to  ‘undergone’)
a compiled language may offer very little capabilities, and a scripting language may offer much more capabilities, and vice versa.
no reason to waste time on him,  other than for the amusement value.
its implemented this way in the jnode-os, a pure java os with drivers, vm etc totally written in java.
figured i would set  things right… trackback at 18.
java itself is evolving probably better than other languages and it has the  best api you need.
only exceptions are benchmarks where most time is spend in libs like regular-expression-matching or simmilar.
should be either: “none of these technologies underwent huge feature or stability  increases in the past year.”
gosling shows his ignorance regarding the current feature set provided by  dynamic languages and what people are using them for.
ð’  ðºð°ñ‡ðµññ‚ð²ðµ  ð¾ð´ð½ð¾ð³ð¾  ð¸ð·  ð´ð¾ññ‚ð¾ð¹ð½ñ‹ñ…  ð¾ñ‚ð²ðµñ‚ð¾ð²  ñ€ðµðºð¾ð¼ðµð½ð´ñƒñž  ð¿ð¾ññ‚ ñ  lesscode.org: gosling didn’t get the memo.
java v ruby: flame on: […] that said, the “debate” around james’ comments became rather polemical.
the people who are still unconvinced are those that just don’t care or are too lazy to spend a small amount of time researching and validating the arguments, which brings us back nicely to james gosling’s recent statements.
along the way, the article churns out a very long list of links to sites and blog posts containing ammo for fighting the java crowd (and their associates over at c# central, etcetera ).
any piece of ocaml code can operate on different types much like code in dynamic languages, but the compiler checks that the types it is invoked with are compatible with regard to the operations performed.
if  you look at alle those examples of successful usage of those languages you see,  thats they are always uses as glue.
“this was not the case last year at this time, so what happened?
in  lisp you can type your program statically to improve performance (look at  ‘declaim’, ‘declare’ and ‘proclaim’  functions) and if you really want a lisp program to compete performancewise  with java, you end up writing a statically typed program in lisp using lots of  declares which fix the types of nearly everything.
march 2006 cees’ blog » blog archive
it’s important that the reader not be exposed to the concepts separating scripting languages like bash, ms-dos batch, and perl-in-the-eighties from general purposedynamic languages like ruby, python, smalltalk, and perl present day.
actually, he does: for the command and control system, big parts of it are this rather large  java application.
the argument holds water only because the the php interpreter is tied to a webserver, which makes it practically impossible to write dæmons.
dynamic language during development, compiled when it is time to deploy.
smalltalk is pretty damn fast these days â€“ without type  declarations.
i found dozens of such tools written in php, and very few in java.
it’s fast enough for a wider range of applications compared to ruby - and it’snot a scripting language.
we’ll get back to that in a second.
march 2006 john smith: uh, has anyone actually asked james what he really said?
blog archive » about java: […] personally i don’t like java because it seems like a just  product of high-quality pr.
and then you do what you accuse him of - you use the  term dynamic language to hype php and ruby by associating them with more  powerful language implementations like lisp and smalltalk.
but not everybody is able  to crate a powerfull and expressive type system like for example a language  like haskell has.
you say james gosling is ignorant of the many different things that php and ruby are used for (he mentions php 7 times, ruby 1, python 1, perl 0) because he characterizes them as languages that just generate web pages.
march 2006 martin j steer: wow… isn’t is wasteful to spend all the time you save by using ruby/python et.
something must have changed.
you may prefer a different phrase, but that doesn’t mean george schlossnagle or philip greenspun or peter yared or even james gosling are spreading misinformation.
in these portions of the program performance cannot be ignored.
you accuse james gosling of using the term scripting language to denigrate  php and ruby by associating them with more limited language implementations  like bash.
but dynamic typed languages like ruby  won’t be the future too.
i’ll quit before this becomes a paul graham post, but suffice it to  say, gosling would do well to familiarize himself with what ruby gets right.
whoa, slow down there, easy on the big claims.
same for perl which is also faster then ruby and php.
effective java advocacy beans: […] read gosling didn’t get the memo
you accuse james gosling of using the term scripting language to denigrate php and ruby by associating them with more limited language implementations like bash.
james, who as you may know has had some problems recently with the dynamic language community had some interesting things to say about the way programmers use the language he designed.
radlab, scripting and scale, a blog entry by gosling saying the exact same  stuff and a comment thread full of people correcting gosling’s dated  evaluation of dynamic languages.
you do it the same way in python.
they are compiled and loaded into the virtual machine where  they reside for the applications lifecycle and can interact with the complete  jvm.
so, english is a  general-purpose natural language.
any piece of ocaml code can operate on different types  much like code in dynamic languages, but the compiler checks that the types it  is invoked with are compatible with regard to the operations performed.
it turns out that selectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.
java kicks ass because of the jvm.
so why all the fuss about it?
this is what we may refer to as  â€˜metaprogramming’.
but they use python in their products too.
march 2006 thought leadership: why ruby doesn’t matter… you may have noticed that pretty much everyone in the ruby camp are insultants with many of them being book authors attempting to capitalize on hype.
die debatte unter “gosling: java vs php a moot debate” enthält unter anderem einen relativ kurzen beitrag von bruce eckel, in welchem er auf eine etwas längere antwort von ryan tomayko hinweist: “gosling didn’t get the memo”.
sure enough, in backoffice 2000 server’s license (for example), i found: note on java support.
“php and ruby are perfectly fine systems,” he continued, “but they are scripting languages and get their power through specialization: they just generate web pages.
noone would use a dynamic language in a team of 30 developers in a company with a beaurocratic mindset.
just as cobol development continued after its  natural life, so will java. rest and wsdl will let us still use java on life  support until we replace it!
march 2006 toby: baptiste wrote: makes me think of a part of the old ms windows eula, which states: “because this product contains sun’s java, it is not safe for air  transport and nuclear powerplants”
by changing the jsp file, the container (like tomcat) recognizes the  changes, re-compiles and re-loads it only once for further use.
design by ratter / robert
should be either: “none of these technologies underwent huge feature or stability increases in the past year.”
but: just they (and perl and python) generate web pages.
there are a lot of parts involved in this.
i knew that several hugely popular web 2.0 applications were written in scripting languages like php, so i contacted owen byrne - senior software engineer at digg.com to learn how he addressed any problems they encountered during their meteoric growth.
a cursory glance over rubyforge.org’s project tree reveals that the number of projects that “just generate web pages” are really quite small: 151 of 1,342 total projects are registered underinternet::www/http::dynamic content and many of those projects are related to using the web (http/uris) as a platform for integration more than they are for “generating web pages”.
march 2006 gosling and the memo at reinventnow: […] gosling didn’t get the memo [@lesscode.org] one year ago,  this type of behavior could be attributed to a lack of documentation and  discussion on these issues, today it’s impossible to attribute to  anything but malice.
it may have a better fit to some problems — though i’ve yet to figure out what those are, other than increasing my use of mediocre developers — the turing completeness proves this false.
i was referring to the typing.
similarly, straight-forward systems like rest, microformats, and atom are generally considered legitimate alternatives to the vendor/analyst/press peddled technologies like ws-* for a wide range of integration issues.
now’s my time to step off my high horse — why are the technical details of the fact that jsps are compiled-then-run vs interpreted important to you?
not  misinformation, not malicious lies: widely known.
something that is high on my list is a better conceptual model for dealing with multiple processors.
a cursory glance over rubyforge.org’s project tree reveals that the number of projects that  “just generate web pages” are really quite small: 151 of 1,342  total projects are registered underinternet::www/http::dynamic content and many  of those projects are related to using the web (http/uris) as a platform for  integration more than they are for “generating web pages”.
of course the stalin approach to java would pay off about as well as for  scheme.
» lesscode dissects gosling’s fud:
we don’t need to prove him wrong with articles and blog posts.
on the one side is used in programming and java is on the other side.
(changes ‘underwent’ to ‘undergone’)
they don’t need the xml  languages, [though] the java code ends up looking even uglier than the xml  files.
sure, there are webservers written in ruby and python - but without big  parts of the libs written in c those would be unbearable slow.
only there, because of the highly  optimized c version in the runtime-lib php and ruby can perform similar to the  java-implemented re-lib in the java-standard-libs performance wise.
and why not use a existing language as dsl, maybe python or ruby.
it turns out  thatselectively strictening a loose type system is more productive than  selecting weakening a static type but just as performant.
[snip] … they just generate web pages”.
so whilst it may not be trendy, it may not be open source, it may not have  some word of mouth marketing scheme behind it the lack of vbscript’s  inclusion in your mind’s list of scripting languags may show more  snobbery than gosling.
do yourself a favour and  learn a type-inferenced, statically typed language (which in practice means one  of a set of pure functional languages)
lastly, peter yared (former sun hacker) and the rest of the folks over at activegrid should also be interested to learn that no one is attempting to widen the viability of dynamic languages in the “application domain”.
peace and all be happy… just to add another use of dynamic languages in big corps: python for  example is used by sap for internal it automation.
march 2006 erikh: i still think that all of this language war stuff is malarky.
everybody can create dynamically  typed languages - it’s in fact totally simple.
they had to learn  to move on.
it may have a better fit to some problems — though  i’ve yet to figure out what those are, other than increasing my use of  mediocre developers — the turing completeness proves this false.
simply because they are only useful as ‘glue’ between programs which do the real work.
it’s been 5 days since the his real comments became available on  artima (video and transcript).
so i don’t see your point here.
that’s duck-typing, my  friend, and that’s dynamic.
the real reason dynamic compilation exists is that it makes changing code more flexible than when precompiled.
so i  don’t see your point here.
but then you’d have to wonder why the language was so less  expressive.
if you look at alle those examples of successful usage of those languages you see, thats they are always uses as glue.
would you “befine” if i changed the term “p-code” to “jvm bytecode” in your above sentence?
march 2006 just words »
march 2006 alderete: i don’t understand what all the fuss is.
for example trex (a search engine), it even  includes a python tcl gui.
march 2006 isaac gouy: gigo do you have a sufficiently accurate source text for this kind of phrase-by-phrase analysis?
something must have changed.”
my favorite still being c, but i rarely ever consider using it.
it’s obvious why this costs much more memory - but it’s not obvious how ruby can made more optimal without totally redefining its runtime semantics.
we are now free to dismissany technology that lacks “interplanetary navigation” features.
some time ago, the standard answer you got to any java+web question was : use j2ee.
beyond the buzz and fud, scripting and dynamic are just features of the language.
in “java is the suv of programming tools”, philip greenspun writes “ascripting language such as php or perl”.
compiled, interpreted or compiled to bytecode then interpreted, whatever.
i wouldn’t want it any  other way.
for example: simple recursive function evaluation (ack, fib and tak).
i guess no-one told ccp that they weren’t allowed to use python to create non-webpages?
serving web  pages is the meat of internet applications, enterprise applications, software  as a service.
i like lisp and python and i’ve used jython quite a lot at some point, but for for corporate work you really can’t choose on the desktop side something else except java or .net
i have been programming for 26+ years and try to learn a new language every year.
it works best if you do  numerical programming because stalin detects some common usage patterns and  creates optimized code for those patterns.
to see something that might be cast in a more familiar “middleware” light, check outactivegrid.
i found dozens of such tools written in php, and very few in  java.
» gosling didn’t get the memo
http://proprietary.clendons.co.nz/licenses/eula/backoffice2000server-eula.htm interesting, but i guess nobody reads licenses anyway.
you are effectively saying that java does not have the facilities necessary to create dsls which can express configuration more tersely than xml.
java is the  new legacy, the new cobol.
this is stuff used by thousands and thousands of people on a daily basis internally (and the sap it is something that actually works..
and this has nothing to do with the fact that java is precompiled or dynamically compiled (from source code to machine code, that is, not bytecode); it has to do with the language itself.
i’ll echo and amplify paul’s reply:
from what i recall, it was real-time image analysis logic  that helped one satellite automatically maneuver itself into connecting with  another, via video camera.
so when i see how a language like ruby does in performance tests, often 100 times slower than the leader, i have to ask myself whether it has any place in application programming.
best results are achieved when you provide no further explanation of the pros and cons of static and dynamic compilation and/or typing and instead allow the reader to simply assume that there are a wealth of benefits and very few, if any, disadvantages to static compilation.
dynamic language designers shouldn’t forget that  computers are still very much valued in their ability to do computations (hence  the name!)
dynamic languages are making a resurgence, not a comeback since they never really went away, and for many it will be a good, productive and profitable time.
on the one side is used in  programming and java is on the other side.
this does not require you to champion or otherwise support these technologies - just stop lying about them.
they are only saying that dynamic-lanugages can scale as well.
haven’t you really just validated the point, though?
if i use for example php, i have a web-server written in c, which uses a module written in c to execute a language which uses libraries written in c to access a database-server written in c. can you write all this stuff in php?
ð°ð¿ð¾ð»ð¾ð³ðµñð¾ð² “ñðºñð¸ð¿ñð¾ð²ññ ñð·ñðºð¾ð²” ñð²ð¾ð´ññññ ðº ñð»ðµð´ñññðµð¼ñ: […] pingback at 14.
that doesn’t make it bad, it just makes it limited to that specific problem domain.
in everyday situations we also see a number of specialized  languages (non-programming languages), that are constrained and therefore  limited in one way or another.
actually, he does: for the command and control system, big parts of it are this rather large java application.
parsing every phrase of the prepared keynote address might have thrown up something interesting, but is it really worth doing for a second-hand version of an extemporary answer to a question from the audience?
from their point of view there are not anything noteworthy except perfect,  brilliant, ideal java!
yes, you can have dynamic languages which are faster - but even smalltalk  and lisp can’t compete to java normally.
digg php’s scalability  and performance:
march 2006 richard: java is ugly.
still, such languages are a subset of the âgeneral purpose’ natural languages (and their dialects thereof).
i think the reason is that in ruby  each object is implemented as a hash-table, while in java objects are  implementes like c structs.
scalability: the j2ee guy still doesn’t get php ibm poop heads say lamp users need to “grow up”
just look at the projects on sourceforge - i went looking for a  cms recently.
blog archive » sun’s gosling on ruby and php: […] scripting languages?
the last 20% takes 80% of the effort.
sorry, i thought it had something to do with honestly entertaining the possibility that other opinions might actually be valid.
who cares what james gosling  thinks?
and of course no one ever called ocaml a scripting language too.
sadly, it seems to be the norm in these times.
what would you like for the man ??
look at the actual shootout-pages for benchmarks.
they are general purpose programming languages.
march 2006 aristotle pagaltzis: twifkak: a real language shouldn’t need an extra language to constrain it.
even the hypothetical future  interplanetary staff, which he dragged in as his crown argument, will be  writing scripts instead on relying on statically typed java applications to  guide them while they hurl through the space.
some time ago, the  standard answer you got to any java+web question was : use j2ee.
i believe that a  majority of people in it now consider dynamic languages like perl, ruby,  python, and php to be very much capable of sitting at the table with java and  .net for a wide range of common technical problems.
responses from ruby followers in particular indicated  the language does have the scalability and power to build more than web  “just” applications.
serving web pages is the meat of internet applications, enterprise applications, software as a service.
you may prefer a different phrase, but that  doesn’t mean george schlossnagle or philip greenspun or peter yared or  even james gosling are spreading misinformation.
i’ve seen excellent programmers who have no idea why their software turns a high-end oracle rdbms server into an expensive brick.
does being a java advocate give gosling a license to say whatever he wants without any kind of basic fact checking or respect for basic, fundamental scientific process?
digg php’s scalability and  performance: […] several weeks ago there was a notable bit of controversy over  some comments made by james gosling, father of the java programming language.
april 2006 does not compute » blog archive »
this  does not require you to champion or otherwise support these technologies -
this is not to claim superiority for a given task, just that the competitive playing field is beginning to level off.
march 2006 assaf: i don’t mind if gosling uses “scripting languages”.
it may have been a prototype of the real thing, but i don’t think that it was.
bill venners: so given that it was more perceived along the lines of embedded devices, or that’s how you thought of it, would you say there are deficiencies in java for the enterprise environment, or areas in which you could do better at the language level?
i of course, will remain open minded that ruby may be better than say
i know, there are people refuse to see those both last points and see static typing only as a burden, not as a means to help you even in the design process.
the last item in this blogger’s transcript gives different source  text for the same question & answer - parse away.
you accuse james gosling of spreading misinformation about the current state of dynamic languages, presumably including the current state of php and ruby performance.
the argument holds water only because  the the php interpreter is tied to a webserver, which makes it practically  impossible to write dæmons.
we just  need to keep successfully building real, working systems using the tools that  we feel are appropriate.
march 2006 bertus: alex bunardzic wrote: if i define a certain player as being a type, and ive made a decision to  cast that player as a type while i was being governed by the contextual  circumstances, when the context changes, that type will have a hell of a  problem getting out of the cast.
segue abaixo os links para a entrevistas e para as respostas a esta  entrevista feitas pelo ryan tomayko .
and lisp as one of the oldes higher-level lprogramming language is also dynamically typed.
thats not bad for a scriping language, because performance isn’t  relevant for scripting purposes as long as it don’t takes an eternity.
by that token, java must be a scripting language, since running a java vm  written in java inside a java vm would be very slow.
gosling seems bent on meeting the needs of the 20% while leaving the 80% with a platform that’slosing bids to dynamic/agile shops.
php was originally very much specialized for generating web content and  that’s its forte to this day.
since due to development in many opensource projects such fop , xml , apache , eclipse and opensympony will lead java to be the king of internet kingdom !!
he was showing off to me some code he had helped write that — guess what —actually did interplanetary navigation.
you can pin the types down retrospectively as needed, instead of burdening  yourself with a static type system during development.
more relevantly, perhaps, is that the bug which needed to be addressed  concerned a race condition due to the concurrent nature of the software, not  any of the type-safety or other shallow bugs that might be addressed by  adopting java instead.
if you really want a lisp program to compete performancewise with java, you  end up writing a statically typed program in lisp using lots of declares which  fix the types of nearly everything.
when jini’s roamed the  earth: […] in preparation for working on the specs for hlvm (high level  virtual machine) i have been brainstorming on what the future of languages and  language features might be.
march 2006 a bigger soapbox [@lesscode.org]: […] sys-con media publisher/editor jeremy geelan, a fine chap who interviewed the father of java just the other day, contacted me about re-publishing gosling didn’t get the memo on sys-con.com.
march 2006 diário de leonardo boiko » blog archive »
march 2006 harry fuecks: perhaps it’s time to nail down the term scripting language - my vote goes for “anything with a virtual machine is scripting language” - then james might not feel so left out.
people don’t, however, because the java code ends up looking even uglier than the xml files.
“just to add another use of dynamic languages in big corps: python for example is used by sap for internal it automation.”
in other words, i could walk into most shops during a technology evaluation and put these technologies on the table as legitimate considerations without being too worried about being laughed out of the room.
not: they just generate  web pages.
as long the language really has to do the work on itself, php and ruby and  to a lesser degree python are very slow.
and please note, that the java answer was not always pojo.
do i get to raise hell if matz prefers ruby over lisp?
at the idea ms would slip this into a eula, that i had to verify it.
my aging  brain recalls very simular emotional arguements from lisp vs. fortran  advocates.
for many of the config files i can think of — log4j, hibernate, ant (if you’re some sort of nutty nut girl who’s nuts) — you can programmatically configure them in java code.
scripting is exactly what scares the shit out of gosling and other application evangelists.
it reveals why static languages are not real languages â
nitpicking over (relatively) vague terms like “enterprise” and “applications” seems like something that belongs in a marketing conference or board room than in any technical discussion whatsoever.
so it’s sometimes hard to separate the specialized pieces from the general purpose pieces.
i think  the target is 80% of lisp and smalltalk.
if you want to do ruby-like metaprogramming or dynamic class loading and creation like in java, its approach won’t work.
well, maybe if you spent “a small amount of time researching and validating” your arguments, you’d know how.
but we know(from the 80/20  rule) that the only 20% of the journey is done when you say that 80% work is  done.
all things have a certain price: in ruby the price of the comprehensive runtime meta programming is a increased memory consumption and a reduced performance.
i generally use the libxml2 bindings for perl rather than pure-perl xml parsers to do xml processing; the extra speed is a nice bonus, but the real reason is that building a dom for even a moderately large xml document using perl data structures consumes mindboggling amounts of memory.
i’ve seen excellent programmers who have no idea why their software  turns a high-end oracle rdbms server into an expensive brick.
i think my general point is that if you only think of a compiler as  something like what kernighan and ritchie developed thirty years ago then, no,  c or java will almost always out perform ruby for sufficiently cpu-bound  examples.
gosling didn’t get the memo: […] read more | digg story […] pingback at 13.
now if we agree on the premise that less code is better, wouldn’t that mean java actually needs xml?
but on the other hand i do not have to read“effective java advocacy beans”, section 6.8.3 to see another kind of fud raising on.
april 2006 javastation builder network 2006 »
the fastcgi method was chosen specifically because it does have an infinite loop.
in python, in ruby, in php.
i can’t for the life of me understand why someone is upset that the father of java still prefers java, i’d be more surprised if he’d prefer something else.
nothing mysterious - ruby on rails marketing & hype.
none of these technologies underwent huge feature or stability increases in the past year.
because of its runtime model which is very different from the runtime model of ruby.
the product may contain support for programs written in java.
the parts in java can scale to dozens or more computers simply by using the facade pattern with stateless session beans calling pojos.
i’d also like to note that exposing resource representations via  http/urls has been moving into areas other than “generating web  pages”.
will that stunt be conducive to  the discipline of less code?
the state of the scripting universe van rossum, thomas, hobbs, conway,  pall weigh in on this misconception and others.
windows scripting host and, again, vbscript files.
and if someone thinks i’m trolling along, please feel free not not to read my posts.
stalin is an approach you’d apply to larger chunks of code you expect  to be in production for some longer period of time, e.g. weeks or months.
as the current nike commercial (running during college basketball) says, “let your game do the talking.”
just look at the projects on sourceforge - i went looking for a cms recently.
and just another note here: they just closed the  java consulting depeartment in germany - a “strategic decision.”
worry  about it if it does.
i was so shocked, shocked!
march 2006 petrilli: the reality is that large chunks of mission control @ nasa as well as the space telescope sciences institute (the people who run the hubble) use python to manage their missions to interplanetary destinations.