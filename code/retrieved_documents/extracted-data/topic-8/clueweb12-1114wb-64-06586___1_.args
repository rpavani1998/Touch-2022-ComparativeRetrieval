we have short deadlines so we work iteratively and try to work closely with our users and stakeholders.the unittest module provides a convenient framework for isolating tests from one another and python-requests dramatically simplifies the process of making various types of requests and testing the response headers.the script knits together three unrelated technologies in order to allow us to test how changes to the site affect the cache: the unittest module provides a convenient framework for isolating tests from one another and python-requests dramatically simplifies the process of making various types of requests and testing the response headers.all of them combine to provide us with explicit expectations for reading one another’s code and therefore a much easier time when are obligated to fix it at 10:30, on a sunday, for a monday morning paper.that being said, it also provides a pretty interesting example of using ec2 to solve problems that can really only be properly addressed with distributed computing.perhaps the most important lesson i learned from triblocal’s development was that our cache layer was extremely fragile–it was prone to break when a new version of a site was deployed.but it can quickly get cumbersome as your application grows and you have to figure out how to handle deployment.this eliminates the possibility of version conflicts and makes setup as easy as pip install -rtesting from a single client will cause amazon’s elastic load balancer to route all connections to a single application server, no matter how many are available.obviously this testing strategy doesn’t attempt to address all scenarios and it should be used in conjunction with traditional testing tools such as jmeter.this particular example is very well-suited to validating caching and scaling strategies.if you decide to use the bees, please keep in mind the following important caveat: they are, more-or-less a distributed denial-of-service attack in a fancy package and, therefore, if you point them at any server you don’t own you will behavingunethically , have your amazon web services accountlocked-out, and be liable in a court of law for any downtime you cause.on a technical note, one of the nice features of the scrapelib library mentioned above, and the 3.7+ gb of cached web pages, was that as i refined my code to build the index, i was able to run it against the cached documents, which made things much faster.most of the actual functionality has been abstracted into the testcachingbase base class so the individual tests are brief and readable.the traditional load-testing tools we tried (ab, flood, jmeter, etc.), while often useful, suffered from a number of problems when trying to simulate this sort of event: what we needed was a solution that allowed us to use multiple, topographically-close clients to all simultaneously assault our servers with traffic.