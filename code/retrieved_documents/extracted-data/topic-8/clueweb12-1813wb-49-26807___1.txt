feel free to look at the cost calculator tool to estimate usage costs.
but we might as well end up with wndows azure appfabric
this is great, and we can easily add extra locations to this policy  and have, for example, a third location in asia.
given the cdn is just a checkbox on  the management pages means integrating with cdn is a breeze.
tenants will, in the future, be given the option to authenticate to their own adfs server, we’re pretty sure acs will allow us to simply configure that and instrument only tenant x can use that adfs server.
it’s the building blocks available such as traffic manager, cdn and  access control service that make our lives easier.
cloud zone is brought to you in partnership with: maarten balliauw website @maartenballiauw maarten balliauw is a technical consultant in web technologies at  realdolmen, one of belgium's biggest ict companies.
probably not, for that amount.
this dzone refcard provides an in depth introduction to the cloud computing technology, google app engine.
distributing the  application does mean that our us datacenter server has to access storage in  the eu datacenter which of course adds some latency.
acs has been a great time saver and is definitely something we want to use in future project.
cheap as in cost-effective, not as in,  well, sleezy.
covering everything from the basics...
to streamline, manage and maintain a  clear overview of which user can authenticate to which application via which  identity provider, we use acs to facilitate myget authentication.
view full user profile why myget uses windows azure 10.29.2011  email views: 1533 tweet
the main use case for myget is accessing and downloading packages.
we try to reduce this  using extensive caching on all sides, but it’d be nicer if traffic  manager allowed us to setup georeplication for storage as well.
(note: opinions expressed in this article and its replies are the opinions of their respective authors and not those of dzone, inc.)whether it's iaas or paas, there are many options and features for developers to consider when deploying applications to cloud environments.
the windows azure content delivery network allows us to serve users fast.
in fact, we even plan for tenants so every  tenant in fact is its own application.
the pricing structure is not  always that transparent but if you dig a little into it you’ll find  affordable solutions that are really easy to use because you don’t have  to roll your own.
ok, the updating has some latency due to the restrictions mentioned above, but if you download a package from myget it will always come from a cdn node near the end user to ensure low latency and fast access.
reading packages is not affected by this because we’re using the windows azure cdn for that.
his interests are asp.net  (mvc), php and windows azure.
while appealing, we  think about deploying memcached in our application because of the cost  structure involved.
many will disagree with me but the cost perspective of windows azure can be real cheap in some cases as well as very expensive in other cases.
azure can be real cheap in some cases as well as very expensive in other cases.
his blog can be found at  http://blog.maartenballiauw.be.
we currently use the asp.net in-memory cache on all machines but do feel the need for having a distributed caching solution.
acs has been a great time saver and is definitely something we want to use  in future project.
with myget we run 2 windows azure instances in 2 datacenters across the globe (one in the us and one in the eu).
in our scenario, windows azure is  cheap.
it really eases common authentication pains and acts as a service bus between users, identity providers and our applications.
to give you an example: our dev environment allows logging in via openid on a development machine.
not ideal  as the web application will be served faster from a server that’s closer  to the end user, but the application will not go down.
it’s the building blocks available such as traffic manager, cdn and access control service that make our lives easier.
myget is three applications: our development environment, staging and production.
microsoft has a host of tools to  let you deploynode.js, php, and java apps on their windows azure platform.
but if you dig a little into it you’ll find affordable solutions that are really easy to use because you don’t have to roll your own.
one problem we have with this is storage.
caching in our  application.
in our scenario, windows azure is cheap.
to give you an example: our dev environment allows logging in via openid on  a development machine.
maarten balliauw is a technical consultant in web technologies at realdolmen, one of belgium's biggest ict companies.
the cloud zone is presented by dzone and microsoft.
share it with your friends:| more first of all, here’s a high-level overview of our deployment, which may illustrate some of the aspects below: windows azure is cheap.
production allows for openid on a live environment.
and those are not scalability.
windows azure appfabric
you can probably find those with other hosters as well, but will they manage your machines?
with myget we run 2 windows azure instances in 2 datacenters across the  globe (one in the us and one in the eu).
you can see how wellyour apps run on azure with their free 3 month trial.
this is great, and we can easily add extra locations to this policy and have, for example, a third location in asia.
maarten is a dzone mvb and is not an employee of dzone and has posted 34 posts at dzone.
in fact, we even plan for tenants so every tenant in fact is its own application.
myget is three applications: our development  environment, staging and production.
if you are looking for more information on cloud computing then this dzone refcard is for you.
patch and update them?
maarten is a frequent speaker at  various national and international events.
get an in depth comparison on three different cloud...
traffic manager traffic manager, a great (beta) product in the windows azure offering  allows us to do geographically distributed applications.
dzone has great portals for python, cloud, nosql, and html5!
snippets cloud zone did you know?
we use windows azure storage  (blobs, tables and queues) as those only cost $0.12 per gb.
we currently use the asp.net in-memory cache on all machines but  do feel the need for having a distributed caching solution.
maarten is a dzone mvb and is not an employee  of dzone and has posted 34 posts at dzone.
in staging, we only use windows live id and facebook whereas our production website uses different identity providers.
for $180.00 per month this means 2  great machines at two very distant regions of the globe.
since  windows azure is much, much more than scalability alone, i decided to do a  quick writeup about the various reasons on why we usewindows azure for myget.
for example, if someone asks me if they should move to windows azure and they now have one server running 300 small sites, i’d probably tell them not to move as it will be a tough price comparison.
conclusion in short, windows azure is much more than hosting and scalability.
the pricing structure is not always that transparent
this only  affects storing package metadata and packages.
currently we don’t use windows azure appfabric
next to geographically distributing myget, traffic manager also ensures that if one datacenter goes down, the dns pool will consist of only “live” datacenters and thus provide datacenter fail-over.
we try to reduce this using extensive caching on all sides, but it’d be nicer if traffic manager allowed us to setup georeplication for storage as well.
get clear cut information on solutions like windows azure,open and flexible cloud platform to develop, deploy and manage applications on microsoft's datacenters.
his blog can be found at http://blog.maartenballiauw.be.
tenants will, in the future, be  given the option to authenticate to their own adfs server, we’re pretty  sure acs will allow us to simply configure that and instrument only tenant x  can use that adfs server.
given the cdn is just a checkbox on the management pages means integrating with cdn is a breeze.
caching currently we don’t use windows azure appfabric
not ideal as the web application will be served faster from a server that’s closer to the end user, but the application will not go down.
myget is not one application.
next to geographically distributing myget, traffic manager also ensures  that if one datacenter goes down, the dns pool will consist of only  “live” datacenters and thus provide datacenter fail-over.
related microzone resources php for azure: cl tools & client library windows azure php dev center free 3 month azure trial node.js cloud development sdk java on the cloud: azure jdk like this piece?
we use windows azure storage (blobs, tables and queues) as those only cost $0.12 per gb.
but we might as well end up with wndows azure appfabric caching anyway as it integrates nicely with our current codebase.
distributing the application does mean that our us datacenter server has to access storage in the eu datacenter which of course adds some latency.
you can read more from them attheir website.
traffic manager, a great (beta) product in the windows azure offering allows us to do geographically distributed applications.
the only thing we’ve struggled with is finding an acceptable caching policy to ensure stale data is limited.
you can probably find  those with other hosters as well, but will they manage your machines?
source:  http://blog.maartenballiauw.be/post/2011/09/06/why-myget-uses-windows-azure.aspx tags:
for example, if someone asks me if they should move to windows azure and they  now have one server running 300 small sites, i’d probably tell them not  to move as it will be a tough price comparison.
view full user profile like this piece?
cheap as in cost-effective, not as in, well, sleezy.
caching in our application.
in short, windows azure is much more than hosting and scalability.
share it with your friends: | more recently  one of the tweeps following me started fooling around and hit one of my sweet  spots: windows azure.
for example, us users  of myget will end up in the us datacenter, european users will end up in the eu  datacenter.
you can read more from them attheir  website.
ok, the  updating has some latency due to the restrictions mentioned above, but if you  download a package from myget it will always come from a cdn node near the end  user to ensure low latency and fast access.
patch and  update them?
caching anyway as it integrates nicely with our current codebase.
cloud zone is your trusted guide through the jungle of diverse cloud solutions.
many will disagree with me but the cost perspective of windows
this only affects storing package metadata and packages.
the only thing  we’ve struggled with is finding an acceptable caching policy to ensure  stale data is limited.
in  staging, we only use windows live id and facebook whereas our production  website uses different identity providers.
for $180.00 per month this means 2 great machines at two very distant regions of the globe.
to streamline, manage and maintain a clear overview of which user can authenticate to which application via which identity provider, we use acs to facilitate myget authentication.
for example, us users of myget will end up in the us datacenter, european users will end up in the eu datacenter.
his interests are asp.net (mvc), php and windows azure.
let  our tutorials, design patterns, and news guide you through the maze of  constantly increasing cloud solutions.
he's a microsoft most valuable professional (mvp) asp.net and has published many articles in both php and .net literature such as msdn magazine belgium and php architect.
reading packages is not affected  by this because we’re using the windows azure cdn for that.
maarten is a frequent speaker at various national and international events.
first of all, here’s a high-level overview of our deployment, which  may illustrate some of the aspects below: costs windows azure is cheap.
he's a microsoft most valuable professional (mvp)  asp.net and has published many articles in both php and .net literature such as  msdn magazine belgium and php architect.
while appealing, we think about deploying memcached in our application because of the cost structure involved.
windows azure appfabric access control myget is not one application.
basically, he mocked me for using windows azure formyget,  a website with enough users but not enough to justify the  “scalability” aspect he thought windows azure was offering.
it really eases common authentication pains and acts as a  service bus between users, identity providers and our applications.