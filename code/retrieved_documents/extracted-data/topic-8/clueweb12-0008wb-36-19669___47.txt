cost most be taken into consideration as well as knowledge of the platform.
i was working in hubspot labs.
for all you know it might not even be python.
yes, it’s nice to know that there are thousands of  hosting providers out there that all support php, and that you can get hosting  really cheap as a result.
i wrote a set of articles on the topic of choosing a language/platform — specifically for startups.
here are some of the tradeoffs (php wins on some fronts, python in others), for those faced with the decision now.
no need for higher-end hosting and you save money.
since i'm going to get into a long-term relationship with a language, i figured python's a pretty good bet.
did i give in to peer pressure or somehow decide i wanted one more chance at being one of the “cool kids”.
it's noteworthy that at the end of the day if you're just trying to get your solution up and running go with just about any platform you're comfortable with rather than having to add another layer of learning i.e. other than marketing, finance etc.
the language served me well.
all things being equal, you’re going to pick the place that is doing python vs. php.
i can't tell you the number of times i spent hours in one rabbit whole, only to ask and find out that the problem was actually somewhere entirely different and really would never have looked there unless i just knew that was where to look.
apologies for the strained metaphor here  — but it had some resonance for me.
if you’re interested, just drop me an email at {dshah} @ {onstartups}{daht-com}.
we don’t have a written  charter for hubspot labs (because frankly, i’m not exactly sure how to  write one of those, or if i did, who would read it).
of course, not all things are equal, and you might actually pick the startup whose business you think has the best chances of success or whose founders you like and respect.
we ended up picking c# at the time.
it’s easy-going, fun, and you feel super-productive  (especially if you’re making a big change to something new).
if someone releases a new api, and  provides a “wrapper” for convenience, the first language supported  will likely be php.
the hubspot developer interviews  are a bit, um,rigorous, but i promise that you’ll meet some  people that will have made the time spent worthwhile, even if things  don’t work out.
if you’re interested, just drop me an email  at {dshah} @ {onstartups}{daht-com}.
posted on thursday, october 28, 2010 at 1:24 pm by brianwhoa
although php is a completelyworkable language — it’s still not an elegant language.
posted on wednesday, october 27, 2010 at 10:47 pm by josh@josh posted on wednesday, october 27, 2010 at 11:58 pm by jim robertnot that long ago whilst working at a company with about 2 million lines of perl i was considering specifying another development language.
i picked php, and  python was my second choice.
those languages are needed in the vast majority of programming jobs, so people who see coding as a means to a paycheck rather than a passion will (quite reasonably) learn one of them and work in it.
these  tools pulled in website visitors, increased visibility of hubspot,  and helped us get some interesting data that we used to benefit our  core business.
but, often, it’s hard to know that stuff upfront, so you focus on what you do know — that developing in python’s a better “bet”.
all things being equal, you’re going to  pick the place that is doing python vs. php.
on the one hand, this kind of competition is good.
i actually had fun developing in the language, and after the first few months, i felt that the code i was producing was about as good as some of the code i’m most proud of throughout my professional career.
it was lingua franca on the web.
posted on monday, november 01, 2010 at 3:53 am by rami've spent a lot of time in php, and just enough time in python to realize that i don't like the amount of "magic" that python forces the developers to rely on.
wish you can write another article on your perspective on c#/.net. posted on thursday, october 28, 2010 at 3:09 pm by williamalso, for all of you wanting a post about python vs c# my boss wrote one a while back http://bit.ly/9od8gu.
i knew i wanted a dynamic language, and i had whittled things down to those three choices.
you did put things right :)
if someone releases a new api, and provides a “wrapper” for convenience, the first language supported will likely be php.
posted on thursday, october 28, 2010 at 10:40 am by pebbiei've never tried django, so have no comparison to contribute.
posted on thursday, november 11, 2010 at 9:22 am by mike schinkeli'm not trained as a developer, but i like to make a little website here and there.
to me, django appears to have that same allure of php (a low learning curve), but when you get past the dating period, you wish you had more flexibility.
i've always been a fan of python, but have never taken the dive.
i actually had  fun developing in the language, and after the first few months, i felt  that the code i was producing was about as good as some of the code i’m  most proud of throughout my professional career.
no  need for higher-end hosting
it’s about how reflection is implemented.
you’ve got a startup to grow, you can’t be bothered with trying to join the cool kids.
any experienced developer that can create great  software can likely also write really good software in php.
by the way, in case you didn’t know, i’m the founder/cto at hubspot, and an all-around nice guy.
at the time, i was trying to pick between c# and python for my then fledgling startup.
but, there are limits.
anyway, this article inspired me to try it, and i must say it's amazing.
the article was aptly titled, “python vs. c#: business and technology tradeoffs”.
twice now, i've looked into php and gotten annoyed and sidetracked by the fragmented framework-space.
i think a lot about choices and decisions at startups.
i think that’s a poor reason.
at the time all this was happening, i was trying to decide between php, python and ruby.
posted on thursday, october 28, 2010 at 1:38 pm by dean sthanks for all the comments.
back to why i chose php: main reasons were: 1)
as for being marriage material, the author again is assuming an idealistic world, where a spouse is faithfully and doesn't nag all the time.
but, based on my circumstances at the time, i thought i chose rationally, and i was solving for the company, not my ego or enjoyment.
the hubspot developer interviews are a bit, um,rigorous, but i promise that you’ll meet some people that will have made the time spent worthwhile, even if things don’t work out.
this means that if i find a great python developer for the team (more on this later), they’ve likely used django.
posted on thursday, october 28, 2010 at 9:33 am by gilesjust realised that paul graham said essentially the same thing as i just did,back in 2004!
though ruby/rails would likely have been  fine too, there’s something about it that i just found unnatural.
though ruby/rails would likely have been fine too, there’s something about it that i just found unnatural.
that will keep you happy and motivated.
in a startup every thought should be on maximum return on investment, and i cannot see anything in your post to indicate that was on your mind which leads me to believe that yes you were indeed "fad-focused".
posted on saturday, october 30, 2010 at 3:45 am by brent hooverseems like this decision to switch to python is even harder since the python 2.7 release on 4 july 2010 was the final end-of-life (albeit with extended support) for the 2.x branch and the new 3.x is not backward compatible with 2.x and django support for 3.x is still pretty much awol at this time.
either you need to know the language/platfrom from soup to nuts yourself — or you need to have immediate access to people you can rely on, that do.
but, some of the  arguments still apply, even if you’re earlier stage.
i'm not a programmer myself, but do dabble in it sometimes and the idea that php have lots of open source and freely available code, makes you want to go back to it again and again.
that is the  life of a software entrerpreneur:  it’s a stready stream of  hard work, occasionally punctuated by some really hard decisions.
but, some of the arguments still apply, even if you’re earlier stage.
i’m not particularly bothered by the weird idiosyncracies of php (the “needle vs. haystack” problem).
because they are not using it as buzzword in the first place, unlike all the php frameworks.
for now php is serving me well.
i have a love/like relationship with php.
on with my story… when i kicked off my startup, hubspot, over 4 years ago (june, 2006)
i can seewhy people sometimes feel this way.
posted on wednesday, november 03, 2010 at 4:34 am by kjeni like python a lot for it's inherit oop, simple syntax and readability.
but, the idea was to  build cool free tools (seehttp://grader.com).
i've had to maintain someone else's python (or cr*p as i like to call it) code.
cumulatively, they’re getting millions of page views a month now.
in python land, the clear web framework winner is django.
some languages, like php, have very low learning curves — it’s super-easy to get started.
there are definitely times to  learn new things and experiment with new technologies — the early  days of your product development is not the best time.
posted on thursday, october 28, 2010 at 10:19 am by chris robinsondjango is bulky, i found it hard the first time i learned about it.
it’s about how reflection is  implemented.
i don't ask because i'm a fan of it, because i chose specifically to move away from the ms technology stack, but i'm curious to see someone else's perspective on it who wasn't influenced by having actually worked at ms (like me.)
the  deeper and richer the framework is, the more there is to learn.
[side note: patrick, if you’re reading this,  i’ll admit, you were right.
posted on wednesday, october 27, 2010 at 4:31 pm by tom branderhi!
although it does appear that out-looking-in that java is similar to .net (the local java user group in atlanta is all enterprise focused, for example) truth-be-told i don't have enough relevant experience in the java ecosystems to speak with any authority on it.
my advice is that even if you do decide to go with python — be at least “reasonably fluent” in php — it’ll come in handy.
sometimes i have good days, and sometimes i have great days.
yes, php sometimes probably involves a bit more programming *sometimes*, but i find that the python programmer is one who is a)lazy and b)enjoys coming up with impossible to track down code using highly ingenious solutions to solve the most menial problems ever.
the article author is assuming an idealistic world, where all coders write well written and logical code.
i’ve been programming for a long time, it’s my calling, and with any luck, i expect to do it for a couple of more decades.
the good news is that the mistake wasn’t fatal.
it’s close to the de-facto choice for web frameworks in python.
within reason, my general advice  is  “go with what you know”.
not all python fans are fad-focused elitists .
posted on monday, november 08, 2010 at 9:42 am by dave m.please write the follow up article on c# vs. python - we're about to make this very decision and currently leaning to c# (for the same reason you made your original decision) posted on tuesday, november 09, 2010 at 10:28 pm by jonafter previously commenting i'm returning to comment again because i just got an email that reminded me of one of the key reasons why php or python are much better for most startups than c# or java.
sometimes i have good days,  and sometimes i have great days.
the reason related to corba, the beast which had to be tamed, but which perl just couldn't deal with.
it was  lingua franca on the web.
a couple of years later, i was faced with a different decision.
during my 2+ years of php development, i launched a bunch of web  applications.
it’s theother stuff — which is deeper and more nuanced.
posted on monday, november 01, 2010 at 9:14 pm by adamfinding a good platform is very critical at start up.
don’t want to start yet another language war, but i’m fascinated by the topic of making hard decisions at startups, and this is one of the hardest.
gone were the days of troubleshooting errors without having to create a complex knowledge of the intricate workings of the source code, linear progression through the different modules, and other stuff.
don’t i have better things to do with my time?
and, fragmentation is bad.
posted on friday, october 29, 2010 at 12:14 pm by motherteresasimilar arguments could possibly support the use of java over php (as opposed to python) given the advantage of seamless interoperability, ubiquitous support on all server hosting providers (disregarding the minor hit on speed, ofcourse, which again can be mitigated by intelligent caching) posted on saturday, october 30, 2010 at 12:46 am by abhishekbesides all the things you mentioned, one thing that stood out for both python and django was the presence of clear decision makers.
if you have questions about startups, you can find me and a bunch of other startup fanatics on the free q&a website: answers.onstartups.com current articles | rss feed i think a lot about choices and decisions at startups.
in fact, many of the biggest  open source projects out there, that you might consider leveraging, are based  on php.
python is well designed, php is not.
assuming that you stick with your low-cost provider for 18 months (a long time in startup-land), you’ll havemaybe saved $900.
just like i need to work with symfony 1.4 and not 2.0, even though i'd like to use 2.0 already (or one of the other frameworks).
by this defintiion, picking the language/platform to use at a startup is  one of the harder decisions.
i'm a php programmer fighting to switch to python (which i already knew was better) for quite some time.
assuming that you stick with your low-cost provider  for 18 months (a long time in startup-land), you’ll havemaybe saved $900.
in the short to mid-term, that’s not a  particularly big problem.
so to start off the block in quick time, with minimal resources, it is kinda hard to look the other way :)
maybe not quite as dominant as rails in ruby-land — but close.
i once read a blog post where someone said "asp.net doesn't let you build 'web' apps, it lets you build asp.net apps that just so happen to live on the web."
3) there were lots of other people using it.
posted on thursday, october 28, 2010 at 8:54 am by bootsi love these arguments, it shows how much we grow over the years as we program.
(i’m talking about php 5+ here — and ignoring all the ugliness that  came before).
posted on thursday, october 28, 2010 at 1:32 pm by br.
but,  often, it’s hard to know that stuff upfront, so you focus on what you do know — that developing in python’s a better  “bet”.
i knew i wanted a dynamic language,
by “within  reason”, i mean if what you know is a relatively mainstream language  (python, php, ruby, java, c# etc.).
within reason, my general advice is “go with what you know”.
hubspot labs is a  “startup within a startup”.
so,  i picked c# and .net — which frankly, if i had to do over, i  wouldn’t have picked (more on that later).
posted on monday, november 01, 2010 at 1:39 pm by sam smithexcellent article, it was a very good read.
it’s  all the little things, which in aggregate, make for better cleaner, more elegant code.
the  decision came down to one strong, dominant factor:  i was more  productive in c# than i was in anything else, and that mattered — a  lot.
posted on sunday, october 31, 2010 at 1:12 pm by eric n. winnwell...
for you, the cost of change is high (maybe even prohibitively high).
there are definitely times to learn new things and experiment with new technologies — the early days of your product development is not the best time.
if that were the case then not only python but all the other good languages would be "great".
posted on tuesday, november 16, 2010 at 12:13 pm by greg wilsononce again, awesome read...
posted on thursday, october 28, 2010 at 9:21 am by charles_d1.
the decisions that are hardest arenot the ones where you have the least amount of information — they are the ones that are hardest to undo or reverse.
in the short to mid-term, that’s not a particularly big problem.
the deeper and richer the framework is, the more there is to learn.
i choose php because it seemed like the shortest learning curve, tons of information available (manuals, sample code, forums, user community etc.. though this is probably true with most other languages as well), and the easiest to get started on to bring up a version 1/working prototype.
although it’s perfectly possible to write good code in php, it’s much easier to write great code in python .
i like some php frameworks too and will still use php but the more i learn about python it seems like everything you said on here is true.
but that's likely related to my c/c++  background.
it might be different if you're setting up a site from scratch..
posted on monday, november 01, 2010 at 6:33 pm by mikei get asked questions about one language over another all the time.
of course, not all things  are equal, and you might actually pick the startup whose business you think has  the best chances of success or whose founders you like and respect.
it was an easy transition from my c++/c# days, and combined with an mvc framework like codeigniter, things weren’t too bad.
that is the life of a software entrerpreneur: it’s a stready stream of hard work, occasionally punctuated by some really hard decisions.
all things being equal, i much prefer that all of us are working with the same frameworks and libraries.
there isn't always one 'best ' solution but more importantly use the proper tool to solve the problem.
therefore, pick a language that you and your team is comfortable with and focus on building the product that solves the solution.
get the solution out there, mature it, reassess when scaling up and go with the platform that suits your needs the best.
posted on friday, october 29, 2010 at 7:41 am by carli hadn't done any 'real' programming in quite awhile when i decided to develop my website.
and, if there are any arguments you’d make on either side (php or  python), would love to hear them.
i’m sure they’re all great frameworks (i use codeigniter right now), but the fact that there’s no clear winner means that the market is fragmented.
many  people make the argument that php is a great choice of platform for startups  because you can find a $9.99/month hosting provider that supports php.
i think that’s a  poor reason.
although php  is a completelyworkable language — it’s still not an  elegant language.
these tools pulled in website visitors, increased visibility of hubspot, and helped us get some interesting data that we used to benefit our core business.
i'm impressed with it's capability and the community is awesome.
why? posted on thursday, october 28, 2010 at 9:29 am by mike con advantage we've found in using python at resolver systems is that it acts as a filter when you're recruiting.
not to knock php (i actuallylove working in php) — but python is just a better language.
the good news  is that the company did very well despite these mistakes for two simple  reasons:  first, i didn’t makeawful choices — just  sub-optimal ones.
i write c# for a living but love learning about python and using it in my own products.
apologies for the strained metaphor, but it resonated with  me.
i wouldn’t fault people for solving for their  self-interest and preference.
it’s all the little things, which in aggregate, make for better cleaner, more elegant code.
i think you are trying to push what you actually believe in rather than the fact.
python just feels  more “natural” to me.
on the one hand, this kind of competition is  good.
why?  because it was basically just me.
posted on thursday, october 28, 2010 at 1:31 am by nikhilanyone who claims python is the current fad elitist language is so far behind the times you might want to tell them about this new hip language called java.
though, if i had experience in another language i sure i would have chosen it.
posted on wednesday, october 27, 2010 at 4:26 pm by david semeriai'm curious (especially because i thought you were going to expand on why, you now regret having chosen c# and .net.
it had decent oop  support.
at the time all this was happening, i was trying to  decide between php, python and ruby.
posted on wednesday, october 27, 2010 at 9:23 pm by christopher bausphp vs python.....mini mini mani mo......never been bitten by a python, but i wonder how the venom turns out.
i was lumping it in with .net because i know that java is heavily used in the enterprise.
php is lingua franca in the world of the web.
the learning curve is with the framework.
i am talking about django framework vs one of the php frameworks.
and as such, getting someone new up to speed takes longer.
for you, the cost of  change is high (maybe even prohibitively high).
whew!  that ended up being longer than i expected.
you want to forge a relationship with a language that will be long-lasting, rich and deep.
lets  say you’re something like me:  you’ve learned php and used it  to build and launch “real world” apps.
posted on monday, november 01, 2010 at 2:57 pm by wishcowhi @oknotsomuch, posted on monday, november 01, 2010 at 4:07 pm by mike schinkeli don't understand why people continue the language-wars argument.
but,  once you get past that initial dating period, you need to think about your  future.
but i find it telling that the django guys don't try to redefine the term "mvc".
here are some of the tradeoffs (php wins on some fronts, python in others),  for those faced with the decision now.
it’s easy-going, fun, and you feel super-productive (especially if you’re making a big change to something new).
if you made  it this far, thanks for reading!
sarkissian -- answers.onstartups.com is an instance of the stack overflow software, isn't it?
this article touched on a lot of points we, developers are thinking but would never say due to being flamed by our peers.
they won't apply for a job at a company using python because it would be a waste of time for them to invest in learning the language.
join the onstartups community on facebook.
that’s just not a lot of money.
i'm a php developer for the most part, but a skeptic forever, and this kind of writing is always interesting to me.
low learning are less important than high  ceilings.
choose javascript posted on wednesday, october 27, 2010 at 8:56 pm by pytoat one point i had the option to choose .net or python for our primary web programming language.
it’sparticularly bad when it comes to web frameworks.
since you’re really good, and demand for great developers always exceeds supply, you essentially get to pick where you want to work.
but in the end it's also about what the company you program for already uses.
by the way, if you’re a gifted  python developer in the boston area and looking to join what is quite  possibly the best company to work for in boston (we won an award, so it  must be true), would love to connect.
by this defintiion, picking the language/platform to use at a startup is one of the harder decisions.
posted on friday, october 29, 2010 at 10:30 am by mattto choose a language i'd say go with your gut fealing.
i did a little test run with python and appengine(horrible choice by the way).
in the early days  of a startup, you’re looking to mitigate unnecessary risk and get to  market as fast as humanly possible.
second, success in the early days of a startup is much  more about getting market validation and traction than anything else.
the article was aptly titled,  “python vs. c#: business and technology tradeoffs”.
posted on friday, october 29, 2010 at 4:51 am by gilesgreat article indeed!
many programmers know php, vb, java or c#.
but that's likely related to my c/c++ background.
it's suitable for enterprise intranet and limited extranet applications.
if i had a dog, the dog would bark at the ruby code.
other costs, as you mentioned, are minimal compared with the cost of learning new languages and frameworks for a single founder.
if you’re in the software development business as  a career choice (i.e. you’re going to do it for a long time), then the  larger consideration should be what’s going to create the most value for  you long-term.
any experienced developer that can create great software can likely also write really good software in php.
the learning curve these days is not a new language (it takes a proficient programmer just a few days to get her arms around the basics of a new language).
also i can't agree with tom leys more.
hubspot labs is a “startup within a startup”.
of course the invterview process would take quite a bit more skill and time to weed out all the bad ones.
right now the world is mostly in php and that's what i've got the most experience in.
by the way, if you’re a gifted python developer in the boston area and looking to join what is quite possibly the best company to work for in boston (we won an award, so it must be true), would love to connect.
don’t get me wrong, ilove frameworks (dating back all the way to the object windows library that borland had for turbopascal).
but, if there are a bunch of different frameworks floating around, the odds that any given person is working in the same framework you are lower.
and, as it turns out, customers really don’t care whether your saas  application is built in php, c#, ruby or python.
but, if you’re picking a language based  on spending $10/month vs. $50/month or $100/month — you’re focused  on the wrong thing.
low-end web hosting is a non-issue.
yes, it’s nice to know that there are thousands of hosting providers out there that all support php, and that you can get hosting really cheap as a result.
posted on tuesday, november 16, 2010 at 2:44 pm by web hostingmy opinion is next: posted on wednesday, november 17, 2010 at 5:30 am by 0x19asp.net is not suitable for public-facing web sites.
glad to see you've come over to the django side.
i've been using php for almost 5 years and i love a lot about it, mainly the oop.
one of the arguments i hear continually online goes something like this:   “php is a perfectly fine language, and folks pushing python are just  fad-focused elitists that want to work on the latest cool new thing, instead of  just picking what works and focusing on building apps that solve customer  problems.”
that makes life  much easier.
how functions are first-class objects.
posted on wednesday, october 27, 2010 at 7:48 pm by bengreat post.
posted on wednesday, october 27, 2010 at 8:32 pm by carlos acciolyphp vs. python?
python just feels more “natural” to me.
frameworks have an upfront cost, but provide a ton of value long-term.
and if i had a cat, it would twitch its tail and otherwise look mildly irritated at python code.
but, based on my  circumstances at the time, i thought i chose rationally, and i was solving for  the company, not my ego or enjoyment.
if you’re looking to build wordpress plugins, you’re going to be doing it in php.
why php is fun and easy but python is marriage material
no type information to go on when debugging.
posted on tuesday, november 02, 2010 at 9:46 pm by hsekhonin my opinion, c# is good to develop desktop application, php and python is good to make web application.
man do i regret that now.
posted on tuesday, november 02, 2010 at 4:33 am by seunwebin my opinion the point really being made here isn't that one is simply a better language than the other but what is more sustainable as a platform in the long run to scale-up a startup's operations.
i’m not particularly  bothered by the weird idiosyncracies of php (the “needle vs.  haystack” problem).
some reasonable open source well supported cms are available in php.
the good news is that the mistake  wasn’t fatal.
but, once you get past that initial dating period, you need to think about your future.
the fact that i can use python in so many ways makes it so much more valuable.
halligan"if i had a dog, the dog would bark at the ruby code."
as a “classically trained” developer (undergrad compsci), i appreciate that python gets a bunch of the language stuff “right”.
how functions are first-class objects.
i’ll attempt at answering  some of those questions.
note:  the context here is a  startup that is a bit further along (hubspot was 2 years old and had about  50 employees at the time of this decision).
posted on wednesday, november 03, 2010 at 2:00 pm by reini would love to see your follow up article about why you regret starting with c#.
but, if there are a bunch of different frameworks  floating around, the odds that any given person is working in the same  framework you are lower.
i chose php too for all the reasons that you have mentioned.
i wouldn’t fault people for solving for their self-interest and preference.
second, success in the early days of a startup is much more about getting market validation and traction than anything else.
don’t want to start yet another  language war, but i’m fascinated by the topic of making hard decisions at  startups, and this is one of the hardest.
don’t get me wrong, ilove frameworks (dating back all the way to  the object windows library that borland had for  turbopascal).
lets say you were on the outside looking in (i.e. you’re a gifted developer looking to join a cool new startup).
i feel the same way about there being multiple frameworks in php.
a language that brings the best out in you — over the long-term.
my advice: recognize that there are things like amazon ec2 out there now, and over time, it’s going to be just as easy to spin up servers for python as it is for php.
contrast that to php where we have symfony, zend, codeigniter, kohana — and others.
if the site does kick off though i could see having to rewrite it in a more robust language.
posted on wednesday, october 27, 2010 at 5:46 pm by mike schinkelyour new hubspot labs logo is really cool.
i don't code on the first date.
in the early days of a startup, you’re looking to mitigate unnecessary risk and get to market as fast as humanly possible.
everything he said about the company was appealing (good use of social media, smart concept, and great use of tools as marketing) but that stack choice stuck out in my mind the most.
i’m paraphrasing a bit, but that’s the gist  of it.
and i had whittled things down to those three choices.
i made some pretty good arguments in that article, most of which i still stand behind to this day.
if you’re looking to build wordpress plugins,  you’re going to be doing it in php.
in fact, many of the biggest open source projects out there, that you might consider leveraging, are based on php.
the only point you had that had any return on investment mentality was the "python means i get better programmers applying", but i would wager that you would find more quality php programmers simply due to the sheer number of php programmers to python programmers out there.
but, i’m to advocate for some empathy here.
i’ll attempt at answering some of those questions.
but then i found bottle, now i am becoming lazier to open my php code than to write and experiment using bottle.
but, if you’re picking a language based on spending $10/month vs. $50/month or $100/month — you’re focused on the wrong thing.
it was easy to get started.
posted by dharmesh shah on wed, oct 27, 2010 posted on wednesday, october 27, 2010 at 4:14 pm by therealbensmithhey dharmesh, very nice article.
the good news is that the company did very well despite these mistakes for two simple reasons: first, i didn’t makeawful choices — just sub-optimal ones.
that ended up being longer than i expected.
posted on wednesday, october 27, 2010 at 4:34 pm by fernandosi can completely relate.
that makes life much easier.
i am coming from a desktop app perspective and couldn't imagine doing my work entirely in python, but i'm also not that experienced in it.
we don’t have a written charter for hubspot labs (because frankly, i’m not exactly sure how to write one of those, or if i did, who would read it).
python has a “clear” web framework winner: although conceptually i like having choices (and i believe in openness), practically, i really,really like standards.
either you  need to know the language/platfrom from soup to nuts yourself — or  you need to have immediate access to people you can rely on, that do.
my advice:   recognize that there are things like amazon ec2 out there now, and over time,  it’s going to be just as easy to spin up servers for python as it is for  php.
i prefer python because i hate to press a lot of key (shift+[ = {) and python is easier to read.
if you’re in the software development business as a career choice (i.e. you’re going to do it for a long time), then the larger consideration should be what’s going to create the most value for you long-term.
they’re not trying to talk you into switching, they’re just saying thatit matters to them.
the decisions that are hardest arenot the ones where you have the  least amount of information — they are the ones that are  hardest to undo or reverse.
i  wrote a set of articles on the topic of choosing a language/platform —  specifically for startups.
did i give in to peer pressure or somehow decide i wanted one more chance at  being one of the “cool kids”.
posted on thursday, october 28, 2010 at 2:02 pm by dharmesh shahlove your article.
since you’re really good, and  demand for great developers always exceeds supply, you essentially get to pick  where you want to work.
so, back to the title of this article: php is fantastically fun, but python is marriage material .
i’ve been programming for a long time, it’s my calling,  and with any luck, i expect to do it for a couple of more decades.
[note: i still am viscerally troubled by the using whitespace to indicate code structure, instead of just using braces like the rest of the sane world, but it’s a relatively minor gripe].
posted on thursday, october 28, 2010 at 9:09 am by jeremy petersonclearly written by a python aficionado.
one of the arguments i hear continually online goes something like this: “php is a perfectly fine language, and folks pushing python are just fad-focused elitists that want to work on the latest cool new thing, instead of just picking what works and focusing on building apps that solve customer problems.”
i'm also considering switching from php, mostly because of all the bad rumors about php6 development.
it’s theother stuff — which is deeper and more  nuanced.
and, that’s  awesome.
so, i picked c# and .net — which frankly, if i had to do over, i wouldn’t have picked (more on that later).
the  article was very widely read, and still continues to drive traffic (likely  because it ranks #1 in google for “python vs c#”).
it’svery hard to change this decision.
they’re not trying to talk you into  switching, they’re just saying thatit matters to them.
[note:  i still  am viscerally troubled by the using whitespace to indicate code structure,  instead of just using braces like the rest of the sane world, but it’s a  relatively minor gripe].
there were lots of other people using it.
seems like there have been other sites with extremely high traffic that have either redesigned on another language or added code to turbo boost php.
during my 2+ years of php development, i launched a bunch of web applications.
python has a “clear” web framework winner: although conceptually i like having choices (and i believe in  openness), practically, i really,really like standards.
without having a phd on the team of 8 programmers who happened to be a python pro (but interestingly enough had no django experience) was like a blind monkey trying to lead a pack of deaf rats.
but then again all my knowledge, experience and pre-made ready-to-use code is in php - so why switch?
i'm thinking of pylons here.
posted on tuesday, november 30, 2010 at 2:53 pm by brian © 2012 onstartups.com
low-end web hosting is a non-issue.
if you made it this far, thanks for reading!
so, you might then be wondering, why switch away from php and move to  python now?
posted on thursday, october 28, 2010 at 3:31 pm by brianits kind of interesting that stack overflow.com and answers.onstartups.com are both built on c# and asp.net mvc.
this means that if i find a great python developer for the team  (more on this later), they’ve likely used django.
the  learning curve these days is not a new language (it takes a proficient  programmer just a few days to get her arms around the basics of  a new language).
lets say you’re something like me: you’ve learned php and used it to build and launch “real world” apps.
at the end of the day they all have their pros and cons, it really comes down to what you have the most experience with.
,  it’s notbetter enough to warrant switching.
since i'm  going to get into a long-term relationship with a language, i figured python's  a pretty good bet.
it is clear that python was architected to be a robust, well-designed and well thought-out language.
the author asserts, without explanation or elaboration, that c# was the wrong choice.
all  things being equal, i much prefer that all of us are working with the same  frameworks and libraries.
posted on wednesday, october 27, 2010 at 7:43 pm by ralph haygoodi'm a coldfusion developer looking to branch out to other web development languages.
it is clear that python was architected to be a  robust, well-designed and well thought-out language.
i made some pretty good arguments in that article, most of which i still  stand behind to this day.
i’m paraphrasing a bit, but that’s the gist of it.
however, the more i work in python it appears the maintainability of a python application will be much easier.
i think you just pushed me to commit some time to django.
you’ve  got a startup to grow, you can’t be bothered with trying to join the cool  kids.
you want to forge a relationship with a language that will be  long-lasting, rich and deep.
why hubspot labs is switching from php to python
so, knowing php is a very, very useful thing.
back to why i chose php: main  reasons were: 1)
this is a time vs experience issue.
a language that brings the best out in you  — over the long-term.
php....agreed...easy to learn posted on wednesday, october 27, 2010 at 9:42 pm by chuksi'm curious if you ever considered anything besides django for python.
python allows for very bad code to be written fast and easily.
the decision came down to one strong, dominant factor: i was more productive in c# than i was in anything else, and that mattered — a lot.
contrast that to php where we have symfony, zend, codeigniter, kohana  — and others.
if the product can grow, the language is scalable, talent is available in wide swaths of the community, and there is robust third party development (frameworks, open source, cms, etc) then i would say go with what you know best.
with guido as bdfl it means that progress can be made rather being mired in some of the community bickering that can go on with languages like java.
posted on wednesday, october 27, 2010 at 7:35 pm by brian
really hard to justify  the change, because though you might grudgingly admit that python is better
it was  an easy transition from my c++/c# days, and combined with an mvc framework like  codeigniter, things weren’t too bad.
posted on thursday, october 28, 2010 at 9:58 am by gilesafter reading your article, and enjoying it, i'm trying to find one solid business reason for doing the unthinkable in a startup business environment, switching programming languages after having significant investment in another.
posted on friday, october 29, 2010 at 12:44 am by areg sarkissian@areg
billplease let us know about what your view are on c# in follow up to your statement "so, i picked c# and .net — which frankly, if i had to do over, i wouldn’t have picked (more on that later)."!!!
(i’m talking about php 5+ here — and ignoring all the ugliness that came before).
apologies for the strained metaphor, but it resonated with me.
it is a personal choice based on the qualities of a language that appeal to you (verbosity and strong typing in my case) and that work for you in terms of your own productivity.
:p posted on wednesday, october 27, 2010 at 4:22 pm by zé ricardodharmesh, i'm a js/php man myself, but i can see a lot of merit in your arguments.
but, the idea was to build cool free tools (seehttp://grader.com).
not to knock php (i actuallylove working in  php) — but python is just a better language.
i should write a follow-up article on this on the topic of trust].
i can get over that pretty quickly.
clearly language choice does not depend on how good you are as a programmer or how passionate you are about the craft of software design.
really hard to justify the change, because though you might grudgingly admit that python is better, it’s notbetter enough to warrant switching.
and, if there are any arguments you’d make on either side (php or python), would love to hear them.
so true... posted on friday, november 26, 2010 at 7:03 pm by mike schinkelthis article was well written!
php “just  happened”.
here’s the story of how i made notone but two big language/platform decisions, neither of which really worked out — and which i’m now paying the price for.
i’m sure they’re all great frameworks (i use  codeigniter right now), but the fact that there’s no clear winner means  that the market is fragmented.
it had decent oop support.
posted on saturday, november 27, 2010 at 6:28 pm by jessei don't really have a strong preference between python or php, but this article lists more pros for php than it does python...
yes, sometimes the prebuilt stuff makes it easy, but as the latest comment prior to mine stated, python has now deprecated the current revision of python that is the only compatible version with django.
and this is to address what those who say"technology choice isn't important, it's execution that's important."
i  was working in hubspot labs.
would love to see what the issues are with c# and website development.
lets say  you were on the outside looking in (i.e. you’re a gifted developer  looking to join a cool new startup).
by the way, in case you didn’t  know, i’m the founder/cto at hubspot, and an all-around nice guy.
low learning are less important than high ceilings.
here’s the story of how i made notone but two big language/platform decisions, neither of which really worked  out — and which i’m now paying the price for.
what i constantly found myself having problems with was the amount of inconsistencies in the prebuilt libraries and modules that we as a shop ended up using.
note: the context here is a startup that is a bit further along (hubspot was 2 years old and had about 50 employees at the time of this decision).
the reality is that all the languages mentioned have been used to develop successfull business's.
posted by dharmesh shah on wed, oct 27, 2010
posted on thursday, november 25, 2010 at 5:10 am by kurt milam@kurt milam - great insite, thanks for sharing!
one of the the early reasons i picked php, which is still true, is that it has become lingua franca on the web.
because it was basically just me.
and, as it turns out, customers really don’t care whether your saas application is built in php, c#, ruby or python.
and its also interesting that a very smart google engineer named j. skeet, one of the top rated users on stackoverflow wrote a great in depth book on c#.
posted on thursday, october 28, 2010 at 2:50 am by bob jonesi feel, with evolution of time, our opinions on a language/frameworkchange which might be because posted on thursday, october 28, 2010 at 2:53 am by saradhi indurthi"[note: i still am viscerally troubled by the using whitespace to indicate code structure, instead of just using braces like the rest of the sane world, but it’s a relatively minor gripe]" posted on thursday, october 28, 2010 at 4:41 am by mirceai think of all the choices a founder must make, technology choice is among the least important.
and, you can find me on google+
[side note: patrick, if you’re reading this, i’ll admit, you were right.
posted on monday, november 01, 2010 at 1:09 pm by oknotsomuchan awesome article and one that's very much needed on the tubes right now.
apologies for the strained metaphor here — but it had some resonance for me.
and as such, getting someone new up to speed  takes longer.
posted on wednesday, october 27, 2010 at 4:30 pm by james donaldsonlove seeing this argument on an aspx page!
perhaps next year, right?
one  of the the early reasons i picked php, which is still true, is that it has  become lingua franca on the web.
it’svery hard to change  this decision.
i should write a follow-up article on this on  the topic of trust].
posted on thursday, october 28, 2010 at 1:03 pm by mariowhen a friend of mine left to work for you two years ago and told me you were using c# i was kind of stunned.
the article was very widely read, and still continues to drive traffic (likely because it ranks #1 in google for “python vs c#”).
some languages, like php, have very low learning curves  — it’s super-easy to get started.
many people make the argument that php is a great choice of platform for startups because you can find a $9.99/month hosting provider that supports php.
posted on wednesday, november 10, 2010 at 10:20 am by mike schinkelmike, posted on wednesday, november 10, 2010 at 11:51 pm by abhishekabhishek: fair point about java.
posted on tuesday, november 16, 2010 at 9:05 am by lorin riverslutz prechelt wrote a chapter on the relative productivity of different programming languages for the new o'reilly book "making software" (disclaimer: i'm one of the editors), and steven clarke did a chapter on applying usability techniques to apis --- see http://oreilly.com/catalog/9780596808303.
so, back to the title of this  article: php is fantastically fun, but python is marriage material .
posted on saturday, november 13, 2010 at 4:08 am by hiimleathif you're using python for web apps, you should definitely check out web2py.
as a “classically trained” developer (undergrad  compsci), i appreciate that python gets a bunch of the language stuff  “right”.
in python land, the clear web framework winner is  django.
by “within reason”, i mean if what you know is a relatively mainstream language (python, php, ruby, java, c# etc.).
cumulatively, they’re getting millions of page views  a month now.
so, you might then be wondering, why switch away from php and move to python now?
my advice is  that even if you do decide to go with python — be at least  “reasonably fluent” in php — it’ll come in handy.
at the time, i was trying to pick between c#  and python for my then fledgling startup.
they are right about the latter but not about the former, and in part it's because the former relates to the latter in ways they were probably not considering.
i picked php, and python was my second choice.
posted on thursday, october 28, 2010 at 12:28 am by hooki went through all of this while deciding on the platform for my startup - nice to see the validation!
the deadhead in me thinks it looks like a bong.
frameworks have an upfront cost, but provide a ton of  value long-term.
although it’s perfectly possible to  write good code in php, it’s much easier to write great code in python .
python mostly has that with django.