in fact quicksort is a very elegant general purpose sorting algorithm and every developer should be familiar with its principles.but recursion is dangerous sometimes, so an iterative approach is also available.if you have two sorted lists, one with items with a greater value from a given value and the other with items smaller form that given value, you can simply concatenate them and you can be sure that the resulting list will be sorted with no need of special merge.there are faster algorithms for some sets of data types quicksort is beautiful because of the elegant idea behind its principles.quicksort is beautiful because of the elegant idea behind its principles.as i said above, the recursive approach is something very natural for quicksort as it follows the divide and conquer principles.new relic provides the resources and best practices to help you monitor these applications.the problem is that there’s not an easy way to get the middle element from a list and this will slow down the algorithm.of course the best pivot is the middle element from the list, leaving the list divided into two fairly equal sub-lists.the good thing is that in practice with randomly generated lists there is not a high possibility to go into the worst case of quicksort.the python zone is sponsored bynew relic, the all-in-one web application performance tool that lets yousee performance from the end user experience, through servers, and down to the line of application code.dzone has great portals for python, cloud, nosql , andhtml5!the thing is that in the worst case quicksort is not so effective and it’s practically as slow as bubble sort and insertion sort.share it with your friends: | more when it comes to sorting items by comparing them, merge sort is one very natural approach.view full user profile algorithm of the week: quicksort 03.13.2012 email views: 4909 tweet this content is part of the python zone, which is presented to you by dzone andnew relic.