without having a phd on the team of 8 programmers who happened to be a python pro (but interestingly enough had no django experience) was like a blind monkey trying to lead a pack of deaf rats.
as for being marriage material, the author again is assuming an idealistic world, where a spouse is faithfully and doesn't nag all the time.
and if i had a cat, it would twitch its tail and otherwise look mildly irritated at python code.
and, as it turns out, customers really don’t care whether your saas application is built in php, c#, ruby or python.
i think a lot about choices and decisions at startups.
and its also interesting that a very smart google engineer named j. skeet, one of the top rated users on stackoverflow wrote a great in depth book on c#.
the article was very widely read, and still continues to drive traffic (likely because it ranks #1 in google for “python vs c#”).
the hubspot developer interviews are a bit, um,rigorous, but i promise that you’ll meet some people that will have made the time spent worthwhile, even if things don’t work out.
the decisions that are hardest arenot the ones where you have the least amount of information — they are the ones that are hardest to undo or reverse.
so, i picked c# and .net — which frankly, if i had to do over, i wouldn’t have picked (more on that later).
yes, it’s nice to know that there are thousands of hosting providers out there that all support php, and that you can get hosting really cheap as a result.
there are definitely times to learn new things and experiment with new technologies — the early days of your product development is not the best time.
i like some php frameworks too and will still use php but the more i learn about python it seems like everything you said on here is true.
if you’re in the software development business as a career choice (i.e. you’re going to do it for a long time), then the larger consideration should be what’s going to create the most value for you long-term.
i have a love/like relationship with php.
no type information to go on when debugging.
since you’re really good, and demand for great developers always exceeds supply, you essentially get to pick where you want to work.
any experienced developer that can create great software can likely also write really good software in php.
posted on thursday, october 28, 2010 at 3:31 pm by brianits kind of interesting that stack overflow.com and answers.onstartups.com are both built on c# and asp.net mvc.
i’m sure they’re all great frameworks (i use codeigniter right now), but the fact that there’s no clear winner means that the market is fragmented.
i actually had fun developing in the language, and after the first few months, i felt that the code i was producing was about as good as some of the code i’m most proud of throughout my professional career.
low learning are less important than high ceilings.
second, success in the early days of a startup is much more about getting market validation and traction than anything else.
with guido as bdfl it means that progress can be made rather being mired in some of the community bickering that can go on with languages like java.
posted on thursday, october 28, 2010 at 8:54 am by bootsi love these arguments, it shows how much we grow over the years as we program.
it’s easy-going, fun, and you feel super-productive (especially if you’re making a big change to something new).
the only point you had that had any return on investment mentality was the "python means i get better programmers applying", but i would wager that you would find more quality php programmers simply due to the sheer number of php programmers to python programmers out there.
by this defintiion, picking the language/platform to use at a startup is one of the harder decisions.
cumulatively, they’re getting millions of page views a month now.
if i had a dog, the dog would bark at the ruby code.
posted on wednesday, october 27, 2010 at 9:23 pm by christopher bausphp vs python.....mini mini mani mo......never been bitten by a python, but i wonder how the venom turns out.
in python land, the clear web framework winner is django.
posted on wednesday, october 27, 2010 at 4:34 pm by fernandosi can completely relate.
why? posted on thursday, october 28, 2010 at 9:29 am by mike con advantage we've found in using python at resolver systems is that it acts as a filter when you're recruiting.
posted on tuesday, november 16, 2010 at 2:44 pm by web hostingmy opinion is next: posted on wednesday, november 17, 2010 at 5:30 am by 0x19asp.net is not suitable for public-facing web sites.
i can seewhy people sometimes feel this way.
wish you can write another article on your perspective on c#/.net. posted on thursday, october 28, 2010 at 3:09 pm by williamalso, for all of you wanting a post about python vs c# my boss wrote one a while back http://bit.ly/9od8gu.
posted on monday, november 01, 2010 at 1:09 pm by oknotsomuchan awesome article and one that's very much needed on the tubes right now.
in fact, many of the biggest open source projects out there, that you might consider leveraging, are based on php.
choose javascript posted on wednesday, october 27, 2010 at 8:56 pm by pytoat one point i had the option to choose .net or python for our primary web programming language.
for you, the cost of change is high (maybe even prohibitively high).
one of the arguments i hear continually online goes something like this:  “php is a perfectly fine language, and folks pushing python are just fad-focused elitists that want to work on the latest cool new thing, instead of just picking what works and focusing on building apps that solve customer problems.”
and, if there are any arguments you’d make on either side (php or python), would love to hear them.
you’ve got a startup to grow, you can’t be bothered with trying to join the cool kids.
not to knock php (i actuallylove working in php) — but python is just a better language.
i actually had fun developing in the language, and after the first few months, i felt that the code i was producing was about as good as some of the code i’m most proud of throughout my professional career.
i write c# for a living but love learning about python and using it in my own products.
i'm also considering switching from php, mostly because of all the bad rumors about php6 development.
as a “classically trained” developer (undergrad compsci), i appreciate that python gets a bunch of the language stuff “right”.
frameworks have an upfront cost, but provide a ton of value long-term.
i am coming from a desktop app perspective and couldn't imagine doing my work entirely in python, but i'm also not that experienced in it.
posted on friday, october 29, 2010 at 12:14 pm by motherteresasimilar arguments could possibly support the use of java over php (as opposed to python) given the advantage of seamless interoperability, ubiquitous support on all server hosting providers (disregarding the minor hit on speed, ofcourse, which again can be mitigated by intelligent caching) posted on saturday, october 30, 2010 at 12:46 am by abhishekbesides all the things you mentioned, one thing that stood out for both python and django was the presence of clear decision makers.
so, i picked c# and .net — which frankly, if i had to do over, i wouldn’t have picked (more on that later).
it had decent oop support.
for now php is serving me well.
gone were the days of troubleshooting errors without having to create a complex knowledge of the intricate workings of the source code, linear progression through the different modules, and other stuff.
all things being equal, i much prefer that all of us are working with the same frameworks and libraries.
if you’re looking to build wordpress plugins, you’re going to be doing it in php.
in python land, the clear web framework winner is django.
the good news is that the mistake wasn’t fatal.
many people make the argument that php is a great choice of platform for startups because you can find a $9.99/month hosting provider that supports php.
this means that if i find a great python developer for the team (more on this later), they’ve likely used django.
and as such, getting someone new up to speed takes longer.
these tools pulled in website visitors, increased visibility of hubspot, and helped us get some interesting data that we used to benefit our core business.
you want to forge a relationship with a language that will be long-lasting, rich and deep.
the hubspot developer interviews are a bit, um,rigorous, but i promise that you’ll meet some people that will have made the time spent worthwhile, even if things don’t work out.
posted on friday, october 29, 2010 at 10:30 am by mattto choose a language i'd say go with your gut fealing.
those languages are needed in the vast majority of programming jobs, so people who see coding as a means to a paycheck rather than a passion will (quite reasonably) learn one of them and work in it.
posted on wednesday, november 03, 2010 at 4:34 am by kjeni like python a lot for it's inherit oop, simple syntax and readability.
python just feels more “natural” to me.
so, back to the title of this article: php is fantastically fun, but python is marriage material .
it's suitable for enterprise intranet and limited extranet applications.
in fact, many of the biggest open source projects out there, that you might consider leveraging, are based on php.
the good news is that the company did very well despite these mistakes for two simple reasons:  first, i didn’t makeawful choices — just sub-optimal ones.
this means that if i find a great python developer for the team (more on this later), they’ve likely used django.
if you’re looking to build wordpress plugins, you’re going to be doing it in php.
i was lumping it in with .net because i know that java is heavily used in the enterprise.
if the product can grow, the language is scalable, talent is available in wide swaths of the community, and there is robust third party development (frameworks, open source, cms, etc) then i would say go with what you know best.
it was easy to get started.
assuming that you stick with your low-cost provider for 18 months (a long time in startup-land), you’ll havemaybe saved $900.
i wouldn’t fault people for solving for their self-interest and preference.
therefore, pick a language that you and your team is comfortable with and focus on building the product that solves the solution.
on the one hand, this kind of competition is good.
yes, it’s nice to know that there are thousands of hosting providers out there that all support php, and that you can get hosting really cheap as a result.
that will keep you happy and motivated.
one of the the early reasons i picked php, which is still true, is that it has become lingua franca on the web.
not all python fans are fad-focused elitists .
second, success in the early days of a startup is much more about getting market validation and traction than anything else.
if you have questions about startups, you can find me and a bunch of other startup fanatics on the free q&a website: answers.onstartups.com current articles | rss feed i think a lot about choices and decisions at startups.
posted on monday, november 01, 2010 at 6:33 pm by mikei get asked questions about one language over another all the time.
by “within reason”, i mean if what you know is a relatively mainstream language (python, php, ruby, java, c# etc.).
by the way, if you’re a gifted python developer in the boston area and looking to join what is quite possibly the best company to work for in boston (we won an award, so it must be true), would love to connect.
i'm impressed with it's capability and the community is awesome.
posted on tuesday, november 02, 2010 at 4:33 am by seunwebin my opinion the point really being made here isn't that one is simply a better language than the other but what is more sustainable as a platform in the long run to scale-up a startup's operations.
there isn't always one 'best ' solution but more importantly use the proper tool to solve the problem.
posted on wednesday, october 27, 2010 at 5:46 pm by mike schinkelyour new hubspot labs logo is really cool.
it's noteworthy that at the end of the day if you're just trying to get your solution up and running go with just about any platform you're comfortable with rather than having to add another layer of learning i.e. other than marketing, finance etc.
it’s easy-going, fun, and you feel super-productive (especially if you’re making a big change to something new).
as a “classically trained” developer (undergrad compsci), i appreciate that python gets a bunch of the language stuff “right”.
but i find it telling that the django guys don't try to redefine the term "mvc".
in a startup every thought should be on maximum return on investment, and i cannot see anything in your post to indicate that was on your mind which leads me to believe that yes you were indeed "fad-focused".
since you’re really good, and demand for great developers always exceeds supply, you essentially get to pick where you want to work.
many people make the argument that php is a great choice of platform for startups because you can find a $9.99/month hosting provider that supports php.
the decisions that are hardest arenot the ones where you have the least amount of information — they are the ones that are hardest to undo or reverse.
all things being equal, i much prefer that all of us are working with the same frameworks and libraries.
the fact that i can use python in so many ways makes it so much more valuable.
i once read a blog post where someone said "asp.net doesn't let you build 'web' apps, it lets you build asp.net apps that just so happen to live on the web."
the deadhead in me thinks it looks like a bong.
i've been using php for almost 5 years and i love a lot about it, mainly the oop.
within reason, my general advice is “go with what you know”.
i don't ask because i'm a fan of it, because i chose specifically to move away from the ms technology stack, but i'm curious to see someone else's perspective on it who wasn't influenced by having actually worked at ms (like me.)
by the way, in case you didn’t know, i’m the founder/cto at hubspot, and an all-around nice guy.
the reality is that all the languages mentioned have been used to develop successfull business's.
all things being equal, you’re going to pick the place that is doing python vs. php.
so, knowing php is a very, very useful thing.
right now the world is mostly in php and that's what i've got the most experience in.
lets say you were on the outside looking in (i.e. you’re a gifted developer looking to join a cool new startup).
if the site does kick off though i could see having to rewrite it in a more robust language.
what i constantly found myself having problems with was the amount of inconsistencies in the prebuilt libraries and modules that we as a shop ended up using.
yes, php sometimes probably involves a bit more programming *sometimes*, but i find that the python programmer is one who is a)lazy and b)enjoys coming up with impossible to track down code using highly ingenious solutions to solve the most menial problems ever.
a language that brings the best out in you — over the long-term.
don’t want to start yet another language war, but i’m fascinated by the topic of making hard decisions at startups, and this is one of the hardest.
and, if there are any arguments you’d make on either side (php or python), would love to hear them.
no need for higher-end hosting and you save money.
these tools pulled in website visitors, increased visibility of hubspot, and helped us get some interesting data that we used to benefit our core business.
the language served me well.
the good news is that the company did very well despite these mistakes for two simple reasons: first, i didn’t makeawful choices — just sub-optimal ones.
i can get over that pretty quickly.
posted on thursday, october 28, 2010 at 1:31 am by nikhilanyone who claims python is the current fad elitist language is so far behind the times you might want to tell them about this new hip language called java.
the learning curve these days is not a new language (it takes a proficient programmer just a few days to get her arms around the basics of a new language).
don’t want to start yet another language war, but i’m fascinated by the topic of making hard decisions at startups, and this is one of the hardest.
of course, not all things are equal, and you might actually pick the startup whose business you think has the best chances of success or whose founders you like and respect.
, it’s notbetter enough to warrant switching.
lets say you were on the outside looking in (i.e. you’re a gifted developer looking to join a cool new startup).
my advice is that even if you do decide to go with python — be at least “reasonably fluent” in php — it’ll come in handy.
it is a personal choice based on the qualities of a language that appeal to you (verbosity and strong typing in my case) and that work for you in terms of your own productivity.
the good news is that the mistake wasn’t fatal.
we don’t have a written charter for hubspot labs (because frankly, i’m not exactly sure how to write one of those, or if i did, who would read it).
any experienced developer that can create great software can likely also write really good software in php.
maybe not quite as dominant as rails in ruby-land — but close.
the reason related to corba, the beast which had to be tamed, but which perl just couldn't deal with.
posted on thursday, october 28, 2010 at 10:19 am by chris robinsondjango is bulky, i found it hard the first time i learned about it.
though, if i had experience in another language i sure i would have chosen it.
if someone releases a new api, and provides a “wrapper” for convenience, the first language supported will likely be php.
and, as it turns out, customers really don’t care whether your saas application is built in php, c#, ruby or python.
cumulatively, they’re getting millions of page views a month now.
many programmers know php, vb, java or c#.
really hard to justify the change, because though you might grudgingly admit that python is better, it’s notbetter enough to warrant switching.
because they are not using it as buzzword in the first place, unlike all the php frameworks.
by the way, if you’re a gifted python developer in the boston area and looking to join what is quite possibly the best company to work for in boston (we won an award, so it must be true), would love to connect.
the article author is assuming an idealistic world, where all coders write well written and logical code.
halligan"if i had a dog, the dog would bark at the ruby code."
note:  the context here is a startup that is a bit further along (hubspot was 2 years old and had about 50 employees at the time of this decision).
posted by dharmesh shah on wed, oct 27, 2010 posted on wednesday, october 27, 2010 at 4:14 pm by therealbensmithhey dharmesh, very nice article.
but, often, it’s hard to know that stuff upfront, so you focus on what you do know — that developing in python’s a better “bet”.
posted on thursday, november 11, 2010 at 9:22 am by mike schinkeli'm not trained as a developer, but i like to make a little website here and there.
you want to forge a relationship with a language that will be long-lasting, rich and deep.
i prefer python because i hate to press a lot of key (shift+[ = {) and python is easier to read.
i’m not particularly bothered by the weird idiosyncracies of php (the “needle vs. haystack” problem).
of course the invterview process would take quite a bit more skill and time to weed out all the bad ones.
posted on monday, november 01, 2010 at 3:53 am by rami've spent a lot of time in php, and just enough time in python to realize that i don't like the amount of "magic" that python forces the developers to rely on.
i’m not particularly bothered by the weird idiosyncracies of php (the “needle vs. haystack” problem).
billplease let us know about what your view are on c# in follow up to your statement "so, i picked c# and .net — which frankly, if i had to do over, i wouldn’t have picked (more on that later)."!!!
it was an easy transition from my c++/c# days, and combined with an mvc framework like codeigniter, things weren’t too bad.
although php is a completelyworkable language — it’s still not an elegant language.
posted on monday, november 01, 2010 at 1:39 pm by sam smithexcellent article, it was a very good read.
i wouldn’t fault people for solving for their self-interest and preference.
everything he said about the company was appealing (good use of social media, smart concept, and great use of tools as marketing) but that stack choice stuck out in my mind the most.
though ruby/rails would likely have been fine too, there’s something about it that i just found unnatural.
on the one hand, this kind of competition is good.
although it’s perfectly possible to write good code in php, it’s much easier to write great code in python .
it’s all the little things, which in aggregate, make for better cleaner, more elegant code.
posted on saturday, november 13, 2010 at 4:08 am by hiimleathif you're using python for web apps, you should definitely check out web2py.
by the way, in case you didn’t know, i’m the founder/cto at hubspot, and an all-around nice guy.
python just feels more “natural” to me.
low learning are less important than high ceilings.
though ruby/rails would likely have been fine too, there’s something about it that i just found unnatural.
frameworks have an upfront cost, but provide a ton of value long-term.
my advice is that even if you do decide to go with python — be at least “reasonably fluent” in php — it’ll come in handy.
it is clear that python was architected to be a robust, well-designed and well thought-out language.
my advice:  recognize that there are things like amazon ec2 out there now, and over time, it’s going to be just as easy to spin up servers for python as it is for php.
one of the the early reasons i picked php, which is still true, is that it has become lingua franca on the web.
python has a “clear” web framework winner: although conceptually i like having choices (and i believe in openness), practically, i really,really like standards.
the learning curve these days is not a new language (it takes a proficient programmer just a few days to get her arms around the basics of a new language).
it is clear that python was architected to be a robust, well-designed and well thought-out language.
python allows for very bad code to be written fast and easily.
since i'm going to get into a long-term relationship with a language, i figured python's a pretty good bet.
by “within reason”, i mean if what you know is a relatively mainstream language (python, php, ruby, java, c# etc.).
the deeper and richer the framework is, the more there is to learn.
a language that brings the best out in you — over the long-term.
although php is a completelyworkable language — it’s still not an elegant language.
and as such, getting someone new up to speed takes longer.
however, the more i work in python it appears the maintainability of a python application will be much easier.
not to knock php (i actuallylove working in php) — but python is just a better language.
posted on tuesday, november 02, 2010 at 9:46 pm by hsekhonin my opinion, c# is good to develop desktop application, php and python is good to make web application.
my advice: recognize that there are things like amazon ec2 out there now, and over time, it’s going to be just as easy to spin up servers for python as it is for php.
posted on thursday, october 28, 2010 at 9:09 am by jeremy petersonclearly written by a python aficionado.
get the solution out there, mature it, reassess when scaling up and go with the platform that suits your needs the best.
posted on wednesday, october 27, 2010 at 7:43 pm by ralph haygoodi'm a coldfusion developer looking to branch out to other web development languages.
some languages, like php, have very low learning curves — it’s super-easy to get started.
php....agreed...easy to learn posted on wednesday, october 27, 2010 at 9:42 pm by chuksi'm curious if you ever considered anything besides django for python.
if that were the case then not only python but all the other good languages would be "great".
seems like there have been other sites with extremely high traffic that have either redesigned on another language or added code to turbo boost php.
posted on monday, november 08, 2010 at 9:42 am by dave m.please write the follow up article on c# vs. python - we're about to make this very decision and currently leaning to c# (for the same reason you made your original decision) posted on tuesday, november 09, 2010 at 10:28 pm by jonafter previously commenting i'm returning to comment again because i just got an email that reminded me of one of the key reasons why php or python are much better for most startups than c# or java.
other costs, as you mentioned, are minimal compared with the cost of learning new languages and frameworks for a single founder.
i can't tell you the number of times i spent hours in one rabbit whole, only to ask and find out that the problem was actually somewhere entirely different and really would never have looked there unless i just knew that was where to look.
of course, not all things are equal, and you might actually pick the startup whose business you think has the best chances of success or whose founders you like and respect.
they won't apply for a job at a company using python because it would be a waste of time for them to invest in learning the language.
if someone releases a new api, and provides a “wrapper” for convenience, the first language supported will likely be php.
although it does appear that out-looking-in that java is similar to .net (the local java user group in atlanta is all enterprise focused, for example) truth-be-told i don't have enough relevant experience in the java ecosystems to speak with any authority on it.
posted on thursday, october 28, 2010 at 10:40 am by pebbiei've never tried django, so have no comparison to contribute.
to me, django appears to have that same allure of php (a low learning curve), but when you get past the dating period, you wish you had more flexibility.
python has a “clear” web framework winner: although conceptually i like having choices (and i believe in openness), practically, i really,really like standards.
but, often, it’s hard to know that stuff upfront, so you focus on what you do know — that developing in python’s a better “bet”.
it was an easy transition from my c++/c# days, and combined with an mvc framework like codeigniter, things weren’t too bad.
one of the arguments i hear continually online goes something like this: “php is a perfectly fine language, and folks pushing python are just fad-focused elitists that want to work on the latest cool new thing, instead of just picking what works and focusing on building apps that solve customer problems.”
since i'm going to get into a long-term relationship with a language, i figured python's a pretty good bet.
this article touched on a lot of points we, developers are thinking but would never say due to being flamed by our peers.
i'm a php developer for the most part, but a skeptic forever, and this kind of writing is always interesting to me.
some languages, like php, have very low learning curves — it’s super-easy to get started.
i'm not a programmer myself, but do dabble in it sometimes and the idea that php have lots of open source and freely available code, makes you want to go back to it again and again.
that makes life much easier.
note: the context here is a startup that is a bit further along (hubspot was 2 years old and had about 50 employees at the time of this decision).
the deeper and richer the framework is, the more there is to learn.
but then i found bottle, now i am becoming lazier to open my php code than to write and experiment using bottle.
twice now, i've looked into php and gotten annoyed and sidetracked by the fragmented framework-space.
there are definitely times to learn new things and experiment with new technologies — the early days of your product development is not the best time.
i’m sure they’re all great frameworks (i use codeigniter right now), but the fact that there’s no clear winner means that the market is fragmented.
posted on monday, november 01, 2010 at 9:14 pm by adamfinding a good platform is very critical at start up.
assuming that you stick with your low-cost provider for 18 months (a long time in startup-land), you’ll havemaybe saved $900.
you’ve got a startup to grow, you can’t be bothered with trying to join the cool kids.
all things being equal, you’re going to pick the place that is doing python vs. php.
it had decent oop support.
we don’t have a written charter for hubspot labs (because frankly, i’m not exactly sure how to write one of those, or if i did, who would read it).
if you’re in the software development business as a career choice (i.e. you’re going to do it for a long time), then the larger consideration should be what’s going to create the most value for you long-term.
it’s all the little things, which in aggregate, make for better cleaner, more elegant code.
posted on thursday, october 28, 2010 at 9:58 am by gilesafter reading your article, and enjoying it, i'm trying to find one solid business reason for doing the unthinkable in a startup business environment, switching programming languages after having significant investment in another.
i choose php because it seemed like the shortest learning curve, tons of information available (manuals, sample code, forums, user community etc.. though this is probably true with most other languages as well), and the easiest to get started on to bring up a version 1/working prototype.
by this defintiion, picking the language/platform to use at a startup is one of the harder decisions.
within reason, my general advice is  “go with what you know”.
:p posted on wednesday, october 27, 2010 at 4:22 pm by zé ricardodharmesh, i'm a js/php man myself, but i can see a lot of merit in your arguments.
so, back to the title of this article: php is fantastically fun, but python is marriage material .
although it’s perfectly possible to write good code in php, it’s much easier to write great code in python .
for you, the cost of change is high (maybe even prohibitively high).
would love to see what the issues are with c# and website development.
that makes life much easier.
posted on friday, october 29, 2010 at 7:41 am by carli hadn't done any 'real' programming in quite awhile when i decided to develop my website.
the article was very widely read, and still continues to drive traffic (likely because it ranks #1 in google for “python vs c#”).