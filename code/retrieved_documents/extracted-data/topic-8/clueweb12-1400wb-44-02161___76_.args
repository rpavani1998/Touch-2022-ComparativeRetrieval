java technology is not fault tolerant and is not designed, manufactured, or intended for use or resale as online control equipment in hazardous environments requiring fail-safe performance, such as in the operation of nuclear facilities, aircraft navigation or communication systems, air traffic control, direct life support machines, or weapons systems, in which the failure of java technology could lead directly to death, personal injury, or severe physical or environmental damage.we just need to keep successfully building real, working systems using the tools that we feel are appropriate.dynamic languages are making a resurgence, not a comeback since they never really went away, and for many it will be a good, productive and profitable time.the real reason dynamic compilation exists is that it makes changing code more flexible than when precompiled.a compiled language may offer very little capabilities, and a scripting language may offer much more capabilities, and vice versa.java itself is evolving probably better than other languages and it has the best api you need.responses from ruby followers in particular indicated the language does have the scalability and power to build more than web “just” applications.i think the future lies more in statically typed languages with very sophisticated type-systems which give you much more expressive power then the type system of languages like java has.while it is not a ready-to-go package with lots of std libraries, it is quite fast, small, customizable and has a strong and very smart community.but none of them attempt any serious breadth in the application domain it’s hard to determine what kind of breadth is missing when you consider the capabilities provided by modern dynamic language environments, the platforms they run on, and the extensions and bridges that allow them to use damn near any other program or library available.it’s fast enough for a wider range of applications compared to ruby - and it’snot a scripting language.the web server is becoming a key piece of integration infrastructure.it works best if you do numerical programming because stalin detects some common usage patterns and creates optimized code for those patterns.it turns out thatselectively strictening a loose type system is more productive than selecting weakening a static type but just as performant.static typing is an optimisation, but also compiler verifiable documentation and specification.